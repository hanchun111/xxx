/*
    json2.js
    2012-10-08

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

define("base/json2", function(){});

/**
 * App系统核心对象
 */
define('app/core/app-core',["jquery", "app/core/app-jquery", "base/json2"], function($) {

	var $A = undefined,$hostUrl="",$contextPath,$caInfo=null,_caCryptoType;
	$A = function(selector, context) {
		if (typeof $A._exfn == "function") {
			return $A._exfn(selector, context);
		}
		return $(selector, context);
	};
    $A.debug = false;
    (function (variable) {
        var query = window.location.search.substring(1);
        var vars = query.split("&");
        for (var i=0;i<vars.length;i++) {
            var pair = vars[i].split("=");
            if(pair[0] == variable && pair[1]=='true'){
            	$A.debug = true;
            	return;
            }
        }
    })("__debug");
	return $.extend($A, {
		/**
		 * 设置为开发状态
		 */
		develop : true,
		/**
		 * 常用键盘码常量
		 */
		keyCode : {
			ENTER : 13,
			ESC : 27,
			END : 35,
			HOME : 36,
			SHIFT : 16,
			TAB : 9,
			LEFT : 37,
			RIGHT : 39,
			UP : 38,
			DOWN : 40,
			DELETE : 46,
			BACKSPACE : 8,
			HOME : 36,
			END : 35,
			PLUS : 187,
			PLUS1 : 107,
			MINUS : 189,
			MINUS1 : 109,
			POINT : 190,
			POINT1 : 110,
			PgUp : 33,
			PgDn : 34,
			Z : 90
		},
		/**
		 * 是否属于数组按键中
		 */
		containKeyCode : function(e, keys) {
			for (var i = 0; i < keys.length; i++) {
				var keyInfo = keys[i];
				if (isNaN(keyInfo)) {
					if (keyInfo.keyCode != e.keyCode) {
						continue;
					}
					if (keyInfo.ctrlKey != undefined) {
						if (keyInfo.ctrlKey != e.ctrlKey) {
							continue;
						}
					}
					if (keyInfo.shiftKey != undefined) {
						if (keyInfo.shiftKey != e.shiftKey) {
							continue;
						}
					}
					return true;
				} else if (e.keyCode == keyInfo) {
					return true;
				}
			}
			return false;
		},
		/**
		 * 远程访问的状态码
		 */
		statusCode : {
			ok : 200,
			error : 300,
			timeout : "250",
			internalError : 500,
			notFound : 404
		},

		/**
		 * require 脚本文件时缓存的参数及对象使用的属性
		 */
		jsattrs : {
			PARAM : "__jsparam",
			OBJECT : "__jsobj"
		},
		/**
		 * 系统初始化方法集合
		 */
		initMethods : {},
		/**
		 * 系统销毁方法集合
		 */
		destroyMethods : {},
		/**
		 * 状态对象
		 */
		status : {
			spliter : true
		},
		/**
		 * 自定义事件类型
		 */
		eventType : {
			pageLoad : "onload",
			pageDestroy : "pageDestroy"
		},
		/**
		 * 注册初始化方法
		 * 
		 * @param key{String/Object}
		 *            包含多个初始化方法的集合
		 * @param func{Function}
		 *            构造方法
		 */
		regInitMethod : function(key, func) {
			var othis = this;
			var initMethods = othis.initMethods;
			if ($.isPlainObject(key)) {
				initMethods = $.extend(initMethods, key);
			} else if ($.isFunction(key)) {
				if (key.appid) {
					initMethods[key.appid] = null;
					delete initMethods[key.appid];
				} else {
					key.appid = othis.nextId();
					initMethods[key.appid] = key;
				}
			} else if (typeof key === "string") {
				if (func && $.isFunction(func)) {
					func.appid = key;
					initMethods[key] = func;
				} else {
					initMethods[key] = null;
					delete initMethods[key];
				}
			} else {
				throw "valid component's constructor";
			}
		},
		getPageComponens:function(box){
			var box=box||$A.getContainer();
			if (!$(box).data("componens")){
				var $componens = $("[name=componens]",box),componens=null;
				if ($componens.length>0){
					var cmpstr=$componens.val().trim();
					componens=$.parseJSON(cmpstr)
				}
				$(box).data("componens",componens);
				 $("[name=componens]",box).remove();
			}
			return $(box).data("componens");
		},
		//根据控件id检测控件权限
		cehckPageComponensById:function(id){
			var cmps=this.getPageComponens();
			var hasRight=true;
			if (cmps){
				
				for (var i=0;i<cmps.length;i++){
					cmp=cmps[i]
					if (cmp.id==id&&cmp.hidden==true){
						hasRight=false;
					}
				}
				
			}
			return hasRight;
		},
		/**
		 * 检验页面控件权限
		 */
		checkPageComponens:function($box){
			//获取当前页面控件权限
			var cmps=this.getPageComponens($box),cmp;
		
			if (cmps){
			
				for (var i=0;i<cmps.length;i++){
					cmp=cmps[i]
					if (cmp.hidden==true){
						 $("[id="+cmp.id+"]",$box).remove();
					}
				}
				/*var pageComponens=cmp["pageComponens"],checkUserCmp=cmp["userComponens"];
				if (pageComponens!=""){
					var pagecmps=pageComponens.split(",");
					for(var i=0,len=pagecmps.length;i<len;i++){
						if (pagecmps[i]&&!checkUserCmp[pagecmps[i]]){
							 $("[id="+pagecmps[i]+"]",$box).remove();
						}
					}
				}*/
				
			}
			
			
		},
		/**
		 * 初试化方法调用
		 */
		initCalls : function($box) {
			var othis = this;
			var initMethods = $A.initMethods;
			for (name in initMethods) {
				initMethods[name]($box);
			}
		},
		/**
		 * 初始化方法，包括组件和布局等
		 */
		init : function(box) {
			var $box=$(box||"body");
			$box.clearAppJsObject();
			var $js = $("[name=jsRequire]",$box);
		
			this.checkPageComponens($box);
			if($js.length == 0){
				$A.initCalls($box);
				return;
			}
		
			var rs =new Array;
			var ids=new Array;
			$js.each(function(idx,item){
				var $item=$(this),jspath = $item.val();
				if(jspath){
					ids.push($item.attr("id"));
					rs.push(jspath);
				}
			});
			if(rs.length == 0){
				$box.css('visibility','');
				$A.initCalls($box);
				return;
			}
			require(rs,function(){
				var jsobj = new Array,nids=new Array,args=arguments;
				$.each(args,function(i){
					if(args[i] != null && ids[i]!=null){
						jsobj.push(args[i]);
						nids.push(ids[i]);
					}
				});
				if(nids.length > 0){
					$box.setAppJsObject(nids,jsobj);
					triggerBeforePageInit(jsobj, $box);
					//add by tw
					if($box.data("onPageLoad")){
						var funcName = $box.data("onPageLoad");
						try{
							var f = new Function(nids,"return ("+funcName+")");
							var onPageLoadFunc = f.apply(this,jsobj);
							$box.one($A.eventType.pageLoad,{"pageLoadFunc":onPageLoadFunc,"uiPageModel":$box.data("uiPageModel")},function(e){
								if (e.data["pageLoadFunc"]){
									
									e.data["pageLoadFunc"].call(jsobj[0],e.data["uiPageModel"],$box)
									//e.data["pageLoadFunc"].appli(e.data["uiPageModel"],$box);
								}
							});
						}catch(e){
							window.alert(e);
							return {};
						}
					}
					
				}
				$A.initCalls($box);
			});
			$js.remove();
			$A.resolveUiPageModel($box);
			$box.removeData("onPageLoad");
			var $uiPageLoad = $(">div.__uiPageLoad",$box);
			if($uiPageLoad.length>0){
				var pageLoadFuncName = $uiPageLoad.text();
				$box.data("onPageLoad",pageLoadFuncName);
				$uiPageLoad.remove();
			}
			/**
			 * 页面对象声明的pageBeforeInit方法
			 */
			function triggerBeforePageInit(jsobj, $box){
				if(!(jsobj && jsobj[0])){
//					$box.css('visibility','');
					return;
				}
				var func = jsobj[0].beforePageInit;
				if(!$.isFunction(func)){
//					$box.css('visibility','');
					return;
				}
				func($box, $box.data('uiPageModel'));
				$box.css('visibility','');
			}
			//end add by tw
		},
		resolveUiPageModel: function($box){
			//add by tw
			var $pageModel = $(">div.__uiPageModel",$box);
			if($pageModel.length>0){
				var json = $pageModel.text();
				$box.data("uiPageModel",$.parseJSON(json));
				$pageModel.remove();
			}else{
				$box.data("uiPageModel", {innerModel: true});
			}
		},
		/**
		 * 页面销毁时处理方法
		 */
		regDestroyMethod : function(key, func) {
			var othis = this;
			var destroyMethods = othis.destroyMethods;
			if ($.isPlainObject(key)) {
				destroyMethods = $.extend(destroyMethods, key);
			} else if ($.isFunction(key)) {
				if (key.appid) {
					destroyMethods[key.appid] = null;
					delete destroyMethods[key.appid];
				} else {
					key.appid = othis.nextId();
					destroyMethods[key.appid] = key;
				}
			} else if (typeof key === "string") {
				if (func && $.isFunction(func)) {
					func.appid = key;
					destroyMethods[key] = func;
				} else {
					destroyMethods[key] = null;
					delete destroyMethods[key];
				}
			} else {
				throw "valid component's destroy";
			}
		},
		/**
		 * 销毁方法调用
		 */
		destroyCalls : function($box, e) {
			var othis = this;
			var destroyMethods = othis.destroyMethods;
			for (name in destroyMethods) {
				destroyMethods[name]($box, e);
			}
		},
		/**
		 * 页面加载时调动，非ajax加载
		 * 
		 * @param options
		 */
		boot : function(options) {
			this.options = $.extend(this.options, options);
			this.init();
			var _doc = $(document);
			var $this = this;
			if (!_doc.isBind(this.eventType.pageDestroy)) {
				_doc.bind(this.eventType.pageDestroy, function(e) {
							var box = e.target;
							$this.destroyCalls(box, e);
						});
			}
		},

		/**
		 * 生成下一个id或一组id
		 * 
		 * @param count{Number}
		 *            生成id的个数
		 */
		nextId : (function() {
			var idno = 0;
			return function(count) {
				if (count && count > 1) {
					var ids = new Array();
					for (var i = 0; i < count; i++) {
						idno++;
						ids.push("app_" + idno);
					}
					return ids;
				}
				return ++idno;
			};
		})(),
		/**
		 * 字符串转换为json对象
		 * 
		 * @param json{Object}
		 *            json对象
		 */
		jsonEval : function(json, context) {// add by tw
			try {
				// add by tw
				if (context) {
					var evalstr = "";
					for (var key in context) {
						evalstr += "var " + key + "=context[\"" + key + "\"];";
					}
					eval(evalstr);
					return eval('(' + json + ')');
				}
				// end add by tw
				return eval('(' + json + ')');
			} catch (e) {
				return {};
			}
		},
		/**
		 * json转换为字符串
		 * 
		 * @param json{Object}
		 *            json对象
		 * @param {string}
		 *            字符串
		 */
		toJsonString : function(value, replacer, space) {
			return JSON.stringify(value, replacer, space);
		},
		/**
		 * 调试信息输出
		 */
		log : function(msg) {
			if (this.develop) {
				if (window.console)
					console.log(msg);
				else
					alert(msg);
			}
		},
		/**
		 * 生成唯一的id字符串：前缀+当前时间毫秒数
		 * 
		 * @param prefix
		 *            前缀
		 * @returns {String}
		 */
		uuid : function(prefix) {
			prefix = prefix === undefined ? 'bs_' : prefix;
			return prefix + this.nextId();
		},
		/**
		 * 获取页面元素的属性
		 * 
		 * @returns 元素属性
		 */
		getAttrFromElement : function($element) {
			try{
				var attrs = getAttrs($element[0]), _options = $element
						.getJsonAttr('_options');
				// 初始化数据源
				if (attrs.data) {
					attrs.data = $element.getJsonAttr('data');
				}
				// 初始化以选中节点
				if (attrs.selectednode) {
					attrs.selectednode = $element.getJsonAttr('selectednode');
				}
				// 初始化回调事件
				if (attrs.events) {
					$.extend(attrs, $element.getJsEvent(attrs.events));
				}
				return $.extend(attrs, _options);
			}catch(e){
				var id = $element.attr('id');
				if(!id){
					id = $element[0].outerHTML;
				}
				throw new Error('组件[' + id + ']获取属性出错.');
			}
			/**
			 * 获取元素的属性
			 * 
			 * @param $el
			 * @returns {___anonymous2415_2416}
			 */
			function getAttrs($el) {
				var attrs = {};
				if ($el.attributes) {
					// 继承html的原有属性
					$.each($el.attributes, function(i, att) {
								var name = att.name.toLowerCase();
								if (att.value == 'true') {
									attrs[name] = true;
								} else if (att.value == 'false') {
									attrs[name] = false;
								} else {
									if (att.value)
									attrs[name] = $.fn.escapeHtml(att.value);
								}
							});
				}
				return attrs;
			}
		},
		destroyDom : function(dom) {
			var plugins = $A.options.getPlugins();
			var comps = [];
			for (var i = 0; i < plugins.length; i++) {
				var plugin = plugins[i];
				var r;
				
				if (!plugin.className){
					 r=$('.app-' + plugin.pluginName, dom);
				}else{
					 r=$('.' + plugin.className, dom);
				}
				
				if (r.length) {
					if (r[plugin.pluginName]) {
						comps.push({
									name : plugin.pluginName,
									jq : r
								});
					}
				}
			}
			var destroy=false;
			for (var i = 0; i < comps.length; i++) {
				var destoryItem = comps[i];
				destroy=false;
				$.each(destoryItem.jq, function(index, item) {
					var data = $("input:first-child", item).data(destoryItem.name);
					if(data){
						data.destroy();
						destroy=true;
					}
				});
				if (destroy==false){
				destoryItem.jq[destoryItem.name]('destroy');
				}
			}
			if (!typeof CollectGarbage == "undefined") {
				CollectGarbage()
			}
		},
		getComponent: function($input, componentName){
			if(!$A.debug){
				return $input.data(componentName);
			}
			var data = $input.data();
			if(!data){
				return;
			}
			var componentNames = ['textbox', 'number', 'money', 
                  'comboztree', 'combogrid', 'checkbox', 'suggest',
                  'datetime', 'typeahead', 'reference', 'combobox']
				,names = [];
			for(var i = 0; i < componentNames.length; i++){
				var name = componentNames[i]
				if(data[name]){
					names.push(name);
				}
			}
			if(names.length == 0){
				return null;
			}else if(names.length == 1){
				if(names[0] == componentName){
					return data[componentName];
				}else{
					throw new Error('该组件已经声明为[' + names[0] +
							'],无法重复声明为[' + componentName + ']');
				}
			}else{
				throw new Error('无法捕获的异常');
			}
		},
		/**
		 * 调用组件的方法
		 */
		componentMethodApply: function(component, methodName, methodArgs){
			if(!component){
				throw new Error('调用未初始化的组件方法');
			}
			var method = component[methodName];
			if($.isFunction(method)){
				return method.apply(component, methodArgs);
			}else{
				throw new Error('组件未声明[' + methodName + ']方法');
			}
		},
		/**
		 * 组件方法调用异常包装
		 */
		throwCompMethodError: function($element, className, methodName, e){
			var id = $element.attr('id')
				,msg = ''
				,type = getTypeMsg(e, $element);
			if(!id){
				id = $element[0].outerHTML;
			}
			msg = '通过元素[' + id + ']调用类型为[' + className + ']组件的[' + methodName + ']方法时出现异常';
			if(type){
				msg += ':元素已声明为类型[' + type + ']的组件:' + e;
			}else{
				msg += ':' + e;
			}
			throw new Error(msg);
			function getTypeMsg(e, $element){
				if(e.message == '调用未初始化的组件方法'){
					var $parent = $element.parent();
					if(!$parent.hasClass('app-wrapper')){
						return ''; 
					}
					if($parent.hasClass('app-textbox')){
						return 'textbox';
					}
					if($parent.hasClass('app-combobox')){
						return 'combobox';
					}
					if($parent.hasClass('app-number')){
						return 'number';
					}
					if($parent.hasClass('app-money')){
						return 'money';
					}
					if($parent.hasClass('app-comboztree')){
						return 'comboztree';
					}
					if($parent.hasClass('app-combogrid')){
						return 'combogrid';
					}
					if($parent.hasClass('app-typeahead')){
						return 'typeahead';
					}
					if($parent.hasClass('app-suggest')){
						return 'suggest';
					}
					if($parent.hasClass('app-datatime')){
						return 'datatime';
					}
				}
				return '';
			}
		},
		/**
		 * 组件初始化调用异常包装
		 */
		throwCompInitError: function($element, className){
			var id = $element.attr('id');
			if(!id){
				id = $element[0].outerHTML;
			}
			throw new Error('元素[' + id + ']已经初始化为[' + className + ']组件:无法重复初始化');
		},
		showWaitScreen: function(msg){
			if(typeof msg === 'undefined'){
				msg = '正在努力加载中...'
			}
			if(!$a.$wait){
				$a.$wait = $('<div id="waitMask" class="dialog-mask" style="z-index:999999999;display:block;"><div>');
				$a.$wait.append($('<div style="width: 150px;height: 150px;margin: auto;position: absolute;top: 0;left: 0;bottom: 0;right: 0;color: #fff;font-size: 18px;">\
									<div style="width: 124px;height: 124px;background:url(resources/common/themes/default/images/loading2.gif) no-repeat center center;margin-bottom: 5px;"></div>\
									<div id="waitScreenMsg">' + msg + '</div></div>'));
				$a.$wait.appendTo('body');
			}else{
				$a.$wait.find("#waitScreenMsg").text(msg);
				$a.$wait.show();
			}
		},
		hideWaitScreen: function(){
			if($a.$wait){
				$a.$wait.hide();
			}
		},
		setContextPath:function(contextPath){
			$contextPath=contextPath
		},
		getContextPath:function(){
			return $contextPath;
		},
		getCaProvider:function(){
			
			return _caProvider;
			
		},
		setCaInfo:function(caInfo){
			
			$caInfo=caInfo;
		},
		getCaInfo:function(){
			return $caInfo;
		},
		getHostUrl:function(){
			var location=window.location;
			try{
				if (!$contextPath){
					$contextPath=_contextPath;
				}
			}catch(ex){
				
			}
			if ($hostUrl==""){
				$hostUrl=location.protocol+"//"+location.host+$contextPath+"/";
			}
			return $hostUrl;
		},
		getCaCryptoType:function(){
			
			return _caCryptoType;
			
		},
		setCaCryptoType:function(caCryptoType){
			_caCryptoType=caCryptoType
			
		}

	});
});
/**
 * 汉字拼音转换
 */
define('base/pinyin',[],function(){
	/**
	 * 拼音汉字集合
	 */
	var PinYin = {"a":"\u554a\u963f\u9515","ai":"\u57c3\u6328\u54ce\u5509\u54c0\u7691\u764c\u853c\u77ee\u827e\u788d\u7231\u9698\u8bf6\u6371\u55f3\u55cc\u5ad2\u7477\u66a7\u7839\u953f\u972d","an":"\u978d\u6c28\u5b89\u4ffa\u6309\u6697\u5cb8\u80fa\u6848\u8c19\u57ef\u63de\u72b4\u5eb5\u6849\u94f5\u9e4c\u9878\u9eef","ang":"\u80ae\u6602\u76ce","ao":"\u51f9\u6556\u71ac\u7ff1\u8884\u50b2\u5965\u61ca\u6fb3\u5773\u62d7\u55f7\u5662\u5c99\u5ed2\u9068\u5aaa\u9a9c\u8071\u87af\u93ca\u9ccc\u93d6","ba":"\u82ad\u634c\u6252\u53ed\u5427\u7b06\u516b\u75a4\u5df4\u62d4\u8dcb\u9776\u628a\u8019\u575d\u9738\u7f62\u7238\u8307\u83dd\u8406\u636d\u5c9c\u705e\u6777\u94af\u7c91\u9c85\u9b43","bai":"\u767d\u67cf\u767e\u6446\u4f70\u8d25\u62dc\u7a17\u859c\u63b0\u97b4","ban":"\u6591\u73ed\u642c\u6273\u822c\u9881\u677f\u7248\u626e\u62cc\u4f34\u74e3\u534a\u529e\u7eca\u962a\u5742\u8c73\u94a3\u7622\u764d\u8228","bang":"\u90a6\u5e2e\u6886\u699c\u8180\u7ed1\u68d2\u78c5\u868c\u9551\u508d\u8c24\u84a1\u8783","bao":"\u82de\u80de\u5305\u8912\u96f9\u4fdd\u5821\u9971\u5b9d\u62b1\u62a5\u66b4\u8c79\u9c8d\u7206\u52f9\u8446\u5b80\u5b62\u7172\u9e28\u8913\u8db5\u9f85","bo":"\u5265\u8584\u73bb\u83e0\u64ad\u62e8\u94b5\u6ce2\u535a\u52c3\u640f\u94c2\u7b94\u4f2f\u5e1b\u8236\u8116\u818a\u6e24\u6cca\u9a73\u4eb3\u8543\u5575\u997d\u6a97\u64d8\u7934\u94b9\u9e41\u7c38\u8ddb","bei":"\u676f\u7891\u60b2\u5351\u5317\u8f88\u80cc\u8d1d\u94a1\u500d\u72c8\u5907\u60eb\u7119\u88ab\u5b5b\u9642\u90b6\u57e4\u84d3\u5457\u602b\u6096\u789a\u9e4e\u8919\u943e","ben":"\u5954\u82ef\u672c\u7b28\u755a\u574c\u951b","beng":"\u5d29\u7ef7\u752d\u6cf5\u8e66\u8ff8\u552a\u5623\u750f","bi":"\u903c\u9f3b\u6bd4\u9119\u7b14\u5f7c\u78a7\u84d6\u853d\u6bd5\u6bd9\u6bd6\u5e01\u5e87\u75f9\u95ed\u655d\u5f0a\u5fc5\u8f9f\u58c1\u81c2\u907f\u965b\u5315\u4ef3\u4ffe\u8298\u835c\u8378\u5421\u54d4\u72f4\u5eb3\u610e\u6ed7\u6fde\u5f3c\u59a3\u5a62\u5b16\u74a7\u8d32\u7540\u94cb\u79d5\u88e8\u7b5a\u7b85\u7be6\u822d\u895e\u8df8\u9ac0","bian":"\u97ad\u8fb9\u7f16\u8d2c\u6241\u4fbf\u53d8\u535e\u8fa8\u8fa9\u8fab\u904d\u533e\u5f01\u82c4\u5fed\u6c74\u7f0f\u7178\u782d\u78a5\u7a39\u7a86\u8759\u7b3e\u9cca","biao":"\u6807\u5f6a\u8198\u8868\u5a4a\u9aa0\u98d1\u98d9\u98da\u706c\u9556\u9573\u762d\u88f1\u9cd4","bie":"\u9cd6\u618b\u522b\u762a\u8e69\u9cd8","bin":"\u5f6c\u658c\u6fd2\u6ee8\u5bbe\u6448\u50a7\u6d5c\u7f24\u73a2\u6ba1\u8191\u9554\u9acc\u9b13","bing":"\u5175\u51b0\u67c4\u4e19\u79c9\u997c\u70b3\u75c5\u5e76\u7980\u90b4\u6452\u7ee0\u678b\u69df\u71f9","bu":"\u6355\u535c\u54fa\u8865\u57e0\u4e0d\u5e03\u6b65\u7c3f\u90e8\u6016\u62ca\u535f\u900b\u74ff\u6661\u949a\u91ad","ca":"\u64e6\u5693\u7924","cai":"\u731c\u88c1\u6750\u624d\u8d22\u776c\u8e29\u91c7\u5f69\u83dc\u8521","can":"\u9910\u53c2\u8695\u6b8b\u60ed\u60e8\u707f\u9a96\u74a8\u7cb2\u9eea","cang":"\u82cd\u8231\u4ed3\u6ca7\u85cf\u4f27","cao":"\u64cd\u7cd9\u69fd\u66f9\u8349\u8279\u5608\u6f15\u87ac\u825a","ce":"\u5395\u7b56\u4fa7\u518c\u6d4b\u5202\u5e3b\u607b","ceng":"\u5c42\u8e6d\u564c","cha":"\u63d2\u53c9\u832c\u8336\u67e5\u78b4\u643d\u5bdf\u5c94\u5dee\u8be7\u7339\u9987\u6c4a\u59f9\u6748\u6942\u69ce\u6aab\u9497\u9538\u9572\u8869","chai":"\u62c6\u67f4\u8c7a\u4faa\u8308\u7625\u867f\u9f87","chan":"\u6400\u63ba\u8749\u998b\u8c17\u7f20\u94f2\u4ea7\u9610\u98a4\u5181\u8c04\u8c36\u8487\u5edb\u5fcf\u6f7a\u6fb6\u5b71\u7fbc\u5a75\u5b17\u9aa3\u89c7\u7985\u9561\u88e3\u87fe\u8e94","chang":"\u660c\u7316\u573a\u5c1d\u5e38\u957f\u507f\u80a0\u5382\u655e\u7545\u5531\u5021\u4f25\u9b2f\u82cc\u83d6\u5f9c\u6005\u60dd\u960a\u5a3c\u5ae6\u6636\u6c05\u9cb3","chao":"\u8d85\u6284\u949e\u671d\u5632\u6f6e\u5de2\u5435\u7092\u600a\u7ec9\u6641\u8016","che":"\u8f66\u626f\u64a4\u63a3\u5f7b\u6f88\u577c\u5c6e\u7817","chen":"\u90f4\u81e3\u8fb0\u5c18\u6668\u5ff1\u6c89\u9648\u8d81\u886c\u79f0\u8c0c\u62bb\u55d4\u5bb8\u741b\u6987\u809c\u80c2\u789c\u9f80","cheng":"\u6491\u57ce\u6a59\u6210\u5448\u4e58\u7a0b\u60e9\u6f84\u8bda\u627f\u901e\u9a8b\u79e4\u57d5\u5d4a\u5fb5\u6d48\u67a8\u67fd\u6a18\u665f\u584d\u77a0\u94d6\u88ce\u86cf\u9172","chi":"\u5403\u75f4\u6301\u5319\u6c60\u8fdf\u5f1b\u9a70\u803b\u9f7f\u4f88\u5c3a\u8d64\u7fc5\u65a5\u70bd\u50ba\u5880\u82aa\u830c\u640b\u53f1\u54e7\u557b\u55e4\u5f73\u996c\u6cb2\u5ab8\u6555\u80dd\u7719\u7735\u9e31\u761b\u892b\u86a9\u87ad\u7b1e\u7bea\u8c49\u8e05\u8e1f\u9b51","chong":"\u5145\u51b2\u866b\u5d07\u5ba0\u833a\u5fe1\u61a7\u94f3\u825f","chou":"\u62bd\u916c\u7574\u8e0c\u7a20\u6101\u7b79\u4ec7\u7ef8\u7785\u4e11\u4fe6\u5733\u5e31\u60c6\u6eb4\u59af\u7633\u96e0\u9c8b","chu":"\u81ed\u521d\u51fa\u6a71\u53a8\u8e87\u9504\u96cf\u6ec1\u9664\u695a\u7840\u50a8\u77d7\u6410\u89e6\u5904\u4e8d\u520d\u61b7\u7ecc\u6775\u696e\u6a17\u870d\u8e70\u9edc","chuan":"\u63e3\u5ddd\u7a7f\u693d\u4f20\u8239\u5598\u4e32\u63be\u821b\u60f4\u9044\u5ddb\u6c1a\u948f\u9569\u8221","chuang":"\u75ae\u7a97\u5e62\u5e8a\u95ef\u521b\u6006","chui":"\u5439\u708a\u6376\u9524\u5782\u9672\u68f0\u69cc","chun":"\u6625\u693f\u9187\u5507\u6df3\u7eaf\u8822\u4fc3\u83bc\u6c8c\u80ab\u6710\u9e51\u877d","chuo":"\u6233\u7ef0\u851f\u8fb6\u8f8d\u955e\u8e14\u9f8a","ci":"\u75b5\u8328\u78c1\u96cc\u8f9e\u6148\u74f7\u8bcd\u6b64\u523a\u8d50\u6b21\u8360\u5472\u5d6f\u9e5a\u8785\u7ccd\u8d91","cong":"\u806a\u8471\u56f1\u5306\u4ece\u4e1b\u506c\u82c1\u6dd9\u9aa2\u742e\u7481\u679e","cu":"\u51d1\u7c97\u918b\u7c07\u731d\u6b82\u8e59","cuan":"\u8e7f\u7be1\u7a9c\u6c46\u64ba\u6615\u7228","cui":"\u6467\u5d14\u50ac\u8106\u7601\u7cb9\u6dec\u7fe0\u8403\u60b4\u7480\u69b1\u96b9","cun":"\u6751\u5b58\u5bf8\u78cb\u5fd6\u76b4","cuo":"\u64ae\u6413\u63aa\u632b\u9519\u539d\u811e\u9509\u77ec\u75e4\u9e7e\u8e49\u8e9c","da":"\u642d\u8fbe\u7b54\u7629\u6253\u5927\u8037\u54d2\u55d2\u601b\u59b2\u75b8\u8921\u7b2a\u977c\u9791","dai":"\u5446\u6b79\u50a3\u6234\u5e26\u6b86\u4ee3\u8d37\u888b\u5f85\u902e\u6020\u57ed\u7519\u5454\u5cb1\u8fe8\u902f\u9a80\u7ed0\u73b3\u9edb","dan":"\u803d\u62c5\u4e39\u5355\u90f8\u63b8\u80c6\u65e6\u6c2e\u4f46\u60ee\u6de1\u8bde\u5f39\u86cb\u4ebb\u510b\u5369\u840f\u5556\u6fb9\u6a90\u6b9a\u8d55\u7708\u7605\u8043\u7baa","dang":"\u5f53\u6321\u515a\u8361\u6863\u8c20\u51fc\u83ea\u5b95\u7800\u94db\u88c6","dao":"\u5200\u6363\u8e48\u5012\u5c9b\u7977\u5bfc\u5230\u7a3b\u60bc\u9053\u76d7\u53e8\u5541\u5fc9\u6d2e\u6c18\u7118\u5fd1\u7e9b","de":"\u5fb7\u5f97\u7684\u951d","deng":"\u8e6c\u706f\u767b\u7b49\u77aa\u51f3\u9093\u5654\u5d9d\u6225\u78f4\u956b\u7c26","di":"\u5824\u4f4e\u6ef4\u8fea\u654c\u7b1b\u72c4\u6da4\u7fdf\u5ae1\u62b5\u5e95\u5730\u8482\u7b2c\u5e1d\u5f1f\u9012\u7f14\u6c10\u7c74\u8bcb\u8c1b\u90b8\u577b\u839c\u837b\u5600\u5a23\u67e2\u68e3\u89cc\u7825\u78b2\u7747\u955d\u7f9d\u9ab6","dian":"\u98a0\u6382\u6ec7\u7898\u70b9\u5178\u975b\u57ab\u7535\u4f43\u7538\u5e97\u60e6\u5960\u6dc0\u6bbf\u4e36\u963d\u576b\u57dd\u5dc5\u73b7\u765c\u766b\u7c1f\u8e2e","diao":"\u7889\u53fc\u96d5\u51cb\u5201\u6389\u540a\u9493\u8c03\u8f7a\u94de\u8729\u7c9c\u8c82","die":"\u8dcc\u7239\u789f\u8776\u8fed\u8c0d\u53e0\u4f5a\u57a4\u581e\u63f2\u558b\u6e2b\u8f76\u7252\u74de\u8936\u800b\u8e40\u9cbd\u9cce","ding":"\u4e01\u76ef\u53ee\u9489\u9876\u9f0e\u952d\u5b9a\u8ba2\u4e22\u4ec3\u5576\u738e\u815a\u7887\u753a\u94e4\u7594\u8035\u914a","dong":"\u4e1c\u51ac\u8463\u61c2\u52a8\u680b\u4f97\u606b\u51bb\u6d1e\u578c\u549a\u5cbd\u5cd2\u5902\u6c21\u80e8\u80f4\u7850\u9e2b","dou":"\u515c\u6296\u6597\u9661\u8c46\u9017\u75d8\u8538\u94ad\u7aa6\u7aac\u86aa\u7bfc\u9161","du":"\u90fd\u7763\u6bd2\u728a\u72ec\u8bfb\u5835\u7779\u8d4c\u675c\u9540\u809a\u5ea6\u6e21\u5992\u828f\u561f\u6e0e\u691f\u6a50\u724d\u8839\u7b03\u9ad1\u9ee9","duan":"\u7aef\u77ed\u953b\u6bb5\u65ad\u7f0e\u5f56\u6934\u7145\u7c16","dui":"\u5806\u5151\u961f\u5bf9\u603c\u619d\u7893","dun":"\u58a9\u5428\u8e72\u6566\u987f\u56e4\u949d\u76fe\u9041\u7096\u7818\u7905\u76f9\u9566\u8db8","duo":"\u6387\u54c6\u591a\u593a\u579b\u8eb2\u6735\u8dfa\u8235\u5241\u60f0\u5815\u5484\u54da\u7f0d\u67c1\u94ce\u88f0\u8e31","e":"\u86fe\u5ce8\u9e45\u4fc4\u989d\u8bb9\u5a25\u6076\u5384\u627c\u904f\u9102\u997f\u5669\u8c14\u57a9\u57ad\u82ca\u83aa\u843c\u5443\u6115\u5c59\u5a40\u8f6d\u66f7\u816d\u786a\u9507\u9537\u9e57\u989a\u9cc4","en":"\u6069\u84bd\u6441\u5514\u55ef","er":"\u800c\u513f\u8033\u5c14\u9975\u6d31\u4e8c\u8d30\u8fe9\u73e5\u94d2\u9e38\u9c95","fa":"\u53d1\u7f5a\u7b4f\u4f10\u4e4f\u9600\u6cd5\u73d0\u57a1\u781d","fan":"\u85e9\u5e06\u756a\u7ffb\u6a0a\u77fe\u9492\u7e41\u51e1\u70e6\u53cd\u8fd4\u8303\u8d29\u72af\u996d\u6cdb\u8629\u5e61\u72ad\u68b5\u6535\u71d4\u7548\u8e6f","fang":"\u574a\u82b3\u65b9\u80aa\u623f\u9632\u59a8\u4eff\u8bbf\u7eba\u653e\u531a\u90a1\u5f77\u94ab\u822b\u9c82","fei":"\u83f2\u975e\u5561\u98de\u80a5\u532a\u8bfd\u5420\u80ba\u5e9f\u6cb8\u8d39\u82be\u72d2\u60b1\u6ddd\u5983\u7ecb\u7eef\u69a7\u8153\u6590\u6249\u7953\u7829\u9544\u75f1\u871a\u7bda\u7fe1\u970f\u9cb1","fen":"\u82ac\u915a\u5429\u6c1b\u5206\u7eb7\u575f\u711a\u6c7e\u7c89\u594b\u4efd\u5fff\u6124\u7caa\u507e\u7035\u68fc\u610d\u9cbc\u9f22","feng":"\u4e30\u5c01\u67ab\u8702\u5cf0\u950b\u98ce\u75af\u70fd\u9022\u51af\u7f1d\u8bbd\u5949\u51e4\u4ff8\u9146\u8451\u6ca3\u781c","fu":"\u4f5b\u5426\u592b\u6577\u80a4\u5b75\u6276\u62c2\u8f90\u5e45\u6c1f\u7b26\u4f0f\u4fd8\u670d\u6d6e\u6daa\u798f\u88b1\u5f17\u752b\u629a\u8f85\u4fef\u91dc\u65a7\u812f\u8151\u5e9c\u8150\u8d74\u526f\u8986\u8d4b\u590d\u5085\u4ed8\u961c\u7236\u8179\u8d1f\u5bcc\u8ba3\u9644\u5987\u7f1a\u5490\u5310\u51eb\u90db\u8299\u82fb\u832f\u83a9\u83d4\u544b\u5e5e\u6ecf\u8274\u5b5a\u9a78\u7ec2\u6874\u8d59\u9efb\u9efc\u7f58\u7a03\u99a5\u864d\u86a8\u8709\u8760\u876e\u9eb8\u8dba\u8dd7\u9cc6","ga":"\u5676\u560e\u86e4\u5c2c\u5477\u5c15\u5c1c\u65ee\u9486","gai":"\u8be5\u6539\u6982\u9499\u76d6\u6e89\u4e10\u9654\u5793\u6224\u8d45\u80f2","gan":"\u5e72\u7518\u6746\u67d1\u7aff\u809d\u8d76\u611f\u79c6\u6562\u8d63\u5769\u82f7\u5c34\u64c0\u6cd4\u6de6\u6f89\u7ec0\u6a44\u65f0\u77f8\u75b3\u9150","gang":"\u5188\u521a\u94a2\u7f38\u809b\u7eb2\u5c97\u6e2f\u6206\u7f61\u9883\u7b7b","gong":"\u6760\u5de5\u653b\u529f\u606d\u9f9a\u4f9b\u8eac\u516c\u5bab\u5f13\u5de9\u6c5e\u62f1\u8d21\u5171\u857b\u5efe\u54a3\u73d9\u80b1\u86a3\u86e9\u89e5","gao":"\u7bd9\u768b\u9ad8\u818f\u7f94\u7cd5\u641e\u9550\u7a3f\u544a\u777e\u8bf0\u90dc\u84bf\u85c1\u7f1f\u69d4\u69c1\u6772\u9506","ge":"\u54e5\u6b4c\u6401\u6208\u9e3d\u80f3\u7599\u5272\u9769\u845b\u683c\u9601\u9694\u94ec\u4e2a\u5404\u9b32\u4ee1\u54ff\u5865\u55dd\u7ea5\u643f\u8188\u784c\u94ea\u9549\u88bc\u988c\u867c\u8238\u9abc\u9ac2","gei":"\u7ed9","gen":"\u6839\u8ddf\u4e98\u831b\u54cf\u826e","geng":"\u8015\u66f4\u5e9a\u7fb9\u57c2\u803f\u6897\u54fd\u8d53\u9ca0","gou":"\u94a9\u52fe\u6c9f\u82df\u72d7\u57a2\u6784\u8d2d\u591f\u4f5d\u8bdf\u5ca3\u9058\u5abe\u7f11\u89cf\u5f40\u9e32\u7b31\u7bdd\u97b2","gu":"\u8f9c\u83c7\u5495\u7b8d\u4f30\u6cbd\u5b64\u59d1\u9f13\u53e4\u86ca\u9aa8\u8c37\u80a1\u6545\u987e\u56fa\u96c7\u560f\u8bc2\u83f0\u54cc\u5d2e\u6c69\u688f\u8f71\u726f\u727f\u80cd\u81cc\u6bc2\u77bd\u7f5f\u94b4\u9522\u74e0\u9e2a\u9e44\u75fc\u86c4\u9164\u89da\u9cb4\u9ab0\u9e58","gua":"\u522e\u74dc\u5250\u5be1\u6302\u8902\u5366\u8bd6\u5471\u681d\u9e39","guai":"\u4e56\u62d0\u602a\u54d9","guan":"\u68fa\u5173\u5b98\u51a0\u89c2\u7ba1\u9986\u7f50\u60ef\u704c\u8d2f\u500c\u839e\u63bc\u6dab\u76e5\u9e73\u9ccf","guang":"\u5149\u5e7f\u901b\u72b7\u6844\u80f1\u7592","gui":"\u7470\u89c4\u572d\u7845\u5f52\u9f9f\u95fa\u8f68\u9b3c\u8be1\u7678\u6842\u67dc\u8dea\u8d35\u523d\u5326\u523f\u5e8b\u5b84\u59ab\u6867\u7085\u6677\u7688\u7c0b\u9c91\u9cdc","gun":"\u8f8a\u6eda\u68cd\u4e28\u886e\u7ef2\u78d9\u9ca7","guo":"\u9505\u90ed\u56fd\u679c\u88f9\u8fc7\u9998\u8803\u57da\u63b4\u5459\u56d7\u5e3c\u5d1e\u7313\u6901\u8662\u951e\u8052\u872e\u873e\u8748","ha":"\u54c8","hai":"\u9ab8\u5b69\u6d77\u6c26\u4ea5\u5bb3\u9a87\u54b4\u55e8\u988f\u91a2","han":"\u9163\u61a8\u90af\u97e9\u542b\u6db5\u5bd2\u51fd\u558a\u7f55\u7ff0\u64bc\u634d\u65f1\u61be\u608d\u710a\u6c57\u6c49\u9097\u83e1\u6496\u961a\u701a\u6657\u7113\u9894\u86b6\u9f3e","hen":"\u592f\u75d5\u5f88\u72e0\u6068","hang":"\u676d\u822a\u6c86\u7ed7\u73e9\u6841","hao":"\u58d5\u568e\u8c6a\u6beb\u90dd\u597d\u8017\u53f7\u6d69\u8585\u55e5\u5686\u6fe0\u704f\u660a\u7693\u98a2\u869d","he":"\u5475\u559d\u8377\u83cf\u6838\u79be\u548c\u4f55\u5408\u76d2\u8c89\u9602\u6cb3\u6db8\u8d6b\u8910\u9e64\u8d3a\u8bc3\u52be\u58d1\u85ff\u55d1\u55ec\u9616\u76cd\u86b5\u7fee","hei":"\u563f\u9ed1","heng":"\u54fc\u4ea8\u6a2a\u8861\u6052\u8a07\u8605","hong":"\u8f70\u54c4\u70d8\u8679\u9e3f\u6d2a\u5b8f\u5f18\u7ea2\u9ec9\u8ba7\u836d\u85a8\u95f3\u6cd3","hou":"\u5589\u4faf\u7334\u543c\u539a\u5019\u540e\u5820\u5f8c\u9005\u760a\u7bcc\u7cc7\u9c8e\u9aba","hu":"\u547c\u4e4e\u5ffd\u745a\u58f6\u846b\u80e1\u8774\u72d0\u7cca\u6e56\u5f27\u864e\u552c\u62a4\u4e92\u6caa\u6237\u51b1\u553f\u56eb\u5cb5\u7322\u6019\u60da\u6d52\u6ef9\u7425\u69f2\u8f77\u89f3\u70c0\u7173\u623d\u6248\u795c\u9e55\u9e71\u7b0f\u9190\u659b","hua":"\u82b1\u54d7\u534e\u733e\u6ed1\u753b\u5212\u5316\u8bdd\u5290\u6d4d\u9a85\u6866\u94e7\u7a1e","huai":"\u69d0\u5f8a\u6000\u6dee\u574f\u8fd8\u8e1d","huan":"\u6b22\u73af\u6853\u7f13\u6362\u60a3\u5524\u75ea\u8c62\u7115\u6da3\u5ba6\u5e7b\u90c7\u5942\u57b8\u64d0\u571c\u6d39\u6d63\u6f36\u5bf0\u902d\u7f33\u953e\u9ca9\u9b1f","huang":"\u8352\u614c\u9ec4\u78fa\u8757\u7c27\u7687\u51f0\u60f6\u714c\u6643\u5e4c\u604d\u8c0e\u968d\u5fa8\u6e5f\u6f62\u9051\u749c\u8093\u7640\u87e5\u7bc1\u9cc7","hui":"\u7070\u6325\u8f89\u5fbd\u6062\u86d4\u56de\u6bc1\u6094\u6167\u5349\u60e0\u6666\u8d3f\u79fd\u4f1a\u70e9\u6c47\u8bb3\u8bf2\u7ed8\u8bd9\u8334\u835f\u8559\u54d5\u5599\u96b3\u6d04\u5f57\u7f0b\u73f2\u6656\u605a\u867a\u87ea\u9ebe","hun":"\u8364\u660f\u5a5a\u9b42\u6d51\u6df7\u8be8\u9984\u960d\u6eb7\u7f17","huo":"\u8c41\u6d3b\u4f19\u706b\u83b7\u6216\u60d1\u970d\u8d27\u7978\u6509\u56af\u5925\u94ac\u952a\u956c\u8020\u8816","ji":"\u51fb\u573e\u57fa\u673a\u7578\u7a3d\u79ef\u7b95\u808c\u9965\u8ff9\u6fc0\u8ba5\u9e21\u59ec\u7ee9\u7f09\u5409\u6781\u68d8\u8f91\u7c4d\u96c6\u53ca\u6025\u75be\u6c72\u5373\u5ac9\u7ea7\u6324\u51e0\u810a\u5df1\u84df\u6280\u5180\u5b63\u4f0e\u796d\u5242\u60b8\u6d4e\u5bc4\u5bc2\u8ba1\u8bb0\u65e2\u5fcc\u9645\u5993\u7ee7\u7eaa\u5c45\u4e0c\u4e69\u525e\u4f76\u4f74\u8114\u58bc\u82a8\u82b0\u8401\u84ba\u857a\u638e\u53fd\u54ad\u54dc\u5527\u5c8c\u5d74\u6d0e\u5f50\u5c50\u9aa5\u757f\u7391\u696b\u6b9b\u621f\u6222\u8d4d\u89ca\u7284\u9f51\u77f6\u7f81\u5d47\u7a37\u7620\u7635\u866e\u7b08\u7b04\u66a8\u8dfb\u8dfd\u9701\u9c9a\u9cab\u9afb\u9e82","jia":"\u5609\u67b7\u5939\u4f73\u5bb6\u52a0\u835a\u988a\u8d3e\u7532\u94be\u5047\u7a3c\u4ef7\u67b6\u9a7e\u5ac1\u4f3d\u90cf\u62ee\u5cac\u6d43\u8fe6\u73c8\u621b\u80db\u605d\u94d7\u9553\u75c2\u86f1\u7b33\u8888\u8dcf","jian":"\u6b7c\u76d1\u575a\u5c16\u7b3a\u95f4\u714e\u517c\u80a9\u8270\u5978\u7f04\u8327\u68c0\u67ec\u78b1\u7877\u62e3\u6361\u7b80\u4fed\u526a\u51cf\u8350\u69db\u9274\u8df5\u8d31\u89c1\u952e\u7bad\u4ef6\u5065\u8230\u5251\u996f\u6e10\u6e85\u6da7\u5efa\u50ed\u8c0f\u8c2b\u83c5\u84b9\u641b\u56dd\u6e54\u8e47\u8b07\u7f23\u67a7\u67d9\u6957\u620b\u622c\u726e\u728d\u6bfd\u8171\u7751\u950f\u9e63\u88e5\u7b15\u7bb4\u7fe6\u8dbc\u8e3a\u9ca3\u97af","jiang":"\u50f5\u59dc\u5c06\u6d46\u6c5f\u7586\u848b\u6868\u5956\u8bb2\u5320\u9171\u964d\u8333\u6d1a\u7edb\u7f30\u729f\u7913\u8029\u7ce8\u8c47","jiao":"\u8549\u6912\u7901\u7126\u80f6\u4ea4\u90ca\u6d47\u9a84\u5a07\u56bc\u6405\u94f0\u77eb\u4fa5\u811a\u72e1\u89d2\u997a\u7f34\u7ede\u527f\u6559\u9175\u8f7f\u8f83\u53eb\u4f7c\u50ec\u832d\u6322\u564d\u5ce4\u5fbc\u59e3\u7e9f\u656b\u768e\u9e6a\u86df\u91ae\u8de4\u9c9b","jie":"\u7a96\u63ed\u63a5\u7686\u79f8\u8857\u9636\u622a\u52ab\u8282\u6854\u6770\u6377\u776b\u7aed\u6d01\u7ed3\u89e3\u59d0\u6212\u85c9\u82a5\u754c\u501f\u4ecb\u75a5\u8beb\u5c4a\u5048\u8ba6\u8bd8\u5588\u55df\u736c\u5a55\u5b51\u6840\u7352\u78a3\u9534\u7596\u88b7\u9889\u86a7\u7faf\u9c92\u9ab1\u9aeb","jin":"\u5dfe\u7b4b\u65a4\u91d1\u4eca\u6d25\u895f\u7d27\u9526\u4ec5\u8c28\u8fdb\u9773\u664b\u7981\u8fd1\u70ec\u6d78\u5c3d\u537a\u8369\u5807\u5664\u9991\u5ed1\u5997\u7f19\u747e\u69ff\u8d46\u89d0\u9485\u9513\u887f\u77dc","jing":"\u52b2\u8346\u5162\u830e\u775b\u6676\u9cb8\u4eac\u60ca\u7cbe\u7cb3\u7ecf\u4e95\u8b66\u666f\u9888\u9759\u5883\u656c\u955c\u5f84\u75c9\u9756\u7adf\u7ade\u51c0\u522d\u5106\u9631\u83c1\u734d\u61ac\u6cfe\u8ff3\u5f2a\u5a67\u80bc\u80eb\u8148\u65cc","jiong":"\u70af\u7a98\u5182\u8fe5\u6243","jiu":"\u63ea\u7a76\u7ea0\u7396\u97ed\u4e45\u7078\u4e5d\u9152\u53a9\u6551\u65e7\u81fc\u8205\u548e\u5c31\u759a\u50e6\u557e\u9604\u67e9\u6855\u9e6b\u8d73\u9b0f","ju":"\u97a0\u62d8\u72d9\u75bd\u9a79\u83ca\u5c40\u5480\u77e9\u4e3e\u6cae\u805a\u62d2\u636e\u5de8\u5177\u8ddd\u8e1e\u952f\u4ff1\u53e5\u60e7\u70ac\u5267\u5028\u8bb5\u82e3\u82f4\u8392\u63ac\u907d\u5c66\u741a\u67b8\u6910\u6998\u6989\u6a58\u728b\u98d3\u949c\u9514\u7aad\u88fe\u8d84\u91b5\u8e3d\u9f83\u96ce\u97ab","juan":"\u6350\u9e43\u5a1f\u5026\u7737\u5377\u7ee2\u9104\u72f7\u6d93\u684a\u8832\u9529\u954c\u96bd","jue":"\u6485\u652b\u6289\u6398\u5014\u7235\u89c9\u51b3\u8bc0\u7edd\u53a5\u5282\u8c32\u77cd\u8568\u5658\u5d1b\u7357\u5b53\u73cf\u6877\u6a5b\u721d\u9562\u8e76\u89d6","jun":"\u5747\u83cc\u94a7\u519b\u541b\u5cfb\u4fca\u7ae3\u6d5a\u90e1\u9a8f\u6343\u72fb\u76b2\u7b60\u9e87","ka":"\u5580\u5496\u5361\u4f67\u5494\u80e9","ke":"\u54af\u5777\u82db\u67ef\u68f5\u78d5\u9897\u79d1\u58f3\u54b3\u53ef\u6e34\u514b\u523b\u5ba2\u8bfe\u5ca2\u606a\u6e98\u9a92\u7f02\u73c2\u8f72\u6c2a\u778c\u94b6\u75b4\u7aa0\u874c\u9ac1","kai":"\u5f00\u63e9\u6977\u51ef\u6168\u5240\u57b2\u8488\u5ffe\u607a\u94e0\u950e","kan":"\u520a\u582a\u52d8\u574e\u780d\u770b\u4f83\u51f5\u83b0\u83b6\u6221\u9f9b\u77b0","kang":"\u5eb7\u6177\u7ce0\u625b\u6297\u4ea2\u7095\u5751\u4f09\u95f6\u94aa","kao":"\u8003\u62f7\u70e4\u9760\u5c3b\u6832\u7292\u94d0","ken":"\u80af\u5543\u57a6\u6073\u57a0\u88c9\u9880","keng":"\u542d\u5fd0\u94ff","kong":"\u7a7a\u6050\u5b54\u63a7\u5025\u5d06\u7b9c","kou":"\u62a0\u53e3\u6263\u5bc7\u82a4\u853b\u53e9\u770d\u7b58","ku":"\u67af\u54ed\u7a9f\u82e6\u9177\u5e93\u88e4\u5233\u5800\u55be\u7ed4\u9ab7","kua":"\u5938\u57ae\u630e\u8de8\u80ef\u4f89","kuai":"\u5757\u7b77\u4fa9\u5feb\u84af\u90d0\u8489\u72ef\u810d","kuan":"\u5bbd\u6b3e\u9acb","kuang":"\u5321\u7b50\u72c2\u6846\u77ff\u7736\u65f7\u51b5\u8bd3\u8bf3\u909d\u5739\u593c\u54d0\u7ea9\u8d36","kui":"\u4e8f\u76d4\u5cbf\u7aa5\u8475\u594e\u9b41\u5080\u9988\u6127\u6e83\u9997\u532e\u5914\u9697\u63c6\u55b9\u559f\u609d\u6126\u9615\u9035\u668c\u777d\u8069\u8770\u7bd1\u81fe\u8dec","kun":"\u5764\u6606\u6346\u56f0\u6083\u9603\u7428\u951f\u918c\u9cb2\u9ae1","kuo":"\u62ec\u6269\u5ed3\u9614\u86de","la":"\u5783\u62c9\u5587\u8721\u814a\u8fa3\u5566\u524c\u647a\u908b\u65ef\u782c\u760c","lai":"\u83b1\u6765\u8d56\u5d03\u5f95\u6d9e\u6fd1\u8d49\u7750\u94fc\u765e\u7c41","lan":"\u84dd\u5a6a\u680f\u62e6\u7bee\u9611\u5170\u6f9c\u8c30\u63fd\u89c8\u61d2\u7f06\u70c2\u6ee5\u5549\u5c9a\u61d4\u6f24\u6984\u6593\u7f71\u9567\u8934","lang":"\u7405\u6994\u72fc\u5eca\u90ce\u6717\u6d6a\u83a8\u8497\u5577\u9606\u9512\u7a02\u8782","lao":"\u635e\u52b3\u7262\u8001\u4f6c\u59e5\u916a\u70d9\u6d9d\u5520\u5d02\u6833\u94d1\u94f9\u75e8\u91aa","le":"\u52d2\u4e50\u808b\u4ec2\u53fb\u561e\u6cd0\u9cd3","lei":"\u96f7\u956d\u857e\u78ca\u7d2f\u5121\u5792\u64c2\u7c7b\u6cea\u7fb8\u8bd4\u837d\u54a7\u6f2f\u5ad8\u7f27\u6a91\u8012\u9179","ling":"\u68f1\u51b7\u62ce\u73b2\u83f1\u96f6\u9f84\u94c3\u4f36\u7f9a\u51cc\u7075\u9675\u5cad\u9886\u53e6\u4ee4\u9143\u5844\u82d3\u5464\u56f9\u6ce0\u7eeb\u67c3\u68c2\u74f4\u8046\u86c9\u7fce\u9cae","leng":"\u695e\u6123","li":"\u5398\u68a8\u7281\u9ece\u7bf1\u72f8\u79bb\u6f13\u7406\u674e\u91cc\u9ca4\u793c\u8389\u8354\u540f\u6817\u4e3d\u5389\u52b1\u783e\u5386\u5229\u5088\u4f8b\u4fd0\u75e2\u7acb\u7c92\u6ca5\u96b6\u529b\u7483\u54e9\u4fea\u4fda\u90e6\u575c\u82c8\u8385\u84e0\u85dc\u6369\u5456\u5533\u55b1\u7301\u6ea7\u6fa7\u9026\u5a0c\u5ae0\u9a8a\u7f21\u73de\u67a5\u680e\u8f79\u623e\u783a\u8a48\u7f79\u9502\u9e42\u75a0\u75ac\u86ce\u870a\u8821\u7b20\u7be5\u7c9d\u91b4\u8dde\u96f3\u9ca1\u9ce2\u9ee7","lian":"\u4fe9\u8054\u83b2\u8fde\u9570\u5ec9\u601c\u6d9f\u5e18\u655b\u8138\u94fe\u604b\u70bc\u7ec3\u631b\u8539\u5941\u6f4b\u6fc2\u5a08\u740f\u695d\u6b93\u81c1\u81a6\u88e2\u880a\u9ca2","liang":"\u7cae\u51c9\u6881\u7cb1\u826f\u4e24\u8f86\u91cf\u667e\u4eae\u8c05\u589a\u690b\u8e09\u9753\u9b49","liao":"\u64a9\u804a\u50da\u7597\u71ce\u5be5\u8fbd\u6f66\u4e86\u6482\u9563\u5ed6\u6599\u84fc\u5c25\u5639\u7360\u5bee\u7f2d\u948c\u9e69\u8022","lie":"\u5217\u88c2\u70c8\u52a3\u730e\u51bd\u57d2\u6d0c\u8d94\u8e90\u9b23","lin":"\u7433\u6797\u78f7\u9716\u4e34\u90bb\u9cde\u6dcb\u51db\u8d41\u541d\u853a\u5d99\u5eea\u9074\u6aa9\u8f9a\u77b5\u7cbc\u8e8f\u9e9f","liu":"\u6e9c\u7409\u69b4\u786b\u998f\u7559\u5218\u7624\u6d41\u67f3\u516d\u62a1\u507b\u848c\u6cd6\u6d4f\u905b\u9a9d\u7efa\u65d2\u7198\u950d\u954f\u9e68\u938f","long":"\u9f99\u804b\u5499\u7b3c\u7abf\u9686\u5784\u62e2\u9647\u5f04\u5785\u830f\u6cf7\u73d1\u680a\u80e7\u783b\u7643","lou":"\u697c\u5a04\u6402\u7bd3\u6f0f\u964b\u55bd\u5d5d\u9542\u7618\u8027\u877c\u9ac5","lu":"\u82a6\u5362\u9885\u5e90\u7089\u63b3\u5364\u864f\u9c81\u9e93\u788c\u9732\u8def\u8d42\u9e7f\u6f5e\u7984\u5f55\u9646\u622e\u5786\u6445\u64b8\u565c\u6cf8\u6e0c\u6f09\u7490\u680c\u6a79\u8f73\u8f82\u8f98\u6c07\u80ea\u9565\u9e2c\u9e6d\u7c0f\u823b\u9c88","lv":"\u9a74\u5415\u94dd\u4fa3\u65c5\u5c65\u5c61\u7f15\u8651\u6c2f\u5f8b\u7387\u6ee4\u7eff\u634b\u95fe\u6988\u8182\u7a06\u891b","luan":"\u5ce6\u5b6a\u6ee6\u5375\u4e71\u683e\u9e3e\u92ae","lue":"\u63a0\u7565\u950a","lun":"\u8f6e\u4f26\u4ed1\u6ca6\u7eb6\u8bba\u56f5","luo":"\u841d\u87ba\u7f57\u903b\u9523\u7ba9\u9aa1\u88f8\u843d\u6d1b\u9a86\u7edc\u502e\u8366\u645e\u7321\u6cfa\u6924\u8136\u9559\u7630\u96d2","ma":"\u5988\u9ebb\u739b\u7801\u8682\u9a6c\u9a82\u561b\u5417\u551b\u72b8\u5b37\u6769\u9ebd","mai":"\u57cb\u4e70\u9ea6\u5356\u8fc8\u8109\u52a2\u836c\u54aa\u973e","man":"\u7792\u9992\u86ee\u6ee1\u8513\u66fc\u6162\u6f2b\u8c29\u5881\u5e54\u7f26\u71b3\u9558\u989f\u87a8\u9cd7\u9794","mang":"\u8292\u832b\u76f2\u5fd9\u83bd\u9099\u6f2d\u6726\u786d\u87d2","meng":"\u6c13\u840c\u8499\u6aac\u76df\u9530\u731b\u68a6\u5b5f\u52d0\u750d\u77a2\u61f5\u791e\u867b\u8722\u8813\u824b\u8268\u9efe","miao":"\u732b\u82d7\u63cf\u7784\u85d0\u79d2\u6e3a\u5e99\u5999\u55b5\u9088\u7f08\u7f2a\u676a\u6dfc\u7707\u9e4b\u8731","mao":"\u8305\u951a\u6bdb\u77db\u94c6\u536f\u8302\u5192\u5e3d\u8c8c\u8d38\u4f94\u88a4\u52d6\u8306\u5cc1\u7441\u6634\u7266\u8004\u65c4\u61cb\u7780\u86d1\u8765\u87ca\u9ae6","me":"\u4e48","mei":"\u73ab\u679a\u6885\u9176\u9709\u7164\u6ca1\u7709\u5a92\u9541\u6bcf\u7f8e\u6627\u5bd0\u59b9\u5a9a\u5776\u8393\u5d4b\u7338\u6d7c\u6e44\u6963\u9545\u9e5b\u8882\u9b45","men":"\u95e8\u95f7\u4eec\u626a\u739f\u7116\u61d1\u9494","mi":"\u772f\u919a\u9761\u7cdc\u8ff7\u8c1c\u5f25\u7c73\u79d8\u89c5\u6ccc\u871c\u5bc6\u5e42\u8288\u5196\u8c27\u863c\u5627\u7315\u736f\u6c68\u5b93\u5f2d\u8112\u6549\u7cf8\u7e3b\u9e8b","mian":"\u68c9\u7720\u7ef5\u5195\u514d\u52c9\u5a29\u7f05\u9762\u6c94\u6e4e\u817c\u7704","mie":"\u8511\u706d\u54a9\u881b\u7bfe","min":"\u6c11\u62bf\u76bf\u654f\u60af\u95fd\u82e0\u5cb7\u95f5\u6cef\u73c9","ming":"\u660e\u879f\u9e23\u94ed\u540d\u547d\u51a5\u8317\u6e9f\u669d\u7791\u9169","miu":"\u8c2c","mo":"\u6478\u6479\u8611\u6a21\u819c\u78e8\u6469\u9b54\u62b9\u672b\u83ab\u58a8\u9ed8\u6cab\u6f20\u5bde\u964c\u8c1f\u8309\u84e6\u998d\u5aeb\u9546\u79e3\u763c\u8031\u87c6\u8c8a\u8c98","mou":"\u8c0b\u725f\u67d0\u53b6\u54de\u5a7a\u7738\u936a","mu":"\u62c7\u7261\u4ea9\u59c6\u6bcd\u5893\u66ae\u5e55\u52df\u6155\u6728\u76ee\u7766\u7267\u7a46\u4eeb\u82dc\u5452\u6c90\u6bea\u94bc","na":"\u62ff\u54ea\u5450\u94a0\u90a3\u5a1c\u7eb3\u5185\u637a\u80ad\u954e\u8872\u7bac","nai":"\u6c16\u4e43\u5976\u8010\u5948\u9f10\u827f\u8418\u67f0","nan":"\u5357\u7537\u96be\u56ca\u5583\u56e1\u6960\u8169\u877b\u8d67","nao":"\u6320\u8111\u607c\u95f9\u5b6c\u57b4\u7331\u7459\u7847\u94d9\u86f2","ne":"\u6dd6\u5462\u8bb7","nei":"\u9981","nen":"\u5ae9\u80fd\u6798\u6041","ni":"\u59ae\u9713\u502a\u6ce5\u5c3c\u62df\u4f60\u533f\u817b\u9006\u6eba\u4f32\u576d\u730a\u6029\u6ee0\u6635\u65ce\u7962\u615d\u7768\u94cc\u9cb5","nian":"\u852b\u62c8\u5e74\u78be\u64b5\u637b\u5ff5\u5eff\u8f87\u9ecf\u9c87\u9cb6","niang":"\u5a18\u917f","niao":"\u9e1f\u5c3f\u8311\u5b32\u8132\u8885","nie":"\u634f\u8042\u5b7d\u556e\u954a\u954d\u6d85\u4e5c\u9667\u8616\u55eb\u8080\u989e\u81ec\u8e51","nin":"\u60a8\u67e0","ning":"\u72de\u51dd\u5b81\u62e7\u6cde\u4f5e\u84e5\u549b\u752f\u804d","niu":"\u725b\u626d\u94ae\u7ebd\u72c3\u5ff8\u599e\u86b4","nong":"\u8113\u6d53\u519c\u4fac","nu":"\u5974\u52aa\u6012\u5476\u5e11\u5f29\u80ec\u5b65\u9a7d","nv":"\u5973\u6067\u9495\u8844","nuan":"\u6696","nuenue":"\u8650","nue":"\u759f\u8c11","nuo":"\u632a\u61e6\u7cef\u8bfa\u50a9\u6426\u558f\u9518","ou":"\u54e6\u6b27\u9e25\u6bb4\u85d5\u5455\u5076\u6ca4\u6004\u74ef\u8026","pa":"\u556a\u8db4\u722c\u5e15\u6015\u7436\u8469\u7b62","pai":"\u62cd\u6392\u724c\u5f98\u6e43\u6d3e\u4ff3\u848e","pan":"\u6500\u6f58\u76d8\u78d0\u76fc\u7554\u5224\u53db\u723f\u6cee\u88a2\u897b\u87e0\u8e52","pang":"\u4e53\u5e9e\u65c1\u802a\u80d6\u6ec2\u9004","pao":"\u629b\u5486\u5228\u70ae\u888d\u8dd1\u6ce1\u530f\u72cd\u5e96\u812c\u75b1","pei":"\u5478\u80da\u57f9\u88f4\u8d54\u966a\u914d\u4f69\u6c9b\u638a\u8f94\u5e14\u6de0\u65c6\u952b\u9185\u9708","pen":"\u55b7\u76c6\u6e53","peng":"\u7830\u62a8\u70f9\u6f8e\u5f6d\u84ec\u68da\u787c\u7bf7\u81a8\u670b\u9e4f\u6367\u78b0\u576f\u580b\u562d\u6026\u87db","pi":"\u7812\u9739\u6279\u62ab\u5288\u7435\u6bd7\u5564\u813e\u75b2\u76ae\u5339\u75de\u50fb\u5c41\u8b6c\u4e15\u9674\u90b3\u90eb\u572e\u9f19\u64d7\u567c\u5e80\u5ab2\u7eb0\u6787\u7513\u7765\u7f74\u94cd\u75e6\u7656\u758b\u868d\u8c94","pian":"\u7bc7\u504f\u7247\u9a97\u8c1d\u9a88\u728f\u80fc\u890a\u7fe9\u8e41","piao":"\u98d8\u6f02\u74e2\u7968\u527d\u560c\u5ad6\u7f25\u6b8d\u779f\u87b5","pie":"\u6487\u77a5\u4e3f\u82e4\u6c15","pin":"\u62fc\u9891\u8d2b\u54c1\u8058\u62da\u59d8\u5ad4\u6980\u725d\u98a6","ping":"\u4e52\u576a\u82f9\u840d\u5e73\u51ed\u74f6\u8bc4\u5c4f\u4fdc\u5a09\u67b0\u9c86","po":"\u5761\u6cfc\u9887\u5a46\u7834\u9b44\u8feb\u7c95\u53f5\u9131\u6ea5\u73c0\u948b\u94b7\u76a4\u7b38","pou":"\u5256\u88d2\u8e23","pu":"\u6251\u94fa\u4ec6\u8386\u8461\u83e9\u84b2\u57d4\u6734\u5703\u666e\u6d66\u8c31\u66dd\u7011\u530d\u5657\u6fee\u749e\u6c06\u9564\u9568\u8e7c","qi":"\u671f\u6b3a\u6816\u621a\u59bb\u4e03\u51c4\u6f06\u67d2\u6c8f\u5176\u68cb\u5947\u6b67\u7566\u5d0e\u8110\u9f50\u65d7\u7948\u7941\u9a91\u8d77\u5c82\u4e5e\u4f01\u542f\u5951\u780c\u5668\u6c14\u8fc4\u5f03\u6c7d\u6ce3\u8bab\u4e9f\u4e93\u573b\u8291\u840b\u847a\u5601\u5c7a\u5c90\u6c54\u6dc7\u9a90\u7eee\u742a\u7426\u675e\u6864\u69ed\u6b39\u797a\u61a9\u789b\u86f4\u871e\u7da6\u7dae\u8dbf\u8e4a\u9ccd\u9e92","qia":"\u6390\u6070\u6d3d\u845c","qian":"\u7275\u6266\u948e\u94c5\u5343\u8fc1\u7b7e\u4edf\u8c26\u4e7e\u9ed4\u94b1\u94b3\u524d\u6f5c\u9063\u6d45\u8c34\u5811\u5d4c\u6b20\u6b49\u4f65\u9621\u828a\u82a1\u8368\u63ae\u5c8d\u60ad\u614a\u9a9e\u6434\u8930\u7f31\u6920\u80b7\u6106\u94a4\u8654\u7b9d","qiang":"\u67aa\u545b\u8154\u7f8c\u5899\u8537\u5f3a\u62a2\u5af1\u6a2f\u6217\u709d\u9516\u9535\u956a\u8941\u8723\u7f9f\u8deb\u8dc4","qiao":"\u6a47\u9539\u6572\u6084\u6865\u77a7\u4e54\u4fa8\u5de7\u9798\u64ac\u7fd8\u5ced\u4fcf\u7a8d\u5281\u8bee\u8c2f\u835e\u6100\u6194\u7f32\u6a35\u6bf3\u7857\u8df7\u9792","qie":"\u5207\u8304\u4e14\u602f\u7a83\u90c4\u553c\u60ec\u59be\u6308\u9532\u7ba7","qin":"\u94a6\u4fb5\u4eb2\u79e6\u7434\u52e4\u82b9\u64d2\u79bd\u5bdd\u6c81\u82a9\u84c1\u8572\u63ff\u5423\u55ea\u5659\u6eb1\u6a8e\u8793\u887e","qing":"\u9752\u8f7b\u6c22\u503e\u537f\u6e05\u64ce\u6674\u6c30\u60c5\u9877\u8bf7\u5e86\u5029\u82d8\u570a\u6aa0\u78ec\u873b\u7f44\u7b90\u8b26\u9cad\u9ee5","qiong":"\u743c\u7a77\u909b\u8315\u7a79\u7b47\u928e","qiu":"\u79cb\u4e18\u90b1\u7403\u6c42\u56da\u914b\u6cc5\u4fc5\u6c3d\u5def\u827d\u72b0\u6e6b\u9011\u9052\u6978\u8d47\u9e20\u866c\u86af\u8764\u88d8\u7cd7\u9cc5\u9f3d","qu":"\u8d8b\u533a\u86c6\u66f2\u8eaf\u5c48\u9a71\u6e20\u53d6\u5a36\u9f8b\u8da3\u53bb\u8bce\u52ac\u8556\u8627\u5c96\u8862\u9612\u74a9\u89d1\u6c0d\u795b\u78f2\u766f\u86d0\u883c\u9eb4\u77bf\u9ee2","quan":"\u5708\u98a7\u6743\u919b\u6cc9\u5168\u75ca\u62f3\u72ac\u5238\u529d\u8be0\u8343\u737e\u609b\u7efb\u8f81\u754e\u94e8\u8737\u7b4c\u9b08","que":"\u7f3a\u7094\u7638\u5374\u9e4a\u69b7\u786e\u96c0\u9619\u60ab","qun":"\u88d9\u7fa4\u9021","ran":"\u7136\u71c3\u5189\u67d3\u82d2\u9aef","rang":"\u74e4\u58e4\u6518\u56b7\u8ba9\u79b3\u7a70","rao":"\u9976\u6270\u7ed5\u835b\u5a06\u6861","ruo":"\u60f9\u82e5\u5f31","re":"\u70ed\u504c","ren":"\u58ec\u4ec1\u4eba\u5fcd\u97e7\u4efb\u8ba4\u5203\u598a\u7eab\u4ede\u834f\u845a\u996a\u8f6b\u7a14\u887d","reng":"\u6254\u4ecd","ri":"\u65e5","rong":"\u620e\u8338\u84c9\u8363\u878d\u7194\u6eb6\u5bb9\u7ed2\u5197\u5d58\u72e8\u7f1b\u6995\u877e","rou":"\u63c9\u67d4\u8089\u7cc5\u8e42\u97a3","ru":"\u8339\u8815\u5112\u5b7a\u5982\u8fb1\u4e73\u6c5d\u5165\u8925\u84d0\u85b7\u5685\u6d33\u6ebd\u6fe1\u94f7\u8966\u98a5","ruan":"\u8f6f\u962e\u670a","rui":"\u854a\u745e\u9510\u82ae\u8564\u777f\u868b","run":"\u95f0\u6da6","sa":"\u6492\u6d12\u8428\u5345\u4ee8\u6332\u98d2","sai":"\u816e\u9cc3\u585e\u8d5b\u567b","san":"\u4e09\u53c1\u4f1e\u6563\u5f61\u9993\u6c35\u6bf5\u7cc1\u9730","sang":"\u6851\u55d3\u4e27\u6421\u78c9\u98a1","sao":"\u6414\u9a9a\u626b\u5ac2\u57fd\u81ca\u7619\u9ccb","se":"\u745f\u8272\u6da9\u556c\u94e9\u94ef\u7a51","sen":"\u68ee","seng":"\u50e7","sha":"\u838e\u7802\u6740\u5239\u6c99\u7eb1\u50bb\u5565\u715e\u810e\u6b43\u75e7\u88df\u970e\u9ca8","shai":"\u7b5b\u6652\u917e","shan":"\u73ca\u82eb\u6749\u5c71\u5220\u717d\u886b\u95ea\u9655\u64c5\u8d61\u81b3\u5584\u6c55\u6247\u7f2e\u5261\u8baa\u912f\u57cf\u829f\u6f78\u59d7\u9a9f\u81bb\u9490\u759d\u87ee\u8222\u8dda\u9cdd","shang":"\u5892\u4f24\u5546\u8d4f\u664c\u4e0a\u5c1a\u88f3\u57a7\u7ef1\u6b87\u71b5\u89de","shao":"\u68a2\u634e\u7a0d\u70e7\u828d\u52fa\u97f6\u5c11\u54e8\u90b5\u7ecd\u52ad\u82d5\u6f72\u86f8\u7b24\u7b72\u8244","she":"\u5962\u8d4a\u86c7\u820c\u820d\u8d66\u6444\u5c04\u6151\u6d89\u793e\u8bbe\u538d\u4f58\u731e\u7572\u9e9d","shen":"\u7837\u7533\u547b\u4f38\u8eab\u6df1\u5a20\u7ec5\u795e\u6c88\u5ba1\u5a76\u751a\u80be\u614e\u6e17\u8bdc\u8c02\u5432\u54c2\u6e16\u6939\u77e7\u8703","sheng":"\u58f0\u751f\u7525\u7272\u5347\u7ef3\u7701\u76db\u5269\u80dc\u5723\u4e1e\u6e11\u5ab5\u771a\u7b19","shi":"\u5e08\u5931\u72ee\u65bd\u6e7f\u8bd7\u5c38\u8671\u5341\u77f3\u62fe\u65f6\u4ec0\u98df\u8680\u5b9e\u8bc6\u53f2\u77e2\u4f7f\u5c4e\u9a76\u59cb\u5f0f\u793a\u58eb\u4e16\u67ff\u4e8b\u62ed\u8a93\u901d\u52bf\u662f\u55dc\u566c\u9002\u4ed5\u4f8d\u91ca\u9970\u6c0f\u5e02\u6043\u5ba4\u89c6\u8bd5\u8c25\u57d8\u83b3\u84cd\u5f11\u5511\u9963\u8f7c\u8006\u8d33\u70bb\u793b\u94c8\u94ca\u87ab\u8210\u7b6e\u8c55\u9ca5\u9cba","shou":"\u6536\u624b\u9996\u5b88\u5bff\u6388\u552e\u53d7\u7626\u517d\u624c\u72e9\u7ef6\u824f","shu":"\u852c\u67a2\u68b3\u6b8a\u6292\u8f93\u53d4\u8212\u6dd1\u758f\u4e66\u8d4e\u5b70\u719f\u85af\u6691\u66d9\u7f72\u8700\u9ecd\u9f20\u5c5e\u672f\u8ff0\u6811\u675f\u620d\u7ad6\u5885\u5eb6\u6570\u6f31\u6055\u500f\u587e\u83fd\u5fc4\u6cad\u6d91\u6f8d\u59dd\u7ebe\u6bf9\u8167\u6bb3\u956f\u79eb\u9e6c","shua":"\u5237\u800d\u5530\u6dae","shuai":"\u6454\u8870\u7529\u5e05\u87c0","shuan":"\u6813\u62f4\u95e9","shuang":"\u971c\u53cc\u723d\u5b40","shui":"\u8c01\u6c34\u7761\u7a0e","shun":"\u542e\u77ac\u987a\u821c\u6042","shuo":"\u8bf4\u7855\u6714\u70c1\u84b4\u6420\u55cd\u6fef\u5981\u69ca\u94c4","si":"\u65af\u6495\u5636\u601d\u79c1\u53f8\u4e1d\u6b7b\u8086\u5bfa\u55e3\u56db\u4f3a\u4f3c\u9972\u5df3\u53ae\u4fdf\u5155\u83e5\u549d\u6c5c\u6cd7\u6f8c\u59d2\u9a77\u7f0c\u7940\u7960\u9536\u9e36\u801c\u86f3\u7b25","song":"\u677e\u8038\u6002\u9882\u9001\u5b8b\u8bbc\u8bf5\u51c7\u83d8\u5d27\u5d69\u5fea\u609a\u6dde\u7ae6","sou":"\u641c\u8258\u64de\u55fd\u53df\u55d6\u55fe\u998a\u6eb2\u98d5\u778d\u953c\u878b","su":"\u82cf\u9165\u4fd7\u7d20\u901f\u7c9f\u50f3\u5851\u6eaf\u5bbf\u8bc9\u8083\u5919\u8c21\u850c\u55c9\u612b\u7c0c\u89eb\u7a23","suan":"\u9178\u849c\u7b97","sui":"\u867d\u968b\u968f\u7ee5\u9ad3\u788e\u5c81\u7a57\u9042\u96a7\u795f\u84d1\u51ab\u8c07\u6fc9\u9083\u71e7\u772d\u7762","sun":"\u5b59\u635f\u7b0b\u836a\u72f2\u98e7\u69ab\u8de3\u96bc","suo":"\u68ad\u5506\u7f29\u7410\u7d22\u9501\u6240\u5522\u55e6\u5a11\u686b\u7743\u7fa7","ta":"\u584c\u4ed6\u5b83\u5979\u5854\u736d\u631e\u8e4b\u8e0f\u95fc\u6ebb\u9062\u69bb\u6c93","tai":"\u80ce\u82d4\u62ac\u53f0\u6cf0\u915e\u592a\u6001\u6c70\u90b0\u85b9\u80bd\u70b1\u949b\u8dc6\u9c90","tan":"\u574d\u644a\u8d2a\u762b\u6ee9\u575b\u6a80\u75f0\u6f6d\u8c2d\u8c08\u5766\u6bef\u8892\u78b3\u63a2\u53f9\u70ad\u90ef\u8548\u6619\u94bd\u952c\u8983","tang":"\u6c64\u5858\u642a\u5802\u68e0\u819b\u5510\u7cd6\u50a5\u9967\u6e8f\u746d\u94f4\u9557\u8025\u8797\u87b3\u7fb0\u91a3","thang":"\u5018\u8eba\u6dcc","theng":"\u8d9f\u70eb","tao":"\u638f\u6d9b\u6ed4\u7ee6\u8404\u6843\u9003\u6dd8\u9676\u8ba8\u5957\u6311\u9f17\u5555\u97ec\u9955","te":"\u7279","teng":"\u85e4\u817e\u75bc\u8a8a\u6ed5","ti":"\u68af\u5254\u8e22\u9511\u63d0\u9898\u8e44\u557c\u4f53\u66ff\u568f\u60d5\u6d95\u5243\u5c49\u8351\u608c\u9016\u7ee8\u7f07\u9e48\u88fc\u918d","tian":"\u5929\u6dfb\u586b\u7530\u751c\u606c\u8214\u8146\u63ad\u5fdd\u9617\u6b84\u754b\u94bf\u86ba","tiao":"\u6761\u8fe2\u773a\u8df3\u4f7b\u7967\u94eb\u7a95\u9f86\u9ca6","tie":"\u8d34\u94c1\u5e16\u841c\u992e","ting":"\u5385\u542c\u70c3\u6c40\u5ef7\u505c\u4ead\u5ead\u633a\u8247\u839b\u8476\u5a77\u6883\u8713\u9706","tong":"\u901a\u6850\u916e\u77b3\u540c\u94dc\u5f64\u7ae5\u6876\u6345\u7b52\u7edf\u75db\u4f5f\u50ee\u4edd\u833c\u55f5\u6078\u6f7c\u783c","tou":"\u5077\u6295\u5934\u900f\u4ea0","tu":"\u51f8\u79c3\u7a81\u56fe\u5f92\u9014\u6d82\u5c60\u571f\u5410\u5154\u580d\u837c\u83df\u948d\u9174","tuan":"\u6e4d\u56e2\u7583","tui":"\u63a8\u9893\u817f\u8715\u892a\u9000\u5fd2\u717a","tun":"\u541e\u5c6f\u81c0\u9968\u66be\u8c5a\u7a80","tuo":"\u62d6\u6258\u8131\u9e35\u9640\u9a6e\u9a7c\u692d\u59a5\u62d3\u553e\u4e47\u4f57\u5768\u5eb9\u6cb1\u67dd\u7823\u7ba8\u8204\u8dce\u9f0d","wa":"\u6316\u54c7\u86d9\u6d3c\u5a03\u74e6\u889c\u4f64\u5a32\u817d","wai":"\u6b6a\u5916","wan":"\u8c4c\u5f2f\u6e7e\u73a9\u987d\u4e38\u70f7\u5b8c\u7897\u633d\u665a\u7696\u60cb\u5b9b\u5a49\u4e07\u8155\u525c\u8284\u82cb\u83c0\u7ea8\u7efe\u742c\u8118\u7579\u873f\u7ba2","wang":"\u6c6a\u738b\u4ea1\u6789\u7f51\u5f80\u65fa\u671b\u5fd8\u5984\u7f54\u5c22\u60d8\u8f8b\u9b4d","wei":"\u5a01\u5dcd\u5fae\u5371\u97e6\u8fdd\u6845\u56f4\u552f\u60df\u4e3a\u6f4d\u7ef4\u82c7\u840e\u59d4\u4f1f\u4f2a\u5c3e\u7eac\u672a\u851a\u5473\u754f\u80c3\u5582\u9b4f\u4f4d\u6e2d\u8c13\u5c09\u6170\u536b\u502d\u504e\u8bff\u9688\u8473\u8587\u5e0f\u5e37\u5d34\u5d6c\u7325\u732c\u95f1\u6ca9\u6d27\u6da0\u9036\u5a13\u73ae\u97ea\u8ece\u709c\u7168\u71a8\u75ff\u8249\u9c94","wen":"\u761f\u6e29\u868a\u6587\u95fb\u7eb9\u543b\u7a33\u7d0a\u95ee\u520e\u6120\u960c\u6c76\u74ba\u97eb\u6b81\u96ef","weng":"\u55e1\u7fc1\u74ee\u84ca\u8579","wo":"\u631d\u8717\u6da1\u7a9d\u6211\u65a1\u5367\u63e1\u6c83\u83b4\u5e44\u6e25\u674c\u809f\u9f8c","wu":"\u5deb\u545c\u94a8\u4e4c\u6c61\u8bec\u5c4b\u65e0\u829c\u68a7\u543e\u5434\u6bcb\u6b66\u4e94\u6342\u5348\u821e\u4f0d\u4fae\u575e\u620a\u96fe\u6664\u7269\u52ff\u52a1\u609f\u8bef\u5140\u4ef5\u9622\u90ac\u572c\u82b4\u5e91\u6003\u5fe4\u6d6f\u5be4\u8fd5\u59a9\u9a9b\u727e\u7110\u9e49\u9e5c\u8708\u92c8\u9f2f","xi":"\u6614\u7199\u6790\u897f\u7852\u77fd\u6670\u563b\u5438\u9521\u727a\u7a00\u606f\u5e0c\u6089\u819d\u5915\u60dc\u7184\u70ef\u6eaa\u6c50\u7280\u6a84\u88ad\u5e2d\u4e60\u5ab3\u559c\u94e3\u6d17\u7cfb\u9699\u620f\u7ec6\u50d6\u516e\u96b0\u90d7\u831c\u8478\u84f0\u595a\u550f\u5f99\u9969\u960b\u6d60\u6dc5\u5c63\u5b09\u73ba\u6a28\u66e6\u89cb\u6b37\u71b9\u798a\u79a7\u94b8\u7699\u7a78\u8725\u87cb\u823e\u7fb2\u7c9e\u7fd5\u91af\u9f37","xia":"\u778e\u867e\u5323\u971e\u8f96\u6687\u5ce1\u4fa0\u72ed\u4e0b\u53a6\u590f\u5413\u6380\u846d\u55c4\u72ce\u9050\u7455\u7856\u7615\u7f45\u9ee0","xian":"\u9528\u5148\u4ed9\u9c9c\u7ea4\u54b8\u8d24\u8854\u8237\u95f2\u6d8e\u5f26\u5acc\u663e\u9669\u73b0\u732e\u53bf\u817a\u9985\u7fa1\u5baa\u9677\u9650\u7ebf\u51bc\u85d3\u5c98\u7303\u66b9\u5a34\u6c19\u7946\u9e47\u75eb\u86ac\u7b45\u7c7c\u9170\u8df9","xiang":"\u76f8\u53a2\u9576\u9999\u7bb1\u8944\u6e58\u4e61\u7fd4\u7965\u8be6\u60f3\u54cd\u4eab\u9879\u5df7\u6a61\u50cf\u5411\u8c61\u8297\u8459\u9977\u5ea0\u9aa7\u7f03\u87d3\u9c9e\u98e8","xiao":"\u8427\u785d\u9704\u524a\u54ee\u56a3\u9500\u6d88\u5bb5\u6dc6\u6653\u5c0f\u5b5d\u6821\u8096\u5578\u7b11\u6548\u54d3\u54bb\u5d24\u6f47\u900d\u9a81\u7ee1\u67ad\u67b5\u7b71\u7bab\u9b48","xie":"\u6954\u4e9b\u6b47\u874e\u978b\u534f\u631f\u643a\u90aa\u659c\u80c1\u8c10\u5199\u68b0\u5378\u87f9\u61c8\u6cc4\u6cfb\u8c22\u5c51\u5055\u4eb5\u52f0\u71ee\u85a4\u64b7\u5ee8\u7023\u9082\u7ec1\u7f2c\u69ad\u698d\u6b59\u8e9e","xin":"\u85aa\u82af\u950c\u6b23\u8f9b\u65b0\u5ffb\u5fc3\u4fe1\u8845\u56df\u99a8\u8398\u6b46\u94fd\u946b","xing":"\u661f\u8165\u7329\u60fa\u5174\u5211\u578b\u5f62\u90a2\u884c\u9192\u5e78\u674f\u6027\u59d3\u9649\u8347\u8365\u64e4\u60bb\u784e","xiong":"\u5144\u51f6\u80f8\u5308\u6c79\u96c4\u718a\u828e","xiu":"\u4f11\u4fee\u7f9e\u673d\u55c5\u9508\u79c0\u8896\u7ee3\u83a0\u5cab\u9990\u5ea5\u9e3a\u8c85\u9af9","xu":"\u589f\u620c\u9700\u865a\u5618\u987b\u5f90\u8bb8\u84c4\u9157\u53d9\u65ed\u5e8f\u755c\u6064\u7d6e\u5a7f\u7eea\u7eed\u8bb4\u8be9\u5729\u84ff\u6035\u6d2b\u6e86\u987c\u6829\u7166\u7809\u76f1\u80e5\u7cc8\u9191","xuan":"\u8f69\u55a7\u5ba3\u60ac\u65cb\u7384\u9009\u7663\u7729\u7eda\u5107\u8c16\u8431\u63ce\u9994\u6ceb\u6d35\u6e32\u6f29\u7487\u6966\u6684\u70ab\u714a\u78b9\u94c9\u955f\u75c3","xue":"\u9774\u859b\u5b66\u7a74\u96ea\u8840\u5671\u6cf6\u9cd5","xun":"\u52cb\u718f\u5faa\u65ec\u8be2\u5bfb\u9a6f\u5de1\u6b89\u6c5b\u8bad\u8baf\u900a\u8fc5\u5dfd\u57d9\u8340\u85b0\u5ccb\u5f87\u6d54\u66db\u7aa8\u91ba\u9c9f","ya":"\u538b\u62bc\u9e26\u9e2d\u5440\u4e2b\u82bd\u7259\u869c\u5d16\u8859\u6daf\u96c5\u54d1\u4e9a\u8bb6\u4f22\u63e0\u5416\u5c88\u8fd3\u5a05\u740a\u6860\u6c29\u7811\u775a\u75d6","yan":"\u7109\u54bd\u9609\u70df\u6df9\u76d0\u4e25\u7814\u8712\u5ca9\u5ef6\u8a00\u989c\u960e\u708e\u6cbf\u5944\u63a9\u773c\u884d\u6f14\u8273\u5830\u71d5\u538c\u781a\u96c1\u5501\u5f66\u7130\u5bb4\u8c1a\u9a8c\u53a3\u9765\u8d5d\u4fe8\u5043\u5156\u8ba0\u8c33\u90fe\u9122\u82ab\u83f8\u5d26\u6079\u95eb\u960f\u6d07\u6e6e\u6edf\u598d\u5ae3\u7430\u664f\u80ed\u814c\u7131\u7f68\u7b75\u917d\u9b47\u990d\u9f39","yang":"\u6b83\u592e\u9e2f\u79e7\u6768\u626c\u4f6f\u75a1\u7f8a\u6d0b\u9633\u6c27\u4ef0\u75d2\u517b\u6837\u6f3e\u5f89\u600f\u6cf1\u7080\u70ca\u6059\u86d8\u9785","yao":"\u9080\u8170\u5996\u7476\u6447\u5c27\u9065\u7a91\u8c23\u59da\u54ac\u8200\u836f\u8981\u8000\u592d\u723b\u5406\u5d3e\u5fad\u7039\u5e7a\u73e7\u6773\u66dc\u80b4\u9e5e\u7a88\u7e47\u9cd0","ye":"\u6930\u564e\u8036\u7237\u91ce\u51b6\u4e5f\u9875\u6396\u4e1a\u53f6\u66f3\u814b\u591c\u6db2\u8c12\u90ba\u63f6\u9980\u6654\u70e8\u94d8","yi":"\u4e00\u58f9\u533b\u63d6\u94f1\u4f9d\u4f0a\u8863\u9890\u5937\u9057\u79fb\u4eea\u80f0\u7591\u6c82\u5b9c\u59e8\u5f5d\u6905\u8681\u501a\u5df2\u4e59\u77e3\u4ee5\u827a\u6291\u6613\u9091\u5c79\u4ebf\u5f79\u81c6\u9038\u8084\u75ab\u4ea6\u88d4\u610f\u6bc5\u5fc6\u4e49\u76ca\u6ea2\u8be3\u8bae\u8c0a\u8bd1\u5f02\u7ffc\u7fcc\u7ece\u5208\u5293\u4f7e\u8bd2\u572a\u572f\u57f8\u61ff\u82e1\u858f\u5f08\u5955\u6339\u5f0b\u5453\u54a6\u54bf\u566b\u5cc4\u5db7\u7317\u9974\u603f\u6021\u6092\u6f2a\u8fe4\u9a7f\u7f22\u6baa\u8d3b\u65d6\u71a0\u9487\u9552\u9571\u75cd\u7617\u7654\u7fca\u8864\u8734\u8223\u7fbf\u7ff3\u914f\u9edf","yin":"\u8335\u836b\u56e0\u6bb7\u97f3\u9634\u59fb\u541f\u94f6\u6deb\u5bc5\u996e\u5c39\u5f15\u9690\u5370\u80e4\u911e\u5819\u831a\u5591\u72fa\u5924\u6c24\u94df\u763e\u8693\u972a\u9f88","ying":"\u82f1\u6a31\u5a74\u9e70\u5e94\u7f28\u83b9\u8424\u8425\u8367\u8747\u8fce\u8d62\u76c8\u5f71\u9896\u786c\u6620\u5b34\u90e2\u8314\u83ba\u8426\u6484\u5624\u81ba\u6ee2\u6f46\u701b\u745b\u748e\u6979\u9e66\u763f\u988d\u7f42","yo":"\u54df\u5537","yong":"\u62e5\u4f63\u81c3\u75c8\u5eb8\u96cd\u8e0a\u86f9\u548f\u6cf3\u6d8c\u6c38\u607f\u52c7\u7528\u4fd1\u58c5\u5889\u6175\u9095\u955b\u752c\u9cd9\u9954","you":"\u5e7d\u4f18\u60a0\u5fe7\u5c24\u7531\u90ae\u94c0\u72b9\u6cb9\u6e38\u9149\u6709\u53cb\u53f3\u4f51\u91c9\u8bf1\u53c8\u5e7c\u5363\u6538\u4f91\u83b8\u5466\u56ff\u5ba5\u67da\u7337\u7256\u94d5\u75a3\u8763\u9c7f\u9edd\u9f2c","yu":"\u8fc2\u6de4\u4e8e\u76c2\u6986\u865e\u611a\u8206\u4f59\u4fde\u903e\u9c7c\u6109\u6e1d\u6e14\u9685\u4e88\u5a31\u96e8\u4e0e\u5c7f\u79b9\u5b87\u8bed\u7fbd\u7389\u57df\u828b\u90c1\u5401\u9047\u55bb\u5cea\u5fa1\u6108\u6b32\u72f1\u80b2\u8a89\u6d74\u5bd3\u88d5\u9884\u8c6b\u9a6d\u79ba\u6bd3\u4f1b\u4fe3\u8c00\u8c15\u8438\u84e3\u63c4\u5581\u5704\u5709\u5d5b\u72f3\u996b\u5ebe\u9608\u59aa\u59a4\u7ea1\u745c\u6631\u89ce\u8174\u6b24\u65bc\u715c\u71e0\u807f\u94b0\u9e46\u7610\u7600\u7ab3\u8753\u7afd\u8201\u96e9\u9f89","yuan":"\u9e33\u6e0a\u51a4\u5143\u57a3\u8881\u539f\u63f4\u8f95\u56ed\u5458\u5706\u733f\u6e90\u7f18\u8fdc\u82d1\u613f\u6028\u9662\u586c\u6c85\u5a9b\u7457\u6a7c\u7230\u7722\u9e22\u8788\u9f0b","yue":"\u66f0\u7ea6\u8d8a\u8dc3\u94a5\u5cb3\u7ca4\u6708\u60a6\u9605\u9fa0\u6a3e\u5216\u94ba","yun":"\u8018\u4e91\u90e7\u5300\u9668\u5141\u8fd0\u8574\u915d\u6655\u97f5\u5b55\u90d3\u82b8\u72c1\u607d\u7ead\u6b92\u6600\u6c32","za":"\u531d\u7838\u6742\u62f6\u5482","zai":"\u683d\u54c9\u707e\u5bb0\u8f7d\u518d\u5728\u54b1\u5d3d\u753e","zan":"\u6512\u6682\u8d5e\u74d2\u661d\u7c2a\u7ccc\u8db1\u933e","zang":"\u8d43\u810f\u846c\u5958\u6215\u81e7","zao":"\u906d\u7cdf\u51ff\u85fb\u67a3\u65e9\u6fa1\u86a4\u8e81\u566a\u9020\u7682\u7076\u71e5\u5523\u7f2b","ze":"\u8d23\u62e9\u5219\u6cfd\u4ec4\u8d5c\u5567\u8fee\u6603\u7b2e\u7ba6\u8234","zei":"\u8d3c","zen":"\u600e\u8c2e","zeng":"\u589e\u618e\u66fe\u8d60\u7f2f\u7511\u7f7e\u9503","zha":"\u624e\u55b3\u6e23\u672d\u8f67\u94e1\u95f8\u7728\u6805\u69a8\u548b\u4e4d\u70b8\u8bc8\u63f8\u5412\u54a4\u54f3\u600d\u781f\u75c4\u86b1\u9f44","zhai":"\u6458\u658b\u5b85\u7a84\u503a\u5be8\u7826","zhan":"\u77bb\u6be1\u8a79\u7c98\u6cbe\u76cf\u65a9\u8f97\u5d2d\u5c55\u8638\u6808\u5360\u6218\u7ad9\u6e5b\u7efd\u8c35\u640c\u65c3","zhang":"\u6a1f\u7ae0\u5f70\u6f33\u5f20\u638c\u6da8\u6756\u4e08\u5e10\u8d26\u4ed7\u80c0\u7634\u969c\u4ec9\u9123\u5e5b\u5d82\u7350\u5adc\u748b\u87d1","zhao":"\u62db\u662d\u627e\u6cbc\u8d75\u7167\u7f69\u5146\u8087\u53ec\u722a\u8bcf\u68f9\u948a\u7b0a","zhe":"\u906e\u6298\u54f2\u86f0\u8f99\u8005\u9517\u8517\u8fd9\u6d59\u8c2a\u966c\u67d8\u8f84\u78d4\u9e67\u891a\u8707\u8d6d","zhen":"\u73cd\u659f\u771f\u7504\u7827\u81fb\u8d1e\u9488\u4fa6\u6795\u75b9\u8bca\u9707\u632f\u9547\u9635\u7f1c\u6862\u699b\u8f78\u8d48\u80d7\u6715\u796f\u755b\u9e29","zheng":"\u84b8\u6323\u7741\u5f81\u72f0\u4e89\u6014\u6574\u62ef\u6b63\u653f\u5e27\u75c7\u90d1\u8bc1\u8be4\u5ce5\u94b2\u94ee\u7b5d","zhi":"\u829d\u679d\u652f\u5431\u8718\u77e5\u80a2\u8102\u6c41\u4e4b\u7ec7\u804c\u76f4\u690d\u6b96\u6267\u503c\u4f84\u5740\u6307\u6b62\u8dbe\u53ea\u65e8\u7eb8\u5fd7\u631a\u63b7\u81f3\u81f4\u7f6e\u5e1c\u5cd9\u5236\u667a\u79e9\u7a1a\u8d28\u7099\u75d4\u6ede\u6cbb\u7a92\u536e\u965f\u90c5\u57f4\u82b7\u646d\u5e19\u5fee\u5f58\u54ab\u9a98\u6809\u67b3\u6800\u684e\u8f75\u8f7e\u6534\u8d3d\u81a3\u7949\u7957\u9ef9\u96c9\u9e37\u75e3\u86ed\u7d77\u916f\u8dd6\u8e2c\u8e2f\u8c78\u89ef","zhong":"\u4e2d\u76c5\u5fe0\u949f\u8877\u7ec8\u79cd\u80bf\u91cd\u4ef2\u4f17\u51a2\u953a\u87bd\u8202\u822f\u8e35","zhou":"\u821f\u5468\u5dde\u6d32\u8bcc\u7ca5\u8f74\u8098\u5e1a\u5492\u76b1\u5b99\u663c\u9aa4\u5544\u7740\u501c\u8bf9\u836e\u9b3b\u7ea3\u80c4\u78a1\u7c40\u8233\u914e\u9cb7","zhu":"\u73e0\u682a\u86db\u6731\u732a\u8bf8\u8bdb\u9010\u7af9\u70db\u716e\u62c4\u77a9\u5631\u4e3b\u8457\u67f1\u52a9\u86c0\u8d2e\u94f8\u7b51\u4f4f\u6ce8\u795d\u9a7b\u4f2b\u4f8f\u90be\u82ce\u8331\u6d19\u6e1a\u6f74\u9a7a\u677c\u69e0\u6a65\u70b7\u94e2\u75b0\u7603\u86b0\u7afa\u7bb8\u7fe5\u8e85\u9e88","zhua":"\u6293","zhuai":"\u62fd","zhuan":"\u4e13\u7816\u8f6c\u64b0\u8d5a\u7bc6\u629f\u556d\u989b","zhuang":"\u6869\u5e84\u88c5\u5986\u649e\u58ee\u72b6\u4e2c","zhui":"\u690e\u9525\u8ffd\u8d58\u5760\u7f00\u8411\u9a93\u7f12","zhun":"\u8c06\u51c6","zhuo":"\u6349\u62d9\u5353\u684c\u7422\u8301\u914c\u707c\u6d4a\u502c\u8bfc\u5ef4\u855e\u64e2\u555c\u6d5e\u6dbf\u6753\u712f\u799a\u65ab","zi":"\u5179\u54a8\u8d44\u59ff\u6ecb\u6dc4\u5b5c\u7d2b\u4ed4\u7c7d\u6ed3\u5b50\u81ea\u6e0d\u5b57\u8c18\u5d6b\u59ca\u5b73\u7f01\u6893\u8f8e\u8d40\u6063\u7726\u9531\u79ed\u8014\u7b2b\u7ca2\u89dc\u8a3e\u9cbb\u9aed","zong":"\u9b03\u68d5\u8e2a\u5b97\u7efc\u603b\u7eb5\u8159\u7cbd","zou":"\u90b9\u8d70\u594f\u63cd\u9139\u9cb0","zu":"\u79df\u8db3\u5352\u65cf\u7956\u8bc5\u963b\u7ec4\u4fce\u83f9\u5550\u5f82\u9a75\u8e74","zuan":"\u94bb\u7e82\u6525\u7f35","zui":"\u5634\u9189\u6700\u7f6a","zun":"\u5c0a\u9075\u6499\u6a3d\u9cdf","zuo":"\u6628\u5de6\u4f50\u67de\u505a\u4f5c\u5750\u5ea7\u961d\u963c\u80d9\u795a\u9162","cou":"\u85ae\u6971\u8f8f\u8160","nang":"\u652e\u54dd\u56d4\u9995\u66e9","o":"\u5594","dia":"\u55f2","chuai":"\u562c\u81aa\u8e39","cen":"\u5c91\u6d94","diu":"\u94e5","nou":"\u8028","fou":"\u7f36","bia":"\u9adf"};
	/**
	 * 单个汉字拼音转换
	 * @param ch{String}拼音字符串
	 * @return {String}转换后的串
	 */
	function pinyinSearch(ch,convert){
		for (var name in PinYin){
			if (PinYin[name].indexOf(ch) < 0) {
				continue;
			}
			if(convert)
				return convert(name);
			return name;
		}
		return false;
	}
	
	/**
	 * 获取拼音首字母
	 * @param ch{String}拼音字符串
	 * @return {String}拼音首字母
	 */
	function getCapitalized(ch){
		var first = ch.substr(0,1).toUpperCase();
		var spare = ch.substr(1,ch.length);
		return first + spare;
	}
	
	/**
	 * 获取拼音首字母
	 * @param ch{String}拼音字符串
	 * @return {String}拼音首字母
	 */
	function getInitials(ch){
		return ch.substr(0,1).toUpperCase();
	}
	
	/**
	 * 获取拼音首字母
	 * @param ch{String}拼音字符串
	 * @return {String}拼音首字母
	 */
	function getUapperInitials(ch){
		return ch.substr(0,1).toUpperCase();
	}
	/**
	 * 将汉字转换为拼音
	 * @param chStr{String}汉字串
	 * @param convert{function} 转换策略
	 * @return {String}拼音首字母
	 */
	function chinese2Pinyin(chStr,convert){
		var len = chStr.length;
		var rs = "";
		var reg = new RegExp('[a-zA-Z0-9\- ]');
		for (var i=0;i<len;i++) {
			var val = chStr.charAt(i);
			var name = pinyinSearch(val,convert);
			if(reg.test(val)) {
				rs += val;
			} else if (name!==false) {
				rs += name;
			}
			
		}
		rs = rs.replace(/ /g,'-');
		while (rs.indexOf('--')>0) {
			rs = rs.replace('--','-');
		}
		return rs;
	}
	return {
		/**
		 * 获取汉字拼音首字母串
		 * @param ch{String}拼音字符串
		 * @return {String}拼音首字母串
		 */
		toInitials:function(chStr) {
			return chinese2Pinyin(chStr,getInitials);
		},
		/**
		 * 获取汉字拼音大写首字母串
		 * @param ch{String}拼音字符串
		 * @return {String}大写的拼音首字母串
		 */
		toUpperInitials:function(chStr) {
			return chinese2Pinyin(chStr,getUapperInitials);
		},
		
		/**
		 * 获取汉字拼音串
		 * @param ch{String}拼音字符串
		 * @return {String}汉字拼音串
		 */
		toPinyin:function(chStr) {
			return chinese2Pinyin(chStr);
		},
		/**
		 * 获取汉字首字母大写的拼音串
		 * @param ch{String}拼音字符串
		 * @return {String}首字母大写的拼音串
		 */
		toCapPinyin:function(chStr) {
			return chinese2Pinyin(chStr);
		}
	}
});
	

	


define('app/core/app-class',[],function() {

    // Class
    // -----------------
    // Thanks to:
    //  - http://mootools.net/docs/core/Class/Class
    //  - http://ejohn.org/blog/simple-javascript-inheritance/
    //  - https://github.com/ded/klass
    //  - http://documentcloud.github.com/backbone/#Model-extend
    //  - https://github.com/joyent/node/blob/master/lib/util.js
    //  - https://github.com/kissyteam/kissy/blob/master/src/seed/src/kissy.js
    // The base Class implementation.
    /**
     *
     * @class
     * @name Class
     * @classdesc 提供简洁的 OO 实现
     */
    function Class(o) {
        // Convert existed function to Class.
        if (!(this instanceof Class) && isFunction(o)) {
            return classify(o);
        }
    }
    /**
     * 创建类对象方法
     * @function create
     * @memberof Class
     * @static
     * @example 创建一个类
     * // Create a new Class.
     * //
     * //    var SuperPig = Class.create({
     * //        Extends: Animal,//继承类
     * //        Implements: Flyable,//实现了,相当于SuperPig拥有了Flyable的所有方法
     * //        initialize: function() {//初始化方法
     * //            SuperPig.superclass.initialize.apply(this, arguments);
     * //        },
     * //        Statics: {
     * //            COLOR: 'red'
     * //        }
     * //    });
     * //
     * @param parent 父类
     * @param properties 方法对象
     * @returns {*}
     */
    Class.create = function(parent, properties) {
        if (!isFunction(parent)) {
            properties = parent;
            parent = null;
        }

        properties || (properties = {});
        parent || (parent = properties.Extends || Class);
        properties.Extends = parent;

        // The created class constructor
        function SubClass() {
            // Call the parent constructor.
            parent.apply(this, arguments);

            // Only call initialize in self constructor.
            if (this.constructor === SubClass && this.initialize) {
                this.initialize.apply(this, arguments);
            }
        }

        // Inherit class (static) properties from parent.
        if (parent !== Class) {
            mix(SubClass, parent);
        }

        // Add instance properties to the subclass.
        implement.call(SubClass, properties);

        // Make subclass extendable.
        return classify(SubClass);
    };


    function implement(properties) {
        var key, value;

        for (key in properties) {
            value = properties[key];

            if (Class.Mutators.hasOwnProperty(key)) {
                Class.Mutators[key].call(this, value);
            } else {
                this.prototype[key] = value;
            }
        }
    }



    /**
     * 由 Class.create 创建的类，自动具有 extend 方法，功能与 Class.create 完全一样，只是继承的父类是 SomeClass 自身，前面的例子中已说明，不赘述
     * @memberof Class
     * @example 创建一个类
     *
     *
     * //function Animal() {
     *  // }
     * // Animal.prototype.talk = function() {};
     * //var Dog = Class(Animal).extend({
     *  //swim: function() {}
     *  // });
     * // Create a sub Class based on `Class`.
     * //
     * @param properties 方法对象
     * @returns {*}
     */
    Class.extend = function(properties) {
        properties || (properties = {});
        properties.Extends = this;

        return Class.create(properties);
    };


    function classify(cls) {
        cls.extend = Class.extend;
        cls.implement = implement;
        return cls;
    }


    // Mutators define special properties.
    Class.Mutators = {
        'Extends': function(parent) {
            var existed = this.prototype;
            var proto = createProto(parent.prototype);

            // Keep existed properties.
            mix(proto, existed);

            // Enforce the constructor to be what we expect.
            proto.constructor = this;

            // Set the prototype chain to inherit from `parent`.
            this.prototype = proto;

            // Set a convenience property in case the parent's prototype is
            // needed later.
            this.superclass = parent.prototype;
        },

        'Implements': function(items) {
            isArray(items) || (items = [items]);
            var proto = this.prototype, item;

            while (item = items.shift()) {
                mix(proto, item.prototype || item);
            }
        },

        'Statics': function(staticProperties) {
            mix(this, staticProperties);
        }
    };


    // Shared empty constructor function to aid in prototype-chain creation.
    function Ctor() {
    }

    // See: http://jsperf.com/object-create-vs-new-ctor
    var createProto = Object.__proto__ ?
            function(proto) {
                return { __proto__: proto };
            } :
            function(proto) {
                Ctor.prototype = proto;
                return new Ctor();
            };


    // Helpers
    // ------------

    function mix(r, s) {
        // Copy "all" properties including inherited ones.
        for (var p in s) {
            // 在 iPhone 1 代等设备的 Safari 中，prototype 也会被枚举出来，需排除掉。
            if (p === 'prototype') continue;
            r[p] = s[p];
        }
    }


    var toString = Object.prototype.toString;
    var isArray = Array.isArray;

    if (!isArray) {
        isArray = function(val) {
            return toString.call(val) === '[object Array]';
        };
    }

    var isFunction = function(val) {
        return toString.call(val) === '[object Function]';
    };


    return Class;
});

define('app/core/app-attribute',['require','exports','module'],function(require, exports) {

    // Attribute
    // -----------------
    // Thanks to:
    //  - http://documentcloud.github.com/backbone/#Model
    //  - http://yuilibrary.com/yui/docs/api/classes/AttributeCore.html
    //  - https://github.com/berzniz/backbone.getters.setters

	var Attribute={};

    // 负责 attributes 的初始化
    // attributes 是与实例相关的状态信息，可读可写，发生变化时，会自动触发相关事件
    Attribute.initAttrs = function(config) {
        var specialProps = this.propsInAttrs || [];

        // Get all inherited attributes.
        var attrs = getInheritedAttrs(this, specialProps);

        // Merge user-specific attributes from config.
        if (config) {
            merge(attrs, normalize(config));
        }

        // Automatically register `_onChangeX` method as 'change:x' handler.
        for (key in attrs) {
            if (attrs.hasOwnProperty(key)) {
                var eventKey = getChangeEventKey(key);
                if (this[eventKey]) {
                    this.on('change:' + key, this[eventKey]);
                }
            }
        }

        // Convert `on/before/afterXxx` config to event handler.
        parseEventsFromAttrs(this, attrs);

        // initAttrs 是在初始化时调用的，默认情况下实例上肯定没有 attrs，不存在覆盖问题
        this.attrs = attrs;

        // 让属性的初始值生效
        for (var key in attrs) {
            if (!attrs.hasOwnProperty(key)) continue;
            var attr = attrs[key];

            // 在 set 里，有可能调用到 getter / setter 方法，在这两个方法里，很可能
            // 会引用尚未初始化的变量，比如 this.element. 这时采取忽略就好。因为这种
            // 情况下的属性，一般并不需要初始化。
            try {

                // 如果同时有 value 和 setter，先要调用一下 setter，以保证
                // 关联属性的值正确。比如只有纯 setter / getter 的 xy 属性。
                if (attr.hasOwnProperty('value') && attr.setter) {
                    attr.setter.call(this, attr.value, key);
                }

                // 设置之，如果有改变，则触发事件
                this.set(key, this.get(key));
            }
            catch (ex) {
                // 虽然可忽略，但还是尽可能让开发者知晓
                if (window.console) {
                    console.log('A caught exception occurs: ' + ex);
                }
            }
        }

        // 将 this.attrs 上的 special properties 放回 this 上
        copySpecialProps(specialProps, this, this.attrs, true);
    };


    // Get the value of an attribute.
    Attribute.get = function(key) {
        var attr = this.attrs[key] || {};
        var val = attr.value;
        return attr.getter ? attr.getter.call(this, val, key) : val;
    };


    // Set a hash of model attributes on the object, firing `"change"` unless
    // you choose to silence it.
    Attribute.set = function(key, val, options) {
        var attrs = {};

        // set("key", val, options)
        if (isString(key)) {
            attrs[key] = val;
        }
        // set({ "key": val, "key2": val2 }, options)
        else {
            attrs = key;
            options = val;
        }

        options || (options = {});

        // ready 表示组件的初始状态是否已 OK
        // 在 ready 之前，所有属性的设置操作都是静默的
        var ready = this.__ready;
        var silent = ready ? options.silent : true;

        var now = this.attrs;
        var changed = this.__changedAttrs || (this.__changedAttrs = {});

        for (key in attrs) {
            if (!attrs.hasOwnProperty(key)) continue;

            var attr = now[key] || (now[key] = {});
            val = attrs[key];

            if (attr.readOnly) {
                throw 'This attribute is readOnly: ' + key;
            }

            // invoke validator
            if (attr.validator) {
                var ex = attr.validator.call(this, val, key);
                if (ex !== true) {
                    if (options.error) {
                        options.error.call(this, ex);
                    }
                    continue;
                }
            }

            // invoke setter
            if (attr.setter) {
                val = attr.setter.call(this, val, key);
            }

            // 获取设置前的 prev 值
            // ready 之前，实例上属性的 prev 值都未定义
            var prev = ready ? this.get(key) : null;

            // 获取需要设置的 val 值
            // 都为对象时，做 merge 操作，以保留 prev 上没有覆盖的值
            if (isPlainObject(prev) && isPlainObject(val)) {
                val = merge(merge({}, prev), val);
            }

            // set finally
            now[key].value = val;

            // invoke change event
            if (!isEqual(prev, val)) {
                if (silent) {
                    changed[key] = [val, prev];
                }
                else {
                    this.trigger('change:' + key, val, prev, key);
                }
            }
        }

        return this;
    };


    // Call this method to manually fire a `"change"` event for triggering
    // a `"change:attribute"` event for each changed attribute.
    Attribute.change = function() {
        var changed = this.__changedAttrs;

        if (changed) {
            for (var key in changed) {
                if (changed.hasOwnProperty(key)) {
                    var args = changed[key];
                    this.trigger('change:' + key, args[0], args[1], key);
                }
            }
            delete this.__changedAttrs;
        }

        return this;
    };


    // Helpers
    // -------

    var toString = Object.prototype.toString;

    var isArray = Array.isArray || function(val) {
        return toString.call(val) === '[object Array]';
    };

    function isString(val) {
        return toString.call(val) === '[object String]';
    }

    function isFunction(val) {
        return toString.call(val) === '[object Function]';
    }

    function isPlainObject(o) {
        return o &&
            // 排除 boolean/string/number/function 等
            // 标准浏览器下，排除 window 等非 JS 对象
            // 注：ie8- 下，toString.call(window 等对象)  返回 '[object Object]'
                toString.call(o) === '[object Object]' &&
            // ie8- 下，排除 window 等非 JS 对象
                ('isPrototypeOf' in o);
    }

    function isEmptyObject(o) {
        for (var p in o) {
            if (o.hasOwnProperty(p)) return false;
        }
        return true;
    }

    function merge(receiver, supplier) {
        var key, value;

        for (key in supplier) {
            if (supplier.hasOwnProperty&&supplier.hasOwnProperty(key)) {
                value = supplier[key];

                // 只 clone 数组和 plain object，其他的保持不变
                if (isArray(value)) {
                    value = value.slice();
                }
                else if (isPlainObject(value)) {
                    value = merge(receiver[key] || {}, value);
                }

                receiver[key] = value;
            }
        }

        return receiver;
    }

    var keys = Object.keys;

    if (!keys) {
        keys = function(o) {
            var result = [];

            for (var name in o) {
                if (o.hasOwnProperty(name)) {
                    result.push(name);
                }
            }
            return result;
        }
    }


    var EVENT_PATTERN = /^(on|before|after)([A-Z].*)$/;
    var EVENT_NAME_PATTERN = /^(Change)?([A-Z])(.*)/;

    function parseEventsFromAttrs(host, attrs) {
        for (var key in attrs) {
            if (attrs.hasOwnProperty(key)) {
                var value = attrs[key].value, m;

                /*if (isFunction(value) && (m = key.match(EVENT_PATTERN))) {
                    host[m[1]](getEventName(m[2]), value);
                    delete attrs[key];
                }*/
            }
        }
    }

    // Converts `Show` to `show` and `ChangeTitle` to `change:title`
    function getEventName(name) {
        var m = name.match(EVENT_NAME_PATTERN);
        var ret = m[1] ? 'change:' : '';
        ret += m[2].toLowerCase() + m[3];
        return ret;
    }


    var ATTR_SPECIAL_KEYS = ['value', 'getter', 'setter',
        'validator', 'readOnly'];

    // normalize `attrs` to
    //
    //   {
    //      value: 'xx',
    //      getter: fn,
    //      setter: fn,
    //      validator: fn,
    //      readOnly: boolean
    //   }
    //
    function normalize(attrs) {
        // clone it
        attrs = merge({}, attrs);

        for (var key in attrs) {
            var attr = attrs[key];

            if (isPlainObject(attr) &&
                    hasOwnProperties(attr, ATTR_SPECIAL_KEYS)) {
                continue;
            }

            attrs[key] = {
                value: attr
            };
        }

        return attrs;
    }

    function hasOwnProperties(object, properties) {
        for (var i = 0, len = properties.length; i < len; i++) {
            if (object.hasOwnProperty(properties[i])) {
                return true;
            }
        }
        return false;
    }


    function getChangeEventKey(key) {
        return '_onChange' + key.charAt(0).toUpperCase() + key.substring(1);
    }

    function copySpecialProps(specialProps, receiver, supplier, isAttr) {
        for (var i = 0, len = specialProps.length; i < len; i++) {
            var key = specialProps[i];

            if (key in supplier && supplier.hasOwnProperty(key)) {
                var val = supplier[key];
                receiver[key] = isAttr ? val.value : val;
            }
        }
    }

    function getInheritedAttrs(instance, specialProps) {
        var inherited = [];
        var proto = instance.constructor.prototype;

        while (proto) {
            // 不要拿到 prototype 上的
            if (!proto.hasOwnProperty('attrs')) {
                proto.attrs = {};
            }

            // 将 proto 上的特殊 properties 放到 proto.attrs 上，以便合并
            copySpecialProps(specialProps, proto.attrs, proto);

            // 为空时不添加
            if (!isEmptyObject(proto.attrs)) {
                inherited.unshift(proto.attrs);
            }

            // 向上回溯一级
            proto = proto.constructor.superclass;
        }

        // Merge and clone default values to instance.
        var result = {};
        for (var i = 0, len = inherited.length; i < len; i++) {
            result = merge(result, normalize(inherited[i]));
        }

        return result;
    }


    // 对于 attrs 的 value 来说，以下值都认为是空值： null, undefined, '', [], {}
    function isEmptyAttrValue(o) {
        return o == null || // null, undefined
                (isString(o) || isArray(o)) && o.length === 0 || // '', []
                isPlainObject(o) && isEmptyObject(o); // {}
    }

    // 判断属性值 a 和 b 是否相等，注意仅适用于属性值的判断，非普适的 === 或 == 判断。
    function isEqual(a, b) {
        if (a === b) return true;

        if (isEmptyAttrValue(a) && isEmptyAttrValue(b)) return true;

        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className != toString.call(b)) return false;

        switch (className) {

            // Strings, numbers, dates, and booleans are compared by value.
            case '[object String]':
                // Primitives and their corresponding object wrappers are
                // equivalent; thus, `"5"` is equivalent to `new String("5")`.
                return a == String(b);

            case '[object Number]':
                // `NaN`s are equivalent, but non-reflexive. An `equal`
                // comparison is performed for other numeric values.
                return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);

            case '[object Date]':
            case '[object Boolean]':
                // Coerce dates and booleans to numeric primitive values.
                // Dates are compared by their millisecond representations.
                // Note that invalid dates with millisecond representations
                // of `NaN` are not equivalent.
                return +a == +b;

            // RegExps are compared by their source patterns and flags.
            case '[object RegExp]':
                return a.source == b.source &&
                        a.global == b.global &&
                        a.multiline == b.multiline &&
                        a.ignoreCase == b.ignoreCase;

            // 简单判断数组包含的 primitive 值是否相等
            case '[object Array]':
                var aString = a.toString();
                var bString = b.toString();

                // 只要包含非 primitive 值，为了稳妥起见，都返回 false
                return aString.indexOf('[object') === -1 &&
                        bString.indexOf('[object') === -1 &&
                        aString === bString;
        }

        if (typeof a != 'object' || typeof b != 'object') return false;

        // 简单判断两个对象是否相等，只判断第一层
        if (isPlainObject(a) && isPlainObject(b)) {

            // 键值不相等，立刻返回 false
            if (!isEqual(keys(a), keys(b))) {
                return false;
            }

            // 键相同，但有值不等，立刻返回 false
            for (var p in a) {
                if (a[p] !== b[p]) return false;
            }

            return true;
        }

        // 其他情况返回 false, 以避免误判导致 change 事件没发生
        return false;
    }

    return Attribute;
});

define('app/core/app-events',[],function() {
// Events
// -----------------
// Thanks to:
//  - https://github.com/documentcloud/backbone/blob/master/backbone.js
//  - https://github.com/joyent/node/blob/master/lib/events.js


// Regular expression used to split event strings
var eventSplitter = /\s+/


// A module that can be mixed in to *any object* in order to provide it
// with custom events. You may bind with `on` or remove with `off` callback
// functions to an event; `trigger`-ing an event fires all callbacks in
// succession.
//
//     var object = new Events();
//     object.on('expand', function(){ alert('expanded'); });
//     object.trigger('expand');
//
function Events() {
}


// Bind one or more space separated events, `events`, to a `callback`
// function. Passing `"all"` will bind the callback to all events fired.
Events.prototype.on = function(events, callback, context) {
  var cache, event, list
  if (!callback) return this

  cache = this.__events || (this.__events = {})
  events = events.split(eventSplitter)

  while (event = events.shift()) {
    list = cache[event] || (cache[event] = [])
    list.push(callback, context)
  }

  return this
}

Events.prototype.once = function(events, callback, context) {
  var that = this
  var cb = function() {
    that.off(events, cb)
    callback.apply(context || that, arguments)
  }
  return this.on(events, cb, context)
}

// Remove one or many callbacks. If `context` is null, removes all callbacks
// with that function. If `callback` is null, removes all callbacks for the
// event. If `events` is null, removes all bound callbacks for all events.
Events.prototype.off = function(events, callback, context) {
  var cache, event, list, i

  // No events, or removing *all* events.
  if (!(cache = this.__events)) return this
  if (!(events || callback || context)) {
    delete this.__events
    return this
  }

  events = events ? events.split(eventSplitter) : keys(cache)

  // Loop through the callback list, splicing where appropriate.
  while (event = events.shift()) {
    list = cache[event]
    if (!list) continue

    if (!(callback || context)) {
      delete cache[event]
      continue
    }

    for (i = list.length - 2; i >= 0; i -= 2) {
      if (!(callback && list[i] !== callback ||
          context && list[i + 1] !== context)) {
        list.splice(i, 2)
      }
    }
  }

  return this
}


// Trigger one or many events, firing all bound callbacks. Callbacks are
// passed the same arguments as `trigger` is, apart from the event name
// (unless you're listening on `"all"`, which will cause your callback to
// receive the true name of the event as the first argument).
Events.prototype.trigger = function(events) {
  var cache, event, all, list, i, len, rest = [], args, returned = true;
  if (!(cache = this.__events)) return this
  events = events.split(eventSplitter)

  // Fill up `rest` with the callback arguments.  Since we're only copying
  // the tail of `arguments`, a loop is much faster than Array#slice.
  for (i = 1, len = arguments.length; i < len; i++) {
    rest[i - 1] = arguments[i]
  }

  // For each event, walk through the list of callbacks twice, first to
  // trigger the event, then to trigger any `"all"` callbacks.
  while (event = events.shift()) {
    // Copy callback lists to prevent modification.
    if (all = cache.all) all = all.slice()
    if (list = cache[event]) list = list.slice()

    // Execute event callbacks except one named "all"
    if (event !== 'all') {
      returned = triggerEvents(list, rest, this) && returned
    }

    // Execute "all" callbacks.
    returned = triggerEvents(all, [event].concat(rest), this) && returned
  }

  return returned
}

Events.prototype.emit = Events.prototype.trigger


// 扩展是否绑定了XXX方法   Mr.T
Events.prototype.hasBindEvent = function(eventName) {
  var cache = this.__events || (this.__events = {});
  var event = cache[eventName];
  return event && event.length > 1;
}
// Helpers
// -------

var keys = Object.keys

if (!keys) {
  keys = function(o) {
    var result = []

    for (var name in o) {
      if (o.hasOwnProperty(name)) {
        result.push(name)
      }
    }
    return result
  }
}

// Mix `Events` to object instance or Class function.
Events.mixTo = function(receiver) {
  receiver = isFunction(receiver) ? receiver.prototype : receiver
  var proto = Events.prototype

  var event = new Events
  for (var key in proto) {
    if (proto.hasOwnProperty(key)) {
      copyProto(key)
    }
  }

  function copyProto(key) {
    receiver[key] = function() {
      proto[key].apply(event, Array.prototype.slice.call(arguments))
      return this
    }
  }
}

//对象增强，添加event能力
Events.enhance = function (receiver) {
    if(typeof receiver !='object'){
      return;
    }
    var proto = Events.prototype
    for (var key in proto) {
        if (proto.hasOwnProperty(key)) {
            receiver[key] = proto[key]
        }
    }
}

// Execute callbacks
function triggerEvents(list, args, context) {
  var pass = true

  if (list) {
    var i = 0, l = list.length, a1 = args[0], a2 = args[1], a3 = args[2]
    // call is faster than apply, optimize less than 3 argu
    // http://blog.csdn.net/zhengyinhui100/article/details/7837127
    switch (args.length) {
      case 0: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context) !== false && pass} break;
      case 1: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1) !== false && pass} break;
      case 2: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1, a2) !== false && pass} break;
      case 3: for (; i < l; i += 2) {pass = list[i].call(list[i + 1] || context, a1, a2, a3) !== false && pass} break;
      default: for (; i < l; i += 2) {pass = list[i].apply(list[i + 1] || context, args) !== false && pass} break;
    }
  }
  // trigger will return false if one of the callbacks return false
  return pass;
}

function isFunction(func) {
  return Object.prototype.toString.call(func) === '[object Function]'
}

return Events;
});

define('app/core/app-base',["app/core/app-class","app/core/app-attribute","app/core/app-events"],function(Class,Attribute,Events) {

    // Base Events、Aspect
    /**
     *
     * @class
     * @name Base
     * @extends Class
     * @classdesc  Base 是一个基础类，提供 Class、Attrs 和  支持。
     */
    var Base = Class.create({
        Implements: [Attribute,Events],
        initialize: function(config) {
               this.initAttrs(config);
            // 对于 Base 来说，`change:attr` 事件的含义应该是在实例化后，当属性有变化
            // 时触发，初始化过程中不应该触发。
     
            // 标识实例已准备好
        	parseEventsFromInstance(this, this.attrs);
        },
        /**
         * 注销方法
         * @abstract
         * @memberof Base
         */
        destroy: function() {
            for (var p in this) {
                if (this.hasOwnProperty(p)) {
                    delete this[p];
                }
            }
        },
        bind:function(target,eventObj){
        	var evts=eventObj;
        	if (arguments.length==1){
        		evts=target;
        	}
          	for(var eventName in evts){
          		this.on(eventName,evts[eventName]);
          	}
        },
        unbind:function(trage,events){
          if (typeof events=="string"){
          		this.off(events);
          }
          if (typeof events=="array"){
          	for(var i=0,len=events.length;i<len;i++){
          		this.off(events[i]);
          	}
          }
        }
    });
   return Base;
function parseEventsFromInstance(host, attrs) {
  for (var attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      var m = '_onChange' + ucfirst(attr);
      if (host[m]) {
        host.on('change:' + attr, host[m]);
      }
    }
  }
}
function ucfirst(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
}
});

define('app/core/app-options-helper',["app/core/app-base"],function(Base){

	ConfigHelper = Base.extend({
				propsInAttrs : ["configData", "columns","buttons","editors"],
				attrs : {
					configData : {},
					columns : {},
					buttons : {},
					editors:{}
				},
				initialize : function(opt) {
					opt=opt||{};
					if (!opt.configData){
						opt={configData:opt}
					}
					this.sourceData=opt.configData||opt;
					ConfigHelper.superclass.initialize.call(this,opt);
					
					if (this.configData) {
						if (this.configData.columns) {
							this.addColumns(this.configData.columns);
						}
						if (this.configData.frozenColumns) {
							this.addColumns(this.configData.frozenColumns);
						}
						if (this.configData.frozenColumnsRight) {
							this.addColumns(this.configData.frozenColumnsRight);
						}
						if (this.configData.toolbar) {
							this.addButtons(this.configData.toolbar);
						}
					
					}
				},
				
				//添加列集合
				addColumns : function(columns) {
					if (columns) {
						for (var i = 0; i < columns.length; i++) {
							for (var j = 0; j < columns[i].length; j++) {
								this.columns[columns[i][j].id] = columns[i][j];
								if (columns[i][j]&&columns[i][j].buttons){
									this.addButtons(columns[i][j].buttons);
								}
							if (columns[i][j]&&columns[i][j].editor){
									this.addEditors(columns[i][j].id,columns[i][j].editor);
								}
						}
					}
				}
				},
				addEditors:function(id,editor){
					editor.options = editor.options||{};
				  	this.editors[id] = editor.options;
				},
				//添加按钮集合
				addButtons : function(buttons) {
					if (buttons) {
						var removeBtns=[];
						for (var i = 0; i < buttons.length; i++) {
							this.buttons[buttons[i].id]=buttons[i];
							if (!$A.cehckPageComponensById(buttons[i].id)){
								//buttons[i]=null;
								removeBtns.push(i);
							}
						}
						for(var i=0;i<removeBtns.length;i++){
							buttons.splice((removeBtns[i]-i),1);
						}
					}
					
					
				},
				getButton:function(id){
					var button=this.buttons[id],temp=new ConfigHelper(button);
					return temp;
				},
				getColumn:function(id){
					var column=this.columns[id],tem=new ConfigHelper(column);
					return tem;
					
				},
				getEditor:function(id){
					var editor=this.editors[id],temp=new ConfigHelper(editor);
					return temp;
				},
			    setAttr:function(attrName,value){
			    	this.sourceData[attrName]=value;
			    },
			    setAttrs:function(attrs){
			    	if (attrs){
				    	for(var key in attrs){
				    		this.sourceData[key]=attrs[key];
				    	}
			    	}
			    }
			});
			return ConfigHelper;
	
});
/**
 * 针对jquery增加核心的扩展
 */
define('app/core/app-jquery',["jquery","app/core/app-core","base/pinyin","app/core/app-options-helper"],function($,$A,$pinyin,ConfigHelper){
	
	
	/**
	 * 空方法
	 */
	$.emptyFunction = function(){};
	
	$.isEmpty = function(v, allowBlank){
            return v === null || v === undefined || (($.isArray(v) && !v.length)) || (!allowBlank ? v === '' : false);
    };
	$.extend($.fn,{

		escapeHtml : function(str) {
			if (str) {
				//str = str.replace(/&/g, '&amp;');
				str = str.replace(/</g, '&lt;');
				str = str.replace(/>/g, '&gt;');
				str = str.replace(/"/g, '&quot;');
				str = str.replace(/'/g, '&#039;');
			}
			return str;
		},
		unescapeHtml:function(str){
			if (str) {
				//str = str.replace(/&amp;/g, '&');
				str = str.replace(/&lt;/g, '<');
				str = str.replace(/&gt;/g, '>');
				str = str.replace(/&quot;/g, '"');
				str = str.replace(/&#039;/g, '\'');
			}
			return str;
		},
		/**
		 * 初始化方法
		 */
		initPageUI:function(){
			$A.init(this);
		},
		/**
		 * 清除js对象缓存
		 */
		clearAppJsObject:function(){
			$(this).removeAttr("__jsappobj");
			$(this)[0].__jsappobj=null;
		},
		/**
		 * 设置js对象缓存
		 */
		setAppJsObject:function(jsParam,jsobjs){
			$(this).attr("__jsappobj","true");
			$(this)[0].__jsappobj={
				param:jsParam,
				objs:jsobjs
			};
		},
		/**
		 * 取得js对象缓存
		 * @return {Object}带有param和objs属性,param为参数名,objs为js对象数组
		 */
		getAppJsObject:function(){
			var $this=$(this)
			,$parents = $this.parents("[__jsappobj]")
			,jsobj = $this[0].__jsappobj
			,params=null
			,jsobjs=null;
			if(jsobj != null && typeof jsobj=="object" && $.isArray(jsobj.param) && $.isArray(jsobj.objs)){
				params=jsobj.param;
				jsobjs = jsobj.objs;
			}else{
				params=[];
				jsobjs =[];
			}
			$parents.each(function(){
				var $p=$(this)
				,j = this.__jsappobj;
				if(j == null)
					return;
				if(!$.isArray(j.param) || !$.isArray(j.objs))
					return;
				var jp=j.param,jo=j.objs;
				for(var i = 0; i < jp.length; i++){
					if($.inArray(jp[i],params)<0){
						params.push(jp[i]);
						jsobjs.push(jo[i]);
					}
				}
			});
			if(params.length == 0)
				return null;
			return {param:params.join(","),objs:jsobjs};
		},
		/**
		 * 获取带有引入js对象的方法
		 */
		getJsFunction:function(funcstr,target){
			var o = $(this).getAppJsObject();
			if(o){
				var f = new Function(o.param,"return function(){"+funcstr+"};");
				return f.apply(o,o.objs);
			}
			return new Function(funcstr);
		},
		/**
		 * 获取一个元素上的json形式的属性值
		 * add by tw
		 * @param attrName
		 * @returns
		 */
		getJsonAttr:function(attrName){
			var o = $(this).getAppJsObject() || {
				"param":"",
				"objs":[]
			};
			var attrValue = $(this).attr(attrName);
			var id= $(this).attr("id");
			
			
		//	try{
				var f = new Function(o.param,"return ("+attrValue+")");
				//console.log(o.objs);
				var attrValue=f.apply(this,o.objs);
				if (o.objs&&o.objs.length>0&&id){
					var initJsObj=o.objs[0];
					if (initJsObj.uiExtConfig){
						var uiExtConfig=initJsObj.uiExtConfig;
						if (uiExtConfig[id]&&$.isFunction(uiExtConfig[id])){
							attrValue["beforeRender"]=function(config){
									//重置初始化对象
									var confighelper=new ConfigHelper(config);
									uiExtConfig[id].call(this,confighelper);
								
							};
						}
						
					}
					
				}
				//console.log(id);
				//console.log(attrValue)
				return attrValue;
			/*}catch(e){
				alert(attrValue);
					alert(o.param);
				window.alert(e);
				return {};
			}*/
		},
		// 2014-09-24 add function  by sjq
		/**
		 * 
		 * @example  
		 * var funobj=$A.getPageJsFunction("test.add");
		 * if ($.isFunction(funobj)){
		 *     //funobj() or funobj.call() or funobj.apply;
		 * }
		 * 
		 * 获取页面中的js方法
		 * @param funcstr
		 * @param target
		 * @returns
		 *
		 */
		getPageJsProperty:function(funcstr,target){
			var o = $(this).getAppJsObject();
			if(o){
				var f = new Function(o.param,"if (typeof "+funcstr+" !== 'undefined') return "+funcstr+";");
				return f.apply(o,o.objs);
			}
			return null;
		},
		/**
		 * 获取带有引入js对象的方法
		 */
		getJsCacheFunc:function(funcstr,target){
			var $this = $(this)
			,func = $this.data("jsfunction");
			if(func){
				return func;
			}
			func = $this.getJsFunction(funcstr,target);
			$this.data("jsfunction",func);
			return func;
		},
		/**
		 * 获取带有引入js对象的方法
		 */
		getJsEvent:function(events){
			var o = $(this).getAppJsObject();
			if(o){
				var f = new Function(o.param,'var e = '+events+';return e;');
				return f.apply(o,o.objs);
			}
			return $A.jsonEval(events);
		},
		/**
		 * 判断当前元素的是否为指定的标签
		 * @param tn 指定的标签
		 */
		isTag:function(tn) {
			if(!tn) return false;
			return $(this)[0].tagName.toLowerCase() == tn?true:false;
		},
		/**
		 * 鼠标悬浮样式处理
		 * @param className{String}样式名
		 * @param speed 加载速度
		 */
		hoverClass: function(className, speed){
			var _className = className || "hover";
			return this.each(function(){
				var $this = $(this), mouseOutTimer;
				$this.hover(function(){
					if (mouseOutTimer) clearTimeout(mouseOutTimer);
					$this.addClass(_className);
				},function(){
					mouseOutTimer = setTimeout(function(){$this.removeClass(_className);}, speed||10);
				});
			});
		},
		/**
		 * 聚焦样式处理
		 * @param className{String}样式名
		 */
		focusClass: function(className){
			var _className = className || "textInputFocus";
			return this.each(function(){
				$(this).focus(function(){
					$(this).addClass(_className);
				}).blur(function(){
					$(this).removeClass(_className);
				});
			});
		},
		/**
		 * 判断当前元素是否已经绑定某个事件
		 * @param {Object} type
		 */
		isBind:function(type) {
			var _events = $(this).data("events");
			return _events && type && _events[type];
		},
		/**
		 * 取得dom元素的指定数值属性值
		 * @param pre{string} 数值属性一般为left,width等
		 * @param {number} 属性值
		 */
		cssNum:function(pre){
			var cssPre = $(this).css(pre);
			return cssPre.substring(0, cssPre.indexOf("px")) * 1;
		},
		
		/**
		 * 判断两个jquery对象是否相等
		 * @param obj2{jqueryObject} jquery对象
		 */
		equalObject:function(obj){
			var $this = (this);
			if($this.length == 0 && (obj == null||obj.length==0))
				return true;
			if(obj == null)
				return false;
			if($this.length != obj.length)
				return false;
			for(var i = 0; i < obj.length; i++){
				if($this[i] != obj[i])
					return false;
			}
			return true;
		},
		/**
		 * parse options, including standard 'data-options' attribute.
		 * 
		 * calling examples:
		 * parseOptions(target);
		 * parseOptions(target, ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
		 */
		parseOptions: function(target, properties){
			var t = $(target);
			var options = {};
			var o = $(target).getAppJsObject() || {
				"param":"",
				"objs":[]
			};
			var s = $.trim(t.attr('data-options'));
			if (s){
				if (s.substring(0, 1) != '{'){
					s = '{' + s + '}';
				}
				//options = (new Function(o.param'return ' + s))();
				
				
				var f = new Function(o.param,"return ("+s+")");
				//console.log(o.objs);
				var options=f.apply(this,o.objs);
			}
			for( key in options){
				if ($.isEmpty(options[key])){
					delete options[key];
				}
			}
			$.map(['width','height','left','top','minWidth','maxWidth','minHeight','maxHeight'], function(p){
				if (!target.style){
					console.log(target);
				}
			
				var pv = $.trim(target.style[p] || '');
				if (pv){
					if (pv.indexOf('%') == -1){
						pv = parseInt(pv) || undefined;
					}
					options[p] = pv;
				}
			});
				
			if (properties){
				var opts = {};
				for(var i=0; i<properties.length; i++){
					var pp = properties[i];
					if (typeof pp == 'string'){
						opts[pp] = t.attr(pp);
					} else {
						for(var name in pp){
							var type = pp[name];
							if (type == 'boolean'){
								opts[name] = t.attr(name) ? (t.attr(name) == 'true') : undefined;
							} else if (type == 'number'){
								opts[name] = t.attr(name)=='0' ? 0 : parseFloat(t.attr(name)) || undefined;
								if(!opts[name]&&options[name]){
									options[name]=parseFloat(options[name]);
								}
							}
						}
					}
				}
				$.extend(options, opts);
			}
			return options;
		},
		
		/**
	 * extend plugin to set box model width
	 */
	_outerWidth : function(width){
		if (width == undefined){
			if (this[0] == window){
				return this.width() || document.body.clientWidth;
			}
			return this.outerWidth()||0;
		}
		return this._size('width', width);
	},
	
	/**
	 * extend plugin to set box model height
	 */
	_outerHeight : function(height){
		if (height == undefined){
			if (this[0] == window){
				return this.height() || document.body.clientHeight;
			}
			return this.outerHeight()||0;
		}
		return this._size('height', height);
	},
	
	_scrollLeft : function(left){
		if (left == undefined){
			return this.scrollLeft();
		} else {
			return this.each(function(){$(this).scrollLeft(left)});
		}
	},
	parseValue:function (property, value, parent, delta){
		delta = delta || 0;
		var v = $.trim(String(value||''));
		var endchar = v.substr(v.length-1, 1);
		if (endchar == '%'){
			v = parseInt(v.substr(0, v.length-1));
			if (property.toLowerCase().indexOf('width') >= 0){
				v = Math.floor((parent.width()-delta) * v / 100.0);
			} else {
				v = Math.floor((parent.height()-delta) * v / 100.0);
			}
		} else {
			v = parseInt(v) || undefined;
		}
		return v;
	},
	_size : function(options, parent){
		var _slef=this;
		if (typeof options == 'string'){
			if (options == 'clear'){
				return this.each(function(){
					$(this).css({width:'',minWidth:'',maxWidth:'',height:'',minHeight:'',maxHeight:''});
				});
			} else if (options == 'unfit'){
				return this.each(function(){
					_fit(this, $(this).parent(), false);
				});
			} else {
				if (parent == undefined){
					return _css(this[0], options);
				} else {
					return this.each(function(){
						_css(this, options, parent);
					});
				}
			}
		} else {
			return this.each(function(){
				parent = parent || $(this).parent();
				$.extend(options, _fit(this, parent, options.fit)||{});
				var r1 = _setSize(this, 'width', parent, options);
				var r2 = _setSize(this, 'height', parent, options);
				if (r1 || r2){
					$(this).addClass('app-fluid');
				} else {
					$(this).removeClass('app-fluid');
				}
			});
		}
		
		function _fit(target, parent, fit){
			var t = $(target)[0];
			var p = parent[0];
			var fcount = p.fcount || 0;
			if (fit){
				if (!t.fitted){
					t.fitted = true;
					p.fcount = fcount + 1;
					$(p).addClass('panel-noscroll');
					if (p.tagName == 'BODY'){
						$('html').addClass('panel-fit');
					}
				}
				return {
					width: ($(p).width()||1),
					height: ($(p).height()||1)
				};
			} else {
				if (t.fitted){
					t.fitted = false;
					p.fcount = fcount - 1;
					if (p.fcount == 0){
						$(p).removeClass('panel-noscroll');
						if (p.tagName == 'BODY'){
							$('html').removeClass('panel-fit');
						}
					}
				}
				return false;
			}
		}
		
		function _setSize(target, property, parent, options){
			var t = $(target);
			var p = property;
			var p1 = p.substr(0,1).toUpperCase() + p.substr(1);
			var min = _slef.parseValue('min'+p1, options['min'+p1], parent);// || 0;
			var max = _slef.parseValue('max'+p1, options['max'+p1], parent);// || 99999;
			var val = _slef.parseValue(p, options[p], parent);
			var fluid = (String(options[p]||'').indexOf('%') >= 0 ? true : false);
			if (!isNaN(val)){
				var v = Math.min(Math.max(val, min||0), max||99999);
				if (!fluid){
					options[p] = v;
				}
				t._size('min'+p1, '');
				t._size('max'+p1, '');
				t._size(p, v);
			} else {
				t._size(p, '');
				t._size('min'+p1, min);
				t._size('max'+p1, max);
			}
			return fluid || options.fit;
		}
		function _css(target, property, value){
			var t = $(target);
			if (value == undefined){
				value = parseInt(target.style[property]);
				if (isNaN(value)){return undefined;}
				if ($._boxModel){
					value += getDeltaSize();
				}
				return value;
			} else if (value === ''){
				t.css(property, '');
			} else {
				if ($._boxModel){
					value -= getDeltaSize();
					if (value < 0){value = 0;}
				}
				t.css(property, value+'px');
			}
			function getDeltaSize(){
				if (property.toLowerCase().indexOf('width') >= 0){
					return t.outerWidth() - t.width();
				} else {
					return t.outerHeight() - t.height();
				}
			}
		}
	}
	});
	
	
	
	/**
	 * 扩展String方法
	 */
	$.extend(String.prototype, {
		/**
		 * 字符串是否为正整数
		 */
		isPositiveInteger:function(){
			return (new RegExp(/^[1-9]\d*$/).test(this));
		},
		/**
		 * 字符串是否为整数
		 */
		isInteger:function(){
			return (new RegExp(/^\d+$/).test(this));
		},
		/**
		 * 字符串是否为数值型
		 */
		isNumber: function(value, element) {
			return (new RegExp(/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/).test(this));
		},
		/**
		 * 去字符串的前后空格
		 */
		trim:function(){
			return this.replace(/(^\s*)|(\s*$)|\r|\n/g, "");
		},
		/**
		 * 当前字符串进行转码
		 */
		trans:function() {
			return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '"');
		},
		/**
		 * 全部替换字符串
		 * @param os 需要替换字符串正则表达式
		 * @param ns 替换的字符串
		 * @return 替换结果
		 */
		replaceAll:function(os, ns) {
			return this.replace(new RegExp(os,"gm"),ns);
		},
		/**
		 * 模板替换
		 * @param $data 上下文书局
		 * @return 替换结果串
		 */
		evalTm:function($data) {
			if (!$data) return this;
			return this.replace(RegExp("({[A-Za-z_]+[A-Za-z0-9_{\\\\\\.}]*})","g"), function($1){
				var v = $data[$1.replace(/[{}]+/g, "")];
				return v?v:$1;
			});
		},
		/**
		 * 通过指定元素内容里包含的元素id为上下文的变量名，元素值为变量值进行模板替换
		 * @param _box 模板替换的范围
		 * @return 替换结果
		 */
		evalTmById:function(_box) {
			var $parent = _box || $(document);
			return this.replace(RegExp("({[A-Za-z_]+[A-Za-z0-9_{\\\\\\.}]*})","g"), function($1){
				var $input = $parent.find("#"+$1.replace(/[{}]+/g, ""));
				return $input.size() > 0 ? $input.val() : $1;
			});
		},
		/**
		 * 通过指定元素内容里包含的元素id为上下文的变量名，元素值为变量值进行模板替换
		 * @param _box 模板替换的范围
		 * @return 替换结果
		 */
		evalTmByAttr:function(t) {
			if(!t)
				return this.toString();
			var $t =$(t);
			return this.replace(RegExp("({[A-Za-z_]+[A-Za-z0-9_{\\\\\\.}]*})","g"), function($1){
				var attr= $1.replace(/[{}]+/g, "");
				var v = attr=='text'?$t.text():(attr=='value'|| attr=='val')?$t.val()||$t.attr(attr):$t.attr(attr);
				return v || $1;
			});
		},
		/**
		 * 转换模板串
		 */
		evalTemplate:function(el){
			if(this.isFinishedTm())
				return this.toString();
			var $el = $(el)
			,box = $el.attr("evalTarget")||el||document
			,$box=$(box);
			var val = this.evalTmById($box);
			val = this.evalTmByAttr($el.attr("evalTarget")||el);
			if (!val.isFinishedTm() && $el.attr("eval-warn")) {
				$A.messager.error($el.attr("eval-warn"));
				return false;
			}
			return val;
		},
		/**
		 * 模板替换是否完成
		 * @return 布尔值
		 */
		isFinishedTm:function(){
			return !(new RegExp("{[A-Za-z_]+[A-Za-z0-9_]*}").test(this)); 
		},
		/**
		 * 去掉字符串前面指定的字母
		 */
		skipChar:function(ch) {
			if (!this || this.length===0) {return '';}
			if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}
			return this;
		},
		/**
		 * 判断是否为合格的密码串
		 */
		isValidPwd:function() {
			return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); 
		},
		/**
		 * 判断是否为邮件地址串
		 */
		isValidMail:function(){
			return(new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/).test(this.trim()));
		},
		/**
		 * 判断当前串是否为空串
		 */
		isSpaces:function() {
			for(var i=0; i<this.length; i+=1) {
				var ch = this.charAt(i);
				if (ch!=' '&& ch!="\n" && ch!="\t" && ch!="\r") {return false;}
			}
			return true;
		},
		/**
		 * 是否为电话号码
		 */
		isPhone:function() {
			return (new RegExp(/(^([0-9]{3,4}[-])?\d{3,8}(-\d{1,6})?$)|(^\([0-9]{3,4}\)\d{3,8}(\(\d{1,6}\))?$)|(^\d{3,8}$)/).test(this));
		},
		/**
		 * 是否为url地址
		 */
		isUrl:function(){
			return (new RegExp(/^[a-zA-z]+:\/\/([a-zA-Z0-9\-\.]+)([-\w .\/?%&=:]*)$/).test(this));
		},
		/**
		 * 判断是否为外部地址
		 */
		isExternalUrl:function(){
			return this.isUrl() && this.indexOf("://"+document.domain) == -1;
		},
		/**
		 * 获取汉字拼音首字母串
		 * @return {String}拼音首字母串
		 */
		toInitials:function() {
			return $pinyin.toInitials(this);
		},
		/**
		 * 获取汉字拼音大写首字母串
		 * @return {String}大写的拼音首字母串
		 */
		toUpperInitials:function() {
			return $pinyin.toUpperInitials(this);
		},
		
		/**
		 * 获取汉字拼音串
		 * @param ch{String}拼音字符串
		 * @return {String}汉字拼音串
		 */
		toPinyin:function() {
			return $pinyin.toPinyin(this);
		},
		
		/**
		 * 获取汉字首字母大写的拼音串
		 * @return {String}首字母大写的拼音串
		 */
		toCapPinyin:function() {
			return $pinyin.toCapPinyin(this);
		}
		
	});
	return $;
});
define('app/app-funcbase',["app/core/app-jquery","app/core/app-core"],function ($,$A) {
	/**
	 * 系统函数库
	 */
	return {
		
		/**
		 * 打开对话框
		 */
		openDialog:function(options){
			if(typeof options === "string"){
				options = {url:options};
			}
			var path = options["url"];
			if(!path)
				return;
			if(path.indexOf(_contextPath)!=0){
				if(path.indexOf("/")!=0){
					path="/"+path;
				}
				path=_contextPath+path;
			}
			var dialogId = options["dialogId"];
			if(!dialogId){
				dialogId = "dialog"+$A.nextId();
				options["dialogId"]=dialogId;
				options["data-target"]="#"+dialogId;
			}
			options["url"]=path;
			require(["app/widgets/window/app-dialog"],function(){
				$.openModalDialog(options);
			});
		},
		
		/**
		 * 通过指定的表单地址在对话框中编辑当前选中列表数据
		 */
		editGridRowDialog:function(options){
			var that = this;
			require(["app/widgets/window/app-dialog","app/widgets/window/app-messager"],function($dialog,$messager){
				var gridId = options["gridId"];
				if(!gridId){
					$messager.error("请指定列表对象！");
					return;
				}
				var $grid = $A("#"+gridId);
				if($grid.length==0){
					$messager.error("请指定列表对象！");
					return;
				}
				var id = $grid.bsgrid('getSelectRowId');
				if (id)	{
					options["params"]={id:id};
					$.openModalDialog(options);
				} else { $messager.warn("请选中一行数据后再编辑！");}
			});
		},
		/**
		 * 通过指定的表单地址在对话框中编辑当前选中列表数据
		 */
		deleteGridSelRows:function(options){
			require(["app/widgets/window/app-messager","app/data/app-ajax"],function($messager,$ajax){
				var gridId = options["gridId"];
				if(!gridId){
					$messager.error("请指定列表对象！");
					return;
				}
				var $grid = $("#"+gridId);
				if($grid.length==0){
					$messager.error("请指定列表对象！");
					return;
				}
				var delUrl = options["delUrl"];
				if(!delUrl){
					$messager.error("请指定删除数据的服务地址！");
					return
				}
				if(!delUrl.startsWith("/")){
					delUrl="/"+delUrl;
				}
				delUrl = _contextPath + delUrl;
				var ids = $grid.bsgrid('getSelectRowId');
				if (ids&& ids.length>0)	{
					var op = {
							type:'POST',
							url:delUrl,
							data:{ids:ids},
							dataType:"json",
							cache: false,
							beforeCall:'confirmPrompt',
							confirm:"确认删除这些数据吗？",
							afterCall:'refreshTable'
						};
					$ajax.ajaxCall(op);
				} else { $messager.warn("请选中需要删除的数据！");}
			});
		},
		/**
		 * 通过指定的表单地址在对话框中编辑当前选中列表数据
		 */
		editSingleDataDialog:function(options){
			var that = this;
			require(["app/widgets/window/app-dialog","app/widgets/window/app-messager"],function($dialog,$messager){
				var loadUrl = options["url"];
				if(!loadUrl){
					$messager.error("请指定加载表单数据的服务地址！");
					return;
				}
				if(!loadUrl.startsWith("/")){
					loadUrl="/"+loadUrl;
				}
				loadUrl = _contextPath + loadUrl;
				var id=options["id"];
				if(!id){
					$messager.error("参数设置错误！");
					return;
				}
				options["params"]={id:id};
				options["url"]=loadUrl;
				$.openModalDialog(options);
			});
		},
		/**
		 * 通过指定的表单地址在对话框中编辑当前选中列表数据
		 */
		deleteSingleData:function(options){
			require(["app/widgets/window/app-messager","app/data/app-ajax"],function($messager,$ajax){
				var delUrl = options["url"];
				if(!delUrl){
					$messager.error("请指定删除数据的服务地址！");
					return;
				}
				if(!delUrl.startsWith("/")){
					delUrl="/"+delUrl;
				}
				delUrl = _contextPath + delUrl;
				var id=options["id"];
				if(!id){
					$messager.error("参数设置错误！");
					return;
				}
				var op = {
					type:'POST',
					url:delUrl,
					data:{id:id},
					dataType:"json",
					cache: false,
					beforeCall:'confirmPrompt',
					confirm:options[confirm]||"确认删除这些数据吗？",
					afterCall:'refreshTable'
				};
				$ajax.ajaxCall(op);
			});
		},
		/**
		 *  保存表单对话框
		 */
		saveFormDialog:function(options){
			if(typeof options === "string"){
				options = {formId:options};
			}
			var container = $A.getContainer();
			require(["app/widgets/form/app-form"],function(){
				var formId = options["formId"];
				if(formId){
					$("#"+options["formId"],container).submitForm(options);
				}else{
					$("form",container).submitForm(options);
				}
			});
		},
		/**
		 * grid列转义 0-->""  1-->√
		 */
		transferGridColumn:function(cellvalue, options, rowObject){
			
			return cellvalue == '1' ? "<font color='green'>√</font>" : "";
		},
		transferGridColumn2:function(cellvalue, options, rowObject){
			if(cellvalue == undefined){
				return '';
			}else{
				return cellvalue == '1' ? "<font color='green'>√</font>" : "<font style='color:red !Important'>╳</font>";
			}

		},
		/**
		 * form列转义 0-->""  1-->√
		 */
		transferFormColumn:function(value){
			 
			return value == '1' ? "<font color='green'>√</font>" : "";
			 
		},
		/**
		 * 关闭对话框
		 */
		closeDialog:function(){
			$A.dialog.closeCurrent();
		}
	}
});
define(
		'app/app-pagebase',[ "app/core/app-base" ],
		function(Base){
			
			PageBase = Base.extend({
				initialize:function(){
					PageBase.superclass.initialize.call(this);
					this.initUIExtConfig();
				},
				init:function(){
					this.bindEvents();
					this.initPage(arguments[0]);
				},
				/**
				 * @event
				 * 页如初始化
				 */
				initPage:function(model){
				
				},
				initUIExtConfig:function(){},
				listeners :{
				},
				contorlType:{
				"button":"button",
				"form":"form",
				"menubutton":"menubutton",
				"panel":"panel",
				"jqgrid":"jqgrid",
				"grid":"grid",
				"textbox":"textbox",
				"money":"money",
				"number":"number",
				"typeahead ":"typeahead",
				"combobox":"combobox",
				"combo":"combo",
				"comboztree":"comboztree",
				"reference":"reference",
				"combogrid":"combogrid",
				"suggest":"suggest",
				"datetime":"datetime",
				"checkbox":"checkbox",
				"upload":"upload",
				"appTabs":"appTabs",
				"tabs":"tabs",
				"ztree":"ztree",
				"xquery":"xquery"
				},
				/**
				 * @event
				 * 初始事件绑定
				 */
			  	bindEvents:function(){
			  		for(var key in this.listeners){
			  		
			  		var events=this.listeners[key],control=$A("#"+key),findEvent=false,className="";
			  		
			  		 
			  		  	if (!control){
			  		  		if (window.console){
			  		  			console.log("id:"+key+"控件不在在");
			  		  		}
			  		  	}
			  		 
				  		if (control.data){
				  			for(var controlTypeKey in this.contorlType){
					  			if (control.data(controlTypeKey)!=undefined){
					  				 className=this.contorlType[controlTypeKey];
				  					 break;
					  			}  
					  		} 
					  		for(var eventName in events){
					  			if (className){
						  			var eventObj={};
				  					eventObj[eventName]=events[eventName];
				  					control[className]("unbind",eventName);
				  					control[className]("bind",eventObj);
					  			}else{
					  				control.off(eventName,events[eventName]);
					  				control.on(eventName,events[eventName]);
					  				
					  			}
					  		}
				  		}else if (control.setting){
				  			for(var eventName in events){
				  				control.off(eventName,events[eventName]);
				  				control.on(eventName,events[eventName]);
					  		}
				  		}
			  		}
			  		/*if (key.indexOf("_")>-1){
			  			var eventparams=key.split("_");
			  			if (eventparams.length==2){
			  				var id=eventparams[0],eventName=eventparams[1],control=$A("#"+id),findEvent=false;;
			  				for(var controlTypeKey in this.contorlType){
			  					if (control){
			  					if (control.data(controlTypeKey)){
			  						var className=this.contorlType[controlTypeKey];
			  						var eventObj={};
			  						eventObj[eventName]=this.listeners[key];
			  						control[className]("bind",eventObj);
			  						findEvent=true;
			  						break;
			  					}
			  					}
			  				}
			  				if (!findEvent){
			  					control.on(eventName,this.listeners[key]);
			  				}
			  
			  			}
			  		}*/
			  	
			  	
			  	}

		       
    		});
			
		 return PageBase;
			
		
});
/**
 * 系统选项设置
 */
define('app/widgets/app-frags',["app/core/app-core"],function($A){
	$A.frags={
			//aoo.dialog
			dialogFrag:'<div class="dialog" id="${dialogId}" >'
					+'<div class="dialog-header" onselectstart="return false;" oncopy="return false;" onpaste="return false;" oncut="return false;">'
						+'<div class="closebg"><a class="close">×</a></div>'
						+'<h5>${title}</h5>'
					+'</div>'
				+'</div>'
			,
			//app.dialog
			dialogNoHeaderFrag:'<div class="dialog" id="${dialogId}" style="visibility:hidden;"></div>'
			,
			// app.dialog shadow
			dialogProxy:'<div id="dialogProxy" class="dialog dialogProxy">'
						//+'<div class="dialog-header" >'
						//+'<div class="closebg"></div>'
						//+'<h5></h5>'
						//+'</div>'
					+'</div>'
			,
			//other  fragment
			globalBodyFrag:'<!--遮盖屏幕-->'
				+'<div id="_alertBackground" class="alertBackground"></div>'
				+'<div id="_dialogMask" class="dialog-mask"></div>'
			,
			//app.alertMsg
			alertBoxFrag:'<div id="_alertMsgBox" class="alert"><div class="alertContent"><i class="${icon}"></i><span><a href="javascript:void(0)" onclick="$A.messager.toggleDetail();">${message}</a></span><tpl if=\"\'${detail}\'!=\'\'\"><div id="__alertDetails" class="alertDetail" style=\"display:none;\">${detail}</div></tpl></div><div class="alertFooter"><div class="btn-toolbar">${butFragment}</div></div></div>'
			,
			alertBoxFrag_NoDetail:'<div id="_alertMsgBox" class="alert"><div class="alertContent"><i class="${icon}"></i><span>${message}</span><tpl if=\"\'${detail}\'!=\'\'\"><div id="__alertDetails" class="alertDetail" style=\"display:none;\">${detail}</div></tpl></div><div class="alertFooter"><div class="btn-toolbar">${butFragment}</div></div></div>'
			,
			//tips
			tipsBoxFrag:'<div id="_tipsMsgBox" class="tips"><div class="tipsContent"><i class="${icon}"></i><span><a href="javascript:void(0)">${message}</a></span></div></div>'
			,
			alertButFrag:'<a class="btn #css#" rel="#callback#" onclick="$A.messager.close()" href="javascript:">#butMsg#</a>'
			,
			navTabCM:'<ul id="navTabCM">'
					+'<li rel="reload">刷新标签页</li>'
					+'<li rel="closeCurrent">关闭标签页</li>'
					+'<li rel="closeOther">关闭其它标签页</li>'
					+'<li rel="closeAll">关闭全部标签页</li>'
				+'</ul>'
			,
			dialogCM:'<ul id="dialogCM">'
					+'<li rel="closeCurrent">关闭弹出窗口</li>'
					+'<li rel="closeOther">关闭其它弹出窗口</li>'
					+'<li rel="closeAll">关闭全部弹出窗口</li>'
				+'</ul>'
			,
			externalFrag:'iframe src="{url}" style="width:100%;height:{height};" frameborder="no" border="0" marginwidth="0" marginheight="0"></iframe>'
			,
			statusCode_503:'服务器当前负载过大或者正在维护!'
			,
			validateFormError:'提交数据不完整，{0}个字段有错误，请改正后再提交!'
			,
			sessionTimout:'会话超时，请重新登录!'
			,
			alertSelectMsg:'请选择信息!'
			,
			forwardConfirmMsg:'继续下一步!'
			,
			mainTabTitle:'我的主页'
	};
	return $A.frags;
});
define('app/widgets/window/app-messager',["app/core/app-jquery","app/core/app-core","app/widgets/app-frags",localeFile],function($,$A,$frags,$lang) {
	var $msglang = $lang.messager;
	var that = null;
	that = {
			
		/**
		 * 消息框id
		 */
		_boxId: "#_alertMsgBox",
		
		/**
		 * Tips框ID
		 */
		_tipsId:"#_tipsMsgBox",
		
		/**
		 * 消息框背景
		 */
		_bgId: "#_alertBackground",
		
		/**
		 * 关闭时长
		 */
		_closeTimer: null,
		
		/**
		 * 消息类型
		 */
		_types: {error:"error", info:"info", warn:"warn", correct:"correct", confirm:"confirm"},

		/**
		 * 取得消息框标题
		 */
		_getTitle: function(key){
			return $msglang[key.toUpperCase()];
		},
		
		/**
		 * 按回车键事件
		 */
		_keydownOk: function(event){
			if (event.keyCode == $A.keyCode.ENTER) event.data.target.trigger("click");
		},
		
		/**
		 * 按取消键事件
		 */
		_keydownEsc: function(event){
			if (event.keyCode == $A.keyCode.ESC||event.keyCode == $A.keyCode.ENTER) event.data.target.trigger("click");
		},
		toggleDetail:function(){
			$('#__alertDetails').toggle();
			this.relayout();
		},
		relayout:function(){
			var $box=$(this._boxId);
			var pos = $box.attr("pos");
			if(pos == "top"){
				$box.css( {"left":($(window).width() - $box.width())/2 + "px","top":"0px"});
			}else if(pos=="bottom"){
				$box.css( {"bottom":"0px","right":"0px"});
			}else{
				$box.css( {"left":($(window).width() - $box.width())/2 + "px","top":($(window).height() - $box.height())/2 + "px"} );
			}
		},
		/**
		 * 打开消息框
		 * @param {Object} type 消息类型
		 * @param {Object} msg 消息内容
		 * @param {Object} buttons [button1, button2] 消息按钮
		 */
		_open: function(type, msg, buttons,pos){
			$(this._boxId).remove();
			var butsHtml = "";
			if (buttons) {
				for (var i = 0; i < buttons.length; i++) {
					var sRel = buttons[i].call ? "callback" : "";
					var css = buttons[i].css ? buttons[i].css : "";
					butsHtml += $frags["alertButFrag"].replace("#butMsg#", buttons[i].name).replace("#callback#", sRel).replace("#css#", css);
				}
			}
			var msgObj;
			if(typeof msg=="string"){
				msgObj=$A.jsonEval(msg);
			}else{
				msgObj=msg;
			}
			
			if(msgObj.message == null&&msgObj.detail==null){
				msgObj={
					type:type,
					icon:type,
					title:this._getTitle(type),
					message:msg,
					butFragment:butsHtml
				};
			}else{
				msgObj = $.extend({
					type:type,
					icon:type,
					title:this._getTitle(type),
					butFragment:butsHtml
				},msgObj);
			}
			var tpl = msgObj.detail?$frags["alertBoxFrag"]:$frags["alertBoxFrag_NoDetail"];
			
			var boxHtml = $template(tpl,msgObj);
			$(boxHtml).appendTo("body");
			var $box=$(this._boxId);
			$box.attr("pos",pos);
			this.relayout();
			
			if (this._closeTimer) {
				clearTimeout(this._closeTimer);
				this._closeTimer = null;
			}
			if (this._types.info == type || this._types.correct == type){
				this._closeTimer = setTimeout(function(){that.close();}, 3500);
			} else {
				$(this._bgId).show();
			}
			
			var jButs = $(this._boxId).find("a.btn");
			var jCallButs = jButs.filter("[rel=callback]");
			var jDoc = $(document);
			for (var i = 0; i < buttons.length; i++) {
				if (buttons[i].call) jCallButs.eq(i).click(buttons[i].call);
				if (buttons[i].keyCode == $A.keyCode.ENTER) {
					jDoc.bind("keydown",{target:jButs.eq(i)}, this._keydownOk);
				}
				if (buttons[i].keyCode == $A.keyCode.ESC) {
					jDoc.bind("keydown",{target:jButs.eq(i)}, this._keydownEsc);
				}
			}
			return $box;
		},
		
		/**
		 * 关系消息框
		 */
		close: function(fadeSpeed){
			$(document).unbind("keydown", this._keydownOk).unbind("keydown", this._keydownEsc);
			$msgBox = $(this._boxId);
			//var pos = $msgBox.attr("pos");
			if(fadeSpeed){
				$msgBox.fadeOut(fadeSpeed,function(){
					$msgBox.remove();
				});
			}else{
				$msgBox.hide();
				setTimeout(function(){
						$msgBox.remove();
				}, 500);
				$(this._bgId).hide();
			}
			
		},
		
		/**
		 * 打开错误消息框
		 */
		error: function(msg, options) {
			this._alert(this._types.error, msg, options);
		},
		
		/**
		 * 打开普通消息框
		 */
		info: function(msg, options) {
			this._alert(this._types.info, msg, options,"bottom");
		},
		
		/**
		 * 打开警告消息框
		 */
		warn: function(msg, options) {
			this._alert(this._types.warn, msg, options);
		},
		
		/**
		 * 打开成功消息框
		 */
		correct: function(msg, options) {
			this._tips(this._types.correct, msg, options,"center");
		},
		
		/**
		 * 打开消息框
		 */
		_alert: function(type, msg, options,pos) {
			
			var op = {okName:$msglang.OK, okCall:null,okCss:"btn-primary singlebtn"};
			$.extend(op, options);
			var buttons = [
				{name:op.okName, call: op.okCall, keyCode:$A.keyCode.ENTER,css:op.okCss}
			];
			var $dlg=this._open(type, msg, buttons,pos);
			$("a",$dlg).focus();
		},
		
		_tips:function(type,msg,options,pos){
			$(this._tipsId).remove();
			var msgObj = {
					"icon":type,
					"message":msg
			};
			
			options = options||{};
			var displayTime = options.displayTime || 1500;//默认两秒
			var fadeSpeed = options.fadeSpeed || 800;//默认两秒
			
			var tpl = $frags["tipsBoxFrag"];
			var boxHtml = $template(tpl,msgObj);
			
			$(boxHtml).appendTo("body");
			
			var $box=$(this._tipsId);
			$box.show();
			$box.attr("pos",pos);
			var pos = $box.attr("pos");
			if(pos == "top"){
				$box.css( {"left":($(window).width() - $box.width())/2 + "px","top":"0px"});
			}else if(pos=="bottom"){
				$box.css( {"bottom":"0px","right":"0px"});
			}else{
				$box.css( {"left":($(window).width() - $box.width())/2 + "px","top":45 + "px"} );
			}
			$box.show();
			setTimeout(function(){
/*				$box.fadeOut(fadeSpeed,function(){
					$box.remove();
				});*/
				$box.animate({
					"top":"-=38",
					"opacity":0
				},fadeSpeed,function(){
					$box.remove();
				});
				
			},displayTime);
		},
		
		/**
		 * 打开确认消息框
		 * @param {Object} msg 消息内容
		 * @param {Object} options {okName, okCal, cancelName, cancelCall} 按钮
		 */
		confirm: function(msg, options) {
			var op = {okName:$msglang.OK, okCall:null,okCss:"btn-primary", cancelName:$msglang.CANCEL, cancelCall:null,button:null};
			$.extend(op, options);

			var _self=this;
			/*
			var buttons = [
				{name:op.okName, call: op.okCall, keyCode:$A.keyCode.ENTER,css:op.okCss},
				{name:op.cancelName, call: op.cancelCall, keyCode:$A.keyCode.ESC}
			];
			*/
			//暂时去掉热键
			var buttons = [
				{name:op.okName, call: op.okCall, css:(op.button&&op.button==_self.BUTTONS.OK)?op.okCss:""},
				{name:op.cancelName, call: op.cancelCall, keyCode:$A.keyCode.ESC,css:((!op.button)||op.button==_self.BUTTONS.CANCEL)?op.okCss:""}
			];
			this._open(this._types.confirm, msg, buttons);
		},
		BUTTONS:{
		  OK:'OK',
		  CANCEL:'CANCEL'
		}
	};
	$A.messager = that;
	return $A.messager;
});


/**
 * 系统选项设置
 */
define('app/core/app-options',["app/core/app-core",localeFile],function(App,AppLang){
	App.options={
		/**
		 * app控件的默认值
		 */
		appDefaults:{
			xquery:{
				className: 'xquery'
			},
			XqueryBox:{
				className: 'app-xquerybox'
			},
			Textbox: {
				/**
				 * 隐藏值
				 * @memberof textbox-class
				 * @property {String} [value] 值
				 */
				value: '',
				/**
				 * 显示值
				 * @memberof textbox-class
				 * @property {String} [text] 显示值
				 */
				text: '',
				/**
				 * 可输入的最长字符数
				 * @memberof textbox-class
				 * @property {Number} [maxLength] 字符数
				 */
				maxLength: null,
				/**
				 * 只读状态
				 * @memberof textbox-class
				 * @property {Boolean} [readonly=false] 只读状态
				 */
				readonly: false,
				/**
				 * 禁用状态
				 * @memberof textbox-class
				 * @property {Boolean} [disabled=false] 禁用状态
				 */
				disabled: false,
				/**
				 * 控件的宽度
				 * @property {Number|String} [width] 宽度
				 * @todo 默认由css控制
				 * @todo 可以指定具体像素宽度[px] eg.150px
				 * @todo 也可以指定百分比宽度[%]，百分比宽度为相对于父级元素的宽度 eg.100%
				 * @memberof textbox-class
				 */
				width: '',
				/**
				 * 显示值文本框的css样式
				 * @memberof textbox-class
				 * @property {Style} [style] 显示值文本框的css样式
				 * @example &lt;input &#9;class="app-textbox"
				 * &#9;style="color:red;text-align:center;"
				 * &#9;_options="{value:'德国 Germany'}"
				 * />
				 */
				style: '',
				/**
				 * 包装器的css样式
				 * @memberof textbox-class
				 * @property {Style} [wrapstyle] 包装器的css样式
				 * @example &lt;input &#9;class="app-textbox"
				 * &#9;wrapstyle="height:60px;"
				 * />
				 */
				wrapstyle: '',
				/**
				 * 显示值是否为多行文本框
				 * @memberof textbox-class
				 * @property {Boolean} [multiline=false] 多行
				 * @example &lt;input &#9;class="app-textbox"
				 * &#9;wrapstyle="height:60px;"
				 * &#9;multiline="true"
				 * />
				 */
				multiline: false,
				/**
				 * 是否显示清除按钮
				 * <PRE>多选状态 默认为true</PRE>
				 * @memberof textbox-class
				 * @property {Boolean} [clearbtn=false] 显示清除按钮
				 */
				clearbtn: false,
				/**
				 * 辅助提示信息
				 * @memberof textbox-class
				 * @property {String} [tips] 辅助提示信息
				 */
				tips: '',
				/**
				 * <span class="type-signature static">使用时 需考虑输入法影响键码</span>
				 * 定义如何筛选按下的键，如果为自定义事件 返回false阻止输入
				 * <PRE>内置过滤类型
				 * positiveNumber: 只允许输入 0-9，小数点
				 * number: 只允许输入 0-9，小数点，正负号
				 * 0-9：只允许输入 0-9
				 * all：任意输入
				 * </PRE>
				 * @memberof textbox-class
				 * @property {String|Function} [filter] 键盘输入的过滤器
				 */
				filter: null,
				/**
				 * <span class="type-signature static">该属性与filter属性只能设置一个，当设置forbidWord时，filter失效</span>
				 * 禁止输入的字符
				 * @memberof textbox-class
				 * @property {String} [forbidWord] 禁止输入的字符
				 */
				forbidWord: null,
				/**
				 * <span class="type-signature static">该属性与filter属性只能设置一个，当设置permitWord时，filter失效</span>
				 * 允许输入的字符
				 * @memberof textbox-class
				 * @property {String} [permitWord] 允许输入的字符
				 */
				permitWord: null,
				/**
				 * 是否去除前后空格
				 * @memberof textbox-class
				 * @property {Boolean} [trim=true] 去除
				 */
				trim: true,
				className: 'app-textbox'
			},
			Combo: {
				/**
				 * 数据对象中作为隐藏值的属性名
				 * @memberof combo-class
				 * @property {String} [valuefield=id] 隐藏值属性名
				 */
				valuefield: 'id',
				/**
				 * 数据对象中作为显示值的属性名
				 * @memberof combo-class
				 * @property {String} [textfield=name] 显示值属性名
				 */
				textfield: 'name',
				/**
				 * 查询参数
				 * <PRE>
				 * 	如果值为Function,如果要想置空查询条件，则必须返回{}对象
				 * </PRE>
				 * @memberof combo-class
				 * @property {Json|Function} [parameter] 查询参数
				 * @example &lt;input &#9;class="app-combobox"
				 * &#9;_options="{
				 * &#9;&#9;parameter: {param:'paramVal'},
				 * &#9;&#9;valuefield: 'value',
				 * &#9;&#9;textfield: 'text'
				 * &#9;&#9;action: 'html/example/app-input/data/data.valueAndText'
				 * &#9;}"
				 * />
				 */
				parameter: null,
				/**
				 * 自动隐藏打开按钮
				 * @memberof combo-class
				 * @property {Boolean} [autoHideOpenBtn=false] 不自动隐藏
				 */
				autoHideOpenBtn: false,
				/**
				 * 是否自动隐藏下拉面板
				 * @memberof combo-class
				 * @property {Boolean} [fadeout=false] 不自动
				 */
				fadeout: false,
				/**
				 * 下拉面板的宽度
				 * @todo 宽度默认为空，继承至input组件的宽度
				 * @todo 可以指定具体像素宽度[px] eg.250
				 * @todo 也可以指定百分比宽度[%]，百分比宽度为相对于面板所属的组件宽度 eg. 150%
				 * @memberof combo-class
				 * @property {Number|String} [panelwidth] 下拉面板的宽度
				 */
				panelwidth: '',
				/**
				 * 面板高度
				 * @memberof combo-class
				 * @property {Number} [panelheight=265] 下拉面板的高度
				 */
				panelheight: 265,
				/**
				 * 自定义面板高度
				 * @memberof combo-class
				 * @property {Number} [customPanelHeight=0] 高度
				 */
				customPanelHeight: 0,
				/**
				 * 自定义面板在主面板的相对位置
				 * top 上边
				 * bottom 下边
				 * @memberof combo-class
				 * @property {String} [customPanelPosition=bottom]
				 */
				customPanelPosition: 'bottom',
				/**
				 * <span class="type-signature static">override</span>
				 * 是否拥有一个打开按钮
				 * @memberof combo-class
				 * @property {Boolean} [openbtn=true] 拥有打开按钮
				 */
				openbtn: true,
				/**
				 * 格式化配置
				 * <PRE>
				 * 函数类型：eg.function(node){ return node.code + '-' + node.name ;}
				 * 通过setSelectedNode方法设置时，调用该函数进行格式化
				 * 该函数接收选中节点作为参数，返回一个字符串作为显示值
				 * 字符串类型：eg. code
				 * 指定一个实体的属性
				 * 表达式类型：eg.{code}-{name}
				 * 使用{}包裹字段并使用实体进行替换
				 * </PRE>
				 * @memberof combo-class
				 * @property {Function|String} [formatter=null] 格式化配置
				 */
				formatter: null,
				/**
				 * 打开下拉面板
				 * @memberof combo-class
				 * @property {Array} keyShowPanel=[{keyCode:App.keyCode.DOWN, ctrlKey:true}
				 * 				,{keyCode:App.keyCode.UP, ctrlKey:true}] 按键值数组
				 */
				keyShowPanel: [{keyCode:App.keyCode.DOWN, ctrlKey:true}
								,{keyCode:App.keyCode.UP, ctrlKey:true}],
				/**
				 * 打开下拉面板
				 * @memberof combo-class
				 * @property {Array} keyHidePanel=[App.keyCode.ESC,App.keyCode.TAB] 按键值数组
				 */
				keyHidePanel: [App.keyCode.ESC, App.keyCode.TAB],
				/**
				 * 定位下一个节点
				 * @memberof combo-class
				 * @property {Array} keyNextNode=[App.keyCode.DOWN] 按键值数组
				 */
				keyNextNode: [App.keyCode.DOWN],
				/**
				 * 定位上一个节点
				 * @memberof combo-class
				 * @property {Array} keyPrevNode=[App.keyCode.UP] 按键值数组
				 */
				keyPrevNode: [App.keyCode.UP],
				/**
				 * 选中当前节点
				 * @memberof combo-class
				 * @property {Array} keyPrevNode=[App.keyCode.ENTER] 按键值数组
				 */
				keyPickNode: [App.keyCode.ENTER],
				className: 'app-combo'
			},
			Combobox: {
				/**
				 * 要加载数据的url，也可以通过action设置
				 * @memberof combobox-class
				 * @property {Url} [url] url数据源
				 */
				url: '',
				/**
				 * 是否允许多选
				 * @memberof combobox-class
				 * @property {Boolean} [multiple=false] 多选
				 * />
				 */
				multiple: false,
				/**
				 * 本地数据源，
				 * 当配置该属性时，优先使用该数据源 并忽略action
				 * @memberof combobox-class
				 * @property {Json} [data] 本地数据源
				 */
				data: null,
				/**
				 * <span class="type-signature static">override</span>
				 * 下拉面板高度
				 * @memberof combobox-class
				 * @property {Number} [panelheight=242] 下拉面板的高度
				 */
				panelheight: 242,
				/**
				 * 定位下一个节点
				 * @memberof combobox-class
				 * @property {Array} keyNextNode=[App.keyCode.DOWN,App.keyCode.RIGHT] 按键值数组
				 */
				keyNextNode: [App.keyCode.DOWN,App.keyCode.RIGHT],
				/**
				 * 定位上一个节点
				 * @memberof combobox-class
				 * @property {Array} keyPrevNode=[App.keyCode.UP,App.keyCode.LEFT] 按键值数组
				 */
				keyPrevNode: [App.keyCode.UP,App.keyCode.LEFT],
				/**
				 * 允许联想
				 * @memberof combobox-class
				 * @property {Boolean} [usesuggest=false] 允许联想
				 */
				usesuggest: false,
				/**
				 * 是否允许删除节点
				 * @memberof combobox-class
				 * @property {Boolean} [nodeDelete=false] 不允许
				 */
				nodeDelete: false,
				/**
				 * 是否允许按键可清除值
				 * @memberof combobox-class
				 * @property {Boolean} [clearable=true] 允许
				 */
				clearable: true,
				className: 'app-combobox'
			},
			Comboztree: {
				/**
				 * 要加载数据的url，也可以通过action设置
				 * @memberof comboztree-class
				 * @property {Url} [url] url数据源
				 */
				url: '',
				/**
				 * 异步加载子节点的url地址 当[async = true 时生效]
				 * @memberof comboztree-class
				 * @property {Url} [asyncUrl] asyncUrl
				 */
				asyncUrl: '',
				/**
				 * 只能选择叶子节点
				 * @memberof comboztree-class
				 * @property {Boolean} [onlyleaf=false] 只能选择叶子节点
				 */
				onlyleaf: false,
				/**
				 * 是否独自选择节点 当multiple为true时 有效
				 * @todo 勾选父节点时勾选子节点
				 * @todo 取消勾选父节点时取消勾选子节点
				 * @todo 子节点全部勾选时是勾选父节点
				 * @todo 子节点全部取消勾选时是取消勾选父节点
				 * @memberof comboztree-class
				 * @property {Boolean} [checkBySelf=false] 关联选择
				 */
				checkBySelf: false,
				/**
				 * 远程数据，次级节点异步加载设置
				 * @memberof comboztree-class
				 * @property {Boolean} [async=true] 是否异步加载节点
				 */
				async: true,
				/**
				 * 设置 树 是否显示节点的图标
				 * @memberof comboztree-class
				 * @property {Boolean} [showIcon=false] true / false 分别表示 显示 / 隐藏 图标
				 */
				showIcon: false,
				/**
				 * 是否允许多选
				 * @memberof comboztree-class
				 * @property {Boolean} [multiple=false] 多选
				 */
				multiple: false,
				/**
				 * 节点唯一标识的属性名称
				 * 默认和valuefield相同
				 * @memberof comboztree-class
				 * @property {String} [idfield=null] 节点唯一标识的属性名称
				 */
				idfield: null,
				/**
				 * 节点数据中保存其父节点唯一标识的属性名称
				 * @memberof comboztree-class
				 * @property {String} [pidfield=pId] 父节点唯一标识的属性名称
				 */
				pidfield: 'pId',
				/**
				 * 用于修正根节点父节点数据，即 pIdKey 指定的属性值
				 * @memberof comboztree-class
				 * @property {String} [rootpidvalue=''] 根节点属性值
				 */
				rootpidvalue: '',
				/**
				 * 异步加载时需要自动提交父节点属性的参数
				 * @todo 将需要作为参数提交的属性名称，制作成 Array 即可，例如：["id", "name"]
				 * @todo 可以设置提交时的参数名称，例如 server 只接受 zId : ["id=zId"]
				 * @memberof comboztree-class
				 * @property {String} [rootpidvalue=''] 根节点属性值
				 * @example <PRE>&lt;input &#9;class="app-comboztree"
				 * &#9;_options="{
				 * &#9;&#9;action: 'platform/sample/base/ui/treeJson.do',
				 * &#9;&#9;autoparam: 'id,name'
				 * &#9;}"
				 * /></PRE>  假设 异步加载 父节点(node = {id:1, name:"test"}) 的子节点时，将提交参数 id=1&name=test
				 * @example <PRE>&lt;input &#9;class="app-comboztree"
				 * &#9;_options="{
				 * &#9;&#9;action: 'platform/sample/base/ui/treeJson.do',
				 * &#9;&#9;autoparam: 'id=zId,name'
				 * &#9;}"
				 * /></PRE>  假设 异步加载 父节点(node = {id:1, name:"test"}) 的子节点时，将提交参数 zId=1&name=test
				 */
				autoparam: null,
				/**
				 * 异步加载时子节点时，要提交的静态参数
				 * @memberof comboztree-class
				 * @example <PRE>&lt;input &#9;class="app-comboztree"
				 * &#9;_options="{
				 * &#9;&#9;action: 'platform/sample/base/ui/treeJson.do',
				 * &#9;&#9;otherParam: {dataSet: 'bank'}
				 * &#9;}"
				 * /></PRE>
				 */
				otherParam: null,
				/**
				 * 允许联想
				 * @memberof comboztree-class
				 * @property {Boolean} [usesuggest=false] 允许联想
				 */
				usesuggest: false,
				/**
				 * <span class="type-signature static">override</span>
				 * 下拉面板的高度
				 * @memberof comboztree-class
				 * @property {Number} [panelheight=232] 下拉面板的高度
				 */
				panelheight: 232,
				/**
				 * 对值进行优化，该参数只针对multiple = true 时，有效
				 * @todo 忽略半勾选节点
				 * @todo 并当父节点被全选时，子节点不作为值
				 * @memberof comboztree-class
				 * @property {Boolean} [shrinkValue=true] 默认进行优化值
				 */
				shrinkValue: true,
				/**
				 * 忽略半勾选节点
				 * @memberof comboztree-class
				 * @property {Boolean} [ignoreHalfCheck=true] 默认忽略
				 */
				ignoreHalfCheck: true,
				/**
				 * 进行本地高亮匹配检索时的延迟检索时间(ms)
				 * @memberof comboztree-class
				 * @property {Number} [lazy=300] 延迟检索时间(毫秒)
				 */
				lazy: 300,
				/**
				 * 定位到子节点
				 * @memberof comboztree-class
				 * @property {Array} keyChildNode=[App.keyCode.RIGHT] 按键值数组
				 */
				keyChildNode: [App.keyCode.RIGHT],
				/**
				 * 定位到父节点
				 * @memberof comboztree-class
				 * @property {Array} keyParentNode=[App.keyCode.LEFT] 按键值数组
				 */
				keyParentNode: [App.keyCode.LEFT],
				className: 'app-comboztree'
			},
			Reference: {
				/**
				 * 数据对象中作为隐藏值的属性名
				 * @memberof reference-class
				 * @property {String} [valuefield=id] 隐藏值属性名
				 */
				valuefield: 'id',
				/**
				 * 数据对象中作为显示值的属性名
				 * @memberof reference-class
				 * @property {String} [textfield=name] 显示值属性名
				 */
				textfield: 'name',
				/**
				 * 弹出对话框的标题
				 * @memberof reference-class
				 * @property {Boolean} [title=对话框] 标题
				 */
				title: '对话框',
				/**
				 * 显示标题栏
				 * @memberof reference-class
				 * @property {Boolean} [hasheader=true] 显示标题栏
				 */
				hasheader: true,
				/**
				 * 对话框的宽度，null则会自适应
				 * @memberof reference-class
				 * @property {Number} [digWidth=null] 宽度
				 */
				digWidth: null,
				/**
				 * 对话框的高度，null则会自适应
				 * @memberof reference-class
				 * @property {Number} [digHeight=null] 高度
				 */
				digHeight: null,
				/**
				 * <span class="type-signature static">override</span>
				 * 是否拥有一个清除按钮
				 * @memberof reference-class
				 * @property {Boolean} [clearbtn=true] 拥有清除按钮
				 */
				clearbtn: true,
				/**
				 * <span class="type-signature static">override</span>
				 * 是否拥有一个打开按钮
				 * @memberof reference-class
				 * @property {Boolean} [openbtn=true] 拥有打开按钮
				 */
				openbtn: true,
				/**
				 * 对话框的url
				 * @memberof reference-class
				 * @property {URL} [url=null] 对话框的url
				 */
				url: null,
				className: 'app-reference'
			},
			Suggest: {
				/**
				 * <span class="type-signature static">override</span>
				 * 面板高度 该面板为固定高度
				 * @memberof suggest-class
				 * @property {Number} [panelheight=242] 下拉面板的高度
				 */
				panelheight: 242,
				/**
				 * 联想面板内 已选结果面板的高度
				 * @memberof suggest-class
				 * @property {Number} [slt_area=30] 已选框的高度
				 */
				slt_area: 30,
				/**
				 * 联想地址，该属性优先于action
				 * @memberof suggest-class
				 * @property {String} [suggest] 联想地址
				 */
				suggest: '',
				/**
				 * 联想过滤时使用的匹配属性，多个属性使用,分隔
				 * <PRE>
				 * 当没有配置该属性时，默认使用textfield
				 * 远程联想时 可以通过_key接收输入的搜索关键字、suggestfield接收该字段的配置
				 * </PRE>
				 * @memberof suggest-class
				 * @property {String} [suggestfield] 匹配属性
				 */
				suggestfield: '',
				/**
				 * 是否远程加载，该属性优先于async
				 * false：第一次根据suggest进行远程加载作为数据源，此后根据本地数据源进行联想匹配
				 * true: 如果为true，则每次根据suggest去后台匹配数据
				 * @memberof suggest-class
				 * @property {Boolean} [remote=false] 每次远程联想
				 */
				remote: false,
				/**
				 * 进行联想的延迟检索时间(ms)
				 * @memberof suggest-class
				 * @property {Number} [lazy=500] 远程搜索时间（毫秒）
				 */
				lazy: 500,
				/**
				 * 是否允许多选
				 * @memberof suggest-class
				 * @property {Boolean} [multiple=false] 多选
				 */
				multiple:false,
				/**
				 * 接受输入的内容作为值
				 * @memberof suggest-class
				 * @property {Boolean} [acceptText=false] 不接受
				 */
				acceptText: false,
				/**
				 * 联想清值，该属性设置只在单选模式生效
				 * @memberof suggest-class
				 * @property {Boolean} [suggestClear=false] 联想时是否清值
				 */
				suggestClear: false,
				/**
				 * 切换到已选区域，定位下一个已选择节点
				 * @memberof suggest-class
				 * @property {Array} keyNextSltNode=[App.keyCode.RIGHT] 按键值数组
				 */
				keyNextSltNode: [App.keyCode.RIGHT],
				/**
				 * 切换到已选区域，定位上一个已选择节点
				 * @memberof suggest-class
				 * @property {Array} keyPrevSltNode=[App.keyCode.LEFT] 按键值数组
				 */
				keyPrevSltNode: [App.keyCode.LEFT],
				className: 'app-suggest'
			},
			Typeahead: {
				/**
				 * 联想地址
				 * @memberof typeahead-class
				 * @property {String} [suggest] 联想地址
				 */
				suggest: '',
				/**
				 * 是否远程加载
				 * false：第一次根据suggest进行远程加载作为数据源，此后根据本地数据源进行联想匹配
				 * true: 如果为true，则每次根据suggest去后台匹配数据
				 * @memberof typeahead-class
				 * @property {Boolean} [remote=false] 每次远程联想
				 */
				remote: false,
				/**
				 * 进行联想的延迟检索时间(ms)
				 * @memberof typeahead-class
				 * @property {Number} [lazy=500] 远程搜索时间（毫秒）
				 */
				lazy: 500,
				/**
				 * 定位下一个节点
				 * @memberof typeahead-class-class
				 * @property {Array} keyNextNode=[App.keyCode.DOWN,App.keyCode.RIGHT] 按键值数组
				 */
				keyNextNode: [App.keyCode.DOWN,App.keyCode.RIGHT],
				/**
				 * 定位上一个节点
				 * @memberof typeahead-class-class
				 * @property {Array} keyPrevNode=[App.keyCode.UP,App.keyCode.LEFT] 按键值数组
				 */
				keyPrevNode: [App.keyCode.UP,App.keyCode.LEFT],
				className: 'app-typeahead'
			},
			Money: {
				/**
				 * 数值的小数位
				 * @memberof money-class
				 * @property {Number} [precision=2] 保留2位小数
				 */
				precision: 2,
				/**
				 * 格式化函数
				 * <PRE>
				 * 该函数接收当前输入的值，并返回一个字符串作为显示值
				 * 内置格式化方法
				 * 大写金额：chinese
				 * 千分位金额：thousand
				 * </PRE>
				 * @memberof money-class
				 * @property {String|Function} [formatter] 格式化函数
				 */
				formatter: 'thousand',
				/**
				 * <span class="type-signature static">override</span>
				 * 定义如何筛选按下的键，返回true接受输入
				 * <PRE>内置过滤类型
				 * positiveNumber: 只允许输入 0-9，小数点
				 * number: 只允许输入 0-9，小数点，正负号
				 * 0-9：只允许输入 0-9
				 * all：任意输入
				 * </PRE>
				 * @memberof money-class
				 * @property {String|Function} [filter='number'] 键盘输入的过滤器
				 */
				filter: 'number',
				/**
				 * 前缀(只针对千分法)
				 * @memberof money-class
				 * @property {String} [prefix=¥] 前缀
				 */
				prefix: '¥',
				className: 'app-money'
			},
			Number: {
				/**
				 * 最小值  组件允许接受的最小值
				 * @memberof number-class
				 * @property {Number} [min=null] 最小值
				 */
				min: null,
				/**
				 * 最大值  组件允许接受的最大值
				 * @memberof number-class
				 * @property {Number} [max=null] 最大值
				 */
				max: null,
				/**
				 * 不定长精度
				 * <PRE>
				 * 	false：为定长的进度，即精度为几位，则保留几位小数
				 * 	true：为不定长的进度，即输入的进度为几位，则最大保留到几位，此时precision代表最大精度
				 * </PRE>
				 * @memberof number-class
				 * @property {Number} [varlen=false] 变长精度
				 */
				varlen: false,
				/**
				 * 精度
				 * @memberof number-class
				 * @property {Number} [precision=0] 保留0位小数
				 */
				precision: 0,
				/**
				 * 前缀
				 * @memberof number-class
				 * @property {String} [prefix=''] 前缀
				 */
				prefix: '',
				/**
				 * 后缀
				 * @memberof number-class
				 * @property {String} [suffix=''] 后缀
				 */
				suffix: '',
				/**
				 * <span class="type-signature static">override</span>
				 * 定义如何筛选按下的键，返回true接受输入
				 * <PRE>内置过滤类型
				 * number: 只允许输入 0-9，小数点，正负号
				 * 0-9：只允许输入 0-9
				 * all：任意输入
				 * </PRE>
				 * @memberof number-class
				 * @property {String|Function} [filter='number'] 键盘输入的过滤器
				 */
				filter: 'number',
				/**
				 * 定义格式化输出显示值。返回的字符串值，会显示在输入框中
				 * <PRE>内置格式化方法
				 * 大写金额：chinese
				 * 千分位金额：thousand
				 * </PRE>
				 * @memberof number-class
				 * @property {String|Function} [formatter] 格式化函数
				 */
				formatter: null,
				/**
				 * 当值为0时 显示为空
				 * @memberof number-class
				 * @property {String|Function} [zeroIsNull=false] 0显示为0
				 */
				zeroIsNull: false,
				className: 'app-number'
			},
			DateTime: {
				/**
				 * <span class="type-signature static">override</span>
				 * 是否拥有一个打开按钮
				 * @memberof datetime-class
				 * @property {Boolean} [openbtn=true] 拥有打开按钮
				 */
				openbtn: true,
				/**
				 * 是否只能选择
				 * @memberof datetime-class
				 * @property {Boolean} [onlySelect=false] 可以选择和输入
				 */
				onlySelect: false,
				/**
				 * 日期时间框类型
				 * <PRE>
				 * type可选类型：
				 * year: 年  eg. 2014
				 * month: 月  eg. 12
				 * year-month: 年月 eg. 2014-12
				 * date: 年月日  eg. 2014-12-12
				 * datetime: 年月日时分  eg. 2014-12-12 12:12
				 * hour-minute: 时分  eg. 12:12
				 * hour: 时  eg. 12
				 * minute: 分  eg. 12
				 * </PRE>
				 * @memberof datetime-class
				 * @property {String} [type=date] 类型
				 */
				type: 'date',
				/**
				 * 显示值的日期时间格式化串
				 * <PRE>
				 * p, P, h, hh, i, ii, s, ss, d, dd, m, mm, M, MM, yy, yyyy 的任意组合。
				 * p : 小写的 ('am' or 'pm') - 根据区域文件
				 * P : 大写的 ('AM' or 'PM') - 根据区域文件
				 * s : 10以下不用0填充首位的秒数
				 * ss : 2位秒数显示，10以下用0填充首位
				 * i : 10以下不用0填充首位的分数
				 * ii : 2位分数显示，10以下用0填充首位
				 * h : 10以下不用0填充首位的时数 - 24小时制
				 * hh : 2位时数显示，10以下用0填充首位 - 24小时制
				 * H : 10以下不用0填充首位的时数 - 12小时制
				 * HH : 2位时数显示，10以下用0填充首位 - 12小时制
				 * d : 10以下不用0填充首位的日期
				 * dd : 2位日期显示，10以下用0填充首位
				 * m : 10以下不用0填充首位的月份
				 * mm : 2位月份显示，10以下用0填充首位
				 * M : 月份的短文本表示，前三个字母
				 * MM : 月份的全文本表示，如 January or March
				 * yy : 2位年份显示
				 * yyyy : 4位年份显示
				 * </PRE>
				 * @memberof datetime-class
				 * @property {String} [format=yyyy-mm-dd] 格式化串
				 */
				format: 'yyyy-mm-dd',
				/**
				 * 隐藏值的日期时间格式化串，具体方式参照显示值格式化
				 * @memberof datetime-class
				 * @property {String} [valueFormat] 格式化串
				 */
				valueFormat: null,
				/**
				 * 语言
				 * @memberof datetime-class
				 * @property {String} [language=zh_CN] 语言
				 */
				language: AppLang.locale,
				/**
				 * 一周从哪一天开始。0（星期日）到6（星期六）
				 * @memberof datetime-class
				 * @property {String} [weekStart=1] 一周从哪一天开始
				 */
				weekStart: 1,
				/**
				 * 当选择一个日期之后是否立即关闭此日期时间选择器
				 * @memberof datetime-class
				 * @property {Boolean} [autoclose=true] 自动关闭
				 */
				autoclose: true,
				/**
				 * 是否显示今天按钮
				 * <PRE>
				 * 如果此值为true 或 "linked"，
				 * 		则在日期时间选择器组件的底部显示一个 "Today" 按钮用以选择当前日期。
				 * 如果是true的话，"Today" 按钮仅仅将视图转到当天的日期.
				 * 如果是"linked"，当天日期将会被选中
				 * </PRE>
				 * @memberof datetime-class
				 * @property {Boolean} [todayBtn=true] 显示今天按钮
				 */
				todayBtn: true,
				/**
				 * 高亮当前日期
				 * @memberof datetime-class
				 * @property {Boolean} [todayHighlight=true] 高亮当前日期
				 */
				todayHighlight: true,
				/**
				 * 日期时间选择器打开之后首先显示的视图。
				 * <PRE>可接受的值
				 * 0 小时视图
				 * 1 日期视图
				 * 2 月视图
				 * 3 年视图
				 * 4 十年视图
				 * </PRE>
				 * @memberof datetime-class
				 * @property {Number} [startView=2] 起始视图
				 */
				startView: 2,
				/**
				 * 日期时间选择器所能够提供的最精确的时间选择视图。
				 * <PRE>
				 * 可接受的值
				 * 0 小时视图
				 * 1 日期视图
				 * 2 月视图
				 * 3 年视图
				 * 4 十年视图
				 * </PRE>
				 * @memberof datetime-class
				 * @property {Number} [minView=2] 结束视图
				 */
				minView: 2,
				className: 'app-datetime'
			},
			Grid: {
				/**
				 * 要加载数据的url，也可以通过action设置
				 * @memberof grid-class
				 * @property {Url} [url] url数据源
				 */
				url: '',
				/**
				 * 网格的标题
				 * @memberof grid-class
				 * @property {String|Number} [title] 网格标题
				 */
				title: '',
				/**
				 * 标题行高
				 * @memberof grid-class
				 * @property {Number} [headRowHeight] 标题行高
				 */
				headRowHeight: 28,
				/**
				 * 斑马条纹
				 * @memberof grid-class
				 * @property {Boolean} [striped=true] 斑马条纹
				 */
				striped: true,
				/**
				 * 工具条最大高度(px)
				 * @memberof grid-class
				 * @property {Number} [toolbarHeight=33] 工具条最大高度
				 */
				toolbarHeight: 33,
				/**
				 * 工具条
				 * @memberof grid-class
				 * @property {Array} [toolbar] 工具条
				 * @property {String} [toolbar.text] 按钮标题
				 * @property {String} [toolbar.iconCls] 按钮样式
				 * @property {Function} [toolbar.handler] 按钮操作
				 */
				toolbar: null,
				/**
				 * 表格主键
				 * @memberof grid-class
				 * @property {String} [idField=id] 表格主键
				 */
				idField: 'id',
				/**
				 * 是否生成隐藏列的内容数据
				 * @todo 不生成内容数据的表格不能使用将初始为隐藏列设置为显示功能
				 * @memberof grid-class
				 * @property {Boolean} [hiddenColumnInit=false] 不生成
				 */
				hiddenColumnInit: false,
				/**
				 * 网格的宽度
				 * <PRE>宽度默认为空：撑满整个父容器</PRE>
				 * @memberof grid-class
				 * @property {Number} [width] 宽度
				 */
				width: null,
				/**
				 * 网格的高度
				 * <PRE>
				 * 1、高度默认为空：撑满整个父容器
				 * 2、当值为push时，高度随着数据的变化而变化
				 * </PRE>
				 * @memberof grid-class
				 * @property {Number|String} [height] 高度
				 */
				height: null,
				/**
				 * 跟随滚动
				 * <PRE>默认all
				 * 可选值
				 * none 不跟随
				 * header 网格头
				 * footer 网格尾
				 * all 网格头和网格尾
				 * </PRE>
				 * @memberof grid-class
				 * @property {String} [follow=all] 表头/尾跟随
				 */
				follow: 'all',
				/**
				 * 是否列标题栏的对齐方式跟随
				 * @todo 当结果为false时，标题头居中
				 * @todo 当结果为true时，标题头与列的对齐方式相同
				 * @memberof grid-class
				 * @property {Boolean} [halign=false] 列标题栏的对齐方式跟随
				 */
				halign: false,
				/**
				 * 是否显示复选框
				 * @memberof grid-class
				 * @property {Boolean} [checkbox=false] 是否显示复选框
				 */
		        checkbox: false,
		        /**
				 * 是否显示单选框
				 * @memberof grid-class
				 * @property {Boolean} [radiobox=false] 是否显示单选框
				 */
		        radiobox: false,
		        /**
				 * 是否允许多列排序
				 * @memberof grid-class
				 * @property {Boolean} [multiSort=false] 多列排序
				 */
		        multiSort: false,
		        /**
				 * 是否远程排序
				 * @memberof grid-class
				 * @property {Boolean} [remoteSort=false] 远程排序
				 */
		        remoteSort: false,
		        /**
				 * 行号
				 * <PRE>
				 * 默认none
				 * 可选值
				 * none: 不显示
				 * normal: 普通
				 * repeat: 重复
				 * </PRE>
				 * @memberof grid-class
				 * @property {String} [rownumbers='none'] 行号
				 */

		        rownumbers: 'none',
		        /**
				 * 视图扩展
				 * <PRE>
				 * view:{type:'CardView'卡片类型,region:'right'//卡片位置,formEl:'表单id',cardWidth:'卡片宽',rowRender:'渲染回调'}
				 * </PRE>
				 * @memberof view
				 * @property{Object} [view=null]
				 */
				view:{type:'GridView',region:'right',isDefault:false},
				/**
				 * 是否开启切换视图
				 * <PRE>
				 * 默认false
				 * </PRE>
				 * @memberof grid-class
				 * @property {boolean}
				 */
				switchView:false,
		        /**
		         * 是否显示合计行序号
		         * @memberof grid-class
				 * @property {String} [footerRowNumber=false]
		         */
		        footerRowNumber: false,
		        /**
				 * 分页
				 * <PRE>
				 * 默认'none'
				 * 可选值
				 * none: 不分页
				 * up: 上分页
				 * down: 下分页
				 * all: 上下分页
				 * </PRE>
				 * @memberof grid-class
				 * @property {String} [pager=none] 分页
				 */
		        pager: 'none',
				/**
				 * 分页栏上的打印和导出按钮是否显示
				 * @memberof grid-class
				 * @property {Object} [pagerToolbarIcon] 
				 * @property {Boolean} [pagerToolbarIcon.download=false] 不显示下载按钮
				 * @property {Boolean} [pagerToolbarIcon.print=false] 不显示打印按钮
				 */
		        pagerToolbarIcon: {
		        	download: false,
		        	print: false
		        },
		        /**
				 * 默认当前页
				 * @memberof grid-class
				 * @property {Number} [pageNumber=1] 默认当前页
				 */
				pageNumber: 1,
				/**
				 * 每页默认的结果数
				 * @memberof grid-class
				 * @property {Number} [pageSize=10] 每页默认的结果数
				 */
				pageSize: 10,
				/**
				 * 可选择设定的每页结果数
				 * @memberof grid-class
				 * @property {Array} [pageList=10, 15, 20, 50, 100, 200] 可选择设定的每页结果数
				 */
				pageList: [10, 15, 20, 50, 100, 200],
				/**
				 * 主视图列
				 * @memberof grid-class
				 * @property {Array<Array>} [columns] 主视图列
				 */
				columns: null,
				/**
				 * 左固定列
				 * @memberof grid-class
				 * @property {Array<Array>} [frozenColumns] 左固定列
				 */
				frozenColumns: null,
				/**
				 * 右视图列
				 * @memberof grid-class
				 * @property {Array<Array>} [frozenColumnsRight] 右视图列
				 */
				frozenColumnsRight: null,
				/**
				 * 是否对编辑过的数据进行标记
				 * @memberof grid-class
				 * @property {Boolean} [markChange=false] 不标记
				 */
				markChange: false,
				/**
				 * 网格是否可编辑的总开关
				 * @memberof grid-class
				 * @property {Boolean} [editable=true] 可编辑
				 */
				editable: true,
				/**
				 * 设置了如何去解析从Server端传回来的json数据
				 * @memberof grid-class
				 * @property {Object} [jsonReader] json定义
				 * @property {Number} [jsonReader.total=totalRecords] 总记录数字段
				 * @property {Object} [jsonReader.rows=data] 主数据字段
				 * @property {Object} [jsonReader.footer=footer] 合计数据字段
				 */
				jsonReader: {
					/**
					 * 总记录数
					 */
					total: 'totalRecords',
					/**
					 * 表格数据
					 */
					rows: 'data',
					/**
					 * 表格尾数据
					 */
					footer: 'footer'
				},
				/**
				 * 初始查询参数
				 * <PRE>
				 * 已用关键字：page、rows、sort、order、__transor
				 * </PRE>
				 * @memberof grid-class
				 * @property {Object} [queryParams] 查询参数
				 */
				queryParams: null,
				/**
				 * 自定义面板的jquery表达式
				 * <PRE>
				 * 组件根据 $A(headerCustom) 取得面板 eg. #query
				 * </PRE>
				 * @memberof grid-class
				 * @property {String} [headerCustom] jquery表达式
				 */
				headerCustom: null,
				/**
				 * 初始化网格时 自动加载数据
				 * @memberof grid-class
				 * @property {Boolean} [autoLoad=true] 标志
				 */
				autoLoad: true,
				/**
				 * 自适应填充宽度
				 * <PRE>
				 * 默认为N 不自适应
				 * 可选值：
				 * N：[no] 不进行自适应填充
				 * ES: [extend&shrink]将列宽进行伸长/缩短以填充满表格，取消横向滚动
				 * E: [extend]将列框进行伸展以填充满表格，取消横向滚动
				 * </PRE>
				 * @memberof grid-class
				 * @property {Boolean} [fitColumns='N'] 标志
				 */
				fitColumns: 'E',
				/**
		         * 自定义合计栏的配置
		         * <PRE>
		         * summary.method 计算的函数，如果函数为空，则使用网格的data进行替换模板
		         * summary.template 模板
		         * </PRE>
		         * @property {Object} [summary] 自定义合计栏的配置
		         * @property {Function} [summary.method] 合计的计算方法
		         * @property {template} summary.template 模板
		         * @memberof grid-class
		         */
		        summary: null,
		      	/**
		         * 合计栏所在位置 可选值 top bottom
		         * @property {String} [summaryPos=bottom] 合计栏所在位置
		         * @memberof grid-class
		         */
		        summaryPos: 'bottom',
		        /**
		         * 网格列是否可以调整宽度
		         * <PRE>
				 * 1、默认为'true'，可以调整列宽
				 * </PRE>
		         * @property {Boolean} [columnResizable=true] 允许调整列宽
		         * @memberof grid-class
		         */
		        columnResizable: true,
		        /**
				 * 是否点击数据行开始编辑
				 * @memberof grid-class
				 * @property {Boolean} [autoBeginEdit=true] 开始编辑
				 */
				autoBeginEdit: true,
				/**
				 * 是否点击非数据行结束编辑
				 * @memberof grid-class
				 * @property {Boolean} [autoEndEdit=true] 结束编辑
				 */
				autoEndEdit: true,
				/**
				 * 是否使用编辑器的代理删除按钮
				 * 该参数在有编辑器的情况下生效
				 * @memberof grid-class
				 * @property {Boolean} [editorDelBtn=true] 使用
				 */
				editorDelBtn: true,
				/**
				 * 要合并的列名
				 * @memberof grid-class
				 * @property {Array<String>} [mergeColumns] 要自动合并的列
				 */
				mergeColumns: null,
				/**
				 * 是否允许进行列的隐藏/显示操作
				 * @memberof grid-class
				 * @property {Boolean} [columnManager=true] 允许
				 */
				columnManager: true,
				/**
				 * 每次双击必须间隔毫秒数
				 */
				dblOnce: 1000,
				/**
				 * 定位编辑器上边的编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyUpEditor=App.keyCode.UP] 按键值数组
				 */
				keyUpEditor: [App.keyCode.UP],
				/**
				 * 定位编辑器下边的编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyDownEditor=App.keyCode.DOWN] 按键值数组
				 */
				keyDownEditor: [App.keyCode.DOWN],
				/**
				 * 定位编辑器左边的编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyLeftEditor=App.keyCode.LEFT] 按键值数组
				 */
				keyLeftEditor: [App.keyCode.LEFT],
				/**
				 * 定位编辑器右边的编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyRightEditor=App.keyCode.RIGHT] 按键值数组
				 */
				keyRightEditor: [App.keyCode.RIGHT],
				/**
				 * 是否启用特殊按键[keyNextEditor、keyPrevEditor、keyAppendRow、keyDeleteRow]
				 * @memberof grid-class
				 * @property {Boolean} [keySpecEnabled=true]
				 */
				keySpecEnabled: true,
				/**
				 * 定位编辑器的下一个编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyNextEditor=[App.keyCode.ENTER, App.keyCode.TAB]] 按键值数组
				 */
				keyNextEditor: [App.keyCode.ENTER, App.keyCode.TAB],
				/**
				 * 定位编辑器的上一个编辑器
				 * @memberof grid-class
				 * @property {Array<Number>} [keyPrevEditor=[{keyCode:App.keyCode.TAB, shiftKey:true}]] 按键值数组
				 */
				keyPrevEditor: [{keyCode:App.keyCode.TAB, shiftKey:true}],
				/**
				 * 追加一行到末尾
				 * @memberof grid-class
				 * @property {Array<Number>} [keyPrevEditor=[{keyCode:App.keyCode.PLUS, ctrlKey:true}]] 按键值数组
				 */
				keyAppendRow: [{keyCode:App.keyCode.PLUS, shiftKey:true}],
				/**
				 * 删除当前编辑行
				 * @memberof grid-class
				 * @property {Array<Number>} [keyPrevEditor=[{keyCode:App.keyCode.MINUS, ctrlKey:true}]] 按键值数组
				 */
				keyDeleteRow: [{keyCode:App.keyCode.MINUS, shiftKey:true, ctrlKey:true}]

			},
			/**
			 * 网格的列属性
			 * @class
			 * @classdesc 表格
			 * @name gridColumn
			 */
			Column: {
				/**
				 * 列属性
				 * @property {String} field 列属性
				 * @memberof gridColumn
				 */
				field: null,
				/**
				 * 列标题
				 * <PRE>操作列配置按钮，title配置为数字，该数字代表buttons的索引，且按钮不加入数据域</PRE>
				 * @property {String} title 列标题
				 * @memberof gridColumn
				 */
				title: null,
				/**
				 * 列公式
				 * <PRE>表达式可以直接使用当前行变量
				 * 	表达式内提供下列三个特殊方法功能动态维度列使用
				 * 		getNum(field)
				 * 		getStr(field)
				 * 		sumSuffix(suffixStr)</PRE>
				 * @property {String} formula 计算表达式
				 * @memberof gridColumn
				 */
				formula: null,
				/**
				 * 合并列
				 * @property {Number} [colspan] 合并列
				 * @memberof gridColumn
				 */
				colspan: null,
				/**
				 * 合并行
				 * @property {Number} [rowspan] 合并行
				 * @memberof gridColumn
				 */
				rowspan: null,
				/**
				 * 宽度
				 * @property {Number} [Column.width=100] 宽度
				 * @memberof gridColumn
				 */
				width: 100,
				/**
				 * 打印宽度单位mm
				 * @property {Number} [Column.printWidth] 打印宽度
				 * @memberof gridColumn
				 */
				printWidth: null,
				/**
				 * 打印数据类型
				 * <PRE>
				 * String 字符串
				 * Number0 整型的数值
				 * Number1 保留1位小数的数值
				 * Number2 保留2位小数的数值
				 * Number3 保留3位小数的数值
				 * Number4 保留4位小数的数值
				 * Number5 保留5位小数的数值
				 * Number6 保留6位小数的数值
				 * </PRE>
				 * @property {String} [Column.printType=String] 默认为字符串类型
				 * @memberof gridColumn
				 */
				printType: 'String',
				/**
				 * 固定列
				 * 可选值: left, right
				 * @property {String} [Column.frozen] 固定
				 * @memberof gridColumn
				 */
				frozen: null,
				/**
				 * 隐藏
				 * @property {Number} [Column.hidden=false] 隐藏
				 * @memberof gridColumn
				 */
				hidden: false,
		        /**
				 * 对齐方式 可选值 center left right
				 * @property {String} [Column.align=center] 对齐方式
				 * @memberof gridColumn
				 */
		        align: 'center',
		        /**
		         * 可排序
		         * @property {Boolean} [sortable=false] 对齐方式
		         * @memberof gridColumn
		         */
		        sortable: false,
		        /**
		         * 自定义排序函数，用来做局部排序
		         * @property {Function} [sorter] 排序函数
		         * @property {Object} sorter.a 第一个值
		         * @property {Object} sorter.b 第二个值
		         * @example {title: '自定义排序方法',align:'right',field: 'f3',
		         * &#9;sortable:true,
		         * &#9;sorter: function(a,b){
		         * &#9;&#9;return a.f3 - b.f3;
		         * &#9;}
		         * }
		         * @memberof gridColumn
		         */
		        sorter: null,
		        /**
		         * 返回样式字符串定制的单元格样式的函数
		         * @property {Function} [styler] 样式函数
		         * @property {String} styler.val 值
		         * @property {Object} styler.row 行数据对象
		         * @property {index} styler.i 行号
		         * @example {title: '样式修改列',field: 'f2',
		         * &#9;styler:function(val,row,i){
		         * &#9;&#9;var n = parseInt(val.substr(val.lastIndexOf('-')+1));
		         * &#9;&#9;if(n%2==1){
		         * &#9;&#9;&#9;return 'color:green;';
		         * &#9;&#9;}else{
		         * &#9;&#9;&#9;return 'color:red;';
		         * &#9;&#9;}
		         * &#9;}
		         * }
		         * @memberof gridColumn
		         */
		        styler: null,
		        /**
		         * 格式化配置
		         * <PRE>
		         * 1、函数类型： 自定义编写的函数
		         * 该函数接收选中四个参数，分别为该单元格的值，行实体对象，行号，列。函数返回一个字符串作为显示值
				 * 2、数值格式化：指定格式化串 [#,###.00]
				 * 3、字符串连接：使用{}包裹变量
				 * 4、内置格式化方法：内置格式化方法编码
		         * </PRE>
		         * @property {Function|String} [formatter] 格式化
		         * @property {String} formatter.value 值
		         * @property {Object} formatter.row 行数据对象
		         * @property {Number} formatter.rowIndex 行号
		         * @property {GridColumn} formatter.column 列
		         * @example {title: '格式化显示列',align:'left',field: 'f1',
		         * &#9;formatter:function(value,row,rowIndex,column){
		         * &#9;&#9;return '格式化列';
		         * &#9;}
		         * }
		         * @example {title: 'f1显示f2的值',align:'left',field: 'f1', formatter:'[#,###.00]'}
		         * @example {title: 'f1显示f2的值',align:'left',field: 'f1', formatter:'{f1}-{f2}'}
		         * @example {title: 'f1显示f2的值',align:'left',field: 'f1', formatter:'oneYesZeroNo'}
		         * @memberof gridColumn
		         */
		        formatter: null,
		        /**
		         * 编辑器设置
		         * @property {Object} [editor] 格式化函数
		         * @property {String} editor.type 编辑器类型
		         * @property {Object} editor.options 编辑器初始化属性[详见个组件]
		         * @example {
		         * &#9;title : '主列标题2',
		         * &#9;field : 'c2',
		         * &#9;width : 120,
		         * &#9;editor : {
		         * &#9;&#9;type : 'combogrid',
		         * &#9;&#9;options : {
		         * &#9;&#9;&#9;panelwidth: 400,
		         * &#9;&#9;&#9;url: 'platform/sample/base/ui/combogridData.do',
		         * &#9;&#9;&#9;&#9;columns: [[
		         * &#9;&#9;&#9;&#9;{title: 'id列',field: 'id',hidden:true},
		         * &#9;&#9;&#9;&#9;{title: '名称列',field: 'name',width: 100},
		         * &#9;&#9;&#9;&#9;{title: '主列标题3',field: 'c3',width: 150},
		         * &#9;&#9;&#9;&#9;{title: '主列标题4',field: 'c4',width: 200},
		         * &#9;&#9;&#9;&#9;{title: '主列标题5',field: 'c5',width: 250},
		         * &#9;&#9;&#9;&#9;{title: '主列标题6',field: 'c6',width: 500}
		         * &#9;&#9;&#9;]]
		         * &#9;&#9;}
		         * &#9;}
		         * }
		         * @memberof gridColumn
		         */
		        editor: null,
		        /**
		         * 单元格按钮
		         * @property {Array} [buttons] 主数据单元格中的按钮
		      	 * @property {String} [buttons.text] 标题
				 * @property {String} [buttons.iconCls] 样式
				 * @property {Function|Boolean} [buttons.disabled] 是否可用
				 * @property {Function} [buttons.handler] 操作
				 * @property {Object} [buttons.handler.rowData] 行数据
				 * @property {Number} [buttons.handler.rowIndex] 行号
				 * @example {
				 * &#9;title : '操作',
				 * &#9;width : 200,
				 * &#9;buttons:[ {
				 * &#9;&#9;text : '编辑',
				 * &#9;&#9;iconCls : 'btn-edit',
				 * &#9;&#9;disabled : true,
				 * &#9;&#9;handler : function(rowData, rowIndex) {
				 * &#9;&#9;&#9;$('#gridEditorOnClickTr').grid('beginEdit', rowIndex);
				 * &#9;&#9;}
				 * &#9;} , {
				 * &#9;&#9;text : '撤销编辑',
				 * &#9;&#9;iconCls : 'btn-reset',
				 * &#9;&#9;disabled : function(rowData, rowIndex) {
				 * &#9;&#9;&#9;return rowIndex%2==0?true:false;
				 * &#9;&#9;},
				 * &#9;&#9;handler : function(rowData, rowIndex) {
				 * &#9;&#9;&#9;$('#gridEditorOnClickTr').grid('cancelEdit', rowIndex);
				 * &#9;&#9;}
				 * &#9;} , {
				 * &#9;&#9;text : '应用编辑',
				 * &#9;&#9;iconCls : 'btn-start',
				 * &#9;&#9;handler : function(rowData, rowIndex) {
				 * &#9;&#9;&#9;$('#gridEditorOnClickTr').grid('acceptChange', rowIndex);
				 * &#9;&#9;}
				 * &#9;}
				 * }
		         * @memberof gridColumn
		         */
		        buttons: null,
		        /**
		         * 数据列是否提示浮动的title
		         * @property {Boolean} [showTitle=false] 标志
		         * @memberof gridColumn
		         */
		        showTitle: false,
		        /**
		         * 合计值选项
		         * <PRE>
		         * summary.type 可选值：
		         * &#9;&#9;sum: 合计值
		         * &#9;&#9;avg：平均值
		         * &#9;&#9;min：最小值
		         * &#9;&#9;max：最大值
		         * &#9;&#9;count：计数值
		         * summary.text 要输出的值
		         * </PRE>
		         * @property {Object} [summary] 合计值选项
		         * @property {String} [summary.type] 类型
		         * @property {String} [summary.text] 文字
		         * @memberof gridColumn
		         */
		        summary: null,
		        /**
		         * 网格列是否可以调整宽度
		         * @property {Boolean} [resizable=true] 允许调整列宽
		         * @memberof gridColumn
		         */
		        resizable: true,
		        /**
		         * 是否为行头
		         * @property {Boolean} [rowHeader=false] 不是行头
		         * @memberof gridColumn
		         */
		        rowHeader: false,
		        /**
		         * 是否作为 列隐藏/显示树 的节点
		         * @property {Boolean} [showTree=true] 允许
		         * @memberof gridColumn
		         */
		        showTree: true,
		        /**
		         * 是否锁定列隐藏/显示操作，锁定将不允许用户进行列的隐藏/显示操作
		         * @property {Boolean} [lockTree=false] 允许
		         * @memberof gridColumn
		         */
		        lockTree: false
			},
			Combogrid: {
				/**
				 * 要加载数据的url，也可以通过action设置
				 * @memberof combogrid-class
				 * @property {Url} [url] url数据源
				 */
				url: '',
				/**
				 * <span class="type-signature static">override</span>
				 * 下拉面板的高度
				 * @memberof combogrid-class
				 * @property {Number} [panelheight=297] 下拉面板的高度
				 */
				panelheight: 297,
				/**
				 * 是否允许多选 也可以由checkbox来设置该属性
				 * s.multiple = s.checkbox || s.multiple;
				 * @memberof combogrid-class
				 * @property {Boolean} [multiple=false] 多选
				 */
				multiple: false,
				/**
				 * 联想过滤时使用的匹配属性，多个属性使用,分隔
				 * <PRE style="color:red;">
				 * 当没有配置该属性时，默认使用textfield
				 * 远程联想时 可以通过_key接收输入的搜索关键字、suggestfield接收该字段的配置
				 * </PRE>
				 * @memberof combogrid-class
				 * @property {String} [suggestfield] 匹配属性
				 */
				suggestfield: '',
				/**
				 * 是否允许网格搜索
				 * @todo 当下拉网格不分页时，根据当前页面的数据进行匹配
				 * @todo 当下拉网格存在分页，则根据url进行远程匹配
				 *          远程用 _key 来接受检索关键字，suggestfield来接受检索的匹配属性
				 * </PRE>
				 * @memberof combogrid-class
				 * @property {boolean} [search=false] 允许网格搜索
				 */
				search: false,
				/**
				 * 延迟搜索时间（毫秒）
				 * @memberof combogrid-class
				 * @property {Object} [lazy=500] 延迟搜索时间（毫秒）
				 */
				lazy: 500,
				/**
				 * 允许联想
				 * @memberof combogrid-class
				 * @property {Boolean} [usesuggest=false] 允许联想
				 */
				usesuggest: false,
				/**
				 * 下一页
				 * @memberof combogrid-class
				 * @property {Array} keyNextPage=[App.keyCode.RIGHT] 按键值数组
				 */
				keyNextPage: [App.keyCode.RIGHT],
				/**
				 * 上一页
				 * @memberof combogrid-class
				 * @property {Array} keyPrevPage=[App.keyCode.LEFT] 按键值数组
				 */
				keyPrevPage: [App.keyCode.LEFT],
				className: 'app-combogrid',
				/**
				 * <span class="type-signature static">override</span>
				 * 下拉表格内部表格的默认设置
				 * @see {@link grid} 查看grid组件
				 * @memberof combogrid-class
				 * @property {Object} Grid 下拉表格内部表格的默认设置
				 * @property {Boolean} [Grid.pagerToolbar=false] 上分页与标题栏同行
				 * @property {Boolean} [Grid.rownumbers='repeat'] 网格行号
				 * @property {Boolean} [Grid.autoHeight=true] 自动增高模式
				 * @property {Boolean} [Grid.follow=all] 头/尾跟随滚动
				 * @property {Number} [Grid.clickDelay=0] 单击确认毫秒数
				 */
				Grid:{
					/**
					 * 上分页是否与工具栏同行，false则与标题栏同行
					 */
			        pagerToolbar: false,
					/**
					 * 网格行号
					 */
					rownumbers: 'repeat',
					/**
					 * 内置的网格尾固定高度
					 * 网格头/尾 不跟随滚动
					 */
					follow: null,
					/**
					 * 单击确认毫秒数
					 */
					clickDelay: 0
				}
			},
			Checkbox:{
				/**
				 * 数据对象中作为隐藏值的属性名
				 * @memberof checkbox-class
				 * @property {String} [valuefield=id] 隐藏值属性名
				 */
				valuefield: 'id',
				/**
				 * 数据对象中作为显示值的属性名
				 * @memberof checkbox-class
				 * @property {String} [textfield=name] 显示值属性名
				 */
				textfield: 'name',
				/**
				 * 可以勾选的个数
				 * @memberof checkbox-class
				 * @property {number} [checkLen=0] 0不做限制
				 */
				checkedLen: 0,
				/**
				 * 布局方式，默认为水平布局，可选为：'horizontal' | 'vertical'
				 * @memberof checkbox-class
				 * @property {Array} orient=[horizontal]
				 */
				orient: 'horizontal'
			},
			progressbar: {
				/**
				 * 宽度 默认与父元素宽度相同
				 * @memberof progressbar-class
				 * @property {String} [width=auto] 进度条的宽度
				 */
				width: 'auto',
				/**
				 * 进度值
				 * @memberof progressbar-class
				 * @property {Number} [value=0] 进度值
				 */
				value : 0,
				/**
				 * 高度
				 * @memberof progressbar-class
				 * @property {String} [height=20px] 高度
				 */
				height: '20px',
				/**
				 * 背景色
				 * @memberof progressbar-class
				 * @property {String} [background-color=#4AAE98] 背景色
				 */
				'background-color': '#4AAE98',
				/**
				 * 进度值的前景色
				 * @memberof progressbar-class
				 * @property {String} [color=black] 前景色
				 */
				color: 'black',
				/**
				 * 是否显示条纹
				 * @memberof progressbar-class
				 * @property {String} [striped=true] 显示条纹
				 */
				striped: true,
				/**
				 * 进度最大值
				 * @memberof progressbar-class
				 * @property {String} [max=100] 进度最大值
				 */
				max: 100
			},
			upload: {
				/**
				 * 上传的url
				 * @memberof upload-class
				 * @property {url} uploadUrl=attachment/upload.do 上传的url
				 */
				uploadUrl: 'attachment/upload.do',
				/**
				 * 是否初始化已上传的文件
				 * @memberof upload-class
				 * @property {Boolean} [requestFile=false] 初始化已上传的文件
				 */
				requestFile: false,
				/**
				 * 获取已上传文件的url
				 * @memberof upload-class
				 * @property {url} [fileUrl=attachment/getFiles.do] 获取已上传文件的url
				 */
				fileUrl: 'attachment/getFiles.do',
				/**
				 * 删除已上传文件的url
				 * @memberof upload-class
				 * @property {url} [deleteUrl=attachment/delete.do] 删除已上传文件的url
				 */
				deleteUrl: 'attachment/delete.do',
				/**
				 * 工具栏的位置 可选值 top|bottom
				 * @memberof upload-class
				 * @property {Boolean} [toolbarPosition=top] 工具栏的位置
				 */
				toolbarPosition: 'top',
				/**
				 * 顶层的css样式
				 * @memberof upload-class
				 * @property {style} [style] 顶层的css样式
				 */
				style: '',
				/**
				 * 顶层的class类名
				 * @memberof upload-class
				 * @property {Class} [css] 顶层的class类名
				 */
				css: '',
				/**
				 * 设置宽度后为平铺显示文件
				 * @memberof upload-class
				 * @property {Class} [fileWidth] 文件项的宽度
				 */
				fileWidth: '',
				/**
				 * 文件是否可以删除
				 * @memberof upload-class
				 * @property {Class} [canDelete=false] 不能删除文件
				 */
				canDelete: false,
				/**
				 * 文件的扩展名
				 * @memberof upload-class
				 * @property {String} [exts] 文件的扩展名
				 * @example exts=".zip,.jpg,.rar"
				 */
				exts: '',
				/**
				 * 上传文件按钮的文本
				 * @memberof upload-class
				 * @property {String} [uploadBtnText=上传文件] 上传文件按钮的文本
				 */
				uploadBtnText: '上传文件',
				/**
				 * 可以上传多个文件
				 * @memberof upload-class
				 * @property {Boolean} [multiple=true] 上传多个文件
				 */
				multiple: true
			},
			Button:{
				/**
				 * id
				 * @memberof Button
				 * @property {String}
				 */
				id : null,
				 /**
				 * 是否禁用
				  * @memberof Button
			      * @property {Boolean} [value=false]
				 */
				disabled : false,
				/**
				 * 是否切换元素的可见状态
				* @memberof Button
			 	* @property {Boolean} [value=false]
				 */
				toggle : false,
				/**
				 * 是否选中,当toggle为true有有效
				 * @memberof Button
			 	 * @property {Boolean} [selected=false]
				 * 是否选中
				 */
				selected : false,
				/**
				 * 按钮组.当group值一样时，认为是一组按钮
				 * @memberof Button
			 	 * @property {String} [group='']
				 */
				group : null,
				plain : false,
				/**
				 * @memberof Button
			 	 * @property {String} [text='']
				 * 按钮文本
				 */
				text : "",
				/**
				 * @memberof Button
			 	 * @property {String} [iconCls='']
				 * ico图标样式
				 */
				iconCls : null,
				/**
				 * ico对齐方式
				 * @memberof Button
			 	 * @property {String} [iconCls='left']
				 */
				iconAlign : "left",
                /**
                 * 按钮大小
                 * @memberof Button
                 * @property {String} [iconCls='small'] 小按钮 small,large
                 */
			    size: 'small',	// small,large
                /**
                 * 按钮点击事件
                 * @event Button#onClick
                 * @property {Function} [onClick=emptyFunction]
                 */
				onClick: function(){}
			},
			MenuButton : {
                className:'app-menubutton',
                /**
				 * 禁用启用
				 *  @memberof menututton
			 	 * @property {Boolean} [disabled=false]
				 */
				disabled: false,
				/**
				 * 是否为平面按钮
				 *  @memberof menututton
			 	 * @property {Boolean} [plain=false]
				 */
				plain: true,
				/**
				 * 绑定的菜单id
				 * @memberof menututton
			 	 * @property {String} [menu='']
			 	 * @example menu="#menu1"
				 */
				menu: null,
				/**
				 * 定义了时间以毫秒为单位显示菜单时，悬停按钮
				 * @memberof menututton
			 	 * @property {Number} [duration=100]
			 	 * @example duration=100
				 */
				duration: 100
			},
			Menu: {
                className:'app-menu',
                zIndex:110000,
				left: 0,
				top: 0,
				alignTo: null,
				align: 'left',
				minWidth: 120,
				duration: 100,	// Defines duration time in milliseconds to hide when the mouse leaves the menu.
				hideOnUnhover: true,	// Automatically hides the menu when mouse exits it
				onShow: function(){},
				onHide: function(){},
				onClick: function(item){}
			},
			Panel:{
				/**
				 * @memberof panel
			 	 * @property {String} [id='']
				 * 面板id
				 */
				id:null,
				/**
				 * 面板内间距
				 * @memberof panel
			 	 * @property {String} [padding='0 0 0 0']
				 */
				paddings:"0 0 0 0",
				margins:"0 0 0 0",
				/**
				 * @memberof panel
			 	 * @property {String} [title='']
				 * 面板标题
				 */
				title:null,
				/**
				 * @memberof panel
			 	 * @property {String} [width='auto']
				 * 面板宽度
				 */
				width: 'auto',
				/**
				 * @memberof panel
			 	 * @property {String} [height='auto']
				 * 面板高度
				 */
				height: 'auto',
				/**
				 * @memberof panel
			 	 * @property {String} [left=null]
				 * 面板定位横向坐标
				 */
				left: null,
				/**
				 * @memberof panel
			 	 * @property {String} [top=null]
				 * 面板定位纵向坐标
				 */
				top: null,
				/**
				 * @memberof panel
			 	 * @property {String} [cls=null]
				 * 面板附加样式
				 */
				cls: null,
				/**
				 * @memberof panel
			 	 * @property {String} [headerCls=null]
				 * 面板头部附加样式名
				 */
				headerCls: null,
				/**
				 * @memberof panel
			 	 * @property {String} [bodyCls=null]
				 * 内容体附加样式名
				 */
				bodyCls: null,
				/**
				 * @memberof panel
			 	 * @property {String} [style={}]
				 * 面板样式
				 */
				style: {},
				/**
				 * @memberof panel
			 	 * @property {String} [href=null]
				 * ajax地址
				 */
				href: null,
				/**
				 * @memberof panel
			 	 * @property {String} [cache=true]
				 * 是否缓存
				 */
				cache: true,
				/**
				 * @memberof panel
			 	 * @property {String} [fit=false]
				 * 是否自适应父级控件，放在layout有效
				 */
				fit: false,
				/**
				 * @memberof panel
			 	 * @property {String} [border=true]
				 * 就否显示面板边框
				 */
				border: true,
				/**
				 * @memberof panel
			 	 * @property {String} [doSize=true]
				 *  true to set size and do layout
				 */
				doSize: true,
				/**
				 * @memberof panel
			 	 * @property {String} [noheader=false]
				 *  是否显示标题头
				 */
				noheader: false,
				/**
				 * @memberof panel
			 	 * @property {String} [content=null]
				 * 面板内容体
				 */
				content: null,	// the body content if specified
				/**
				 * @memberof panel
			 	 * @property {String} [collapsible=false]
				 * 是否可收缩
				 */
				collapsible: false,
				/**
				 * @memberof panel
			 	 * @property {String} [minimizable=false]
				 * 是否最小化
				 */
				minimizable: false,
				/**
				 * @memberof panel
			 	 * @property {String} [maximizable=false]
				 * 是否最大化
				 */
				maximizable: false,
				/**
				 * @memberof panel
			 	 * @property {String} [closable=false]
				 * 是否可关闭
				 */
				closable: false,
				/**
				 * @memberof panel
			 	 * @property {String} [collapsed=false]
				 * 收缩状态
				 */
				collapsed: false,
				/**
				 * @memberof panel
			 	 * @property {String} [minimized=false]
				 * 最小化状态
				 */
				minimized: false,
				/**
				 * @memberof panel
			 	 * @property {String} [maximized=false]
				 * 最大化状态
				 */
				maximized: false,
				/**
				 * @memberof panel
			 	 * @property {String} [closed=false]
				 * 关闭状态
				 */
				closed: false,
				extractor:null,
				method : "get",
				/**
				 * @memberof panel
			 	 * @property {String} [queryParams={}]
			 	 * ajax加载参数
				 */
				queryParams : {},
				loader:function(){},
				tools: [],
				loadingMessage: 'Loading...',
				/**
				 * @memberof panel
			 	 * @fires Panel#onLoad
			 	 * 打开前事件
				 */
				onLoad: function(){},
				/**
				 * @memberof panel
			 	 * @fires Panel#onBeforeOpen
			 	 * 打开前事件
				 */
				onBeforeOpen: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onOpen
			 	 * 打开事件
				 */
				onOpen: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onBeforeClose
			 	 * 关闭前事件
				 */
				onBeforeClose: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onClose
			 	 * 关闭事件
				 */
				onClose: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onClose
			 	 * 注销前事件
				 */
				onBeforeDestroy: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onClose
			 	 * 注销事件
				 */
				onDestroy: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onResize
			 	 * @property {Number} width
			 	 * @property {Number} height
			 	 * 注销事件
				 */
				onResize: function(width,height){},
				/**
				 * @memberof panel
			 	 * @event Panel#onMove
			 	 * 移动事件
				 */
				onMove: function(left,top){},
				/**
				 * @memberof panel
			 	 * @event Panel#onMaximize
			 	 * 最大化事件
				 */
				onMaximize: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onRestore
			 	 * 重置事件
				 */
				onRestore: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onMinimize
			 	 * 最小化事件
				 */
				onMinimize: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onMinimize
			 	 * 收缩前事件
				 */
				onBeforeCollapse: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onBeforeExpand
			 	 * 展开前事件
				 */
				onBeforeExpand: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onBeforeExpand
			 	 * 收缩展开监听
				 */
				onCollapse: function(){},
				/**
				 * @memberof panel
			 	 * @event Panel#onBeforeExpand
			 	 * 展开事件
				 */
				onExpand: function(){}
		}

		},
		/**
		 * 统一的zindex定义
		 */
		zindexs:{
			droppanel:2000,
			dialog:1001,
			dialogMask:1000,
			dialogBack:999
		},
		dataTable:{
			iDisplayLength: 20,
		    aLengthMenu: [[20, 50, 100], [20, 50, 100]],
			bServerSide: true,
			bProcessing: false,
			bDeferRender:false,
			sAjaxDataProp:"data",
			pageListLength:10
		},
		pagination:{
			pageSize:20,
			listLength:10,
			pageSizeMenu: [20, 50, 100]
		},
		flexigrid:{
			rpOptions:[20, 50, 100]
		},
		jqgrid:{
			pageList:[20, 50, 100]
		},
		simpletree:{
			selected:"selected",
			exp:"center_expandable",
			coll:"center_collapsable",
			firstExp:"first_expandable",
			firstColl:"first_collapsable",
			lastExp:"last_expandable",
			lastColl:"last_collapsable",
			expandIcon:"icon-folder-close",
			folderIcon:"icon-folder-open",
			oneExp:"one_expandable",
			oneColl:"one_collapsable",
			leafIcon:"icon-file",
			ck:"checked",
			unck:"unchecked"
		},
		getPlugins:function(){
			var plugins=[];
			for(var plugin in this.appDefaults){
				plugins.push({pluginName:plugin.toLowerCase(),className:this.appDefaults[plugin].className});
			}
			return plugins;
		}
	};
	return App.options;
});
define('app/widgets/app-widget',["app/core/app-base",'app/core/app-jquery'], function(Base,$) {
    // Widget
    // ---------
    // Widget 是与 DOM 元素相关联的非工具类组件，主要负责 View 层的管理。
    // Widget 组件具有四个要素：描述状态的 attributes 和 properties，描述行为的 events
    // 和 methods。Widget 基类约定了这四要素创建时的基本流程和最佳实践。
    /**
     * Widget 是与 DOM 元素相关联的非工具类组件，主要负责 View 层的管理
     * @class
     * @name Widget
     * @extends Base
     * @classdesc 控件基类。
     */
  var Widget = Base.extend({
        // config 中的这些键值会直接添加到实例上，转换成 properties
  		//, 'template', 'model', 'events'
      	 propsInAttrs: ['element','template', 'model', 'events'],

        // 与 widget 关联的 DOM 元素
      	element: null,

        // 默认模板
        template: '<div></div>',

        // 默认数据模型
       // model: null,

        // 事件代理，格式为：
        //   {
        //     'mousedown .title': 'edit',
        //     'click {{attrs.saveButton}}': 'save'
        //     'click .open': function(ev) { ... }
        //   }
        events: null,

        // 属性列表
        attrs: {
            // 组件的默认父节点
          //  parentNode: document.body,

            // 默认开启 data-api 解析
            //'data-api': true
        },
        // 初始化方法，确定组件创建时的基本流程：
        // 初始化 attrs --》 初始化 properties --》 初始化 events --》 子类的初始化
        initialize: function(config) {
            //this.cid = uniqueCid();
            // 由 Base 提供
            this.initAttrs(config);
            // 由 Widget 提供
            // 由子类提供
             this.initProps();
             this.setup();
             //this.delegateEvents();
        },

        // 构建 this.element
        // 构建 this.element
        parseElement: function() {
            var element = this.element;
            if (element) {
                this.element = $(element);
            }
            // 未传入 element 时，从 template 构建
            else if (this.get('template')) {
                this.parseElementFromTemplate();
            }

            // 如果对应的 DOM 元素不存在，则报错
            if (!this.element || !this.element[0]) {
                throw 'element is invalid';
            }
        },

        // 从模板中构建 this.element
          // 从模板中构建 this.element
        parseElementFromTemplate: function() {
            this.element = $(this.get('template'));
        },
        // 解析 this.element 中的 data-* 配置，获得 this.dataset
        // 并自动将 data-action 配置转换成事件代理
        _parseDataAttrs: function() {
           
        },
        // 负责 properties 的初始化，提供给子类覆盖
        initProps: function() {
        },
        // 注册事件代理
        delegateEvents: function(events, handler) {
           
        },
        addEvents : function(o){
            var me = this;
            me.events = me.events || {};
            if (typeof o == 'string') {
                var a = arguments,
                    i = a.length;
                while(i--) {
                    me.events[a[i]] = me.events[a[i]] || true;
                	if (this.get(a[i])){
                	 this.off(a[i]);
                	 this.on(a[i],this.get(a[i]),this);
                	}
                }
            } else {
            	for(var evnetName in o){
            		this.off(evnetName);
            		this.on(evnetName,o[evnetName],this);
            	}
                $.extend(me.events, o);
            }
        },
        // 卸载事件代理
        undelegateEvents: function(eventKey, handler) {
        	
        	
        },
        // 提供给子类覆盖的初始化方法
        setup: function() {
        },
        // 将 widget 渲染到页面上
        // 渲染不仅仅包括插入到 DOM 树中，还包括样式渲染等
        // 约定：子类覆盖时，需保持 `return this`
        render: function() {
           
        },
        destroy: function() {
          //  this.undelegateEvents();
            Widget.superclass.destroy.call(this);
        }
    });

    return Widget;
   
});

define(	'app/widgets/app-workspace',["app/core/app-jquery", "app/core/app-core", "app/core/app-options", "app/widgets/app-widget"], function($, $A, Opts,
				 Widget) {
	
	var WorkSpace = Widget.extend({
		initialize : function(el, options) {
			if (!options) {
				options = {};
			}
			WorkSpace.superclass.initialize.call(this, options);
		},
		getActionPage:function(){
			
			return null;
			
		},
		/**
		 * @pageInfo {pageTitle:pageTitle,pageId:pageId,pageUrl:pageUrl}
		 */
		addPage:function(pageInfo){
			
			
		}
		

	})
	
	return WorkSpace;
});
define('app/core/app-main',["app/core/app-jquery","app/core/app-core","app/widgets/app-frags","app/widgets/window/app-messager",localeFile,"app/widgets/app-workspace"],function($,$A,$frags,Messager,locale,AppWorkSpace){
	
	var workSpace=new AppWorkSpace();
	
	var PORTAL={
			portalets:[]
			
	}
	$.extend($A,{
		/**
		 * 扩展$A的方法
		 */
		_exfn:function(selector, context){
			var $con = this.getContainer();
			var $ctrl;
			if(!selector){
				if(context)
					return context;
				return $con; 
			}
				
			if(context&&$con.has(context)){
				$ctrl = $(context,$con).find(selector);
			}else{
				$ctrl = $con.find(selector);
			}
			if($ctrl.isGrid&& $ctrl.isGrid()){
				return $ctrl.getJqGrid();
			}else if($ctrl.isZTree&&$ctrl.isZTree()){
				return $ctrl.getAppZTree();
			}
			return $ctrl;
		}
		,
		
		getWorkSpace:function(){
			return workSpace;
		},
		
		setPortal:function(portal){
			
			PORTAL=portal;
		},
		
		getPortal:function(){
			
			return PORTAL;
		},
		
		getPortalet:function(code){
	
			if (PORTAL){		
		
		var portalets=PORTAL["portalets"];
			if (portalets){
				for(var i=0;i<portalets.length;i++){
				var portale=portalets[i];
				if (portale["code"]==code)
					
					return portale;
				}
				
			}
			}
		},
               
        /**
         * 取得当前选项卡
        */
       getCurrentNavTab:function(){
    	   return $A.getWorkSpace().getActionPage();
         },
		registerWorkSpace:function(workspaceObj){
			workSpace=workspaceObj;
		},

		/**
		 * 取得当前对话框对象
		 */
		getCurrentDialog:function(){
			if(this.dialog&&this.dialog.getCurrent()){
				return this.dialog.getCurrent();
			}
		},
		/**
		 * 取得当前选项卡
		 */
		
		/**
		 *  取得当钱所在容器(对话框/选项卡);
		 */
		getContainer:function(){
			var container;
			if (this.getCurrentDialog){
				container= this.getCurrentDialog();
			}
			if (workSpace){
				if(!container||container.length==0){
					
						container=workSpace.getActionPage();
					
				}
			}
			if(!container||container.length==0){
				container=$(document.body);
			}
			return container;
		},
		/**
		 * 查找当前对象所处容器
		 * @param 指定jquery selector对象
		 */
		findContainer:function(selector){
			var $o = $(selector);
			if($o.size == 0)
				return null;
			var $con = null;
			if($o.is($(document)) || $o.hasClass("dialog")|| $o.hasClass("tabpage")){
				$con = $o;
			}else{
				$con = $o.parents("(.dialog,.tabpage):first");
			}
			if($con.size() == 0){
				$con = $(document);
			}
			return $con;
		},
		/**
		 * 添加初始化事件处理
		 * @param func{function} 事件处理方法
		 * @param target{jquery object} 事件触发对象
		 */
		pageLoad:function(func,target){
			if(!func || typeof func!="function")
				return;
			if(!target){
				target = this.getContainer();
			}
			if($(target).is(document)){
				$(document).ready(func);
			}else{
				$(target).on(this.eventType.pageLoad,func);
			}
		},
		loadLogin:function(){
			window.location=_contextPath+"/login.do";
		}
	});

	
	$A.regInitMethod("appmain",function(){
		$("body").append($frags["globalBodyFrag"]);
		if ($.browser.msie && /6.0/.test(navigator.userAgent) ) {
			try {
				document.execCommand("BackgroundImageCache", false, true);
			}catch(e){}
		}
		//清理浏览器内存,只对IE起效
		if ($.browser.msie) {
			window.setInterval("CollectGarbage();", 10000);
		}
		

		
		$A.regInitMethod("appmain");
	});
	
	
	/**
	 *兼容2.0网格单元框事件绑定
	 */
	$(document).on('click',"a[target=function]", function (e) {
		e.preventDefault();
		var $this = $(this);
		var param = $this.getJsonAttr("data_funcparam");
		var func = $this.getJsonAttr("data_funcname");
		if(typeof(func)=='function'){
			func(param);
		}
	});
	return $A;
	
	
});



/**
 * 本地存储
 * @author Mr.T
 */
define('app/util/app-localstorage',[], function() {
	var Storage = function(opts){
		this.opts = opts;
		if(!opts.key){
			throw new Error('为设置key值，无法初始化LocalStorage');
		}
		this.key = opts.key;
	};
	Storage.prototype = {
		get: function(){
			var innerObj = this._get();
			if(innerObj){
				return innerObj.data;
			}
			return;
		},
		_get: function(){
			var val = localStorage.getItem(this.key);
			if(!val){
				return;
			}
			return JSON.parse(val);
		},
		put: function(val){
			if(!val){
				return;
			}
			var innerObj = this._get()
				,dataType = $.isArray(val) ? typeof val[0]: typeof val; 
			if(!innerObj){
				innerObj = {type: dataType, data: []};
			}
			if(innerObj.type != dataType){
				throw new Error('与已存储的数据类型不匹配，无法完成存储');
			}
			var nodes = val
				,keyField = null;
			if(dataType == 'object'){
				nodes = val.data;
				keyField = val.keyField;
			}
			if($.isArray(nodes)){
				for(var i = 0; i < nodes.length; i++){
					this._put(innerObj, nodes[i], keyField);	
				}
			}else{
				this._put(innerObj, nodes, keyField);	
			}
			localStorage.setItem(this.key, JSON.stringify(innerObj));
		},
		_put: function(innerObj, node, keyField){
			var arr = innerObj.data;
			if(this._contain(arr, node, keyField)){
				return;
			}
			if(arr.length >= 20){
				arr.pop();
			}
			arr.unshift(node);
		},
		_contain: function(arr, node, keyField){
			if(keyField){
				for(var i = 0; i < arr.length; i++){
					if(arr[i][keyField] == node[keyField]){
						return true;
					}
				}
			}else{
				for(var i = 0; i < arr.length; i++){
					if(arr[i] == node){
						return true;
					}
				}
			}
			return false;
		}
	};
	return Storage;
});
/**
 * 文本框控件
 * @author Mr.T
 */
define('app/widgets/form/app-textbox',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 
    'app/core/app-base', 'app/util/app-localstorage'],
	function($, App, Options, Base, LocalStorage) {
	
	'use strict';
	/**
	 * @abstract
	 * @class 
	 * @classdesc 文本框组件，基础组件
	 * @name textbox-class
	 * @desc 文本框的初始化方法
	 * <PRE style="color:red;">组件的属性来源分为三种
	 * &#9;1、初始化组件时传入的options设置属性
	 * &#9;2、来源于input的_options的json串配置的属性
	 * &#9;3、来源于input的属性配置（不建议使用-后期考虑废弃）[无法配置拥有大小写的属性]
	 * 属性的优先顺序为 1>2>3>默认值，options传入的属性优先使用
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @see {@link combo-class} 继承该组件
	 * @see {@link number-class} 继承该组件
	 * @see {@link datetime-class} 继承该组件
	 * @see {@link reference-class} 继承该组件
	 * @example &lt;input &#9;class="app-textbox"
	 * &#9;_options="{
	 * &#9;&#9;readonly: true,
	 * &#9;&#9;clearbtn: true,
	 * &#9;&#9;value: '中国 China',
	 * &#9;&#9;tips: '请输入...',
	 * &#9;&#9;onChange:function(newVal,oldVal){
	 * &#9;&#9;&#9;logOnChange('textboxLog',newVal,oldVal);
	 * &#9;&#9;}
	 * &#9;}"
	 * />
	 * @example $('#demo').textbox({
	 * &#9;clearbtn: true,
	 * &#9;value: '中国 China',
	 * &#9;tips: '请输入...',
	 * &#9;onChange:function(newVal,oldVal){
	 * &#9;&#9;logOnChange('textboxLog',newVal,oldVal);
	 * &#9;}
	 * });
	 */
	var Textbox = Base.extend({
		initialize: function(input, options) {
          	if(!options){
				options = {};
			}
			options._ = $.extend({}, Options.appDefaults.Textbox, options._);
			this.$input = $(input);
			this.$input.data('context', this);
			this.options = options;
			this._baseInit();
        },
        /**
		 * 初始化
		 */
		_baseInit: function(){
			this._baseInitOptions();
			this._baseEventRegister();
			this._wrapByDiv();
			this.$element = this.$input.parent();
			this.$element.data('context', this);
			this.$text = this.$element.find('[type=showValue]');
			this.$value = this.$input;
			this.$clearBtn = this.$element.find('.wrapper-clear');
			this.$openBtn = this.$element.find('.wrapper-open');
			this._registWrapperEvents();
			var s = this.setting;
			this.setValue(s.value, true);
			if(s.text){
				this.setText(s.text);
			}
			if(s.disabled){
				this.disable();
			}
			if(s.readonly){
				this.readonly();
			}
			if(s.autoHideOpenBtn){
				this.$openBtn.hide();
			}
			this._textChangeEvent();
			var formatter = s.formatter; 
			if(formatter){
				if(typeof(formatter) == 'string' && formatter.indexOf('{') >= 0){
					s.template = new Template(formatter);
				}
			}
			this._afterRender();
		},
		/**
		 * 显示值改变事件
		 */
		_textChangeEvent: function(){
			var that = this;
			this.$text.on('change.textbox.api',function(){
				var text = this.value
					,pos = that.$text.getCurPos(); 
				if(that.setting.trim){
					text = $.trim(text); 					
				}
				if(that.forbidReg){
					var forbidRegMatch = text.match(that.forbidReg);
					if(forbidRegMatch){
						pos = text.indexOf(forbidRegMatch[0]);
					}
					text = text.replace(that.forbidReg, '');
				}
				if(that.permitReg){
					var permitRegMatch = text.match(that.permitReg);
					if(permitRegMatch){
						pos = text.indexOf(permitRegMatch[0]);
					}
					text = text.replace(that.permitReg, '');
				}
				that.$text.val(text);
				that.setValue(text);
				if(pos !== null){
					that.$text.setCurPos(pos);
				}
			});
		},
		/**
		 * 显示提示信息
		 */
		_showTips: function(){
			var tips = this.setting.tips
				,text = this.getText();
			if(!tips){
				return;
			}
			if(text == ''){
				this.$text.addClass('wrapper-tips');
				this.$text.val(tips);
			}else{
				this.$text.removeClass('wrapper-tips');
			}
		},
		/**
		 * 初始化尝试
		 */
		_baseInitOptions: function(){
			var customSetting = $.extend(App.getAttrFromElement(this.$input), this.options);
			if($.isFunction(customSetting.beforeRender)){
				customSetting.beforeRender.call(this, customSetting);
			}
			this.customSetting = customSetting;
			if(customSetting.multiple){
				this.options._.clearbtn = true;
			}
			if(isNaN(customSetting.panelheight)){
				delete customSetting.panelheight;
			}
			this.setting = $.extend({}, this.options._, customSetting);
			delete this.options._;
			if(!this.setting.url){
				this.setting.url = this.setting.action;
			}
			//初始化查询参数
			if(this.setting.parameter){
				var parameter = this.setting.parameter;
				if(typeof(parameter) == 'string'){
					parameter = App.jsonEval(this.setting.parameter);					
				}
				this.setParameter(parameter);
			}
			if(this.setting.otherParam){
				if(typeof(this.setting.otherParam) == 'string'){
					this.setting.otherParam = App.jsonEval(this.setting.otherParam);					
				}
			}
			if(this.setting.forbidWord){
				this.forbidReg = new RegExp('[' + this.setting.forbidWord + ']', 'g');
			}
			if(this.setting.permitWord){
				this.permitReg = new RegExp('[^' + this.setting.permitWord + ']', 'g');
			}else{
				var filter = this.setting.filter; 
				var reg = '';
				if(filter == '0-9'){
					reg = '0-9';
				}else if(filter == 'number'){
					reg = '0123456789\\-\\+\\.';
				}else if(filter == 'positiveNumber'){
					reg = '0123456789\\.';
				}
				if(reg){
					this.permitReg = new RegExp('[^' + reg + ']', 'g');
				}
			}
			if(this.setting.historyKey){
				this._localStorage = new LocalStorage({key: this.setting.historyKey, expire: 7});
			}
		},
		/**
		 * 事件的注册器
		 */
		_baseEventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterRender)){
				this.on('afterRender', s.afterRender);
			}
			if($.isFunction(s.onBlur)){
				this.on('onBlur', s.onBlur);
			}
			if($.isFunction(s.onChange)){
				this.on('onChange', s.onChange);
			}
			if($.isFunction(s.onClearValue)){
				this.on('onClearValue', s.onClearValue);
			}
			if($.isFunction(s.onClickOpen)){
				this.on('onClickOpen', s.onClickOpen);
			}
			if($.isFunction(s.onFocus)){
				this.on('onFocus', s.onFocus);
			}
			if($.isFunction(s.onReadonlyClick)){
				this.on('onReadonlyClick', s.onReadonlyClick);
			}
			if($.isFunction(s.enterKeyDown)){
				this.on('enterKeyDown', s.enterKeyDown);
			}
		},
		/**
		 * 注册控件事件
		 */
		_registWrapperEvents: function(){
			this.$element.on('mouseover.textbox.api', ':not(.wrapper-readonly-mask,.wrapper-readonly-mask *)'
									, $.proxy(this._mouseover$element, this));
			this.$element.on('mouseout.textbox.api', $.proxy(this._mouseout$element, this));
			this.$element.on('click.textbox.api', function(e){e.stopPropagation();});
			this.$element.on('mousedown.textbox.api', '.wrapper-btn.wrapper-open', function(e){
				e.stopPropagation();
				e.preventDefault();
			});
			this.$clearBtn.on('click.textbox.api', $.proxy(this._click$clearBtn, this));
			this.$openBtn.on('mousedown.textbox.api', $.proxy(this._mousedown$openBtn, this));
			this.$text.on('click.textbox.api', $.proxy(this._click$text, this));
			this.$text.on('focus.textbox.api', $.proxy(this._focus$text, this));
			this.$text.on('blur.textbox.api', $.proxy(this._blur$text, this));
			this.$text.on('keydown.' + this.setting.className + '.api', $.proxy(this._keyManager, this));
			if(this.forbidReg || this.permitReg){
				if(window.applicationCache){
					this.$text.on('input.' + this.setting.className + '.api', $.proxy(this._keyUpManager, this));
				}else{
					this.$text.on('keyup.' + this.setting.className + '.api', $.proxy(this._keyUpManager, this));
				}
			}
		},
		/**
		 * 顶层元素的mouseover事件
		 */
		_mouseover$element: function(){
			this.$element.addClass('app-wrapper-hover');
			this._autoShowOpenBtn();
			if(this.setting.clearbtn){
				if(this.getText() || this.getValue()){
					var right = 28 * this.$element.find('a.wrapper-btn:visible').length;
					this.$clearBtn.css({display: 'block',right: right});
				}
			}
			this.trigger('onMouseOver');
		},
		/**
		 * 顶层元素的mouseout事件
		 */
		_mouseout$element: function(){
			this.$clearBtn.css('display','none');
			this.$element.removeClass('app-wrapper-hover');
			this._autoHideOpenBtn();
			this.trigger('onMouseOut');
		},
		/**
		 * 清除按钮点击事件
		 */
		_click$clearBtn: function(){
			this.clearValue();
			/**
			 * 删除按钮点击事件
			 * @event textbox-class#onClearValue
			 */
			this.trigger('onClearValue');
		},
		/**
		 * 打开按钮mousedown事件
		 */
		_mousedown$openBtn: function(){
			if(this.togglePanel){ this.togglePanel(); }
			this.focus();
			/**
			 * 打开按钮点击事件
			 * @event textbox-class#onClickOpen
			 */
			this.trigger('onClickOpen');
		},
		/**
		 * 显示文本点击事件
		 */
		_click$text: function(){
			this._setCursorSign();
			if(!this._isEditable()){
				if(this.togglePanel){ this.togglePanel(); }
			}
		},
		/**
		 * 显示值的focus事件
		 */
		_focus$text: function(){
			this._attchCounterTimer();
			this._setCursorSign();
			this.$element.addClass('app-wrapper-active');
			if(this.$text.val() == this.setting.tips){
				this.$text.val('')
				this.$text.removeClass('wrapper-tips');
			}
			this._autoShowOpenBtn();
			/**
			 * onFocus事件
			 * @event textbox-class#onFocus
			 */
			this.trigger('onFocus');
		},
		/**
		 * 计算字符的间隔器
		 */
		_attchCounterTimer: function(){
			var $text = this.$text
				,maxLen = this.setting.maxLength; 
			if(maxLen > 0){
				var i = 0
					,that = this;
				this.counterTimer = setInterval(function(){
					var text = $text.val();
					if (maxLen - text.length >= 0){
						$text.off('keypress.textbox.counter.api');
					}else{
						$text.on('keypress.textbox.counter.api', function(e){
							if(8 !== e.keyCode) return false;						
						});
				   	}
				   	setTimeout(function(){
				   		var text = $text.val();
						if (maxLen - text.length < 0){
							that.showError('已按最大长度'+maxLen+'进行截取',1200);
							$text.val($text.val().substring(0, maxLen));
						}
					}, 0);
				}, 500);
			}
		},
		/**
		 * 显示值的blur事件
		 */
		_blur$text: function(){
			this._detachCounterTimer();
			this.$element.removeClass('app-wrapper-active');
			if(this.getText() == '' && this.setting.tips){
				this.setText(this.setting.tips);
				this.$text.addClass('wrapper-tips');
			}
			this._autoHideOpenBtn();
			/**
			 * onBlur事件
			 * @event textbox-class#onBlur
			 */
			this.trigger('onBlur');
		},
		/**
		 * 清除计算字符的间隔器
		 */
		_detachCounterTimer: function(){
			if(this.counterTimer){
				clearInterval(this.counterTimer);
			}
		},
		/**
		 * 自动显示按钮
		 */
		_autoShowOpenBtn: function(){
			if(this.setting.autoHideOpenBtn){
				this.$openBtn.show();
			}
		},
		/**
		 * 自动隐藏按钮
		 */
		_autoHideOpenBtn: function(){
			if(this.setting.autoHideOpenBtn){
				if(!this.isActive()){
					this.$openBtn.hide();
				}
			}
		},
		/**
		 * 按键事件
		 */
		_keyManager: function(e){
			this._keyCursorPos(e);
		},
		_keyUpManager: function(){
			var that = this;
			setTimeout(function(){
				that.$text.trigger('change');
			}, 100);
		},
		/**
		 * 处理特殊作用的按键
		 * @return true 则为被处理的特殊件
		 */
		_dealSysKey: function(e){
			if(e.keyCode == App.keyCode.TAB){
				if(this._mainDivIsVisiable()){
					this.hidePanel();
				}
				return true;
			}else if(e.ctrlKey && (e.keyCode == App.keyCode.DELETE 
					|| e.keyCode == App.keyCode.BACKSPACE) && this.setting.clearable !== false){
				this.clearValue();
				return true;
			}else if(e.keyCode == App.keyCode.DELETE 
					|| e.keyCode == App.keyCode.BACKSPACE){
				if(!this._isEditable() && this.setting.clearable !== false){
					this.clearValue();
					return true;
				}
			}else if(e.ctrlKey && e.keyCode == App.keyCode.Z){
				e.preventDefault();
				return true;
			}else if(e.keyCode == App.keyCode.PgUp){
				if(this.$dropPanel){
					this.$dropPanel.scrollTop(this.$dropPanel.scrollTop() - this.$dropPanel.outerHeight());
					return true;
				}
			}else if(e.keyCode == App.keyCode.PgDn){
				if(this.$dropPanel){
					this.$dropPanel.scrollTop(this.$dropPanel.scrollTop() + this.$dropPanel.outerHeight());
					return true;
				}
			}
			if(e.keyCode == App.keyCode.ENTER && !e.shiftKey){
				var $target = $(e.target)
					,timeStamp = $target.data('enterKeyTimeStamp');
				if(!timeStamp || (timeStamp && e.timeStamp - timeStamp > 1000) ){
					if(!this._mainDivIsVisiable()){
						$target.data('enterKeyTimeStamp', e.timeStamp);
						this.trigger('enterKeyDown');
					}
				}
				return true;
			}
			return false;
		},
		/**
		 * 代理光标在文本中移动的操作
		 */
		_keyCursorPos: function(e){
			if(this._dealSysKey(e)){
				return;
			}
			var keyCode = e.keyCode;
			if(this._isKeyCursorPos(keyCode)){
				if(e.ctrlKey){
					return;
				}
				switch(keyCode){
					case App.keyCode.LEFT: 
					case App.keyCode.HOME:
					case App.keyCode.UP:
						if(this._isEditable()){
							this._setCursorSign();
							if(!this._beforeFirstChar){
								e.stopPropagation();
							}
						}
						break;
					case App.keyCode.RIGHT: 
					case App.keyCode.END:
					case App.keyCode.DOWN:
						var len = this.getText().length;
						if(this._isEditable()){
							this._setCursorSign();
							if(!this._afterLastChar){
								e.stopPropagation();
							}
						}
						break;
				}
			}else{
				if(this.setting.filter){
					this._filterKeyDown(e);
				}
				this._setCursorSign();
			}
		},
		/**
		 * 是否为控制光标位置的按键
		 */
		_isKeyCursorPos: function(keyCode){
			if(keyCode == App.keyCode.LEFT || keyCode == App.keyCode.RIGHT
				|| keyCode == App.keyCode.HOME || keyCode == App.keyCode.END){
				return true;
			}
			return false;
		},
		/**
		 * 延迟设置是否要继续冒泡的标志
		 */
		_setCursorSign: function(){
			var that = this;
			setTimeout(function(){
				var pos = that._getSelection();
				if(pos.start == 0){
					that._beforeFirstChar = true;
				}else{
					that._beforeFirstChar = false;
				}
				if(pos.end == that.getText().length){
					that._afterLastChar = true;
				}else{
					that._afterLastChar = false;
				}
			},0);
		},
		/**
		 * 获取当前选中文本的起始位置
		 */
		_getSelection: function() {
			var el = this.$text[0]
				,result = {};
			if ('selectionStart' in el) {
				result.start = el.selectionStart;
				result.end = el.selectionEnd;
			}else if('selection' in document) {
				var val = el.value,
				range = document.selection.createRange().duplicate();
				range.moveEnd('character', val.length);
				result.start = range.text == '' ? val.length:val.lastIndexOf(range.text);
				range = document.selection.createRange().duplicate();
				range.moveStart('character', -val.length);
				result.end = range.text.length;
			}
			return result;
		},
		/**
		 * 键盘过滤事件
		 * @param e
		 */
		_filterKeyDown: function(e){
			var filter = this.setting.filter
				,keyCode = e.keyCode;
			if($.isFunction(filter)){
				if(filter(e) === false){
					e.preventDefault();
				}
			}else if(typeof(filter) == 'string'){
				if(keyCode == App.keyCode.DELETE || keyCode == App.keyCode.BACKSPACE){
					return ;
				}
				if(filter == 'number'){
					if(keyCode >= 48 && keyCode <= 57){//横排数字
					
					}else if(keyCode >= 96 && keyCode <= 105){//小键盘数字
					
					}else{
						e.preventDefault();
						if(keyCode == App.keyCode.PLUS || keyCode == App.keyCode.PLUS1){
							this._setNumberSign('');
						}else if(keyCode == App.keyCode.MINUS || keyCode == App.keyCode.MINUS1){
							this._setNumberSign('-');
						}else if(keyCode == App.keyCode.POINT || keyCode == App.keyCode.POINT1){
							this._setNumberPoint();
						}
					}
				}else if(filter == 'positiveNumber'){
					if(keyCode >= 48 && keyCode <= 57){//横排数字
					
					}else if(keyCode >= 96 && keyCode <= 105){//小键盘数字
					
					}else{
						e.preventDefault();
						if(keyCode == App.keyCode.POINT || keyCode == App.keyCode.POINT1){
							this._setNumberPoint();
						}
					}
				}else if(filter == '0-9'){
					if(keyCode >= 48 && keyCode <= 57){//横排数字
					
					}else if(keyCode >= 96 && keyCode <= 105){//小键盘数字
					
					}else{
						e.preventDefault();
					}
				}
			}
		},
		/**
		 * 数值对正负号的控制
		 */
		_setNumberSign: function(sign){
			var text = '';
			if(hasSelectedText()){
				text = '';
				this.setText(text);
			}else{
				text = this.getText()
			}
			if(text.indexOf('-') == 0){
				this.setText(sign + text.substring(1));
			}else{
				this.setText(sign + text);
			}
			setCusor(this.$text[0]);
			function setCusor(input){
				if(input.createTextRange){
					var range = input.createTextRange();
			        range.collapse(true);
			        var pos = input.value.length;
			        range.moveEnd('character', pos);
			        range.moveStart('character', pos);
			        range.select();
				}
			}
			function hasSelectedText(){
				if(window.getSelection) {
	            	return window.getSelection().toString() != '';
	            }else if(document.selection && document.selection.createRange) {
		            return document.selection.createRange().text != '';
		        }
		        return false;
			}
		},
		/**
		 * 数值对小数点的控制
		 */
		_setNumberPoint: function(){
			var text = this.getText();
			if(text.indexOf('.') == -1){
				if(text.length == 0){
					this.setText('0.');
				}else{
					this.setText(text + '.');
				}
			}
		},
		/**
		 * 禁用组件
		 * @todo 使用一个遮罩将组件屏蔽住
		 * @example $('#demo').textbox('disable');
		 * @memberof textbox-class
		 * @instance
		 */
		disable: function(){
			this._outReadonly();
			var $mask = this.$element.find('.wrapper-disabled-mask');
			if($mask.length > 0){
				this.$disabledMask = $mask;
				this._setLabelText();
				this.$disabledMask.show();
			}else if(this.$disabledMask == undefined){
				this.$disabledMask = $('<div class="wrapper-disabled-mask"><label></label></div>');
				this.$element.append(this.$disabledMask);
				this._setLabelText();
			}else{
				this.$disabledMask.show();
			}
			this.$text.attr('tabindex', -1);
			this.$element.addClass('wrapper-disabled');
		},
		/**
		 * 启用组件
		 * @todo 将遮罩移除
		 * @example $('#demo').textbox('enable');
		 * @memberof textbox-class
		 * @instance
		 */
		enable: function(){
			if(this.$disabledMask){
				this.$disabledMask.hide();
			}
			this.$text.removeAttr('tabindex');
			this.$element.removeClass('wrapper-disabled');
		},
		/**
		 * 获取组件的是否可用状态
		 * <PRE>
		 * 	true：可用
		 * 	false：禁用
		 * </PRE>
		 * @returns {Boolean} enable 可用状态
		 * @example $('#demo').textbox('isEnabled');
		 * @memberof textbox-class
		 * @instance
		 */
		isEnabled: function(){
			if(this.$disabledMask && this.$disabledMask.is(':visible')){
				return false;
			}
			return true;
		},
		/**
		 * 设置是否可以输入
		 * @param {Boolean} [editable=true] 允许编辑  
		 */
		_editable: function(editable){
			if(editable == undefined || editable == true){
				this.$text.removeAttr('readonly');
			}else{
				this.$text.attr('readonly', 'readonly');
			}
		},
		/**
		 * 是否可以输入
		 */
		_isEditable: function(){
			var editable = this.$text.attr('readonly');
			if(editable){
				return false;
			}
			return true;
		},
		/**
		 * 切换可用状态
		 * @memberof textbox-class
		 * @instance
		 */
		toggleEnable: function(){
			if(this.$disabledMask && this.$disabledMask.is(':visible')){
				this.enable();
			}else{
				this.disable();
			}
		},
		/**
		 * 设置是否只读
		 * @param {Boolean} [readonly=true] 允许编辑  
		 * @example $('#demo').textbox('readonly');
		 * @example $('#demo').textbox('readonly', false);
		 * @example $('#demo').textbox('readonly', true);
		 * @memberof textbox-class
		 * @instance
		 */
		readonly: function(readonly){
			if(readonly == undefined || readonly == true
					|| readonly == 'true'){
				this._intoReadonly();
			}else{
				this._outReadonly();
			}
		},
		/**
		 * 只读状态
		 * @returns {Boolean} readonly 只读状态
		 * @memberof textbox-class
		 * @instance
		 */
		isReadonly: function(){
			if(this.$readonlyMask && this.$readonlyMask.is(':visible')){
				return true;
			}
			return false;
		},
		/**
		 * 进入只读状态
		 */
		_intoReadonly: function(){
			this.enable();
			var $mask = this.$element.find('.wrapper-readonly-mask');
			if($mask.length > 0){
				this.$readonlyMask = $mask;
				this._setLabelText();
				this.$readonlyMask.show();
			}else if(this.$readonlyMask == undefined){
				var style = '';
				if(this.setting.style){
					style = 'style="text-align:left;' + this.setting.style + ';display:block;"';
				}
				this.$readonlyMask = $('<div class="wrapper-readonly-mask" ' + style + '><label></label></div>');
				this.$element.append(this.$readonlyMask);
				this._setLabelText();
				/**
				 * 只读状态下 内容点击
				 * @event textbox-class#onReadonlyClick
				 * @param {Jquery} $label 内容元素
				 */
				var click = this.setting.onReadonlyClick;
				if($.isFunction(click)){
					click(this.$readonlyMask.find('>label'));
				}
			}else{
				this.$readonlyMask.show();
			}
			this.$element.addClass('wrapper-readonly');
			this.$text.attr('tabindex', -1);
		},
		/**
		 * 离开只读状态
		 */
		_outReadonly: function(){
			if(this.$readonlyMask){
				this.$readonlyMask.hide();
			}
			this.$element.removeClass('wrapper-readonly');
			this.$text.removeAttr('tabindex');
		},
		/**
		 * 切换只读状态
		 * @memberof textbox-class
		 * @instance
		 */
		toggleReadonly: function(){
			this.readonly(!this.isReadonly());
		},
		/**
		 * 设置标签的值
		 */
		_setLabelText: function(){
			if(this.$readonlyMask){
				var text = this.getText();
				this.$readonlyMask.find('label').html(text).attr('title', text);
			}
			if(this.$disabledMask){
				var text = this.getText();
				this.$disabledMask.find('label').html(text).attr('title', text);
			}
		},
		/**
		 * 将焦点聚焦到组件
		 * @memberof textbox-class
		 * @instance
		 */
		focus: function(){
			if(this.isReadonly() || !this.isEnabled()){
				return;
			}
			this.$text.focus();
		},
		/**
		 * 使得组件失去焦点
		 * @memberof textbox-class
		 * @instance
		 */
		blur: function(handle){
			if(this.isReadonly() || !this.isEnabled()){
				return;
			}
			this.$text.one('blur.textbox-one.api', handle);
			this.$text.blur();
		},
		/**
		 * 该组件是否为活动状态
		 * @memberof textbox-class
		 * @instance
		 */
		isActive: function(){
			return this.$element.hasClass('app-wrapper-active');
		},
		/**
		 * 设置请求远程数据时的查询参数
		 * @param {object} param 查询参数
		 * @example $('#demo').textbox('setParameter',{year:2014});
		 * @memberof textbox-class
		 * @instance
		 */
		setParameter: function(param){
			if(!param){
				param = {};
			}
			this.$input.data('_parameter', param);
		},
		/**
		 * 获取请求数据的查询参数
		 * @returns {object} param 查询参数
		 * @example $('#demo').textbox('getParameter');
		 * @memberof textbox-class
		 * @instance
		 */
		getParameter: function(){
			var parameter = this.$input.data('_parameter');
			if($.isFunction(parameter)){
				return parameter();
			}
			return parameter;
		},
		/**
		 * 设置隐藏值和显示值
		 * @param {String} val 值
		 * @param {boolean} [noTrigger] 是否触发change
		 * @todo 如果noTrigger不为true，则触发change事件
		 * @example $('#demo').textbox('setValue','val');
		 * @memberof textbox-class
		 * @instance
		 */
		setValue: function(val, noTrigger){
			this.setText(val);
			this._setValue(val, noTrigger);
		},
		/**
		 * 设置隐藏值和显示值，不触发onChange事件
		 * @param {String} val 值
		 * @example $('#demo').textbox('setValueNoChange','val');
		 * @memberof textbox-class
		 * @instance
		 */
		setValueNoChange: function(val){
			this.setValue(val, true);
		},
		/**
		 * 设置隐藏值
		 */
		_setValue: function(val, noTrigger){
			this.$value.val(val);
			//强制触发onchange事件，验证框架使用change事件机制进行验证
			if(!noTrigger){
				this.$value.trigger('change');
			}
			this._triggerOnChange(val, noTrigger);
		},
		/**
		 * 获取隐藏值
		 * @returns {String} String 隐藏值
		 * @example alert('隐藏值:' + $('#demo').textbox('getValue'));
		 * @memberof textbox-class
		 * @instance
		 */
		getValue: function(){
			return this.$value.val();
		},
		/**
		 * 设置显示值
		 * @example $('#demo').textbox('setText','text');
		 * @memberof textbox-class
		 * @instance
		 */
		setText: function(text){
			this.$text.val(text);
			this._setLabelText();
			this._showTips();
		},
		/**
		 * 获取显示值
		 * @returns {String} String 显示值
		 * @example alert('显示值:' + $('#demo').textbox('getText'));
		 * @memberof textbox-class
		 * @instance
		 */
		getText: function(){
			var text = this.$text.val();
			if(text == this.setting.tips){
				text = '';
			}
			return text;
		},
		/**
		 * 设置提示信息
		 * @example $('#demo').textbox('setTips', '提示信息');
		 * @memberof textbox-class
		 * @instance
		 */
		setTips: function(title){
			this.$element.off('mouseenter.textbox-tips.api')
				.off('mouseleave.textbox-tips.api')
				.off('mousemove.textbox-tips.api');
			if(!title){
				return;
			}
			var that = this;
			this.$element.on('mouseenter.textbox-tips.api', function(e){
			 	that.$tooltip = $('<div class="panel-tooltip">'+ title +'</div>');
		        $.$appPanelContainer.append(that.$tooltip);
		        that.$tooltip.css({
		        	top: (e.pageY + 20) + 'px',
		        	left: (e.pageX + 10)  + 'px',
		        	'z-index': Options.zindexs.droppanel+1
		        }).show('fast');
			}).on('mouseleave.textbox-tips.api', function(e){
				if(that.$tooltip){
		        	that.$tooltip.remove();
				}
			}).on('mousemove.textbox-tips.api', function(e){
				if(that.$tooltip){
		        	that.$tooltip.css({
		                top: (e.pageY + 20) + 'px',
		                left: (e.pageX + 10)  + 'px'
		            });
				}
			});
		},
		/**
		 * 清除值
		 * @todo 清除显示值
		 * @todo 清除隐藏值
		 * @example $('#demo').textbox('clearValue');
		 * @memberof textbox-class
		 * @instance
		 */
		clearValue: function(){
			this.setText('');
			this.setValue('');
		},
		/**
		 * 销毁组件
		 * @todo 清除dom元素，如果有
		 * @memberof textbox-class
		 * @instance
		 */
		destroy: function(){
			if(this.$dropPanel){
				this.$dropPanel.remove();
			}
			this._detachCounterTimer();
			var $errprWrapper = this.$element.data('errorWrapper');
			if($errprWrapper){
				$errprWrapper.remove();
			}
			this.$element.remove();
			if(this.setting.usesuggest && this._suggest){
				this._suggest.$dropPanel.remove();
			}
			this.$input.removeData(this.setting.className.substr(4));
		},
		/**
		 * 触发onChange事件
		 * @param newVal 新值
		 */
		_triggerOnChange: function(newVal, noTrigger){
			var oldVal = this.$input.data('oldVal'); 
			if( oldVal == newVal){
				return;
			}
			this._makeHistory();
			this.$input.data('oldVal', newVal);
			if(noTrigger){
				return;
			}
			/**
			 * onChange事件
			 * 		新设置的值与原值不同时，触发onChange事件
			 * @event textbox-class#onChange
			 * @param {String} newNode 新值
			 * @param {String} oldVal 旧值
			 */
			if(this.hasBindEvent('onChange')){
				this.trigger('onChange', newVal, oldVal);
			}
		},
		_makeHistory: function(){
			if(!this._localStorage){
				return;
			}
			var curr = null;
			if($.isFunction(this.getSelectedNode)){
				curr = this.getSelectedNode();
			}else{
				curr = this.getValue();
			}
			if(!curr){
				return;
			}
			if(typeof curr){
				curr = {
					data: curr,
					keyField: this.setting.valuefield
				}
			}
			this._localStorage.put(curr);
		},
		/**
		 * 将input渲染成自定义控件
		 * @param $input 原始input元素
		 * @param opts 渲染参数
		 */
		_wrapByDiv: function(opts){
			if(this.$input.parent().hasClass('app-wrapper')){
				return;
			}
			if(!this.$input.is('input')){
				return;
			}
			var $input = this.$input
				,s = this.setting;
			var innerHtml = this._initInnerHtml()
				,style = '';
			if(s.width){
				var width = s.width + '';
				if(width.charAt(width.length-1) == '%'){
					style = 'width:' + width +';';
				}else{
					style = 'width:' + parseInt(width) +'px;';
				}
			}
			if(s.wrapstyle){
				style += s.wrapstyle;
			}
			if(s.hiddencomp){
				style = 'display:none;';
			}
			if(style){
				style = 'style="' + style +'"';
			}
			$input.css('display','none');
			$input.removeClass(s.className);
			$input.wrap('<div class="app-wrapper ' + s.className + '" ' + style + '></div>').parent().append(innerHtml);
		},
		/**
		 * 生成控件内部的html
		 * @param $input
		 * @param opts
		 * @returns {String}
		 */
		_initInnerHtml: function(){
			var result =''
				,exp = ''
				,imeStyle = ''
				,s = this.setting;
			if(s.text){
				exp += 'value="' + s.text +'" ';
			}
			if(s.showfield){
				exp += ' name="' + s.showfield + '" field="' + s.showfield + '" ';
			}
			if(s.filter == 'number'
				|| s.filter == '0-9'){
				if(s.style){
					s.style = 'ime-mode: disabled;' + s.style;
				}else{
					s.style = 'ime-mode: disabled;';
				}
			}
			if(s.style){
				exp += ' style="' + s.style + '"';
			}
			if(s.multiline){
				result = '<textarea type="showValue" autocomplete="off" ' + exp + '/>';
			}else{
				result = '<input type="showValue" autocomplete="off" ' + exp + '/>';
			}
			result += '<span class="wrapper-btn wrapper-clear"><i></i></span>';
			if(s.openbtn){
				result += '<a class="wrapper-btn wrapper-open" tabindex="-1"><i></i></a>';
			}
			return result;
		},
		/**
		 * 查看下拉面板是否已显示
		 * @returns true 为显示
		 */
		_mainDivIsVisiable: function(){
			return this.$dropPanel && this.$dropPanel.is(':visible');
		},
		_afterRender: function(){
			var that = this
				,className = this.setting.className.substring(4);
			if(this.$element.hasClass(this.setting.className)){
				var t = setInterval(function(){
					if(that.$input.data(className)){
						clearInterval(t);
						/**
						 * afterRender事件
						 * @event textbox-class#afterRender
						 */
						that.trigger('afterRender');
					}
				}, 1);
			}
		},
		/**
		 * 隐藏错误信息
		 * @memberof textbox-class
		 * @instance
		 */
		hideError: function(){
			var $e = this.$element;
			$e.removeClass('errorTarger');
			var $wrap = $e.data('errorWrapper');
			if($wrap){
				$wrap.hide();
				$e.data('errorWrapper', null);
				$wrap.remove();
				$e.off('mouseenter.textbox.err.api mouseleave.textbox.err.api');
			}
		},
		/**
		 * 显示错误信息
		 * @param {String} errorMsg 错误信息
		 * @param {int} delay 延迟关闭(不设置则不关闭)
		 * @memberof textbox-class
		 * @instance
		 */
		showError: function(errorMsg, delay){
			var $e = this.$element;
			$e.addClass('errorTarger');
			var $wrap = $e.data('errorWrapper');
			if(!$wrap){
				var $wrapper = $('<div class=\"errorWrapper\"><div><div></div></div></div>');
				$wrapper.css('width',$e.outerWidth());
				$wrapper.appendTo($.$appPanelContainer);
				$e.data('errorWrapper', $wrapper);
				var $label = $('<span for="' + this.setting.id + '" generated="true" class="help-inline">' + errorMsg + '</span>');
				$label.insertBefore($wrapper.find('div div'));
				$e.on('mouseenter.textbox.err.api', function(){
					showError($(this));
				}).on('mouseleave.textbox.err.api', function(){
					hideError($(this));
				});
			}else{
				$wrap.find('div>span').text(errorMsg);
			}
			showError($e);
			if(delay){
				var that = this;
				setTimeout(function(){
					that.hideError();
				},delay);
			}
			return $wrap;
			function showError($e){
				var $wrapper = $e.data('errorWrapper');
				if($wrapper && $wrapper.text()){
					$e.addClass('errorTarger');
					var css = $e.offset()
						,$thisTop = $e.offset().top;
					css.display = 'block';
					if($thisTop < $wrapper.outerHeight()){
						css.top = css.top + $e.outerHeight();
						$wrapper.addClass('up');
					}else{
						css.top = css.top -  $wrapper.outerHeight();
						$wrapper.removeClass('up');
					}
					$wrapper.css(css);
				}
			}
			function hideError($e){
				$e.removeClass('errorTarger');
				var $wrapper = $e.data('errorWrapper');
				if($wrapper){
					$wrapper.hide();
				}
			}
		}
	});
	
	$.fn.textbox = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'textbox';
		this.each(function(){
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(!component){
				var opts = option;
				if(typeof option === 'string'){
					opts = false;
				}
				component = new Textbox(this, opts);
				$this.data(componentName, component);
			}
			if(typeof option === 'string'){
				var methodArgs = Array.prototype.slice.call(args, 1);
				methodReturn = App.componentMethodApply(component, option, methodArgs);
			}
		});
		return methodReturn;
	};
	/**
	 * jquery对象
	 * @namespace jquery
	 */
	$.fn.extend({
		/**
		 * 获取当前光标位置的方法
		 * @memberof jquery
		 * @instance
		 */
		getCurPos:function() {
			if(!$(this).is(":focus")){
				return null;
			} 
			var curCurPos = '';
			var all_range = '';
			if (navigator.userAgent.indexOf("MSIE") > -1) { //IE
				if( $(this).get(0).tagName == "TEXTAREA" ){ 
					// 根据body创建textRange
					all_range = document.body.createTextRange();
					// 让textRange范围包含元素里所有内容
					all_range.moveToElementText($(this).get(0));
				} else {
					// 根据当前输入元素类型创建textRange
					all_range = $(this).get(0).createTextRange();
				}
				// 输入元素获取焦点
				$(this).focus();
				// 获取当前的textRange,如果当前的textRange是一个具体位置而不是范围,textRange的范围从start到end.此时start等于end
				var cur_range = document.selection.createRange();
				// 将当前的textRange的end向前移"选中的文本.length"个单位.保证start=end
				cur_range.moveEnd('character',-cur_range.text.length)
				// 将当前textRange的start移动到之前创建的textRange的start处, 此时当前textRange范围变为整个内容的start处到当前范围end处
				cur_range.setEndPoint("StartToStart",all_range);
				// 此时当前textRange的Start到End的长度,就是光标的位置
				curCurPos = cur_range.text.length;
			} else {
				// 文本框获取焦点
				$(this).focus();
				// 获取当前元素光标位置
				curCurPos = $(this).get(0).selectionStart;
			}
			// 返回光标位置
			return curCurPos;
		},
		/**
		 * 设置当前光标位置方法
		 * @memberof jquery
		 * @instance
		 */
		setCurPos:function(start,end) {
			if(end === undefined){
				end = start;
			}
			if(navigator.userAgent.indexOf("MSIE") > -1){
				var all_range = '';
				if( $(this).get(0).tagName == "TEXTAREA" ){ 
					// 根据body创建textRange
					all_range = document.body.createTextRange();
					// 让textRange范围包含元素里所有内容
					all_range.moveToElementText($(this).get(0));
				} else {
					// 根据当前输入元素类型创建textRange
					all_range = $(this).get(0).createTextRange();
				}
				$(this).focus();
				// 将textRange的start设置为想要的start
				all_range.moveStart('character',start);
				// 将textRange的end设置为想要的end. 此时我们需要的textRange长度=end-start; 所以用总长度-(end-start)就是新end所在位置
				all_range.moveEnd('character',-(all_range.text.length-(end-start)));
				// 选中从start到end间的文本,若start=end,则光标定位到start处
				all_range.select();
			}else{
				// 文本框获取焦点
				$(this).focus();
				// 选中从start到end间的文本,若start=end,则光标定位到start处
				$(this).get(0).setSelectionRange(start,end);
			}
		}
	});
	/** 
	 * 初始化下拉面板容器
	 */
	function initPanelContainer(){
		var $container = $('body').find('.appPanelContainer');
		if($container.length == 0){
			$container = $('<div class="appPanelContainer" />');
			$('body').append($container);
		}
		$.$appPanelContainer = $container;
	}
	initPanelContainer();
	return Textbox;
});
define('app/core/app-register',["app/core/app-jquery","app/core/app-core",localeFile,
        'app/core/app-options','app/widgets/form/app-textbox'],function($,App,AppLang,Options){
	//add by tw
	App.regInitMethod(function($box){
		/*if ($("#_pageBar").length>0){
			
			
		}
		$("body").append("<div  id=\"_pageBar\" class=\"page-bar\" style=\"display: none;\"></div>")*/
		
		var filter = ":not(.tab-content .lazy *)";//add by tw（对于指定懒加载且不显示的元素不初始化）
		var initObjs = {},requires=[];
		
		var $jqgrids = $('.jqgrid[init!=true]',$box).filter(filter);
		if($jqgrids.length>0){
			initObjs["initJqGrid"] = $jqgrids;
			requires.push("app/widgets/app-jqgrid");
		}
		
		//add by tw
		
		
		
		var $portlets = $(".app-portlet",$box);
		if($portlets.length>0){
			initObjs["portlet"] = $portlets;
			requires.push("app/widgets/portlet/app-portlet");
		}
		
		/*文本框*/
		var $textbox = $(".app-textbox",$box).filter(filter);
		if($textbox.length > 0){
			initObjs["textbox"] = $textbox;
			requires.push("app/widgets/form/app-textbox");
		}
		/*金额控件*/
		var $money = $(".app-money",$box).filter(filter);
		if($money.length > 0){
			initObjs["money"] = $money;
			requires.push("app/widgets/form/app-money");
		}
		/*数值控件*/
		var $number = $(".app-number",$box).filter(filter);
		if($number.length > 0){
			initObjs["number"] = $number;
			requires.push("app/widgets/form/app-number");
		}
		/*预输入*/
		var $typeahead = $(".app-typeahead",$box).filter(filter);
		if($typeahead.length > 0){
			initObjs["typeahead"] = $typeahead;
			requires.push("app/widgets/form/app-typeahead");
		}
		/*下拉面板*/
		var $combo = $(".app-combo",$box).filter(filter);
		if($combo.length > 0){
			initObjs["combo"] = $combo;
			requires.push("app/widgets/form/app-combo");
		}
		/*下拉框*/
		var $combobox = $(".app-combobox",$box).filter(filter);
		if($combobox.length > 0){
			initObjs["combobox"] = $combobox;
			requires.push("app/widgets/form/app-combobox");
		}
		/*下拉树*/
		var $comboztree = $(".app-comboztree",$box).filter(filter);
		if($comboztree.length > 0){
			initObjs["comboztree"] = $comboztree;
			requires.push("app/widgets/form/app-comboztree");
		}
		/*引用框*/
		var $references = $(".app-reference",$box).filter(filter);
		if($references.length > 0){
			initObjs["reference"] = $references;
			requires.push("app/widgets/form/app-reference");
		}
		/*下拉表格组件*/
		var $combogrid = $(".app-combogrid",$box).filter(filter);
		if($combogrid.length > 0){
			initObjs["combogrid"] = $combogrid;
			requires.push("app/widgets/form/app-combogrid");
		}
		/*联想框*/
		var $suggest = $(".app-suggest",$box).filter(filter);
		if($suggest.length > 0){
			initObjs["suggest"] = $suggest;
			requires.push("app/widgets/form/app-suggest");
		}
		/*日期框*/
		var $datetimes = $("input.app-datetime",$box).filter(filter);
		if($datetimes.length > 0){
			initObjs["datetime"] = $datetimes;
			requires.push("app/widgets/form/app-datetime");
		}
		/*复选框*/
		var $checkbox = $("input.app-checkbox",$box).filter(filter);
		if($checkbox.length > 0){
			initObjs["checkbox"] = $checkbox;
			requires.push("app/widgets/form/app-checkbox");
		}
		/*上传组件*/
		var $upload = $(".app-upload",$box).filter(filter);
		if($upload.length > 0){
			initObjs["upload"] = $upload;
			requires.push("app/widgets/form/app-upload");
		}
		
		var $dropdowns = $("[data-toggle=dropdown]", $box).filter(filter);
		if($dropdowns.length > 0){
			requires.push("bootstrap/bootstrap-dropdown");
		}
		
		/* Tab组件 */
		var $appTabs = $(".app-tabs", $box).filter(filter);
		if($appTabs.length > 0){
			initObjs["tabs"] = $appTabs;
			requires.push("app/widgets/tabs/app-tabs");
		}
		/* xquerybox */
		var $xquerybox = $(".app-xquerybox", $box).filter(filter);
		if($xquerybox.length > 0){
			initObjs["xquerybox"] = $xquerybox;
			requires.push("app/widgets/form/app-xquerybox");
		}
		/* Tab组件 
		var $tabcontents = $(".tab-container", $box).filter(filter);
		if($tabcontents.length > 0){
			initObjs["appTabs"] = $tabcontents;
			requires.push("app/widgets/tabs/app-tab");
		}
*/
		/* ZTREE组件 */
		var $ztrees = $('.apptree',$box).filter(filter);
		if($ztrees.length>0){
			initObjs["initZTree"] = $ztrees;
			requires.push("app/widgets/tree/app-ztree");
		}
		/* 查询组件 */
		var $xquerys = $('.xquery',$box).filter(filter);
		if($xquerys.length>0){
			initObjs["initXquery"] = $xquerys;
			requires.push("app/widgets/form/app-xquery");
		}
		var appdatagrid = $('.app-datagrid',$box).filter(filter);
		if(appdatagrid.length>0){
			initObjs["datagrid"] = appdatagrid;
			requires.push("app/widgets/treegrid/app-datagrid");
		}
		var apptreegrid = $('.app-treegrid',$box).filter(filter);
		if(apptreegrid.length>0){
			initObjs["treegrid"] = apptreegrid;
			requires.push("app/widgets/treegrid/app-treegrid");
		}
		
		/*表单校验*/
		var $form = $("form.required-validate", $box).filter(filter);
		if($form.length > 0 
				&& $form.find('input[validations]').length > 0){
			$form.each(function(){
				$(this).validate({
					debug: true,
					success: "valid",
					submitHandler : function() {
						alert("验证通过!");
					}
				});
			});
		}
		
		/*注册表单提交*/
		var $forms = $("div.form>form",$box).filter(filter);
		if($forms.length>0){
			initObjs["initForm"] = $forms;
			requires.push("app/widgets/form/app-form");
		}
		/*联动规则*/
		var $gearRules = $("[gearRules]", $box).filter(filter);
		if($gearRules.length > 0 ){
			requires.push("app/widgets/form/app-rule");
			initObjs["gearRule"] = $gearRules;
		}
		/*按钮状态*/
		var $buttonStates = $(".btnarea>div.button-state", $box).filter(filter);
		if($buttonStates.length > 0 ){
			requires.push("app/widgets/button/app-buttons");
			initObjs["initButtonState"] = $buttonStates;
		}
		var $buttons= $(".app-button", $box).filter(filter);
		if($buttons.length > 0 ){
			requires.push("app/widgets/button/app-button");
			initObjs["button"] = $buttons;
		}
		var $menubutton= $(".app-menubutton", $box).filter(filter);
		if($menubutton.length > 0 ){
			requires.push("app/widgets/button/app-menubutton");
			initObjs["menubutton"] = $menubutton;
		}
		
		var $layout= $(".app-layout", $box).filter(filter);
		if($layout.length > 0 ){
			requires.push("app/widgets/layout/app-layout2");
			initObjs["layout"] = $layout;
		}	
		var $panel= $(".app-vboxLayout", $box).filter(filter);
		if($panel.length > 0 ){
			requires.push("app/widgets/layout/app-boxlayout");
			initObjs["VBoxLayout"] = $panel;
		}
		
		var $panel= $(".app-hboxLayout", $box).filter(filter);
		if($panel.length > 0 ){
			requires.push("app/widgets/layout/app-boxlayout");
			initObjs["HBoxLayout"] = $panel;
		}
		
		var $panel= $(".app-panel", $box).filter(filter);
		if($panel.length > 0 ){
			requires.push("app/widgets/panel/app-panel");
			initObjs["panel"] = $panel;
		}
		/*表格组件*/
		var $grid = $(".app-grid",$box).filter(filter);
		if($grid.length > 0){
			initObjs["grid"] = $grid;
			requires.push("app/widgets/grid/app-grid");
		}
		var $menus= $(".app-menu", $box).filter(filter);
		if($menus.length > 0 ){
			requires.push("app/widgets/menu/app-menu");
			initObjs["menu"] = $menus;
		}
		
		//console.log($buttons)
		/*滚动页签*/
		var $scrollspys = $(".scrollspy", $box).filter(filter);
		if($scrollspys.length > 0 ){
			requires.push("app/app-scroll");
			initObjs["scrollspy"] = $scrollspys;
		}
		initObjs["initEvent"]=function(){
			$("[handle][handleType=JS]",$box).filter(filter).each(function(){
				var $this = $(this);
				var handle = $this.attr("handle");
				$this.removeAttr("handle");
				if(!handle)
					return;
				var func=null;
				try{
					func = $box.getJsFunction(handle);
				}catch(e){
					return;
				}
				$this.click(function(e){
					if($this.isTag("a"))
						e.preventDefault();
					if($this.attr("disabled")||$this.hasClass("disabled"))
						return;
					func.call($this);
				});
			});
			$("[events][eventSelf!=true]",$box).filter(filter).each(function(){
				$this = $(this);
				var evts = $this.attr("events");
				if(!evts)
					return;
				var es = $this.getJsEvent(evts);
				$this.on(es);
			});
		};
		/*统一初始化*/
		if(requires.length>0){
			require(requires,function(){
				$.each(initObjs,function(key){
					try{
					var o = initObjs[key];
					if($.isFunction(o)){
						o();
					}else{
						o[key]();
					}
					}catch(ex){
						if (window.console){
							console.log(ex);
						}
					}
				});
		/*		console.log($box);
				console.log($A.eventType.pageLoad)*/
				$box.triggerHandler($A.eventType.pageLoad);
				
				//setTimeout(function(){
					$("#_tabmask").hide();
				//	$("#_tabmask").remove();
				//},100);
				
//				initKey();
			});
		}else{
			$.each(initObjs,function(key){
				try{
				var o = initObjs[key];
				if($.isFunction(o)){
					o();
				}else{
					o[key]();
				}
				}catch(ex){
					if (window.console){
						console.log(ex);
					}
				}
			});
//			initKey();
			$box.triggerHandler($A.eventType.pageLoad);
			/*$("#_tabmask").hide(function(){$("#_tabmask").remove();});*/
			//setTimeout(function(){
				$("#_tabmask").hide();
			
				//$("#_tabmask").remove();
			//}, 100);
		}
		
	});
	
//	 function initKey() {
//		$A(':input:text:first:enabled:visible').focus();
//		$A(':input:enabled:visible').addClass('enterIndex');
//		// get only input tags with class data-entry
//		textboxes = $('.enterIndex');
//		// now we check to see which browser is being used
//		if ($.browser.mozilla) {
//			$A(textboxes).unbind('keypress.formkey',CheckForEnter)
//			$A(textboxes).bind('keypress.formkey', CheckForEnter);
//		} else {
//			$A(textboxes).unbind('keydown.formkey',CheckForEnter)
//
//			$A(textboxes).bind('keydown.formkey', CheckForEnter);
//		}
//
//		function CheckForEnter(event) {
//			if (event.keyCode == 13 && $A(this).attr('type') != 'button'
//					&& $A(this).attr('type') != 'submit'
//					&& $A(this).attr('type') != 'textarea'
//					&& $A(this).attr('type') != 'reset') {
//				var i = $A('.enterIndex').index($A(this));
//				var n = $A('.enterIndex').length;
//				if (i < n - 1) {
//					if ($A(this).attr('type') != 'radio') {
//						NextDOM($A('.enterIndex'), i);
//					} else {
//						var last_radio = $A('.enterIndex')
//								.index($A('.enterIndex[type=radio][name='
//										+ $A(this).attr('name')
//										+ ']:last'));
//						NextDOM($A('.enterIndex'), last_radio);
//					}
//				}
//				return false;
//			}
//		}
//		function NextDOM(myjQueryObjects, counter) {
//			if (myjQueryObjects.eq(counter + 1)[0].disabled) {
//				NextDOM(myjQueryObjects, counter + 1);
//			} else {
//				myjQueryObjects.eq(counter + 1).trigger('focus');
//			}
//		}
//	}
});
define('app/util/app-number-format',[], function(){
	/**
	 * @class
	 * @classdesc 数字工具类
	 * @name NumberFormat-class
	 * @desc 提供数字的格式化方法
	 */
	var NumberFormat = {};
	/**
	 * 格式化数值
	 * @param num 数值
	 * @param pattern 格式化串
	 * <PRE>
	 * 1、格式化串以;;#结束 则说明0不显示
	 * 2、如果格式化串数字部分以%结束 则说明进行百分比显示 
	 * <PRE>
	 * @returns {String}
	 * @example $A.NumberFormat.format(1234, '#,###.##');->1,234
	 * @example $A.NumberFormat.format(1234, '#,###.00');->1,234.00
	 * @example $A.NumberFormat.format(0, '#,###.00');->0.00
	 * @example $A.NumberFormat.format(0, '#,###.00;;#');->
	 * @example $A.NumberFormat.format('', '#,###.00;;#');->
	 * @example $A.NumberFormat.format(null, '#,###.00;;#');->
	 * @example $A.NumberFormat.format(14, '#,###.00%');->1,400.00%
	 * @memberof NumberFormat-class
	 * @instance
	 */
	NumberFormat.format = function(num, pattern) {
		if(num == undefined){
			return '';
		}
		var result = '';
		if(pattern.indexOf(';;#') == pattern.length-3){
			if(num == 0){
				return '';
			}
			pattern = pattern.substr(0, pattern.length-3);
		}
		var hasPercent = pattern.indexOf('%') == pattern.length - 1; 
		if(hasPercent){
			num = num*100;
			pattern = pattern.substr(0, pattern.length-1);
		}
		var strarr = num ? num.toString().split('.') : [ '0' ]
			,fmtarr = pattern ? pattern.split('.') : [ '' ]
			,intStr = formatInteger(strarr, fmtarr)
			,decimalStr = formatDecimal(strarr, fmtarr)
			,result = '';
		if(decimalStr){
			result = intStr + '.' + decimalStr;
		}else{
			result = intStr;
		}
		if(hasPercent){
			result += '%';
		}
		return result;
		function formatInteger(strarr, fmtarr){
			var result = ''
				,str = strarr[0]
				,fmt = fmtarr[0]
				,i = str.length - 1
				,comma = false;
			for (var f = fmt.length - 1; f >= 0; f--) {
				switch (fmt.substr(f, 1)) {
				case '#':
					if (i >= 0)
						result = str.substr(i--, 1) + result;
					break;
				case '0':
					if (i >= 0)
						result = str.substr(i--, 1) + result;
					else
						result = '0' + result;
					break;
				case ',':
					comma = true;
					result = ',' + result;
					break;
				}
			}
			if (i >= 0) {
				if (comma) {
					var l = str.length;
					for (; i >= 0; i--) {
						result = str.substr(i, 1) + result;
						if (i > 0 && ((l - i) % 3) == 0)
							result = ',' + result;
					}
				} else
					result = str.substr(0, i + 1) + result;
			}
			return result.replace(/^,+/,'').replace(/^(-,)/,'-');
		}
		function formatDecimal(strarr, fmtarr){
			var str = strarr.length > 1 ? strarr[1] : ''
				,fmt = fmtarr.length > 1 ? fmtarr[1] : ''
				,i = 0
				,result = '';
			for (var f = 0; f < fmt.length; f++) {
				switch (fmt.substr(f, 1)) {
				case '#':
					if (i < str.length)
						result += str.substr(i++, 1);
					break;
				case '0':
					if (i < str.length)
						result += str.substr(i++, 1);
					else
						result += '0';
					break;
				}
			}
			return result;
		}
	};
	/**
	 * 三位一个逗号隔开的展现，保留s为小数
	 * @param num 数值
	 * @param precision 保留小数位
	 * @param ixMax 是否按原数值的最大小数位
	 * @returns {String}
	 */
	NumberFormat.toThousands = function(num, precision, isMax){
		var pattern = '#,##0';
		if(precision > 0){
			var decimalPattern = '';
			for(var i = 0; i < precision; i++){
				if(isMax){
					decimalPattern += '#';
				}else{
					decimalPattern += '0';
				}
			}
			pattern += '.' + decimalPattern;
		}
		return NumberFormat.format(num, pattern);
	};
	/**
	 * 转换为大写金额
	 * @param num 数值
	 * @returns {String}
	 */
	NumberFormat.toChinese = function(num){
		if (isNaN(num))
			return '';
		if(num > Math.pow(10, 12)){
			return '还未处理这么大的值';
		}
		var cn = '零壹贰叁肆伍陆柒捌玖'
			,unit = new Array('拾佰仟', '分角')
			,unit1 = new Array('万亿', '')
			,numArray = num.toString().split('.')
			,start = new Array(numArray[0].length - 1, 2);
		for ( var i = 0; i < numArray.length; i++) {
			var tmp = '';
			for ( var j = 0; j * 4 < numArray[i].length; j++) {
				var strIndex = numArray[i].length - (j + 1) * 4
					,str = numArray[i].substring(strIndex, strIndex + 4)
					,start = i ? 2 : str.length - 1
					,tmp1 = getChinese(str, i);
				tmp1 = tmp1.replace(/(零.)+/g, '零').replace(/零+$/,'');
				tmp = (tmp1 + (tmp1 ? unit1[i].charAt(j - 1) : '')) + tmp;
			}
			numArray[i] = tmp;
		}
		numArray[1] = numArray[1] ? numArray[1] : '';
		numArray[0] = numArray[0] ? numArray[0] + '元' : numArray[0];
		numArray[1] = numArray[1].match(/分/) ? numArray[1] : numArray[1] + '整';
		return numArray[0] + numArray[1];
		/**
		 * 转换为大写
		 * @param num 数字
		 * @param 数字所在索引
		 * @returns {String} 大写值
		 */
		function getChinese(num, index) {
			num = num.replace(/\d/g, function($1) {
				return cn.charAt($1)+ unit[index].charAt(start-- % 4 ? start % 4: -1);
			});
			return num;
		}
	};
	return NumberFormat;
});
define('app/util/app-xss-utils',[], function() {

	var REGX_DECODE = /&\w+;|&#(\d+);/g;

	var DECODE = {
		"&lt;" : "<",
		"&gt;" : ">",
		"&amp;" : "&",
		"&nbsp;" : " ",
		"&quot;" : "\""
		// Add more
	};

	String.prototype.xssDecode = function(s) {
		s = (s != undefined) ? s : this.toString();
		return (typeof s != "string") ? s : s.replace(REGX_DECODE,
				function($0, $1) {
					var c = DECODE[$0];
					if (c == undefined) {
						if (!isNaN($1)) {
							c = String.fromCharCode(($1 == 160) ? 32 : $1);
						} else {
							c = $0;
						}
					}
					return c;
				});
	};
});
define('app/util/app-utils',["app/core/app-jquery","app/core/app-core", 
        'app/util/app-number-format', 'app/util/app-xss-utils'], function ($, App, NumberFormat){
	
	var DEFAULT_DATE_PATTERN = "yyyy-MM-dd";
	
	var IDCARD1_PATTERN = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/;
	
	var IDCARD2_PATTERN = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{4}$/;
	
	var _PrivateFuncs = {
			"formatDateNum":function(num,len){
				var v = num.toString();
				if(v.length<len){
					var tmp = [len-v.length];
					for(var i=0;i<tmp.length;i++){
						tmp[i] = "0";
					}
					v = tmp.join("")+v;
				}else if(v.length>len){
					v = v.substring(v.length-len,v.length);
				}
				return v;
			}
	};
	
	/**
	 * 定义工具方法
	 */
	App.utils={
		/**
		 * 过滤特殊的html和js标签
		 */
		htmlencode: function(s){  
		    var div = document.createElement('div');  
		    div.appendChild(document.createTextNode(s));  
		    return div.innerHTML;  
		},
		/**
		 * 收集指定html元素指定属性，生成选项对象
		 */
		collectOptions:function(el,opNames){
			if(!opNames||!jQuery.isArray(opNames))
				return null;
			$el = $(el);
			var options = {};
			for(var i=0; i< opNames.length;i++){
				var val,name = opNames[i];
				if(name.indexOf(":")>-1){
					var t = name.split(":");
					val=$el.attr(t[0]);
					name=t[1];
				}else{
					val = $el.attr(name);
				}
				if(val){
					if(val.isInteger()){
						options[name] = parseInt(val,10);
					}else{
						options[name] = val;
					}
				}
			}
			return options;
		},
		/**
		 * 转换元素属性中的模板变量
		 */
		evalElementAttr:function(el,attrName){
			var $el = $(el),attr=attrName||"href";
			var val = this.attr($el,attr);
			if(!val || val.isFinishedTm())
				return val;
			val = val.evalTemplate(el);
			return val;
		},
		
		/**
		 * 取得当前元素的指定属性值包括val text html属性
		 */
		attr:function(el,attr){
			if(!attr)
				return null;
			return attr=='text'?$(el).text():(attr=='html'?$(el).html():(attr=='val'||attr=='value'?$(el).val():$(el).attr(attr)));
		},
		/**
		 * 格式化消息串
		 */
		format:function(msg,args){
			args = args || [];
			var result = msg;
			for (var i = 0; i < args.length; i++){
				result = result.replace(new RegExp("\\{" + i + "\\}", "g"), args[i]);
			}
			return result;
		},
		/**
		 * 获取传入日期的月份范围，月份的第一天到最后一天
		 * @param date
		 * @result {begin,end}
		 */
		getMonthRange: function(date){
			var year = date.getFullYear()
				,month = date.getMonth()
				,days = new Date(year, month + 1, 0).getDate()
				,begin = new Date(year,month,1)
				,end = new Date(year,month,days); 
			return {begin:begin,end:end};
		},
		/**
		 * 获取传入年度的范围，年度的第一天到最后一天
		 * @param year
		 * @result {begin,end}
		 */
		getYearRange: function(year){
			var begin = new Date(year,0,1)
				,end = new Date(year,11,31); 
			return {begin:begin,end:end};
		},
		/**
		 * 获取传入日期所在季度的范围，季度第一天和最后一天
		 * @param date
		 * @returns {string} begin,end
		 */
		getSeasonRange: function(date){
			var year = date.getFullYear()
				,month = date.getMonth()
				,season = getMonth_Season(month + 1)
				,firstMonth = 0
				,lastMonth = 0;
			switch (season) {
			case 1:
				firstMonth = 1;
				lastMonth = 3;
				break;
			case 2:
				firstMonth = 4;
				lastMonth = 6;
				break;
			case 3:
				firstMonth = 7;
				lastMonth = 9;
				break;
			case 4:
				firstMonth = 10;
				lastMonth = 12;
				break;
			default:
				break;
			}
			var lastDate = new Date(year, lastMonth, 0).getDate()
				,begin = new Date(year, firstMonth - 1, 1)
				,end = new Date(year, lastMonth - 1, lastDate);
			return {begin:begin,end:end};
			/**
			 * 返回当前的日期为第几季度
			 * @param date
			 * @returns {Number}
			 */
			function getMonth_Season(month){
				var result = 0;
				if(month <= 3){
					result = 1;
				}else if(month <= 6){
					result = 2;
				}else if(month <= 9){
					result = 3;
				}else if(month <= 12){
					result = 4;
				}
				return result;
			}
		},
		/**
		 * 三位一个逗号隔开的展现，保留s为小数
		 * @param s 数值
		 * @param n 保留小数位(默认保留2位)
		 * @returns {String}
		 */
		formatNumber: function(s, n){
			if(n == undefined || typeof n != 'number'){
				n = 2;
			}
			return NumberFormat.toThousands(s, n);
		},
		/**
		 * 三位一个逗号隔开展现，最大保留x为小数
		 * @param s 数值
		 * @param x 最大保留小数位
		 */
		formatNumberSpc: function(s, n){
			return NumberFormat.toThousands(s, n, true);
		},
		/**
		 * 转换为大写金额
		 * @param n 数值
		 * @returns {String}
		 */
		formatChinese: function(n){
			return NumberFormat.toChinese(n);
		},
		/**
		 * 解析一个字符串变成Date对象
		 * @param str
		 * @param pattern
		 * @returns {Date}
		 */
		"parseDate" : function(str,pattern){
			if(!str){
				return;
			}
			if(!pattern){
				pattern = DEFAULT_DATE_PATTERN;
			}
			var tmp = [],nms = [];
			var r = pattern.replace(/[y|M|d|H|m|s]+/g,function($0){
				tmp.push($0);
				return "(\\d+)";
			});
			var reg = new RegExp(r,"g");
			if(!reg.test(str)){
				alert("解析日期时间出错");
				return  null;
			}
			str.replace(reg,function(){
				nms = $.makeArray(arguments).slice(1,tmp.length+1);
			});
			var date = new Date();
			for(var i=0;i<tmp.length;i++){
				var k = tmp[i];
				var n = parseInt(nms[i],10);
				switch(k.charAt(0)){
					case 'y':{date.setFullYear(n);break;}
					case 'M':{date.setMonth(n-1);break;}
					case 'd':{date.setDate(n);break;}
					case 'H':{date.setHours(n);break;}
					case 'm':{date.setMinutes(n);break;}
					case 's':{date.setSeconds(n);break;}
					case 'S':{date.setMilliseconds(n);break;}
				}
			}
			return date;
		},
		
		/**
		 * 格式化Date
		 * @param {date} date
		 * @param {string} pattern
		 * @return {string}
		 */
		"formatDate" : function(date,pattern){
			if(!date){
				return;
			}
			if(!pattern){
				pattern = DEFAULT_DATE_PATTERN;
			}
			var result = pattern.replace(/[y|M|d|H|m|s]+/g,function($0){
				var value="",len = $0.length,c=$0.charAt(0);
				switch(c){
					case 'y':{value = date.getFullYear();break;}
					case 'M':{value = date.getMonth()+1;break;}
					case 'd':{value = date.getDate();break;}
					case 'H':{value = date.getHours();break;}
					case 'm':{value = date.getMinutes();break;}
					case 's':{value = date.getSeconds();break;}
					case 'S':{value = date.getMilliseconds();break;}
				}
				return _PrivateFuncs.formatDateNum(value,len);
			});
			return result;
		},
		/**
		 * 是否是身份证
		 */
		"isIDCard":function(idCard){
			return /^((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|71|(8[12])|91)\d{4}((19\d{2}(0[13-9]|1[012])(0[1-9]|[12]\d|30))|(19\d{2}(0[13578]|1[02])31)|(19\d{2}02(0[1-9]|1\d|2[0-8]))|(19([13579][26]|[2468][048]|0[48])0229))\d{3}(\d|X|x)?$/.test(idCard);
		},
		/**
		 * 判断是否是正整数
		 * @param {string}
		 * @returns {Boolean}
		 */
		"isPlusInteger" : function(str){
			//包括零
			return /^(0|[1-9][0-9]*)$/.test(str) && str.length<11;
		},
		/**
		 * 判断是否是座机号码
		 * @param {string}phoneNum
		 * @return {boolean}
		 */
		"isPhone":function (phoneNum){
			return /^(\d{3,4}-?)?[1-9]\d{6,7}([-|转]\d{2,4})?$/.test(phoneNum);
			//return (new RegExp(/^((\(\d{3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}$/)).test(phoneNum);
		},
		/**
		 * 是否是手机号码
		 */
		"isMobile":function (mobileNum){
			return (new RegExp(/^((\(\d{3}\))|(\d{3}\-))?1[358]\d{9}$/)).test(mobileNum);
		},
		/**
		 * 是否是邮件
		 */
		"isMail" : function (mail){
			return (new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/)).test(mail);
		},
		/**
		 * 是否是URL
		 */
		"isURL":function (u){
			return (new RegExp(/^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/)).test(u);
		},
		/**
		 * 是否是邮编
		 */
		"isZipCode":function (zipCode){
			return (new RegExp(/^[1-9]\d{5}$/)).test(zipCode);
		},
		//校验只能是数字
		"isDigits" : function(field) {
			return (new RegExp(/^[0-9]*$/)).test(field)&& field.length<=32;
		},
        /**
		 *
		 * @param {array|function}
		 * @description 快速排序
		 *
         */
		sort:function (array,fn) {
			var len = array.length;
			if(len<=1){
				return array;
			}
			var middleIndex = Math.floor(len/2);
			var middleVal = array[middleIndex];
			var leftArray = [],rightArray = [];
			$(array).each(function (index,item) {
                var r = fn(middleVal,item);
				if(r>=1){
					leftArray.push(item);
				}else if(r<0){
                   	rightArray.push(item);
				}else if(r==0&&index>middleIndex){
                    rightArray.push(item);
				}else if(r==0&&index<middleIndex){
                    leftArray.push(item);
                }
            })
			return App.utils.sort(leftArray,fn).concat(middleVal,App.utils.sort(rightArray,fn));
        }
	};



	/**
	 * 扩展jQuery匹配表达式
	 */
	function innerTextExactMatch(elem, text) {
		return (elem.textContent || elem.innerText || $(elem).text() || '').toLowerCase() === (text || '').toLowerCase();
	}
	
	$.expr[':'].innerTextExactMatch = $.expr.createPseudo?
		$.expr.createPseudo(function (text) {
			return function (elem) {
				return innerTextExactMatch(elem, text);
			};
		}) :
		function (elem, i, match) {
			return innerTextExactMatch(elem, match[3]);
	};
	/**
	 * 获取字符串长度(英文占1个字符，中文汉字占2个字符)
	 */
	String.prototype.gblen = function(){    
	    var len = 0;    
	    for (var i=0; i<this.length; i++) {    
	        if (this.charCodeAt(i)>127 || this.charCodeAt(i)==94) {    
	             len += 2;    
	         } else {    
	             len ++;    
	         }    
	     }    
	    return len;    
	}
	App.NumberFormat = NumberFormat;
	App.utils.addTreeBtn = function(node, btn){
		var nodeId = node.tId
			,btnId = nodeId + '_' +btn.id;
		if ($('#' + btnId).length>0) return;
		var $btn = $('<span class="button ' + btn.icon + '" id="' + 
				btnId + '" title="' + btn.title +
				'"></span>'); 
		$btn.on('click', function(e){
			btn.handler(node);
			e.stopPropagation();
		});
		$('#' + nodeId + '_span').after($btn);
	};
	return App.utils;
});
/**
 * @class JsonResult
 * <p>此类封装服务调用返回信息</p>
 * @constructor
 * @param {Object} src JSON格式的源数据
 * @param {Object} onlyData 仅含数据(没有调用结果等信息)
 * @return {XY.data.JsonResult} 创建的对象
 */
define('app/data/app-json-result',["jquery"],function($){
var JsonResult = function(src, onlyData) {
	var o = null, status = null;

	if ($.type(src) === "string") {
		o = $.parseJSON(src);
	} else if ($.isPlainObject(src) && src.responseText) {
		o = $.parseJSON(src.responseText);
	} else {
		o = src;
	}

	if (onlyData) {
		status = {code : JsonResult.SUCCESS, message : null};
	} else {
		status={code:o.statusCode,message:o.message}
		
	}

	//private
	//TODO : 不需要暴露这些属性
	this.code = parseInt(status.code, 10);
	this.message = status.message
	this.translator=o["translator"];
	this.translateBodys=o["translateBodys"];
	this.data = null;

	/*
	 * 读取数据部分
	 * 1.如果 onlyData == true, 则整个对象就是数据
	 *   否则认为对象中的 result 属性为数据
	 * 2.上述所得数据可能为对象，也可能为基本类型的数据
	 */
	var data = onlyData ? o : o.data;
	if ($.isPlainObject(data)) {
		this.data = {};
		$.extend(this.data, data);
	} else {
		this.data = data;
	}
};

JsonResult.prototype = {

	/**
	 * 返回运行结果代码
	 * @return {Number} 代码
	 */
	getCode : function(){
		return this.code;
	},

	/**
	 * 返回运行结果消息
	 * @return {String} 消息
	 */
	getMessage : function(){
		return this.message;
	},

	/**
	 * 返回原始数据
	 * @param {String} name 属性名，支持多级(a.b.c)
	 * @return {Object} 对象中对应的属性
	 */
	getRawData : function(name){
		var o = this.data;

		// o 为基本类型时, 应该直接返回
		if ($.isPlainObject(o) && (name!=""&&name!=null&&name!=undefined)) {
			var d = name.split("."),
			    len = d.length;

			for (var i = 0; i < len; i++) {
				o = o[d[i]];
				if (o === null || o === undefined) break;
			}
		}
		
		return o;
	},

	/**
	 * 返回有类型的数据
	 * 如果没有定义类型，则返回原始数据
	 * @param {String} name 属性名，支持多级(a.b.c)
	 * @return {Object} 对象中对应的属性
	 */
	getData : function(name){
		var data = this.getRawData(name);

		if ($.isPlainObject(data)) {
			if (data["totalPage"]){
				data["translator"]=this.translator;
				data["dicts"]=this.translateBodys;
			}
		}

		return data;
	}

};
/**
 * 服务调用返回值 : 成功
 * @property SUCCESS
 * @type {Number}
 */
JsonResult.SUCCESS = 200;
/**
 * 服务调用返回值 : 失败
 * @property FAILURE
 * @type {Number}
 */
JsonResult.FAILURE = -1;
/**
 * 服务调用返回值 : 警告
 * @property WARN
 * @type {Number}
 */
JsonResult.WARN = 1;
/**
 * 服务调用返回值 : 未认证
 * @property UN_AUTHED
 * @type {Number}
 */
JsonResult.UN_AUTHED = -999;
return JsonResult;
});

/**
 * 针对jquery增加ajax的扩展
 */
define('app/data/app-ajax',["app/core/app-jquery","app/core/app-core","app/util/app-utils",
        "app/widgets/window/app-messager","app/core/app-options",
        "app/data/app-json-result"],
        function($,$A,$utils,$messager,$options,JsonResult) {
	
	
	var _ajaxProgressBar = $("#_ajaxProgressBar");
	
	if (_ajaxProgressBar.length==0){
	
		$("body").prepend('<div id="_ajaxProgressBar" class="ajaxProgressBar" style="display:none;"><!--<div class="ajaxProgressBarText">数据处理中..</div>--></div>')
		_ajaxProgressBar= $("#_ajaxProgressBar");
	}
	
	$(document).ajaxStart(function(){
		_ajaxProgressBar.show();
	}).ajaxStop(function(){
		_ajaxProgressBar.hide();
	}).ajaxError(function(){
		_ajaxProgressBar.hide();
	})
	$A.loadLogin=function(){
		
		//	window.location.href="main.do";
			window.location.reload();	
		}
	
	/**
	 * 回调用方法列表
	 */
	function _callback(funcs,json,$toggle){
		if(funcs == null)
			return;
		if(typeof funcs === "string")
			funcs = funcs.split(",");
		if(!$.isArray(funcs))
			return
		for(var i = 0; i < funcs.length; i++){
			if($.isFunction($A.ajax.callbackFunctions[funcs[i]])){
				$A.ajax.callbackFunctions[funcs[i]](json,$toggle);
			}
		}
	};
	/**
	 * ajax之前调用的方法
	 * @param $toggle 触发元素
	 * @param options ajax选项
	 * @returns 是否可以继续调用
	 */
	function _breforeCall(options){
		var $toggle=options.toggle
			,funcs = options.beforeCall||($toggle?$toggle.attr("ajax-before"):null);
		if(!funcs)
			return true;
		funcs = funcs.split(",");
		var i = options['_beforeCallIndex']||0;
		for(;i < funcs.length; i++){
			var fn = $A.ajax.beforeCallFunctions[funcs[i]];
			options['_beforeCallIndex'] = i+1;
			if(!$.isFunction(fn))
				continue;
			if(!fn(options))
				return false;
		}
		return true;
	}
	
/**
	 * 表单提交后的方法处理
	 */
	var that = {
		callbackFunctions:{
			/**
			 * 刷新表格对象
			 */
			refreshTable:function(json,options){
				var $toggle = options.toggle;
				if($toggle && $toggle.attr("refreshTable")){
					$A($toggle.attr("refreshTable")).bsgrid("reload");
				}else if(options["refreshTable"]){
					$A(options["refreshTable"]).bsgrid("reload");
				}else{
					$A(".jqgrid").bsgrid("reload");
				}
			},
			/**
			 * 刷新表格对象
			 */
			refreshMainDetail:function(json,options){
				var params = json.params;
				if(!params)
					return;
				$(params).each(function(key,value){
					var $ctrl = $A(key);
					if($ctrl.length == 0)
						return;
					if($ctrl.isForm()){
						$ctrl.refreshFormData(value);
					}else if($ctrl.isGrid()){
						if(!value)
							return;
						if(options.submitMode=="all"){
							$ctrl.bsgrid("refreshAllData",value);
						}else{
							$ctrl.bsgrid("refreshEditData",value);
						}
					}
				});
			},
			/**
			 * 通过ajax方式刷新当前页面
			 */
			refreshAjaxPage:function(json,options){
				var $toggle = options.toggle;
				var box = json.refreshBox||options['refreshBox']||$toggle.attr('refreshBox')||$toggle.attr('data-target')
					,$box=$(box)
					,url = json.url||options['refreshUrl']||$toggle.attr('refreshUrl')||$box.attr("url");
				if(url && $box.length>0)
					$box.htmlAJAX({url:url});
			},
			/**
			 * 刷新当前页面
			 */
			refreshPage:function(json,options){
				window.location.reload();
			},
			/**
			 * 刷新数据加载器
			 */
			reloadDataLoader:function(json,options){
				var $toggle = options.toggle;
				var target = json.dataloader||options["dataloader"]||($toggle?$toggle.attr("dataloader"):null);
				$(target).dataloader("load");
			},
			/**
			 * 跳转到其他页面
			 */
			forwardUrl:function(json,options){
				var $toggle = options.toggle;
				var url=json.forwardUrl||options["forwardUrl"]||($toggle?$toggle.attr("forwardUrl"):null);
				if(window.location.href == url)
					return;
				window.location=url;
			},
			/**
			 * 关闭自己
			 */
			closeSelf:function(json,options){
				var $dialog = $A.getCurrentDialog();
				if($dialog&&$dialog.length>0){
					$A.dialog.close($dialog);
					return;
				}
				$A.navTab.closeCurrentTab();
			},
			/**
			 * 切换页签
			 */
			switchTab:function(json,options){
				var tabId=json.tabId||options.tabId;
				var $tab = $("#"+tabId,$A.getContainer());
				$tab.tab("show");
			},
			/**
			 * 回调方法
			 */
			callMethod:function(json,options){
				var $toggle = options.toggle;
				var method = json.method||options["callMethod"]||($toggle?$toggle.attr("callMethod"):null);
				if(method){
					method = decodeURIComponent(method);
					setTimeout(new Function(methodName), 100);
				}
			}
		},
		beforeCallFunctions:{
			/**
			 * 收集数据并作为参数
			 * @param options ajax调用选项
			 */
			collectData:function(options){
				var $toggle=options.toggle
					,finder = options.collectFinder||($toggle?$toggle.attr("collectFinder"):null)
					,valAttr = options.collectAttr||($toggle?$toggle.attr("collectAttr"):'value')
					,param = options.collectParam||($toggle?$toggle.attr("collectParam"):'checkId')
					,box = options.collectBox||($toggle?$toggle.attr("collectBox"):document)
					,$box = $(box);
				if(!finder)
					return true;
				var paramVal = [];
				$(finder,$box).each(function(){
					paramVal.push($(this).attr(valAttr));
				});
				if(paramVal.length>0){
					if(paramVal.length == 1)
						paramVal = paramVal[0];
					var data = options['data'];
					if(!data){
						data = options['data'] = {};
					}
					data[param]=paramVal;
				}
				return true;
			},
			/**
			 * 调用前确认提示
			 */
			confirmPrompt:function(options){
				var $toggle=options.toggle
					,prompt=options.confirm||($toggle?$toggle.attr("confirm"):null);
				if (prompt) {
					prompt = prompt.evalTemplate($toggle);
					if(!prompt)
						return;
					$messager.confirm(prompt, {
						okCall: function(ok){
							return ok&&$A.ajax.ajaxCall(options);
						}
					});
					return false;
				}
				return true;
			}
		},
		/**
		 * ajax成功后调用的方法
		 */
		successCall:function(json,options){
			/*that.ajaxSuccess(json);
			if (json.statusCode != null&&json.statusCode != $A.statusCode.ok)
				return;
			var $toggle = options.toggle;
			_callback(json.callbackType,json,options);
			var cb = options.afterCall;
			if(cb){
				_callback(cb,json,options);
			}
			if($toggle && $toggle.length>0)
				_callback($toggle.attr("callback"),json,options);
			if(options.callback){
				options.callback(json,options);
			}*/
		},
		
		respToResult:function(src){
	    	var o=null;
	    	var reuslt
	    	if ($.type(src) === "string") {
	    		try{
	    			
	    		 o = $.parseJSON(src);
	    		}catch(ex){
	    			o=src;
	    		}
	    	} else if ($.isPlainObject(src) && src.responseText) {
	    		try{
	    		o = $.parseJSON(src.responseText);
	    		}catch(ex){
	    			try{
	    			o = $A.jsonEval(src.responseText);
	    			
	    			
	    			}
	    			catch(ex){
	    				o=src.responseText;
	    			}
	    		}
	    	} else {
	    		o = src;
	    	}
	    	if (o && o["type"]&&o["type"]=="__bosssoft"){
	    		reuslt = new JsonResult(o);
	    	}else{
	    		reuslt=o;
	    	}
	    	return reuslt;
	    },
		/**
		 * ajax 远程调用
		 */
		ajaxCall:function(config){
			var _self=this;
			var options = $.extend({
				type:'POST',
				dataType:"json",
				cache: false,
				failure : function(data,jr) {
					$messager.error(jr.getMessage());
				}
			},config);
			
			if (options.success || options.failure) {
				var processSuccess = options.success||options.callback;
				var processFailure = options.failure;
                processSuccess = $.isFunction(processSuccess)?processSuccess:$.noop;
                processFailure = $.isFunction(processFailure)?processFailure:$.noop;
                options.success = function(resp, opts) {
					
					try{
					var json=_self.respToResult(resp);
					_self.ajaxSuccess(json, opts)
					if (json instanceof JsonResult){
						code = json.getCode();
						message = json.getMessage();
						if (code === JsonResult.SUCCESS) {
							processSuccess(json.getData(),json, opts);
						} else {
							processFailure(json.getData(),json, opts);
						}
					}else{
						processSuccess(json, opts);
					}
					}catch(ex){
						if (window.console){
							window.console.log(ex);
						}else{
							$messager.error('系统繁忙！请稍后重试...');
						}
						ajaxDebugInfo(options, resp, opts);
					}
				}
			}
			
			if (options.error) {
				var processError=options.error;
				options.error=function(xhr, ajaxOptions, thrownError, options){
						var json=_self.respToResult(xhr);
						processError(json,xhr, ajaxOptions, thrownError, options)
				}
				
			}else{
				options.error=that.ajaxError;
			}
			
			if(!_breforeCall(options))
				return;
			if (options.data){
			if('object' == $.type(options)){//Mr.T 如果为对象 则将对象按照请求类型进行字符串拼接
				if((options.contentType && options.contentType.indexOf('application/json') > -1)){
					options.data = JSON.stringify(options.data);
				}else{
					options.data = $.param(options.data, true);
				}
			}
			}
			var result = $.ajax(options);
			//如果為同步代碼，验证返回是否
			if(options.async==false){
				try{
                    result = eval(result);
                    if($.type(result)==='object'){
                        result.statusCode&&$A.ajax.ajaxSuccess(result);
                    }
                }catch(e) {
					//TODO
				}

			}
			return result;
		},

		/**
		 * ajax访问错误处理
		 */
		ajaxError:function (xhr, ajaxOptions, thrownError, op){
			if(xhr.status=="401"){
				//$A.ajaxLogin();
			}else if(xhr.status=="405"){
				
			}else if(xhr.status=="404"){
				$messager.error("找不到对应的URL地址");
			}
			else{
				var json=that.respToResult(xhr);
				if (json instanceof JsonResult){
					$messager.error(json.getMessage());
				}else{
					var message=json["message"]||"网络异常,请求出错!"
					$messager.error(message);
				}
			}
				/**
				$messager.error("<div>Http status: " + xhr.status + " " + xhr.statusText + "</div>" 
						+ "<div>ajaxOptions: "+ajaxOptions + "</div>"
						+ "<div>thrownError: "+thrownError + "</div>"
						+ "<div>"+xhr.responseText+"</div>");
						**/
//			}else{
//				$messager.error("系统发生异常,请联系管理员");
//			}
			if( this.errorHandle && $.isFunction(this.errorHandle)){
				this.errorHandle();
			}
		},
		/**
		 * ajax访问成功后的处理
		 */
		ajaxSuccess:function (json){
			if(json.statusCode == $A.statusCode.error || json.statusCode == $A.statusCode.internalError|| json.statusCode == $A.statusCode.notFound) {
				if(json.message)
					$messager.error(json.message);
			} else if (json.statusCode == $A.statusCode.timeout) {
				
					$messager.error(json.message, {okCall:$A.loadLogin});
			
			} else {
				if(json.message)
					$messager.correct(json.message);
			};
		}
	};
	$A.ajax = that;
	$.fn.extend({
		/**
		 * 通过ajax请求向元素内部增加请求结果html
		 * @url{string}请求的地址
		 * @data{object}请求数据
		 * @callback{function}回调方法
		 */
		loadUrl: function(url,data,callback){
			$(this).htmlAJAX({url:url, data:data, callback:callback});
		},
		/**
		 * 当前容器加载URL内容
		 * @param options 加载选项
		 * {
		 * 		type:请求方式POST/GET默认POST
		 * 		cache:是否缓存true/false默认false 
		 * 		async:是否异步true/false默认true
		 * 		global:是否为全局请求(是否会触发ajaxStart和ajaxEnd的事件)默认为true
		 * 		success:请求成功时的方法处理
		 * 		error:请求失败的方法处理
		 * 		operator:加载内容后内容处理append/prepend/before/after/inner，默认设置为当前元素的内容
		 * 		init:是否进行界面初始化，默认为true
		 * 		history:true
		 * }
		 * 
		 */
		loadAppURL: function(options){
			var $this = $(this);
			
			if ($.fn.xheditor) {
				$("textarea.editor", $this).xheditor(false);
			}
			var op = {
				type:'POST',
				cache:false,
				async:true,
				init:true,
				history:false,
				title:window.title,
				
				complete:function(response,flag,responses, responseHeaders ){
					if (response.status=="404"){
						$messager.error("找不到对应的URL地址");

					}
					
				},
				success:function(response,flag,xhr){
					var loadMask;
					if(op.history){
						var title=this.title;
						var url=this.url;
						History.pushState({title:title,url:url},title,url);
					}
					var json = $A.jsonEval(response);
					if (json.statusCode==$A.statusCode.timeout){
						/*session超时处理*/
						if(json.message) 
							$messager.error(json.message, {okCall:$A.loadLogin});
						else
							$A.loadLogin();
					} else if (json.statusCode==$A.statusCode.error|| json.statusCode == $A.statusCode.internalError|| json.statusCode == $A.statusCode.notFound){
						/*错误处理*/
						if(json.message)
							$messager.error(json);
							if (options.error&&$.isFunction(options.error)){
					
							options.error.call(this,arguments)
					
					}
					} else {
//						var funcId = xhr.getResponseHeader("funcid");
//						var menuId = xhr.getResponseHeader("menuid");
//						var subSysId = xhr.getResponseHeader("subSysId");
//						if(funcId&&menuId){
//							$this.data("__funcid",funcId);
//							$this.data("__menuid",menuId);
//							$this.data("__subsysid",subSysId);
//						}
						$this.css('visibility','hidden');
						switch(this.operator){
						case "append":
							$this.append(response);
							break;
						case "prepend":
							$this.prepend(response);
							break;
						case "before":
							$this.before(response);
							break;
						case "after":
							$this.after(response);
							break;
						case "replace":
							$this=$this.replaceWith(response);
							break;
						default:	
						
						if(op.loading){
						    loadMask=$("<div class=\"loadingPage-mask\"></div>");
						    $this.html(response)
						    loadMask.height( $this.innerHeight());
					    	loadMask.width( $this.innerWidth());
						   	$this.prepend(loadMask);
						}else{
							 $this.html(response)
						}
						}
						
						
						if ($.isFunction(this.beforePageInit)){
							$A.resolveUiPageModel($this);
							this.beforePageInit($this, model);
						}
                        if(this.onPageLoad){
                            $this.one($A.eventType.pageLoad,{"pageLoadFunc":this.onPageLoad,"uiPageModel":$this.data("uiPageModel")},function(e){
                                e.data["pageLoadFunc"]($this.data("uiPageModel"));
                                if (loadMask){
                                    loadMask.remove();
                                }
                                $this.css('visibility', '');
                            });
                        }else {
                            $this.one($A.eventType.pageLoad, function () {
                                if (loadMask) {
                                    loadMask.remove();
                                }
                                $this.css('visibility', '');
                            })
                        }
                        // 如果可能页面没js 执行速度回比较快，执行不到监听回调  $this.one($A.eventType.pageLoad
                        if(options.init !==false){
                            $this.initPageUI();
                        }
                        if ($.isFunction(this.callback)){
							//add by tw
							this.callback(response,$this.data("uiPageModel"));
						}
					}
					$this.fadeIn();
				},
				error:function (xhr, ajaxOptions, thrownError){
					if (options.error&&$.isFunction(options.error)){
					
							options.error.call(this,arguments)
					
					}
					//that.ajaxError(xhr, ajaxOptions, thrownError);
					if(xhr.status=="401"){
						//$A.ajaxLogin();
					}else if(xhr.status=="405"){
						
					}else{
						this.success(xhr.responseText);
						$this.fadeIn();
					}
				}
			};
			op = $.extend(op,$options.ajax,options);
			//如果是ie，url进行中文 encodeURI
			if (!$.browser.webkit){
				if (op.url){
					op.url=encodeURI(op.url)
				}
			}
			$.ajax(op);
		},
		appendAJAX:function(options){
			options.operator='append';
			$(this).loadAppURL(options);
		},
		prependAJAX:function(options){
			options.operator='prepend';
			$(this).loadAppURL(options);
		},
		breforeAJAX:function(options){
			options.operator='before';
			$(this).loadAppURL(options);
		},
		afterAJAX:function(options){
			options.operator='after';
			$(this).loadAppURL(options);
		},
		replaceAJAX:function(options){
			options.operator='replace';
			$(this).loadAppURL(options);
		},
		htmlAJAX:function(options){
			options.operator=null;
			$(this).loadAppURL(options);
		}

	});
	$("body").on("click.data-api","[ajax-toggle='ajax']", function(event){
		event.preventDefault();
		var $this = $(this)
			,url = $utils.evalElementAttr($this);
		if (!url) {
			return false;
		}
		that.ajaxCall({url:url,toggle:$this});
	});
	return that;
	/**
	 * ajax请求回执处理异常信息打印
	 */
	function ajaxDebugInfo(options, resp, status){
		if(window.debugModel){
			var msg = ['请求地址：' + options.url];
			msg.push('请求处理状态：' + status);
			msg.push('请求处理结果：' + resp);
			alert(msg.join('。'));
		}
	}
});
;
define("app/data/app-result", function(){});

define('app/widgets/app-download',[],function() {
	
	var result = {
			
			download:function(url,params,_blank){
				var $form = $("<form style=\"display:none;\"></form>").attr("action",url).attr("method","post");
				if(_blank){
					$form.attr("target","_blank");
				}
				for(var key in params){
					$("<input type=\"hidden\" />").attr("name",key).val(params[key]).appendTo($form);
				}
				$("body").append($form);
				$form.submit();
				$form.remove();
			}
			
	};
	return result;
	
});
/**
 * 按钮控件
 * 
 * @author sjq
 */
define('app/widgets/button/app-button',["app/core/app-jquery", "app/core/app-core", "app/core/app-options","app/widgets/app-widget"], function($, $A,
		Options,Widget) {
    /**
     *
     * @class
     * @extends Widget
     * @classdesc 按钮控件。
     * @name Button
     * @example
     * //html
     *  //<a class="app-button" id="btn1">btn1</a>
     * //javascript
     *  //var btn1=$("#btn1").button({})
     *
     */
	var Button = Widget.extend({
				initialize : function(options) {
					if (!options) {
						options = {};
					}
					Button.superclass.initialize.call(this, options);
					this.attrs=$.extend({},
										Options.appDefaults.Button, 
										this.parseOptions(),options);
					/*$.data(el, "linkbutton", {
								options : $.extend({},
										Options.appDefaults.Button, options,
										this.parseOptions())
							});*/
				  this.createButton();

				},
				parseOptions : function() {
					var t = $(this.element);
					return $.extend({}, t.parseOptions(this.element, ["id",
											"iconCls", "iconAlign", "group", {
												plain : "boolean",
												toggle : "boolean",
												selected : "boolean"
											}]), {
								disabled : (t.attr("disabled")
										? true
										: undefined),
								text : $.trim(t.html()),
								iconCls : (t.attr("icon") || t.attr("iconCls"))
							});
				},
				createButton : function() {
					var _self=this;
					var opts =this.attrs;
					var target=this.element
					var t = $(target).empty();
					t.addClass('l-btn').removeClass('l-btn-plain l-btn-selected l-btn-plain-selected');
					t.removeClass('l-btn-small l-btn-medium l-btn-large').addClass('l-btn-' + opts.size);
					if (opts.plain) {
						t.addClass('l-btn-plain')
					}
					if (opts.selected) {
						t.addClass(opts.plain
								? 'l-btn-selected l-btn-plain-selected'
								: 'l-btn-selected');
					}
					if (opts.disabled) {
						$(target).attr("disabled", opts.disabled);
					}
					t.attr('group', opts.group || '');
					t.attr('id', opts.id || '');

					var inner = $('<span class="l-btn-left"></span>')
							.appendTo(t);
					if (opts.text) {
						$('<span class="l-btn-text"></span>').html(opts.text)
								.appendTo(inner);
					} else {
						$('<span class="l-btn-text l-btn-empty">&nbsp;</span>')
								.appendTo(inner);
					}
					if (opts.iconCls) {
						$('<i class="l-btn-icon">&nbsp;</i>')
								.addClass(opts.iconCls).appendTo(inner);
						inner.addClass('l-btn-icon-' + opts.iconAlign);
					}
					if (opts.onClick) {
						_self.on("click",opts.onClick,target);
					}
					t.unbind('.linkbutton').bind('focus.linkbutton',
							function() {
								if (!opts.disabled) {
									$(this).addClass('l-btn-focus');
								}
							}).bind('blur.linkbutton', function() {
								$(this).removeClass('l-btn-focus');
							}).bind('click.linkbutton', function() {
						if (!opts.disabled) {
							if (opts.toggle) {
								if (opts.selected) {
									$(this).linkbutton('unselect');
								} else {
									$(this).linkbutton('select');
								}
							}

							_self.trigger("click");
						}
							// return false;
						});

					this._setSelected(opts.selected)
					this._setDisabled(opts.disabled);
				},
				options : function() {
					return this.attrs;
				},
				_setDisabled : function(disabled) {
					var target=this.element;
					var opts =this.attrs;
					$(target)
							.removeClass("l-btn-disabled l-btn-plain-disabled");
					if (disabled) {
						opts.disabled = true;
						var href = $(target).attr("href");
						if (href) {
							this.href = href;
							$(target).attr("href", "javascript:void(0)");
						}
						/*if (target.onclick) {
							this.onclick = target.onclick;
							target.onclick = null;
						}*/
						opts.plain
								? $(target)
										.addClass("l-btn-disabled l-btn-plain-disabled")
								: $(target).addClass("l-btn-disabled");
					} else {
						opts.disabled = false;
						if (this.href) {
							$(target).attr("href", this.href);
						}
					/*	if (this.onclick) {
							target.onclick = this.onclick;
						};
					};*/
					$(target).attr("disabled", opts.disabled);
				}},
                /**
                 * 启用按钮
                 * @memberof Button
                 * @example
                 * // html <a class="app-button" id="btn1">btn1</a>
                 * //$("#btn1").button("enable");
                 */
				enable : function(jq) {
					this._setDisabled(false);
				},
                /**
                 * 禁用按钮
                 * @memberof Button
                 * @example
                 * // html <a class="app-button" id="btn1">btn1</a>
                 * //$("#btn1").button("disable");
                 */
				disable : function(jq) {
					this._setDisabled(true);
				},
                /**
                 * 选中按钮，当设置group有效
                 * @memberof Button
                 * @example
                 * // html <a class="app-button" id="btn1">btn1</a>
                 * //$("#btn1").button("select");
                 */
				select : function() {
					 this._setSelected(true);
				
				},
                /**
                 *
                 * 取消按钮选中，当设置group有效
                 * @memberof Button
                 * @example
                 * // html <a class="app-button" id="btn1">btn1</a>
                 * //$("#btn1").button("select");
                 */
				unselect : function() {
					this._setSelected(this, false);
				},
				
				_setSelected : function(selected) {
					var opts = this.attrs;
					var target=this.element;
					if (selected) {
						if (opts.group) {
							$('a.l-btn[group="' + opts.group + '"]').each(
									function() {
										var o = $(this).linkbutton('options');
										if (o.toggle) {
											$(this)
													.removeClass('l-btn-selected l-btn-plain-selected');
											o.selected = false;
										}
									});
						}
						$(target).addClass(opts.plain
								? 'l-btn-selected l-btn-plain-selected'
								: 'l-btn-selected');
						opts.selected = true;
					} else {
						if (!opts.group) {
							$(target)
									.removeClass('l-btn-selected l-btn-plain-selected');
							opts.selected = false;
						}
					}
				}
			});

	$.fn.button = function(option, param) {
		var methodReturn = undefined;
	
		var $set = this.each(function() {
					var $this = $(this);
					var data = $this.data('button');
					var state = $this.data('linkbutton');
					var options = typeof option === 'object' && option;
					if (!data) {
						options=$.extend(options,{element:this});
						$this.data('button', (data = new Button(options)));
						
						$(this).removeAttr('disabled');
						/*$(this).bind('_resize', function(e, force) {
									if ($(this).hasClass('app-fluid')
											|| force) {
										data.setSize(this);
									}
									return false;
								});*/
						
					} else {
						$.extend(data.attrs, options);
					}
					if (typeof option === 'string')
						methodReturn = data[option]($this,param);
				});
		return (methodReturn === undefined) ? $set : methodReturn;

	};

	$.fn.button.Constructor = Button;
	return Button;

});
/**
 * 数值控件--继承Textbox
 * @author Mr.T
 */
define('app/widgets/form/app-number',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/widgets/form/app-textbox',
        'app/util/app-utils'], function($, App, Options, Textbox, Utils) {
	'use strict';
	/**
	 * @class 
	 * @classdesc 数值框
	 * <span class="type-signature static">extend</span>textbox
	 * @see {@link textbox-class} number继承至textbox
	 * @name number-class
	 * @desc 数值框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-number" />
	 * @example $('#demo').number({});
	 */
	var Number = Textbox.extend({
		initialize: function(input, options) {
			if(!options){
				options = {};
			}
			options._ = $.extend({}, Options.appDefaults.Number, options._); 
			Number.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			var s = this.setting
				,us = this.customSetting;
			if(s.formatter == 'chinese'){
				if(us.prefix === undefined){
					s.prefix = '';
				}
				if(us.suffix === undefined){
					s.suffix = '';
				}
				if(us.precision === undefined){
					s.precision = 2;
				}
			}else if(this.setting.formatter == 'thousand'){
				if(us.precision === undefined){
					s.precision = 2;
				}
			}
			this._editable();
			this._registEvents();
			var val = this.getValue();
			if(val != ''){
				var text = this._formatValue(val); 
				this.setText(text);
			}
		},
		/**
		 * 覆盖父类的绑定方法
		 */
		_textChangeEvent: function(){},
		/**
		 * 获取数值框的数值
		 * @returns {Number} Number 隐藏值
		 * @example alert('隐藏值:' + $('#demo').number('getNumber'));
		 * @memberof number-class
		 * @instance
		 */
		getNumber: function(){
			return parseFloat(this.$input.val());
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 设置金额
		 * @param {Number} val 金额
		 * @param {boolean} [noTrigger] 是否触发change
		 * @see textbox-class#setValue
		 * @todo 设置隐藏值，并根据隐藏值尝试设置显示值
		 * @example $('#demo').number('setValue',123.1);
		 * @memberof number-class
		 * @instance
		 */
		setValue: function(val, noTrigger){
			if(typeof(val) == 'string' && val == ''){
				this.setText('');
				this._setValue('', noTrigger);
				return;
			}
			var value = this._parseNumber(val);
			if(!isNaN(value)){
				if(this.setting.min !== null && value < this.setting.min){
					this.setValue(this.getValue(), true);
					return;
				}
				if(this.setting.max !== null && value > this.setting.max){
					this.setValue(this.getValue(), true);
					return;
				}
				var text = this._formatValue(value);
				this.setText(text);
				if(value == 0 && this.setting.zeroIsNull){
					value = '';
				}
				this._setValue(value, noTrigger);
			}else{
				this.setText('');
				this._setValue('', true);
			}
		},
		/**
		 * 字符串转为数值
		 * @param val
		 * @returns {Number} [valid] 如果格式化无法转为数值，则返回undefined
		 */
		_parseNumber: function(val){
			if(isNaN(val)){
				if(val){
					val = val.replaceAll(',','');
					if(isNaN(val)){
						return;
					}
				}else{
					return;
				}
			}
			var s = this.setting
				,valStr = new String(val);
			if(s.varlen){
				var r = valStr.split('.')[1];
				if(r && r.length > s.precision){
					return parseFloat(valStr).toFixed(s.precision);
				}else{
					return parseFloat(valStr);
				}
			}else{
				return parseFloat(valStr).toFixed(s.precision);
			}
		},
		/**
		 * 格式化显示值
		 * @param {Number} val
		 * @returns {String} result
		 */
		_formatValue: function(val){
			if(val == 0 && this.setting.zeroIsNull){
				return '';
			}
			var s = this.setting
				,format = s.formatter
				,result = val;
			if(!format){
				result = this._parseNumber(val);
			}else if($.isFunction(format)){
				result = format(val);
			}else if(typeof(format) == 'string'){
				if(format == 'chinese'){
					result = Utils.formatChinese(val);
				}else if(format == 'thousand'){
					result = Utils.formatNumber(val, s.precision);
				}
			}
			if(s.prefix){
				result = s.prefix + result;
			}
			if(s.suffix){
				result = result + s.suffix;
			}
			return result;
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			var number = this;
			this.$text.on('blur.number.api',function(e){
				number.setValue(this.value);
			});
			this.$text.on('focus.number.api',function(e){
				this.value = number.getValue();
				if(this.value == 0 && number.setting.zeroIsNull){
					this.value = '';
				}else{
					this.select();
				}
			});
		}
	});
	$.fn.number = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'number';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Number(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};

	return Number;
});
/**
 * 金额控件--继承Textbox
 * @author Mr.T
 */
define('app/widgets/form/app-money',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/widgets/form/app-number',
        'app/util/app-utils'], function($, App, Options, Number, Utils) {
	'use strict';
	
	/**
	 * @class 
	 * @classdesc 金额框
	 * <span class="type-signature static">extend</span>number
	 * @see {@link number-class} money继承至number
	 * @name money-class
	 * @desc 金额框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-money" />
	 * @example $('#demo').money({});
	 */
	var Money = Number.extend({
		initialize: function (input, options) {
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Money;
			Money.superclass.initialize.call(this, input, options);
		}	
	});
	$.fn.money = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'money';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Money(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	return Money;
});
/**
 * 下拉面板的工具类
 * @author Mr.T
 */
define('app/widgets/drag/app-droppanel',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/core/app-class'],
		function($, App, Options, Class) {
	
	'use strict';
	
	var DropPanel = Class.create({
		/**
		 * 关闭当前显示的面板
		 */
		_closeVisiblePanel: function(){
			var $panels = $.$appPanelContainer.find('>.drop-panel:visible,>.datetimepicker:visible');
			if($panels.length == 0){
				return;
			}
			var $parentPanel = null;
			if(event){
				var curElement = event.currentTarget;
				if(!curElement){
					curElement = event.srcElement;
				}
				$parentPanel = $(curElement).closest('.drop-panel:visible,.datetimepicker:visible');
			}
			$panels.each(function(i, item){
				var $panel = $(item)
				if($parentPanel && $panel.is($parentPanel)){
					return true;
				}
				var context = $panel.data('context');
				if(context){
					context.hidePanel();
				}else{
					$panel.hide();
				}
			});
		},
		/** 
		 * 获取下拉面板距离页面的top值
		 * @param {Jquery} [$dropPanel] 下拉面板，当下拉面板为空，则引用组件本身的$dropPanel
		 * @returns {Number} top 返回距离上边的高度Number
		 */
		_getDropPanelTop: function($dropPanel){
			if($dropPanel === undefined){
				$dropPanel = this.$dropPanel;
			}
			var oriTop = this.$element.offset().top
				,height = this.$element.outerHeight()
				,panelHeight = parseInt($dropPanel.css('height'))
				,bottomLine = oriTop + height + panelHeight;
			if(bottomLine < getPageHeight()){
				return oriTop + height - 1;
			}else{
				return oriTop - panelHeight + 1;
			}
		},
		/** 
		 * 获取下拉面板距离页面的top值
		 * @param {Jquery} [$dropPanel] 下拉面板，当下拉面板为空，则引用组件本身的$dropPanel
		 * @returns {Number} top 返回距离上边的高度Number
		 */
		_getDropPanelLeft: function($dropPanel){
			if($dropPanel === undefined){
				$dropPanel = this.$dropPanel;
			}
			var oriLeft = this.$element.offset().left
				,width = $dropPanel.outerWidth()
				,rightLine = oriLeft + width;
			if(rightLine <= getPageWidth()){
				return oriLeft;
			}else{
				var eleWidth = this.$element.outerWidth();
				return oriLeft - width + eleWidth + 1;
			}
		},
		/** 
		 * 下拉面板是显示在组件上方还是下方
		 * @param {Jquery} [$dropPanel] 下拉面板，当下拉面板为空，则引用组件本身的$dropPanel
		 * @returns {Boolean} isUpside true为上拉
		 */
		_isDropPanelUpside: function($element, $dropPanel){
			if($element === undefined){
				$element = this.$element;
			}
			if($dropPanel === undefined){
				$dropPanel = this.$dropPanel;
			}
			var oriTop = $element.offset().top
				,height = $element.outerHeight()
				,panelHeight = parseInt($dropPanel.css('height'))
				,bottomLine = oriTop + height + panelHeight;
			if(bottomLine < getPageHeight()){
				return true;
			}else{
				return false;
			}
		},
		/**
		 * 面板可以调整宽度高度
		 */
		_onPanelResize: function(){
			var combo = this;
			this.$dropPanel.on('mousemove.combo.api', $.proxy(this._r_$targetMouseMove, this));
			this.$dropPanel.on('mousedown.combo.api', function(e){
                e.stopPropagation();
                if(combo._r_dir){
                    combo._r_startDrag(e);
                }
            });
		},
		/**
		 * 面板自动隐藏
		 */
		_onPanelFadeOut: function(){
			if(!this.setting.fadeout){
            	return;
            }
			this.$dropPanel.on('mouseleave.combo.api', $.proxy(this._fadeOut$DropPanel, this));
			this.$dropPanel.on('mouseenter.combo.api', $.proxy(this._fadeIn$DropPanel, this));
			this.$element.on('mouseout.combo.api', $.proxy(this._fadeOut$DropPanel, this));
			this.$element.on('mouseover.combo.api', $.proxy(this._fadeIn$DropPanel, this));
		},
		/**
		 * 渐渐隐藏
		 */
		_fadeOut$DropPanel: function(){
			if(!this._mainDivIsVisiable()){
				return;
			}
			var opacity = 10
				,combo = this;
			this._hideTimer = setInterval(function(){
				opacity -= 1;
				combo.$dropPanel.css('opacity', 0.1*opacity);
				if(opacity == 0){
					clearInterval(combo._hideTimer);
					combo.hidePanel();
					combo.$dropPanel.css('opacity', 1);
				}
			}, 130);
		},
		/**
		 * 停止渐渐隐藏 并显示
		 */
		_fadeIn$DropPanel: function(){
			this.$dropPanel.css('opacity', 1)
			clearInterval(this._hideTimer);
		},
		/**
		 * 设置鼠标的样式
		 */
		_r_$targetMouseMove: function(e){
			this._r_dir = this._r_getDragDir(e);
            if(this._r_dir)
                this.$dropPanel.css('cursor', this._r_dir + '-resize');
            else if(this.$dropPanel.css('cursor').indexOf('-resize') > 0)
                this.$dropPanel.css('cursor', 'default');
		},
		/**
		 * 获取鼠标要进行拉动的方向
		 */
		_r_getDragDir: function(e){
            var dir = ''
				,xy = this.$dropPanel.offset()
				,width = this.$dropPanel.outerWidth()
				,height = this.$dropPanel.outerHeight()
				,scope = 5
				,pageX = e.pageX || e.screenX
				,pageY = e.pageY || e.screenY;
            if (pageY >= xy.top && pageY < xy.top + scope){
                dir += 'n';
            }else if (pageY <= xy.top + height && pageY > xy.top + height - scope){
                dir += 's';
            }
            if (pageX >= xy.left && pageX < xy.left + scope){
                dir += 'w';
            }else if (pageX <= xy.left + width && pageX > xy.left + width - scope){
                dir += 'e';
            }
            if ($.inArray(dir, this._r_getAllowDragDir()) != -1) return dir;
            return '';
		},
		/**
		 * 获取拖动大小的方向
		 */
		_r_getAllowDragDir: function(){
			if(this.$dropPanel.offset().top > this.$text.offset().top){
				return ['s', 'se', 'e'];
			}else{
				return ['n', 'ne', 'e'];
			}
		},
		/**
		 * 开始拖动大小
		 */
		_r_startDrag: function(e){
            this._r_create$proxy();
            this.$resizeProxy.css({
                left: this.$dropPanel.offset().left,
                top: this.$dropPanel.offset().top,
                position: 'absolute'
            });
            this._r_current = {
                dir: this._r_dir,
                left: this.$dropPanel.offset().left,
                top: this.$dropPanel.offset().top,
                startX: e.pageX || e.screenX,
                startY: e.pageY || e.clientY,
                width: this.$dropPanel.outerWidth(),
                height: this.$dropPanel.outerHeight()
            };
			var that = this;
            $(document).bind("selectstart.resizable", function(){ return false; });
            $(document).bind('mouseup.resizable', function(){
                that._r_stop.apply(that, arguments);
            });
            $(document).bind('mousemove.resizable', function(){
                that._r_drag.apply(that, arguments);
            });
            this.$resizeProxy.show();
		},
		/**
		 * 生成一个代理拖动的层
		 */
		_r_create$proxy: function(){
            this.$resizeProxy = $('<div class="panel-resize-proxy"></div>');
            this.$resizeProxy.width(this.$dropPanel.outerWidth()).height(this.$dropPanel.outerHeight());
            this.$resizeProxy.appendTo('body');
		},
		/**
		 * 生成代理拖动的层
		 */
		 _r_remove$Proxy: function(){
            if(this.$resizeProxy){
                this.$resizeProxy.remove();
                this.$resizeProxy = null;
            }
        },
		/**
		 * 拖动时计算大小
		 */
		_r_drag: function(e){
            if(!this._r_current) return;
            if(!this.$resizeProxy) return;
            this.$resizeProxy.css('cursor', this._r_current.dir == '' ? 'default' : this._r_current.dir + '-resize');
            var pageX = e.pageX || e.screenX
				,pageY = e.pageY || e.screenY;
            this._r_current.diffX = pageX - this._r_current.startX;
            this._r_current.diffY = pageY - this._r_current.startY;
            this._r_applyResize(this.$resizeProxy);
        },
        /**
         * 停止拖动，将大小应用到目标
         */
        _r_stop: function(e){
            this._r_applyResize();
            this._r_remove$Proxy();
            $(document).unbind("selectstart.resizable");
            $(document).unbind('mousemove.resizable');
            $(document).unbind('mouseup.resizable');
            if(this._endResize){
            	this._endResize();
            }
        },
        /**
         * 拖动改变的方向
         */
        _r_changeBy: {
            t: ['n', 'ne', 'nw'],
            l: ['w', 'sw', 'nw'],
            w: ['w', 'sw', 'nw', 'e', 'ne', 'se'],
            h: ['n', 'ne', 'nw', 's', 'se', 'sw']
        },
        /**
         * 将设置信息应用到目标中
         */
        _r_applyResize: function($resizeProxy){
            var that = this
            	,cur = {
	                left: this._r_current.left,
	                top: this._r_current.top,
	                width: this._r_current.width,
	                height: this._r_current.height
	            }
				,applyToTarget = false;
            if(!$resizeProxy){
                $resizeProxy = this.$dropPanel;
                applyToTarget = true;
                if(!isNaN(parseInt(this.$dropPanel.css('top')))){
                    cur.top = parseInt(this.$dropPanel.css('top'));
                }else{
                    cur.top = 0;
                }
                if(!isNaN(parseInt(this.$dropPanel.css('left')))){
                    cur.left = parseInt(this.$dropPanel.css('left'));
                }else{
                    cur.left = 0;
                }
            }
            if($.inArray(this._r_current.dir, this._r_changeBy.l) > -1){
                cur.left += this._r_current.diffX;
                this._r_current.diffLeft = this._r_current.diffX;
            }else if(applyToTarget){
                delete cur.left;
            }
            if($.inArray(this._r_current.dir, this._r_changeBy.t) > -1){
                cur.top += this._r_current.diffY;
                this._r_current.diffTop = this._r_current.diffY;
            }else if(applyToTarget){
                delete cur.top;
            }
            if($.inArray(this._r_current.dir, this._r_changeBy.w) > -1){
                cur.width += (this._r_current.dir.indexOf('w') == -1 ? 1 : -1) * this._r_current.diffX;
                this._r_current.newWidth = cur.width;
            }else if(applyToTarget){
                delete cur.width;
            }
            if($.inArray(this._r_current.dir, this._r_changeBy.h) > -1){
                cur.height += (this._r_current.dir.indexOf('n') == -1 ? 1 : -1) * this._r_current.diffY;
                this._r_current.newHeight = cur.height;
            }else if(applyToTarget){
                delete cur.height;
            }
            $resizeProxy.css(cur);
        }
	});
	function getPageHeight(){
		if($.browser.msie){ 
			return document.compatMode == 'CSS1Compat'? document.documentElement.clientHeight : 
			document.body.clientHeight; 
		}else{ 
			return window.innerHeight; 
		}
	};
	function getPageWidth(){
		if($.browser.msie){ 
			return document.compatMode == 'CSS1Compat'? document.documentElement.clientWidth : 
			document.body.clientWidth; 
		}else{ 
			return window.innerWidth; 
		}
	}
	return DropPanel;
});
/**
 * 下拉面板控件--继承Textbox
 * @author Mr.T
 */
define('app/widgets/form/app-combo',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options',
        'app/data/app-ajax', 'app/widgets/form/app-textbox', 'app/widgets/drag/app-droppanel'], 
        function($, App, Options, AppAjax, Textbox, Expandable) {
	
	'use strict';
	
	/**
	 * @class 
	 * @classdesc 下拉面板
	 * <span class="type-signature static">extend</span>textbox
	 * @name combo-class
	 * @desc 下拉面板的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @see {@link textbox-class} combo继承至textbox
	 * @see {@link typeahead-class} 继承该组件
	 * @see {@link suggest-class} 继承该组件
	 * @see {@link combobox-class} 继承该组件
	 * @see {@link comboztree-class} 继承该组件
	 * @see {@link combogrid-class} 继承该组件
	 */
	var Combo = Textbox.extend({
		Implements: Expandable,
		initialize: function(input, options){
			if(!options){
				options = {};
			}
			options._ = $.extend({}, Options.appDefaults.Combo, options._); 
			Combo.superclass.initialize.call(this, input, options);
			this._comboInit();
			this._comboEventRegister();
		},
		/**
		 * 初始化
		 */
		_comboInit: function(){
			if(this.setting.rowHeight){
				this._rowHeight = this.setting.rowHeight;
			}
			this._editable(false);
			this._initDropPanel();
			this.$dropPanel.data('context', this);
			if(this.setting.selectednode){
				this.setSelectedNode(this.setting.selectednode);
			}
			this._onPanelResize();
			this._onPanelFadeOut();
		},
		/**
		 * 事件注册器
		 */
		_comboEventRegister: function(){
			var s = this.setting;
			if(s.afterDataRender){
				this.on('afterDataRender', s.afterDataRender);
			}
			if(s.beforeLoad){
				this.on('beforeLoad', s.beforeLoad);
			}
			if(s.beforeShowPanel){
				this.on('beforeShowPanel', s.beforeShowPanel);
			}
			if(s.onHidePanel){
				this.on('onHidePanel', s.onHidePanel);
			}
			if(s.onShowPanel){
				this.on('onShowPanel', s.onShowPanel);
			}
		},
		/**
		 * 覆盖父类的绑定方法
		 */
		_textChangeEvent: function(){},
		/**
		 * 初始化下拉面板
		 */
		_initDropPanel: function(){
			var s = this.setting;
			var $dropPanel = $('<div class="drop-panel">' +
								'<div class="drop-panel-main">' +
									'<div class="drop-panel-loading">正在努力加载中...</div>' + 
									'<div class="drop-panel-empty">无符合条件的记录。</div>' + 
								'</div>' + 
								'<div class="drop-panel-custom"></div>' + 
							'</div>');
			$dropPanel.appendTo($.$appPanelContainer);
			this.$dropPanel = $dropPanel;
			this.$dropPanelMain = $dropPanel.find('.drop-panel-main');
			this.$dropPanelCustom = $dropPanel.find('.drop-panel-custom');
			this.$dropPanelLoading = $dropPanel.find('.drop-panel-loading');
			this.$dropPanelEmpty = $dropPanel.find('.drop-panel-empty');
			this.$dropPanelMain.on('mousewheel.combo.api', $.proxy($dropPanelMainOnMouseWheel, this))
			this.$dropPanelMain.on('scroll.combo.api', $.proxy($dropPanelMainScroll, this));
		},
		/**
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 * @todo 判断当前面板是否可见：
		 * @todo 1如果不可见，则打开面板
		 * @todo 2如果可见，则关闭面板
		 * @example $('#demo').combo('togglePanel');
		 * @memberof combo-class
		 * @instance
		 */
		togglePanel: function(){
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}else{
				this._showPanel();
			}
		},
		/**
		 * 显示当前对象的下拉面板
		 * 		1、显示前先关闭其他所有打开的下拉面板面板
		 * 		2、开启mousedown.droppanel.api事件，点击html代理关闭该面板的操作
		 * @param callback
		 */
		_showPanel: function(callback){
			initDropPanel.call(this);
			/**
			 * 面板展示前事件，返回false不显示面板
			 * @event combo-class#beforeShowPanel
			 */
			if(this.trigger('beforeShowPanel') === false){
				return;
			}
			this._closeVisiblePanel();
			this.$dropPanel.show();
			this.place();
			if($.isFunction(callback)){
				callback.call(this);
			}
			/**
			 * 面板展示事件
			 * @event combo-class#onShowPanel
			 */
			this.trigger('onShowPanel');
		},
		/**
		 * 设置下拉框的位置
		 */
		place: function(){
			var mainCss = {
					top: this._getDropPanelTop(),
					left: this._getDropPanelLeft(),
					'z-index': Options.zindexs.droppanel++
				};
			this.$dropPanel.css(mainCss);
			$(document).on('mousedown.droppanel.api', $.proxy(this.hidePanel,this));
		},
		/**
		 * 关闭组件对象的下拉面板
		 * @todo 关闭当前下拉面板
		 * @todo 关闭点击html代理的click.combo.api的事件
		 * @example $('#demo').combo('hidePanel');
		 * @memberof combo-class
		 * @instance
		 */
		hidePanel: function(){
			var fireHideEvent = this._mainDivIsVisiable();
			this.$dropPanel.hide();
			if(!$.$appPanelContainer.find('.drop-panel,.datetimepicker').is(':visible')){
				$(document).off('mousedown.droppanel.api');
			}
			if(fireHideEvent){
				/**
				 * 面板关闭事件
				 * @event combo-class#onHidePanel
				 */
				this.trigger('onHidePanel');
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 将焦点聚焦到组件
		 * @memberof combo-class
		 * @instance
		 */
		focus: function(){
			this.$text.focus();
		},
		/**
		 * 是否阻止联想组件的行为
		 * @param flag true为阻止
		 */
		_stopSuggest: function(flag){
			var suggest = this.$element.data('suggest');
			if(suggest){
				suggest.stopKeyEvent = flag;
			}
		},
		/**
		 * 是否为联想框来控制按键操作
		 */
		_isSuggestContext: function(){
			var context = this
				,suggest = this._suggest;
			if(suggest){
				suggest.stopKeyEvent = false;
				if(suggest._mainDivIsVisiable()){
					setTimeout(function(){
						if(suggest.getText() == ''){//联想时 关键字为空 则切换到主控件的下拉面板
							suggest.stopKeyEvent = true;
							context.showPanel();
						}
					},10);
					return true;
				}
			}
			return false;
		},
		/**
		 * 要进行联想的按键
		 * true进行联想
		 */
		_keyFilterSuggest: function(e){
			var keyCode = e.keyCode
				,result = false;
			if(keyCode >= 48 && keyCode <= 90){//0-1 a-z A-Z
				result = true;
			}else if(keyCode >= 96 && keyCode <= 105){//小键盘数字
				result = true;
			}else{
				//299 拼音输入法特殊按键
				var keys = [App.keyCode.BACKSPACE, App.keyCode.ENTER, App.keyCode.DELETE, 229];
				result = $.inArray(keyCode, keys) > -1;
			}
			return result;
		},
		/**
		 * 按键显示面板
		 */
		_keyShowPanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			if(!this._mainDivIsVisiable()){
				this.showPanel();
				e.preventDefault();
				e.stopPropagation();
			}
		},
		/**
		 * 隐藏面板
		 */
		_keyHidePanel: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}
		},
		/**
		 * 根据输入内容进行延迟联想
		 */
		suggest: function(){
			var suggest = this._suggest;
			if(suggest){
				setTimeout(function(){
					if(suggest && suggest.getText() != ''){
						suggest.suggest();
					}
				},10);
			}
		},
		/**
		 * 根据隐藏值检索显示值
		 * @param value 隐藏值
		 * @returns 名称
		 */
		_findTextByValue: function(value){
			if(value === undefined || value === ''){
				return '';
			}
			var result = undefined
				,data = this.setting.data
				,textField = this.setting.textfield
				,valueField = this.setting.valuefield;
			for ( var i = 0; i < data.length; i++) {
				if(data[i][valueField] == value){
					result = data[i][textField];
					break;
				}
			}
			return result;
		},
		/**
		 * 加载数据前事件
		 */
		_onBeforeLoad: function(){
			/**
			 * 加载数据前事件，如果返回false 则不进行加载数据
			 * @event combo-class#beforeLoad
			 */
			if(this.hasBindEvent('beforeLoad')){
				return this.trigger('beforeLoad', this.getParameter());
			}
		},
		/**
		 * 数据加载方法
		 * @param url 加载的参数
		 * @param callback 加载完成事件
		 */
		_ajax: function(url, callback){
			if(!url){
				return;
			}
			if(this._onBeforeLoad() === false){
				return;
			}
			this.$dropPanelLoading.show();
			this.$dropPanelEmpty.hide();
			var that = this;
			AppAjax.ajaxCall({
				url: url,
				data: this.getParameter(), 
				dataType: 'json',
				type: 'POST',
				success: function(data){
					that.$dropPanelLoading.hide();
					that._onLoadSuccess(data);
					callback.call(that, data);
				}
			});	
		},
		/**
		 * 初始化数据源
		 */
		_initData: function(){
			var currParam = this.getParameter();
			if(this.setting.url && currParam){
				if(this.lastParam != JSON.stringify(currParam)){
					this.reload(this.setting.url);
				}
				this.lastParam = JSON.stringify(currParam);
			}else if(!this.onceRender){
				if($.isArray(this.setting.data)){
					this.loadData(this.setting.data);
				}else{
					this.reload(this.setting.url, this.firstLoadSuccess);
				}
				this.onceRender = true;
			}
		},
		/**
		 * 数据载入完成事件
		 */
		_onLoadSuccess: function(data){
			/**
			 * 远程数据加载完成事件
			 * <PRE>
			 * 	该事件传入加载的数据，可以通过该函数对数据进一步加工
			 * </PRE>
			 * @event combo-class#onLoadSuccess
			 * @param {Object} data 加载的数据
			 */
			this.trigger('onLoadSuccess', data);
		},
		/**
		 * 获取选中节点，单选时为一个节点对象，多选时为一个节点数组
		 * @returns {Object|Array} selectedNode
		 * @example $('#demo').textbox('getSelectedNode');
		 * @memberof combo-class
		 * @instance
		 */
		getSelectedNode: function(){
			var node = this.$input.data('selectNode');
			if(!node){
				node = null;
			}
			return node;
		},
		/**
		 * 设置一个选中节点
		 * @todo 根据节点设置value和text值
		 * @param {Object|Array} node 数据节点 
		 * @example $('#demo').textbox('setSelectNode', {value:'隐藏值',text:'显示值',cusField:'自定义字段'});
		 * @memberof textbox
		 * @instance
		 */
		setSelectedNode: function(node, noSet){
			this.$input.data('selectNode', node);
			if(noSet == true){
				return;
			}
			this._setValueAndTextByNodes();
		},
		/**
		 * 根据节点设置隐藏值和显示值
		 * @param node
		 */
		_setValueAndTextByNodes: function(){
			var nodes = this.getSelectedNode()
				,value = ''
				,text = ''
				,vf = this.setting.valuefield
				,tf = this.setting.textfield
				,formatter = this.setting.formatter;
			if(nodes){
				if($.isArray(nodes)){
					for(var i = 0; i < nodes.length; i++){
						value += nodes[i][vf] + ',';
						text += this._formatter(nodes[i], formatter, tf) + ',';
					}
					if(text.length > 0 ) text = text.substring(0, text.length-1);
					if(value.length > 0 ) value = value.substring(0, value.length-1);
				}else{
					value = nodes[vf] ? nodes[vf] : '';
					text = this._formatter(nodes, formatter, tf);
				}
			}
			this.setText(text);
			this._setValue(value);
			if(!this.setting.acceptText && this.isActive()){
				this.$text[0].select();
			}
		},
		/**
		 * 格式化显示值
		 */
		_formatter: function(node, formatter, tf){
			var text = '';
			if(formatter){
				if($.isFunction(formatter)){
					text = formatter(node);
				}else if(typeof(formatter) == 'string'){
					if(this.setting.template){
						text = this.setting.template.apply(node);
					}else{
						text = node[formatter];
					}
				}
			}else{
				text = node[tf];
			}
			return text;
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 设置隐藏值，并尝试设置显示值
		 * @param {String} val 隐藏值
		 * @see textbox#setValue
		 * @todo 当隐藏值为空时，显示值也为空
		 * @todo 当数据源为本地数据源时，且找到显示值的情况下设置显示值
		 * @todo 清空选中节点的值 setSelectedNode(null)
		 * @example $('#demo').combobox('setValue','val');
		 * @memberof combobox
		 * @instance
		 */
		setValue: function(val, noTrigger){
			this._setValue(val, noTrigger);
			this._setTextByValue(val);
			this.setSelectedNode(null, true);
		},
		/**
		 * 根据隐藏值设置显示值
		 * 1、当隐藏值为空时，显示值也为空
		 * 2、当数据源为本地数据源时，且找到显示值的情况下设置显示值
		 * @param value
		 */
		_setTextByValue: function(value){
			if(!value){
				this.setText('');
				return;
			}
			if(!this.setting.data){
				return;
			}
			var text = '';
			if(this.setting.multiple && value){
				var vs = value.split(',');
				for ( var i = 0; i < vs.length; i++) {
					text += this._findTextByValue(vs[i]) + ',';
				}
				text = text.substr(0, text.length - 1);
			}else{
				text = this._findTextByValue(value);
			}
			if(text != undefined && text != ''){
				this.setText(text);
			}
		},
		/**
		 * 数据渲染完成事件
		 */
		_afterDataRender: function(){
			/**
			 * 数据渲染完成事件
			 * @event combo-class#afterDataRender
			 */
			this.trigger('afterDataRender');
		},
		/**
		 * 获取选择面板的自定义区域
		 * @example $('#demo').combobox('getCustomPanel');
		 * @memberof combobox
		 * @instance
		 */
		getCustomPanel: function(){
			return this.$dropPanelCustom;
		},
		/**
		 * 获取联想面板的自定义区域
		 * @example $('#demo').combobox('getSuggestCustomPanel');
		 * @memberof combobox
		 * @instance
		 */
		getSuggestCustomPanel: function(){
			var context = this.$input.data('context'); 
			if(context && context.setting.className == 'app-suggest'){
				return this.getCustomPanel();
			}else if(this._suggest){
				return this._suggest.getCustomPanel();
			}
		},
		/**
		 * 获取数据集
		 * @example $('#demo').combobox('getData');
		 * @memberof combobox
		 * @instance
		 */
		getData: function(){
			return this.setting.data;
		},
		_resetPanelHeight: function(len){
			var listHeight = len * getRowHeight.call(this)
				,customHeight = this.$dropPanelCustom.height()
				,panelHeight = listHeight + customHeight;
			if(panelHeight > this.setting.panelheight){
				panelHeight = this.setting.panelheight;
			}else{
				panelHeight += getMainPanelScrollBarWidth(this.$dropPanelMain);
			}
			this.$dropPanel.height(panelHeight);
			function getMainPanelScrollBarWidth($dropPanelMain){
				var result = 0
					,scrollWidth = $dropPanelMain[0].scrollWidth
					,width = $dropPanelMain.width();
				if(scrollWidth > width){
					result += 18;
				}
				return result;
			}
		},
		_resetPanelWidth: function($dropPanelMain){
			var panelWidth = this.setting.panelwidth;
			if(panelWidth){
				return;
			}
			if(!$dropPanelMain){
				$dropPanelMain = this.$dropPanelMain;
			}
			var mainWidth = getMainPanelWidth($dropPanelMain)
				,inputWidth = this.$element.outerWidth();
			if(mainWidth < inputWidth){
				return;
			}else if(mainWidth < inputWidth*1.5){
				panelWidth = mainWidth + 15;
			}else{
				panelWidth = inputWidth*1.5;
			}
			this.$dropPanel.width(panelWidth);
			function getMainPanelWidth($dropPanelMain){
				var result = $dropPanelMain[0].scrollWidth
					,scrollHeight = $dropPanelMain[0].scrollHeight
					,height = $dropPanelMain.height();
				if(scrollHeight > height){
					result += 18;
				}
				return result;
			}
		}
	});
	
	
	$.fn.combo = function(option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'combo';
		this.each(function() {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Combo(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	function initDropPanel(){
		if(this.hasInitDropPanel){
            return;
        }
		this.hasInitDropPanel = true;
		var s = this.setting;
		var dropPanelCss = {
			height: s.panelheight
		};
		if(s.customPanelHeight && !isNaN(s.customPanelHeight)){
			var customCss = {};
			customCss.height = s.customPanelHeight;
			if(s.customPanelPosition == 'bottom'){
				customCss.bottom = 0;
				customCss['border-top-width'] = 1;
				dropPanelCss['padding-bottom'] = s.customPanelHeight;
			}else{
				customCss.top = 0;
				customCss['border-bottom-width'] = 1;
				dropPanelCss['padding-top'] = s.customPanelHeight;
			}
			this.$dropPanelCustom.css(customCss);
			dropPanelCss['min-height'] = Number(s.customPanelHeight) + 30;
		}else{
			dropPanelCss['min-height'] = 30;
		}
		//设置面板宽度
		var panelWidth = this.setting.panelwidth; 
		if(panelWidth != ''){
			if(typeof(panelWidth) == 'string' && panelWidth.charAt(panelWidth.length-1) == '%'){
				panelWidth = this.$element.outerWidth() * parseFloat(panelWidth) / 100;
			}
			dropPanelCss.width = panelWidth;
		}else{
			dropPanelCss.width = this.$element.outerWidth();
		}
		this.$dropPanel.css(dropPanelCss);
		this.$dropPanel.on('click.combo.api', $.proxy(this.focus, this));
	};
	function $dropPanelMainOnMouseWheel(event, delta, deltaX, deltaY){
		var rowHeight = getRowHeight.call(this)
			,scrollTop = this.$dropPanelMain.scrollTop()
			,scrollIndex = parseInt(scrollTop/rowHeight);
		if(delta < 0){
			this.$dropPanelMain.scrollTop((scrollIndex + 1) * rowHeight);
		}else{
			this.$dropPanelMain.scrollTop((scrollIndex - 1) * rowHeight);
		}
	};
	function $dropPanelMainScroll(){
		var ele = this.$dropPanelMain[0]
			,scrollTop = ele.scrollTop
			,scrollHeight = ele.scrollHeight
			,clientHeight = ele.clientHeight;
		if(scrollTop == 0){
			this.$dropPanelMain.scrollTop(0);
			return;     
		}
		var scrollTop = this.$dropPanelMain.scrollTop()
			,rowHeight = getRowHeight.call(this);
		if(scrollTop + clientHeight > rowHeight * (this.$dropPanelMain.find('li:visible').length-0.5)){
			scrollTop =  scrollHeight - clientHeight;
		}else{
			scrollTop = parseInt(scrollTop/rowHeight) * rowHeight;
		}
		this.$dropPanelMain.scrollTop(scrollTop);
	};
	function getRowHeight(){
		if(!this._rowHeight){
			if(this.setting.className == 'app-comboztree'){
				var $temp = $('<li style="visibility: hidden;"><a class="level0"><span></span></a></li>');
				this.$dropPanelMain.find('.ztree').append($temp);
				this._rowHeight = $temp.outerHeight();
				$temp.remove();
			}else{
				this._rowHeight = this.$dropPanelMain.find('li:first').outerHeight();
			}
		}
		return this._rowHeight;
	};
	return Combo;
});
/**
 * 联想框控件--继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-suggest',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/data/app-ajax',
        'app/widgets/form/app-combo'], function($, App, Options, AppAjax, Combo) {
	
	'use strict';

	/**
	 * @class 
	 * @classdesc 联想框
	 * <span class="type-signature static">extend</span>combo
	 * @see {@link combo-class} suggest继承至combo
	 * @name suggest-class
	 * @desc 联想框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-suggest"
	 * &#9;_options="{
	 * &#9;&#9;suggest: 'html/example/app-input/data/data.idAndName'
	 * &#9;}"
	 * />
	 * @example $('#demo').suggest({
	 * &#9;suggest: 'html/example/app-input/data/data.idAndName'
	 * });
	 */
	var Suggest = Combo.extend({
		initialize: function (input, options) {
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Suggest;
			Suggest.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			this._editable();
			this._initOptions();
			this._initPanelContent();
			this._registEvents();
			this._eventRegister();
		},
		/**
		 * 初始化设置
		 */
		_initOptions: function(){
			var s = this.setting;
			//如果没有设置suggest地址，则使用url
			if((s.suggest == '' || s.suggest == true)
					&& s.url){
				s.suggest = s.url;
			}
			if(s.suggest == false){
				s.suggest = '';
			}
			//远程加载，可以是remote 或 async
			if(!s.remote && s.async){
				s.remote = true; 
			}
			if(s.textfield == s.valuefield){
				this.setText(s.value);
			}
			if(!s.suggestfield){
				s.suggestfield = s.textfield;
			}
			if(s.suggestClear && !s.multiple){
				s.suggestClear = true;
			}else{
				s.suggestClear = false;
			}
		},
		/**
		 * 初始化下拉面板的内容
		 */
		_initPanelContent: function(){
			initCustomPanel.call(this);
			this.$dropPanelMain.append('<div class="suggest-list">' +
				      				'<ul></ul>' +		
				      			'</div>');
			this.$suggest = this.$dropPanel.find('.suggest-list');
			this.$suggestList = this.$suggest.find('>ul');
			initSelectPanel.call(this);
			fixPosition.call(this);
			function initCustomPanel(){
				var s = this.setting;
				if(s.customPanelHeight && !isNaN(s.customPanelHeight)){
					var customCss = {};
					customCss.height = s.customPanelHeight;
					if(s.customPanelPosition == 'bottom'){
						customCss.bottom = 0;
						customCss['border-top-width'] = 1;
					}else{
						customCss.top = 0;
						customCss['border-bottom-width'] = 1;
					}
					this.$dropPanelCustom.css(customCss);
				}
			}
			function initSelectPanel(){
				this.$dropPanelCustom.before('<div class="selected-list"></div>');
				this.$selectedList = this.$dropPanel.find('.selected-list');
				var slt_height = 0
					,s = this.setting;
				if(s.acceptText){
					slt_height = 0;
				}else if(s.slt_area){
					slt_height = parseInt(s.slt_area);
					if(isNaN(slt_height)){
						slt_height = 0;
					}
				}
				this.$selectedList.css('height', slt_height);
			}
			function fixPosition(){
				var customHeight = this.$dropPanelCustom.height()
					,sltHeight = this.$selectedList.height()
					,dropPanelCss = {};
				dropPanelCss['min-height'] = customHeight + sltHeight + 30;
				if(this.setting.customPanelPosition == 'bottom'){
					this.$dropPanel.css('padding-bottom', customHeight + sltHeight);
					this.$selectedList.css('bottom', customHeight);
				}else{
					this.$dropPanel.css('padding-bottom', sltHeight);
					this.$dropPanel.css('padding-top', customHeight);
				}
			}
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterSelected)){
				this.on('afterSelected', s.afterSelected);
			}
			if($.isFunction(s.beforeSelected)){
				this.on('beforeSelected', s.beforeSelected);
			}
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			this.$text.on('focus.suggest.api', $.proxy(this._textFocusEvent, this));
			var that = this;
			//当联想框作为单独的主体控件
			if(this.$element.hasClass('app-suggest')){
				this.$openBtn.off('click.textbox.api');
				this.$openBtn.on('click.suggest.api', function(e){
					that.$text.focus();
				});
			}else{
				this.$element.data('suggest', this);
			}
			this.$suggestList.on('click.suggest.api', 'li', function(){
				that._suggestItemActive($(this));
			});
			this._onSelectedNodeDeleteEvent();
			this._bindShowHistory();
		},
		/**
		 * 覆盖父类的绑定方法
		 */
		_textChangeEvent: function(){
			if(this.setting.acceptText){
				var that = this;
				this.$text.on('change.textbox.api',function(){
					var selectedNode = that.getSelectedNode()
						,nodeText = that._getSelectedNodeText(selectedNode)
						,text = that.getText()
						,pos = that.$text.getCurPos(); 
					if(that.setting.trim){
						text = $.trim(text); 					
					}
					if(that.forbidReg){
						var forbidRegMatch = text.match(that.forbidReg);
						if(forbidRegMatch){
							pos = text.indexOf(forbidRegMatch[0]);
						}
						text = text.replace(that.forbidReg, '');
					}
					if(that.permitReg){
						var permitRegMatch = text.match(that.permitReg);
						if(permitRegMatch){
							pos = text.indexOf(permitRegMatch[0]);
						}
						text = text.replace(that.permitReg, '');
					}
					if(nodeText != text){
						selectedNode = that._createSelectedNode(text);
					}
					that.setSelectedNode(selectedNode);
					if(pos !== null){
						that.$text.setCurPos(pos);
					}
				});
			}
		},
		/**
		 * 显示值文本框获得焦点事件
		 */
		_textFocusEvent: function(){
			var $text = this.$text;
			$text.data('oriText', $text.val());
		},
		_bindShowHistory: function(){
			if(!this._localStorage){
				return;
			}
			var that = this;
			this.$text.on('fucus.suggest.api click.suggest.api', function(){
				if($.trim(that.getText())){
					return;
				}
				that._showHistory();
			}).on('keyup.suggest.api', function(e){
				if(that._mainDivIsVisiable()){
					return;
				}
				if(e.keyCode == App.keyCode.DOWN){
					that._showHistory();
					return;
				}
				if($.trim(that.getText())){
					return;
				}
				that._showHistory();
			});
		},
		_showHistory: function(){
			var nodes = this._localStorage.get();
			if(!nodes){
				return;
			}
			this._render$SuggestNode(nodes);
			this._showPanel();
		},
		/**
		 * 设置已选项的删除按钮事件
		 */
		_onSelectedNodeDeleteEvent: function(){
			var that = this;
			this.$selectedList.on('click.suggest.api', '.sd-close-btn', function(){
				var $selectedNode = $(this).parent()
					,node = that._getNode($selectedNode);
				that.$suggestList.find('.selected[_v="' + node[that.setting.valuefield] + '"]').removeClass('selected');
				$selectedNode.remove();
				that._setSelectedNodeBySltArea();
			});
		},
		/**
		 * 按键事件
		 * 1、联想
		 * 2、导航
		 */
		_keyManager: function(e){
			if(this.stopKeyEvent){
				return;
			}
			if(this._dealSysKey(e)){
				return;
			}
			if(this._mainDivIsVisiable()){
				this._keyForVisiblePanel(e);
			}else{
				this._keyForHiddenPanel(e);
			}
		},
		/**
		 * 面板可见状态下的按键事件处理
		 */
		_keyForVisiblePanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			e.stopPropagation();
			if(App.containKeyCode(e, s.keyNextNode)){
				this._keyNextNode(e);
			}else if(App.containKeyCode(e, s.keyPrevNode)){
				this._keyPrevNode(e);
			}else if(App.containKeyCode(e, s.keyPickNode)){
				this._keyPickNode(e);
			}else if(App.containKeyCode(e, s.keyNextSltNode)){
				this._keyNextSltNode(e);
			}else if(App.containKeyCode(e, s.keyPrevSltNode)){
				this._keyPrevSltNode(e);
			}else if(App.containKeyCode(e, s.keyHidePanel)){
				this._keyHidePanel(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 面板不可见状态下的按键事件处理
		 */
		_keyForHiddenPanel: function(e){
			var keyCode = e.keyCode;
			if(this._isKeyCursorPos(keyCode)){
				this._keyCursorPos(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 切换到联想项区域
		 *    并从当前滚动到的可视选项中开始导航
		 */
		_switchSuggest: function(){
			var $c = this.$selectedList.find('.selected-item.current');
			if($c.length > 0){
				$c.removeClass('current');
				var top = this.$suggest.scrollTop()
					,$nodes = this.$suggestList.find('>li')
					,h = $($nodes[0]).outerHeight()
					,index =  Math.floor(top/h);
				$($nodes[index]).addClass('current');
			}
		},
		/**
		 * 切换到联想区域，定位上一个节点
		 */
		_keyPrevNode: function(e){
			e.preventDefault();
			var $l = this.$suggestList;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.prev();
			if($n.length == 0){
				$n = $l.find('li:last-child');
			}
			this._switchSuggest();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSuggest();
		},
		/**
		 * 切换到联想区域，并定位下一个节点
		 */
		_keyNextNode: function(e){
			e.preventDefault();
			this._locateNextNode();
		},
		/**
		 * 定位下一个节点
		 */
		_locateNextNode: function(){
			var $l = this.$suggestList;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.next();
			if($n.length == 0){
				$n = $l.find('li:first-child');
			}
			this._switchSuggest();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSuggest();
		},
		/**
		 * 选中一个节点
		 */
		_keyPickNode: function(e){
			e.preventDefault();
			var $c = this.$dropPanel.find('.current');
			if($c.length == 0){
				return;
			}
			if($c.hasClass('selected-item')){
				$c.find('.sd-close-btn').click();
				this._keyNextSltNode(e);
			}else{
				this._suggestItemActive($c);
				this._locateNextNode();
			}
		},
		/**
		 * 联想项的定位到当前项
		 */
		_locateSuggest: function(){
			var $c = this.$suggestList.find('li.current');
			if($c.length != 1){
				return;
			}
			var top = $c.offset().top + $c.outerHeight() - this.$suggestList.offset().top
				,containerHeight = this.$suggest.outerHeight() -2
				,scrollTop = this.$suggest.scrollTop();
			if(top <= scrollTop){
				this.$suggest.scrollTop(top - $c.outerHeight());
			}else if(top >= scrollTop + containerHeight){
				this.$suggest.scrollTop(top - containerHeight);
			}
		},
		/**
		 * 切换到已选项区域
		 */
		_switchSelected: function(){
			this.$suggestList.find('li.current').removeClass('current');
		},
		/**
		 * 切换到已选区域，定位上一个已选择节点
		 */
		_keyPrevSltNode: function(e){
			e.preventDefault();
			var $slts = this.$selectedList.find('>div');
			if($slts.length == 0){
				return;
			}
			var $c = this.$selectedList.find('>div.current')
				,$n = $c.prev();
			if($n.length == 0){
				$n = $($slts[$slts.length-1]);
			}
			this._switchSelected();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSelected();
		},
		/**
		 * 切换到已选区域，定位下一个已选择节点
		 */
		_keyNextSltNode: function(e){
			var $slts = this.$selectedList.find('>div');
			if($slts.length == 0){
				return;
			}
			var $c = this.$selectedList.find('>div.current')
				,$n = $c.next();
			if($n.length == 0){
				$n = $($slts[0]);
			}
			this._switchSelected();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSelected();
		},
		/**
		 * 选择项的定位
		 */
		_locateSelected: function(){
			var $c = this.$selectedList.find('>div.current');
			if($c.length != 1){
				return;
			}
			var t = $c.offset().top - $c.parent().offset().top;
			this.$selectedList.scrollTop(t);
		},
		/**
		 * 根据输入内容进行延迟联想
		 */
		suggest: function(){
			var that = this;
			if(!this.hasBlur){
				this.$text.one('blur.suggest.api',function(){
					var selectedNode = that.getSelectedNode();
 					that.setSelectedNode(selectedNode);
				});
				that.hasBlur = true;
			}
			//保持延迟时间内只触发一次联想操作
			clearTimeout(this.timeout);
			this.timeout = 
				setTimeout(function(){	
					that.$text.off('blur.suggest.api');
					that.hasBlur = false;
					that._suggestFunc();
				}, this.setting.lazy);
		},
		/**
		 * 根据输入的值进行联想
		 * 	保持联想面板打开状态
		 */
		_suggestFunc: function(){
			if(this.stopKeyEvent){
				return;
			}
			if(this.setting.suggestClear){
				this.setSelectedNode(null, true);
				this._setValue('');
			}
			if(!this.isActive()){
				return;
			}
			//如果联想面板不是打开状态，则打开渲染。否则只进行联想
 			if(!this._mainDivIsVisiable() && !this.setting.acceptText){
 				this.showPanel();
 			}
			if(this._preventSuggest()){
				this._selected$SuggestNode();
				return;
			}
			if(this.setting.acceptText){
				this.$selectedList.html('');
			}
			if(this._onBeforeLoad() === false){
				return;
			}
			this.refreshSuggest();
		},
		isSuggesting: function(){
			return this._mainDivIsVisiable(); 
		},
		refreshSuggest: function(){
			if(this.setting.remote){
				this._suggestByRemote();
			}else{
				this._suggestByLocal();
			}
		},
		/**
		 * 阻止联想事件
		 * 1、当联想的关键字为空
		 * 2、当联想的关键字与上次联想的相同
		 * 3、当上次联想为空 且这次的关键字以上次的关键字开头
		 * @returns true 进行阻止
		 */
		_preventSuggest: function(){
			var key = this.getText()
				,stop = false;
			if(!$.trim(key)){
				stop = true;
			}else if(!this.prevKey){
				
			}else if(!this.setting.acceptText 
					&& this.prevKey == key 
					&& this.prevParameter == JSON.stringify(this.getParameter())){
				stop = true;
			}
			this.prevParameter = JSON.stringify(this.getParameter());
			this.prevKey = key;
			return stop;
		},
		/**
		 * 根据远程设置地址进行联想
		 * @param sugest 联想框全局对象
		 */
		_suggestByRemote: function(){
			var url = this.setting.suggest
				,onlyleaf = this.setting.onlyleaf
				,that = this;
			if(url){
				var queryParams = $.extend({}, this.getParameter());
				queryParams._key = this.getText();
				queryParams.suggestfield = this.setting.suggestfield;
				this.$dropPanelLoading.show();
				AppAjax.ajaxCall({
					url: url,
					data: queryParams,
					dataType: 'json',
					type: 'POST',
					success: function(data){
						that.$dropPanelLoading.hide();
						var result = [];
						if(onlyleaf){
							for(var i = 0; i < data.length; i ++){
								if(that._isLeaf(data, data[i]))
									result.push(data[i]);
							}
						}else
							result = data;
						that._render$SuggestNode(result);
					}
				});	
			}
		},
		/**
		 * 根据本地数据源进行匹配
		 * 1、如果存在本地数据源则直接进行匹配
		 * 2、如果不存在，本地数据源，则根据suggest资源地址初始化数据源后，再进行匹配
		 */
		_suggestByLocal: function(){
			this._initDataByParameter();
			if(this.setting.data != undefined){
				var suggestData = this._filterByKey();
				this._render$SuggestNode(suggestData);
			}else{
				var url = this.setting.suggest
					,that = this;
				if(url){
					this.$dropPanelLoading.show();
					AppAjax.ajaxCall({
						url: url,
						data: this.getParameter(),
						dataType: 'json',
						type: 'POST',
						success: function(data){
							that.$dropPanelLoading.hide();
							that.setting.data = data;
							that._suggestByLocal();
						}
					});	
				}
			}
		},
		
		/**
		 * 根据查询参数重置联想框的数据源
		 */
		_initDataByParameter: function(){
			var currParam = this.getParameter();
			if(currParam){
				if(JSON.stringify(this.lastParam) != JSON.stringify(currParam)){
					this.setting.data = undefined;
				}
				this.lastParam = currParam;
			}
		},
		/**
		 * 根据数据源按照key模糊匹配节点，并设置联想项
		 * @param data 节点数据源数组
		 * @param key 匹配关键字
		 * @returns {Array} 匹配的节点数组
		 */
		_filterByKey: function(){
			var data = this.setting.data
				,key = this.getText().toUpperCase()
				,field = this.setting.suggestfield
				,onlyleaf = this.setting.onlyleaf
				,result = [];
			if(!field){
				field = this.setting.textfield;
			}
			var fs = field.split(',');
			for(var i = 0; i < data.length; i++){
				for ( var j = 0; j < fs.length; j++) {
					var val = data[i][fs[j]];
					if(val){
						val = val.toUpperCase();													
						if(val.indexOf(key) != -1){
							if(onlyleaf && !this._isLeaf(data, data[i])){
								break;
							}
							result.push(data[i]);
							break;
						}
					}
				}
			}
			return result;
		},
		/**
		 * 当只能选择叶子节点时，判断传入的该节点是否为叶子节点，否则返回true
		 * @param id
		 */
		_isLeaf: function(data, node){
			var pidfield = this.setting.pidfield
				,valuefield = this.setting.valuefield;
			if(node['isParent'] == 'true' || node['isParent'] == true)
				return false;
			for(var i = 0; i < data.length; i++){
				if(data[i][pidfield] == node[valuefield])
					return false;
			}
			return true;
		},
		/**
		 * 渲染联想项列表
		 */
		_render$SuggestNode: function(data){
			this.$suggestList.html('');
			var vf = this.setting.valuefield
				,tf = this.setting.textfield
				,key = this.getText();
			if(data.length == 0){
				this.$dropPanelEmpty.show();
			}else{
				this.$dropPanelEmpty.hide();
			}
			for ( var i = 0; i < data.length; i++) {
				var node = data[i]
					,$suggestItem = $('<li _v="' + node[vf] + '"><i class="icon-ok"></i>' + 
									this._getSuggestText(node[tf], key) + '</li>');
				this.$suggestList.append($suggestItem);
				this._setNode($suggestItem, node);
			}
			this._selected$SuggestNode();
			if(data.length == 1){
				this._locateNextNode();
			}
			if(this.setting.acceptText){
				if(data.length == 0){
					this.hidePanel();
				}else{
					this.showPanel();
				}
			}
			this._resetPanelWidth();
		},
		/**
		 * 获取显示名称
		 * @param text
		 * @param key
		 * @returns {String}
		 */
		_getSuggestText: function(text, key){
			if(key == ''){
				return text;
			}
			var index = text.indexOf(key);
			if(index == -1){
				index = text.toUpperCase().indexOf(key.toUpperCase());
				if(index == -1){
					return text;
				}
			}
			var keyLen = key.length;
			return text.substring(0,index) +
				'<em>' + text.substring(index, index+keyLen) +'</em>' +
				text.substring(keyLen + index);
		},
		/**
		 * 按照已选节点进行渲染联想项
		 */
		_selected$SuggestNode: function(){
			var selectedNode = this.getSelectedNode()
				,vf = this.setting.valuefield
				,that = this;
			if(!selectedNode){
				selectedNode = [];
			}else{
				if(!$.isArray(selectedNode)){
					selectedNode = [selectedNode];
				}
			}
			for(var i = 0; i < selectedNode.length; i++){
				var $select = this.$suggestList.find('li[_v="' + selectedNode[i][vf] + '"]');
				$select.addClass('selected');
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 */
		togglePanel: function(){
			
		},
		/**
		 * 显示当前对象的联想面板
		 * 1、关闭其他可见的联想面板
		 * 2、根据隐藏值进行渲染选择项
		 * 3、开启点击html关闭该面板的操作
		 */
		showPanel: function(){
			if(this.context && !this.setting.suggestCustomPanel){
				this.$dropPanelCustom.hide();
				this.$dropPanel.append(this.context.$dropPanelCustom);
			}
			this._render$SelectedNode();
			this._showPanel();
		},
		/**
		 * 根据隐藏值进行渲染选择项
		 * 1、如果已设置显示值，则根据显示值结合隐藏值进行匹配设置，
		 * 		如果显示值和隐藏值不匹配，则无法完成渲染
		 * 2、如果没有设置显示值，而使用本地数据源，则根据隐藏值匹配出显示值，并渲染选择项
		 */
		_render$SelectedNode: function(){
			this._resetRender();
			this._reset$SelectedNode();
			var selectedNode = this.getSelectedNode();
			if(!selectedNode){
				return;
			}
			if($.isArray(selectedNode)){
				for (var i = 0; i < selectedNode.length; i++) {
					this._appendSelectedItem(selectedNode[i]);
				}
			}else{
				this._appendSelectedItem(selectedNode);
			}
		},
		/**
		 * 设置选中节点
		 */
		_reset$SelectedNode: function(){
			var node = this.getSelectedNode();
			if(node){
				return;
			}
			var value = this.getValue();
			if(!value){
				return;
			}
			var vs = value.split(',')
				,text = this.$text.data('oriText')
				,vf = this.setting.valuefield
				,tf = this.setting.textfield
				,multiple = this.setting.multiple
				,selectedNode = [];
			if(text){
				var ts = text.split(',');
				for ( var i = 0; i < vs.length; i++) {
					var node = {};
					node[vf] = vs[i];
					node[tf] = ts[i];
					selectedNode.push(node);
				}
			}else if(this._isLocalSuggest()){
				selectedNode = this._getSelectedNodeByValue(vs);
			}
			if(multiple){
				this.setSelectedNode(selectedNode, true);
			}else{
				this.setSelectedNode(selectedNode[0], true);
			}
		},
		/**
		 * 根据隐藏值匹配数据源，并生成选择项数据
		 * @param vs 隐藏值数组
		 */
		_getSelectedNodeByValue: function(vs){
			var result = []
				,data = this.setting.data
				,valueField = this.setting.valuefield;
			for ( var i = 0; i < vs.length; i++) {
				for(var j =0; j < data.length; j++){
					if(vs[i] == data[j][valueField]){
						result.push(data[j]);
						continue;
					}
				}
			}
			return result;
		},
		/**
		 * 判断是否为本地数据源联想
		 * @returns true
		 */
		_isLocalSuggest: function(suggest){
			if(this.setting.data != undefined 
					&& !this.setting.async){
				return true;
			}
			return false;
		},
		/**
		 * 隐藏联想框
		 * 1、关闭html的click.suggest.api事件代理
		 * 2、根据当前选择项设置联想框的显示值和隐藏值
		 */
		hidePanel: function(){
			if(this._mainDivIsVisiable()){
				this.$dropPanel.hide();
				$(document).off('click.combo.api');
				if(!this.setting.acceptText){
					this.setSelectedNode(this.getSelectedNode());
				}
			}
		},
		/**
		 * 根据文本生成一个固定节点
		 */
		_createSelectedNode: function(text){
			var selectedNode = {};
			selectedNode[this.setting.textfield] = text;
			selectedNode[this.setting.valuefield] = text;
			return selectedNode;
		},
		/**
		 * 获取以选中节点的文本
		 */
		_getSelectedNodeText: function(nodes){
			if(!nodes){
				return '';
			}
			var text = ''
				,tf = this.setting.textfield;
			if($.isArray(nodes)){
				for(var i = 0; i < nodes.length; i++){
					text += nodes[i][tf] + ',';
				}
				if (text.length > 0 ) text = text.substring(0, text.length-1);
			}else{
				text = nodes[tf] ? nodes[tf] : '';
			}
			return text;
		},
		/**
		 * 载入数据，并根据数据渲染下拉面板
		 * @param {Array.<Node>} data 载入的数据列表
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').suggest('loadData',[{id:1,name:'是'},{id:0,name:'否'}]);
		 * @memberof suggest-class
		 * @instance
		 */
		loadData: function(data){
			this.setting.data = data;
			this.setting.remote = false; 
		},
		/**
		 * 根据url载入数据源作为联想的数据源
		 * @param {url} url 要加载的url
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').combobox('reload','a.do');
		 * @memberof suggest-class
		 * @instance
		 */
		reload: function(url){
			if(url){
				var that = this;
				this.$dropPanelLoading.show();
				AppAjax.ajaxCall({
					url: url,
					data: this.getParameter(),
					dataType: 'json',
					type: 'POST',
					success: function(data){
						that.$dropPanelLoading.hide();
						that.loadData(data);
					}
				});	
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 清除值
		 * @todo 清除隐藏值
		 * @todo 清除显示值
		 * @todo 清除面板的选择项
		 * @memberof suggest-class
		 * @instance
		 */
		clearValue: function(){
			this.setText('');
			this.setValue('');
			this._resetRender();
			this.setSelectedNode(null);
		},
		/**
		 * 重置当前联想项列表的选中状态和已选项项节点
		 */
		_resetRender: function(){
			this.$suggestList.find('li.selected').removeClass('selected');
			this.$selectedList.html('');
		},
		/**
		 * 根据已选框的选项设置组件的已选节点
		 */
		_setSelectedNodeBySltArea: function(){
			var $selectedNodes = this.$selectedList.children()
				,selectedNode = [];
			for(var i = 0; i< $selectedNodes.length; i++){
				selectedNode.push(this._getNode($($selectedNodes[i])));
			}
			if(!this.setting.multiple){
				selectedNode = selectedNode[0];
				if(selectedNode == undefined){
					selectedNode = null;
				}
			}
			this.setSelectedNode(selectedNode, !this.setting.acceptText);
		},
		/**
		 * 联想被激发
		 * 1、如果存在自定义选择前事件，先执行该事件，如果返回false 则结束选择，否则执行2
		 * 2、单选则设值当前选择项为值，并关闭下拉框；多选则追加当前选择项为值
		 * 3、如果存在自定义选择后事件，则执行该事件
		 * @param $node 被激发的联想项
		 */
		_suggestItemActive: function($node){
			if(this._isSelected($node)){
				this._unselect$SuggestNode($node);
				this._setSelectedNodeBySltArea();
			}else{
				this._select$SuggestNode($node);
			}
		},
		/**
		 * 判断该节点是否已经被选中
		 */
		_isSelected: function($node){
			return $node.hasClass('selected');
		},
		/**
		 * 将节点设置为选中的样式
		 */
		_select$SuggestNode: function($node){
			/**
			 * 节点被选择前事件，并返回一个值，当为false时取消选择操作
			 * @event suggest-class#beforeSelected
			 * @param {Node} node 被选择的节点
			 * @returns {Boolean} boolean 返回值为false 取消选择
			 */
			if(this._active$NodeEvent('beforeSelected', $node) === false){
				return;
			}
			var node = this._getNode($node);
			if(this.setting.multiple){
				$node.addClass('selected');
				this._appendSelectedItem(node);
				this._setSelectedNodeBySltArea();
			}else{
				this.$suggestList.find('li.selected').removeClass('selected');
				this.$selectedList.html('');
				$node.addClass('selected');
				this._appendSelectedItem(node);
				this._setSelectedNodeBySltArea();
				this.hidePanel();
			}
			/**
			 * 节点选择后事件
			 * @event suggest-class#afterSelected
			 * @param {Node} node 被选择的节点
			 */
			this._active$NodeEvent('afterSelected', $node);
		},
		/**
		 * 将节点设置为未选中的样式
		 */
		_unselect$SuggestNode: function($node){
			$node.removeClass('selected');
			var node = this._getNode($node);
			this.$selectedList.find('.selected-item[_v="' + node[this.setting.valuefield] + '"]').remove();
		},
		/**
		 * 执行自定义选择前事件
		 * @param $node 当前被点击的选择项
		 * @returns {Boolean} false 结束点击事件
		 */
		_active$NodeEvent: function(eventName, $node){
			if(this.hasBindEvent(eventName)){
				return this.trigger(eventName, this._getNode($node));
			}
		},
		/**
		 * 根据Li选择项获取当前节点
		 * @param li Li选择项
		 * @returns {}
		 */
		_getNode: function ($node){
			return $node.data('node');
		},
		/**
		 * 设置Li选择项获取当前节点
		 * @param li Li选择项
		 * @returns {}
		 */
		_setNode: function ($node, node){
			$node.data('node', node);
		},
		/**
		 * 追加选择项到已选面板
		 * @param node 节点数据
		 */
		_appendSelectedItem: function(node){
			if(this.$selectedList.find('.selected-item[_v="' + node[this.setting.valuefield] + '"]').length == 0){
				var $selectedNode = $('<div class="selected-item" _v="' + node[this.setting.valuefield] + '">' + 
						node[this.setting.textfield] + '<span class="sd-close-btn"></span></div>');
				this._setNode($selectedNode, node);
				this.$selectedList.append($selectedNode);
			}
		}
	});
	
	$.fn.suggest = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'suggest';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Suggest(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};

	return Suggest;
});
/**
 * 下拉框控件--继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-combobox',['app/core/app-jquery', 'app/core/app-core', 
        'app/widgets/form/app-combo', 'app/core/app-options', 'app/widgets/form/app-suggest'],
        function($, App, Combo, Options, Suggest) {
	'use strict';
	/**
	 * @class 
	 * @classdesc 下拉框
	 * <span class="type-signature static">extend</span>combo
	 * @see {@link combo-class} 查看combo组件
	 * @name combobox-class
	 * @desc 下拉框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-combobox"
	 * &#9;_options="{
	 * &#9;&#9;action: 'platform/sample/base/ui/suggestData.do',
	 * &#9;&#9;panelheight: 200,
	 * &#9;&#9;tips: '请选择...',
	 * &#9;&#9;formatter: '{code}+{name}',
	 * &#9;&#9;onChange: function(newVal,oldVal){
	 * &#9;&#9;&#9;logOnChange('comboboxLog',newVal,oldVal);
	 * &#9;&#9;}
	 * &#9;}"
	 * />
	 * @example $('#demo').combobox({
	 * &#9;action: 'platform/sample/base/ui/suggestData.do',
	 * &#9;panelheight: 200,
	 * &#9;tips: '请选择...',
	 * &#9;formatter: '{code}+{name}',
	 * &#9;onChange: function(newVal,oldVal){
	 * &#9;&#9;logOnChange('comboboxLog',newVal,oldVal);
	 * &#9;}
	 * });
	 */
	var Combobox = Combo.extend({
		initialize: function(input, options){
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Combobox;
			Combobox.superclass.initialize.call(this, input, options);
			this._init();
		},
		/** 
		 * 初始化
		 */
		_init: function(){
			this._initPanelContent();
			this._registEvents();
			this.mapData = {};
			if(this.setting.usesuggest){
				this._suggest = new Suggest(this.$input, this.options);
				this._suggest.context = this;
			}
			this._eventRegister();
			this.$input.data('context', this);
			/**
			 * 节点删除事件，当存在该事件时，节点末尾跟随一个删除按钮
			 * @event combobox-class#onDeleteNode
			 * @param {Node} node 被选择的节点
			 */
			if($.isFunction(this.setting.onDeleteNode)){
				this.setting.nodeDelete = true;
			}
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterSelected)){
				this.on('afterSelected', s.afterSelected);
			}
			if($.isFunction(s.beforeSelected)){
				this.on('beforeSelected', s.beforeSelected);
			}
			if($.isFunction(s.onDeleteBtnRender)){
				this.on('onDeleteBtnRender', s.onDeleteBtnRender);
			}
			if($.isFunction(s.onDeleteNode)){
				this.on('onDeleteNode', s.onDeleteNode);
			}
			if($.isFunction(s.onLoadSuccess)){
				this.on('onLoadSuccess', s.onLoadSuccess);
			}
			if($.isFunction(s.addDiyDom)){
				this.on('addDiyDom', s.addDiyDom);
			}
			if($.isFunction(s.addHoverDom)){
				this.on('addHoverDom', s.addHoverDom);
			}
			if($.isFunction(s.removeHoverDom)){
				this.on('removeHoverDom', s.removeHoverDom);
			}
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			var that = this;
			this.$list.on('click.combobox.api', 'li', function(){
				that._clickActive$Node($(this));
			});
			this.$list.on('click.combobox-delete.api', '>li>.btn-delete', function(e){
				that._clickDelete$Node($(this).parent());
				e.stopPropagation();
			});
			this.$list.on('mouseover', '>li', function(e){
				if(that.hasBindEvent('addHoverDom')){
					var $this = $(this);
					/**
					 * 用于当鼠标移动到节点上时，显示用户自定义控件
					 * @todo 请务必与 removeHoverDom 同时使用
					 * @event combobox-class#addHoverDom
					 * @param {Jquery} $node 下拉项DOM
					 * @param {Object} node 下拉项数据
					 */
					that.trigger('addHoverDom', $this, that._getNode($this));
				}
			});
			this.$list.on('mouseout', '>li', function(e){
				if(that.hasBindEvent('removeHoverDom')){
					var $this = $(this);
					if($(e.toElement).closest('li').is($this)){
						return;
					}
					if($this.hasClass('selected') || $this.hasClass('current')){
						return;
					}
					/**
					 * 用于当鼠标移出节点时，隐藏用户自定义控件
					 * @todo 请务必与 addHoverDom 同时使用
					 * @event combobox-class#removeHoverDom
					 * @param {Jquery} $node 下拉项DOM
					 * @param {Object} node 下拉项数据
					 */
					that.trigger('removeHoverDom', $this, that._getNode($this));
				}
			});
		},
		/**
		 * 初始化下拉面板的内容
		 */
		_initPanelContent: function(){
			var $list = $('<ul class="combo-list"></ul>');
			$list.appendTo(this.$dropPanelMain);
			this.$list = $list;
		},
		/**
		 * 按键导航事件
		 */
		_keyManager: function(e){
			if(this._dealSysKey(e)){
				return;
			}
			if(this._isSuggestContext()){//联想框主控 则返回
				return;
			}
			if(this._mainDivIsVisiable()){
				this._keyForVisiblePanel(e);
			}else{
				this._keyForHiddenPanel(e);
			}
		},
		/**
		 * 面板可见状态下的按键事件处理
		 */
		_keyForVisiblePanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			e.stopPropagation();
			if(App.containKeyCode(e, s.keyNextNode)){
				this._keyNextNode(e);
			}else if(App.containKeyCode(e, s.keyPrevNode)){
				this._keyPrevNode(e);
			}else if(App.containKeyCode(e, s.keyPickNode)){
				this._keyPickNode(e);
			}else if(App.containKeyCode(e, s.keyHidePanel)){
				this._keyHidePanel(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 面板不可见状态下的按键事件处理
		 */
		_keyForHiddenPanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			if(App.containKeyCode(e, s.keyShowPanel)){
				this._keyShowPanel(e);
			}else if(this._isKeyCursorPos(keyCode)){
				this._keyCursorPos(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 定位上一个节点
		 */
		_keyPrevNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var $l = this.$list;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.prev();
			if($n.length == 0){
				$n = $l.find('li:last-child');
			}
			$c.removeClass('current');
			$n.addClass('current');
			this.trigger('addHoverDom', $n, this._getNode($n));
			if(!$c.hasClass('selected') && !$c.hasClass('current')){
				this.trigger('removeHoverDom', $c, this._getNode($c));
			}
			this._locateCurrent();
		},
		/**
		 * 定位下一个节点
		 */
		_keyNextNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var $l = this.$list;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.next();
			if($n.length == 0){
				$n = $l.find('li:first-child');
			}
			$c.removeClass('current');
			$n.addClass('current');
			this.trigger('addHoverDom', $n, this._getNode($n));
			if(!$c.hasClass('selected') && !$c.hasClass('current')){
				this.trigger('removeHoverDom', $c, this._getNode($c));
			}
			this._locateCurrent();
		},
		/**
		 * 选中一个节点
		 */
		_keyPickNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var $c = this.$list.find('.current');
			if($c.length == 0){
				return;
			}
			if(this.setting.multiple){
				this._keyNextNode(e);
			}
			this._clickActive$Node($c);
		},
		/**
		 * 联想项的定位到当前项
		 */
		_locateCurrent: function(){
			var $c = this.$list.find('li.current');
			if($c.length != 1){
				return;
			}
			var top = $c.offset().top + $c.outerHeight() - this.$list.offset().top
				,containerHeight = this.$dropPanel.outerHeight() -2
				,scrollTop = this.$dropPanel.scrollTop();
			if(top <= scrollTop){
				this.$dropPanel.scrollTop(top - $c.outerHeight());
			}else if(top >= scrollTop + containerHeight){
				this.$dropPanel.scrollTop(top - containerHeight);
			}
		},
		/**
		 * 显示下拉面板
		 * @todo 填充下拉面板内容
		 * @todo 根据隐藏值渲染选择项
		 * @todo 显示面板，根据面板内容进行面板位置的调整
		 * @example $('#demo').combobox('showPanel');
		 * @memberof combobox-class
		 * @instance
		 */
		showPanel: function(){
			if(this._suggest){
				this.$dropPanel.append(this.$dropPanelCustom);
			}
			this._showPanel(function(){
				this._initData();
				this._rendSelectedItems();
			});
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 * @todo 判断当前面板是否可见：
		 * @todo 1如果不可见，调用showPanel
		 * @todo 2如果可见，则关闭面板
		 * @example $('#demo').combobox('togglePanel');
		 * @memberof combobox-class
		 * @instance
		 */
		togglePanel: function(){
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}else{
				this.showPanel();
			}
		},
		/**
		 * 载入数据，并根据数据渲染面板中的列表项
		 * @param {Array.<Node>} data 载入的数据列表
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 如果下拉面板为打开状态，则重新打开面板（由于面板内容改变，可能导致面板高度改变，用于矫正位置）
		 * @example $('#demo').combobox('loadData',[{id:1,name:'是'},{id:0,name:'否'}]);
		 * @memberof combobox-class
		 * @instance
		 */
		loadData: function(data){
			this.setting.data = data;
			if(this._suggest){
				this._suggest.setting.data = data;
				if(this._suggest.isSuggesting()){
					this._suggest.refreshSuggest();
				}
			}
			this._renderData();
			//内容填充后，显示面板，重新定位
			if(this._mainDivIsVisiable()){
				this.place();
			}
		},
		/**
		 * 在列表末尾加入一个节点
		 * @example $('#demo').combobox('appendNode', {id:2, name:'不确定'});
		 * @memberof combobox-class
		 * @instance
		 */
		appendNode: function(node){
			if(!node || $.isArray(node)){
				return;
			}
			this.$dropPanelEmpty.hide();
			var $node = this._create$Node(node);
			this.$list.append($node);
			if(this.setting.data){
				$.merge(this.setting.data, [node]);
			}else{
				this.setting.data = [node];
			}
			if(this._suggest && this._suggest.setting){
				if(this._suggest.setting.data){
					$.merge(this._suggest.setting.data, [node]);
				}else{
					this._suggest.setting.data = [node];
				}
			}
			//内容填充后，显示面板，重新定位
			if(this._mainDivIsVisiable()){
				this.place();
			}
		},
		/**
		 * 渲染数据
		 */
		_renderData: function(){
			var data = this.setting.data == undefined ? [] : this.setting.data;
			this.$list.empty();
			for ( var i = 0; i < data.length; i++) {
				var $node = $(this._create$Node(data[i]));
				this.$list.append($node);
				/**
				 * 用于在节点上固定显示用户自定义控件
				 * @event combobox-class#addDiyDom
				 * @param {Jquery} $node 下拉项DOM
				 * @param {Object} node 下拉项数据
				 */
				this.trigger('addDiyDom', $node, data[i]);
			}
			if(data.length == 0){
				this.$dropPanelEmpty.show();
			}else{
				this.$dropPanelEmpty.hide();
			}
			this._resetPanelHeight(data.length);
			this._resetPanelWidth();
			this._rendSelectedItems();
			this._afterDataRender();
		},
		/**
		 * 生成一个node节点
		 */
		_create$Node: function(node){
			var itemId = App.uuid();
			this.mapData[itemId] = node;
			return '<li id="' + itemId + '" _v="' + node[this.setting.valuefield] +
					'"><i class="icon-ok"></i>' + node[this.setting.textfield] +
					 this._create$DeleteNode(node)+ '</li>';
		},
		/**
		 * 根据回调过滤节点
		 */
		_create$DeleteNode: function(node){
			var html = '';
			if(this.hasBindEvent('onDeleteBtnRender')){
				/**
				 * 节点的删除按钮过滤器
				 * @event combobox-class#onDeleteBtnRender
				 * @param {Node} node 要渲染的节点
				 * @returns {Boolean} boolean 返回值为true 需要一个删除按钮
				 */
				if(this.trigger('onDeleteBtnRender', node) === true){
					html = '<i class="btn-delete"></i>';
				}
			}else{
				html = this.hasBindEvent('onDeleteNode')?'<i class="btn-delete"></i>':'';
			}
			return html;
		},
		/**
		 * 选择项点击事件
		 * 1、如果存在自定义选中前事件，先执行该事件，如果返回false则结束选择，否则执行2
		 * 2、单选则设值当前选择项为值，并关闭下拉框；多选则追加当前选择项为值
		 * 3、如果存在自定义选中后事件，则执行该事件
		 * @param $node
		 */
		_clickActive$Node: function($node){
			if(this._isSelected($node) && this.setting.multiple){
				this._unselect$Node($node);
				this._setSelectedNodeBy$Node();
			}else{
				/**
				 * 节点选择前事件，并返回一个值，当为false时取消选择操作
				 * @event combobox-class#beforeSelected
				 * @param {Node} node 被选择的节点
				 * @returns {Boolean} boolean 返回值为false 取消选择
				 */
				if(this._activeItemEvent('beforeSelected', $node) === false){
					return;
				}
				this._select$Node($node);
				this._setSelectedNodeBy$Node();
				/**
				 * 节点选择后事件
				 * @event combobox-class#afterSelected
				 * @param {Node} node 被选择的节点
				 */
				this._activeItemEvent('afterSelected', $node);
			}
		},
		/**
		 * 激活节点点击事件
		 * @param li 当前被点击的选择项
		 * @returns {Boolean} false 结束点击事件
		 */
		_activeItemEvent: function(eventName, $node){
			if(this.hasBindEvent(eventName)){
				return this.trigger(eventName, this._getNode($node));
			}
		},
		/**
		 * 判断该节点是否已经被选中
		 */
		_isSelected: function($node){
			return $node.hasClass('selected');
		},
		/**
		 * 点击删除按钮
		 */
		_clickDelete$Node: function($node){
			if(this.hasBindEvent('onDeleteNode')){
				this.trigger('onDeleteNode', this._getNode($node), $node.index());
			}
		},
		/**
		 * 根据行号删除节点
		 * @param {Number} index 已删除的行号
		 * @example $('#demo').combobox('deleteNode', 1);
		 * @memberof combobox-class
		 * @instance
		 */
		deleteNode: function(index){
			var type = typeof(index)
				,exp = '';
			if(!isNaN(index)){
				exp = '>li:eq(' + index + ')';
			}else if(type == 'string'){
				exp = '>li[_v="' + index + '"]';
			}else if(type == 'object'){
				exp = '>li[_v="' + index[this.setting.valuefield] + '"]';
			}
			var $node = this.$list.find(exp);
			if($node.length == 1){
				this._delete$Node($node);
			}
			if(this.$list.find('li').length == 0){
				this.$dropPanelEmpty.show();
			}
		},
		/**
		 * 删除节点
		 */
		_delete$Node: function($node){
			if(this._isSelected($node)){
				this._unselect$Node($node);
				this._setSelectedNodeBy$Node();
			}
			var node = this.mapData[$node.attr('id')]
				,vf = this.setting.valuefield;
			if(this._suggest){
				var data = this._suggest.setting.data;
				for(var i = 0; i < data.length; i++){
					if(data[i][vf] == node[vf]){
						data.splice(i, 1);
						this._suggest.prevKey = undefined;//清除关键字 重新开始搜索
						break;
					}
				}
			}
			delete this.mapData[$node.attr('id')];
			$node.remove();
		},
		/**
		 * 将节点设置为选中的样式
		 */
		_select$Node: function($node){
			if(this.setting.multiple){
				$node.addClass('selected');
			}else{
				var $selectedNode = this.$list.find('li.selected');
				$selectedNode.removeClass('selected');
//				if($selectedNode.attr('id') != $node.attr('id')){
					$node.addClass('selected');
					this.hidePanel();
//				}
			}
		},
		/**
		 * 将节点设置为未选中的样式
		 */
		_unselect$Node: function($node){
			$node.removeClass('selected');
		},
		/**
		 * 根据已选的节点设置选中的项
		 */
		_setSelectedNodeBy$Node: function(){
			var result = null
				,nodes = []
				,$nodes = this.$list.find('li.selected');
			for(var i = 0,l = $nodes.length; i < l; i++){
				var node = this._getNode($($nodes[i]));
				nodes.push(node);
			}
			if(this.setting.multiple){
				result = nodes;
			}else{
				result = nodes[0];
				if(result == undefined){
					result = null;
				}
			}
			this.setSelectedNode(result);
		},
		/**
		 * 根据选择项获取当前节点
		 * @param $node 选择项
		 * @returns {}
		 */
		_getNode: function($node){
			return this.mapData[$node.attr('id')];
		},
		/**
		 * 根据当前下拉框的隐藏值查询出相关的选择项，
		 * 渲染选择项为选中状态，并根据值设置显示值
		 */
		_rendSelectedItems: function(){
			this._clearSelectedItems();
			this._render$NodeByValue();
		},
		/**
		 * 根据value等值匹配出选择项
		 * @result 值属于value的选择项
		 */
		_render$NodeByValue: function(){
			var vs = this.getValue().split(',');
			for ( var i = 0; i < vs.length; i++) {
				this.$list.find('li[_v="' + vs[i] + '"]').addClass('selected');
			}
		},
		/**
		 * 根据传入的url进行远程加载数据并渲染
		 * @param {url} url 要载入的url
		 * @todo 请求时并加入parameter参数，获取到数据后调用loadData
		 * @example $('#demo').combobox('reload','a.do');
		 * @memberof combobox-class
		 * @instance
		 */
		reload: function(url){
			this._ajax(url, function(data){
				this.loadData(data);
			});
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 清除值
		 * @todo 清除隐藏值
		 * @todo 清除显示值
		 * @todo 清除下拉面板的选择项
		 * @memberof combobox-class
		 * @instance
		 */
		clearValue: function(){
			this.setText('');
			this.setValue('');
			this._clearSelectedItems();
		},
		/**
		 * 清除选择项的样式
		 */
		_clearSelectedItems: function(){
			this.$list.find('li.selected').removeClass('selected');
		}
	});
	$.fn.combobox = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'combobox';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
					
					if(option == 'on' && component._suggest){
						component._suggest.on.apply(component._suggest, methodArgs);
					}
					if(option == 'bind' && component._suggest){
						component._suggest.bind.apply(component._suggest, methodArgs);
					}
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Combobox(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	return $;
});
/* =========================================================
 * bootstrap-datetimepicker.js
 * =========================================================
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Improvements by Sébastien Malot
 * Improvements by Yun Lai
 * Project URL : http://www.malot.fr/bootstrap-datetimepicker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

/*
 * Improvement by CuGBabyBeaR @ 2013-09-12
 * 
 * Make it work in bootstrap v3
 */

!function ($) {

	function UTCDate() {
		return new Date(Date.UTC.apply(Date, arguments));
	}

	function UTCToday() {
		var today = new Date();
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), today.getUTCHours(), today.getUTCMinutes(), today.getUTCSeconds(), 0);
	}

	// Picker object

	var Datetimepicker = function (element, options) {
		var that = this;

		
		this.element = $(element);
		if (options._datetime){
			
			this._datetime=options._datetime;
		}
		
		this.language = options.language || this.element.data('date-language') || "en";
		this.language = this.language in dates ? this.language : "en";
		this.isRTL = dates[this.language].rtl || false;
		this.formatType = options.formatType || this.element.data('format-type') || 'standard';
		this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);
		this.isInline = false;
		this.isVisible = false;
		this.isInput = this.element.is('input');

		this.bootcssVer = this.isInput ? (this.element.is('.form-control') ? 3 : 2) : ( this.bootcssVer = this.element.is('.input-group') ? 3 : 2 );

		this.component = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-calendar').parent() : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar').parent()) : false;
		this.componentReset = this.element.is('.date') ? ( this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-remove').parent() : this.element.find('.add-on .icon-remove').parent()) : false;
		this.hasInput = this.component && this.element.find('input').length;
		if (this.component && this.component.length === 0) {
			this.component = false;
		}
		this.linkField = options.linkField || this.element.data('link-field') || false;
		this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);
		this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
		this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
		this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;
		this.initialDate = options.initialDate || new Date();

		this._attachEvents();

		this.formatViewType = "datetime";
		if ('formatViewType' in options) {
			this.formatViewType = options.formatViewType;
		} else if ('formatViewType' in this.element.data()) {
			this.formatViewType = this.element.data('formatViewType');
		}

		this.minView = 0;
		if ('minView' in options) {
			this.minView = options.minView;
		} else if ('minView' in this.element.data()) {
			this.minView = this.element.data('min-view');
		}
		this.minView = DPGlobal.convertViewMode(this.minView);

		this.maxView = DPGlobal.modes.length - 1;
		if ('maxView' in options) {
			this.maxView = options.maxView;
		} else if ('maxView' in this.element.data()) {
			this.maxView = this.element.data('max-view');
		}
		this.maxView = DPGlobal.convertViewMode(this.maxView);

		this.wheelViewModeNavigation = false;
		if ('wheelViewModeNavigation' in options) {
			this.wheelViewModeNavigation = options.wheelViewModeNavigation;
		} else if ('wheelViewModeNavigation' in this.element.data()) {
			this.wheelViewModeNavigation = this.element.data('view-mode-wheel-navigation');
		}

		this.wheelViewModeNavigationInverseDirection = false;

		if ('wheelViewModeNavigationInverseDirection' in options) {
			this.wheelViewModeNavigationInverseDirection = options.wheelViewModeNavigationInverseDirection;
		} else if ('wheelViewModeNavigationInverseDirection' in this.element.data()) {
			this.wheelViewModeNavigationInverseDirection = this.element.data('view-mode-wheel-navigation-inverse-dir');
		}

		this.wheelViewModeNavigationDelay = 100;
		if ('wheelViewModeNavigationDelay' in options) {
			this.wheelViewModeNavigationDelay = options.wheelViewModeNavigationDelay;
		} else if ('wheelViewModeNavigationDelay' in this.element.data()) {
			this.wheelViewModeNavigationDelay = this.element.data('view-mode-wheel-navigation-delay');
		}

		this.startViewMode = 2;
		if ('startView' in options) {
			this.startViewMode = options.startView;
		} else if ('startView' in this.element.data()) {
			this.startViewMode = this.element.data('start-view');
		}
		this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
		this.viewMode = this.startViewMode;

		this.viewSelect = this.minView;
		if ('viewSelect' in options) {
			this.viewSelect = options.viewSelect;
		} else if ('viewSelect' in this.element.data()) {
			this.viewSelect = this.element.data('view-select');
		}
		this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);

		this.forceParse = true;
		if ('forceParse' in options) {
			this.forceParse = options.forceParse;
		} else if ('dateForceParse' in this.element.data()) {
			this.forceParse = this.element.data('date-force-parse');
		}

		this.picker = $((this.bootcssVer == 3) ? DPGlobal.templateV3 : DPGlobal.template)
			.appendTo(this.isInline ? this.element : 'body>.appPanelContainer')//将面板移动到appPanelContainer元素中 统一管理 Mr.T2014年11月20日15:52:17
			.on({
				click:     $.proxy(this.click, this),
				mousedown: $.proxy(this.mousedown, this)
			});

		if (this.wheelViewModeNavigation) {
			if ($.fn.mousewheel) {
				this.picker.on({mousewheel: $.proxy(this.mousewheel, this)});
			} else {
				console.log("Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option");
			}
		}

		if (this.isInline) {
			this.picker.addClass('datetimepicker-inline');
		} else {
			this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');
		}
		if (this.isRTL) {
			this.picker.addClass('datetimepicker-rtl');
			if (this.bootcssVer == 3) {
				this.picker.find('.prev span, .next span')
					.toggleClass('glyphicon-arrow-left glyphicon-arrow-right');
			} else {
				this.picker.find('.prev i, .next i')
					.toggleClass('icon-arrow-left icon-arrow-right');
			}
			;

		}
		$(document).on('mousedown', function (e) {
			// Clicked outside the datetimepicker, hide it
			if ($(e.target).closest('.datetimepicker').length === 0) {
				that.hide();
			}
		});

		this.autoclose = false;
		if ('autoclose' in options) {
			this.autoclose = options.autoclose;
		} else if ('dateAutoclose' in this.element.data()) {
			this.autoclose = this.element.data('date-autoclose');
		}

		this.keyboardNavigation = true;
		if ('keyboardNavigation' in options) {
			this.keyboardNavigation = options.keyboardNavigation;
		} else if ('dateKeyboardNavigation' in this.element.data()) {
			this.keyboardNavigation = this.element.data('date-keyboard-navigation');
		}

		this.todayBtn = (options.todayBtn || this.element.data('date-today-btn') || false);
		this.todayHighlight = (options.todayHighlight || this.element.data('date-today-highlight') || false);

		this.weekStart = ((options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7);
		this.weekEnd = ((this.weekStart + 6) % 7);
		this.startDate = -Infinity;
		this.endDate = Infinity;
		this.daysOfWeekDisabled = [];
		this.setStartDate(options.startDate || this.element.data('date-startdate'));
		this.setEndDate(options.endDate || this.element.data('date-enddate'));
		this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
		this.fillDow();
		this.fillMonths();
		this.update();
		this.showMode();

		if (this.isInline) {
			this.show();
		}
	};

	Datetimepicker.prototype = {
		constructor: Datetimepicker,

		_events:       [],
		_attachEvents: function () {
			this._detachEvents();
			if (this.isInput) { // single input
				this._events = [
					[this.element, {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}]
				];
			}
			else if (this.component && this.hasInput) { // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
				if (this.componentReset) {
					this._events.push([
						this.componentReset,
						{click: $.proxy(this.reset, this)}
					]);
				}
			}
			else if (this.element.is('div')) {  // inline datetimepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.on(ev);
			}
		},

		_detachEvents: function () {
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.off(ev);
			}
			this._events = [];
		},

		show: function (e) {
			this.picker.show();
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
			if (this.forceParse) {
				this.update();
			}
			this.place();
			$(window).on('resize', $.proxy(this.place, this));
			if (e) {
				e.stopPropagation();
				e.preventDefault();
			}
			this.isVisible = true;
			this.element.trigger({
				type: 'show',
				date: this.date
			});
		},

		hide: function (e) {
			if (!this.isVisible) return;
			if (this.isInline) return;
			this.picker.hide();
			$(window).off('resize', this.place);
			this.viewMode = this.startViewMode;
			this.showMode();
			if (!this.isInput) {
				$(document).off('mousedown', this.hide);
			}

			if (
				this.forceParse &&
					(
						this.isInput && this.element.val() ||
							this.hasInput && this.element.find('input').val()
						)
				)
				this.setValue();
			this.isVisible = false;
			this.element.trigger({
				type: 'hide',
				date: this.date,
				isPropagationStopped:function(){return true}
			});
		},

		remove: function () {
			this._detachEvents();
			this.picker.remove();
			delete this.picker;
			delete this.element.data().datetimepicker;
		},

		getDate: function () {
			var d = this.getUTCDate();
			return new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
		},

		getUTCDate: function () {
			return this.date;
		},

		setDate: function (d) {
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset() * 60000)));
		},

		setUTCDate: function (d) {
			if (d >= this.startDate && d <= this.endDate) {
				this.date = d;
				this.setValue();
				this.viewDate = this.date;
				this.fill();
			} else {
				this.element.trigger({
					type:      'outOfRange',
					date:      d,
					startDate: this.startDate,
					endDate:   this.endDate
				});
			}
		},

		setFormat: function (format) {
			this.format = DPGlobal.parseFormat(format, this.formatType);
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element && element.val()) {
				this.setValue();
			}
		},

		setValue: function () {
			var formatted = this.getFormattedDate();
			if (!this.isInput) {
				if (this.component) {
					this.element.find('input').val(formatted);
				}
				this.element.data('date', formatted);
			} else {
				this.element.val(formatted);
			}
			if (this.linkField) {
				$('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
			}
		},

		getFormattedDate: function (format) {
			if (format == undefined) format = this.format;
			return DPGlobal.formatDate(this.date, format, this.language, this.formatType);
		},

		setStartDate: function (startDate) {
			this.startDate = startDate || -Infinity;
			if (this.startDate !== -Infinity) {
				this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setEndDate: function (endDate) {
			this.endDate = endDate || Infinity;
			if (this.endDate !== Infinity) {
				this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType);
			}
			this.update();
			this.updateNavArrows();
		},

		setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
			this.daysOfWeekDisabled = daysOfWeekDisabled || [];
			if (!$.isArray(this.daysOfWeekDisabled)) {
				this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
			}
			this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
				return parseInt(d, 10);
			});
			this.update();
			this.updateNavArrows();
		},

		place: function () {
			if (this.isInline) return;

			var index_highest = 0;
			$('div').each(function () {
				var index_current = parseInt($(this).css("zIndex"), 10);
				if (index_current > index_highest) {
					index_highest = index_current;
				}
			});
			var zIndex = index_highest + 10;

			var offset, top, left;
			if (this.component) {
				offset = this.component.offset();
				left = offset.left;
				if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {
					left += this.component.outerWidth() - this.picker.outerWidth();
				}
			} else {
				offset = this.element.offset();
				left = offset.left;
			}
			if (this.pickerPosition == 'top-left' || this.pickerPosition == 'top-right') {
				top = offset.top - this.picker.outerHeight();
			} else {
				top = offset.top + this.height;
			}
			this.picker.css({
				top:    top,
				left:   left,
				zIndex: zIndex
			});
		},

		update: function () {
			var date, fromArgs = false;
			if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
				date = arguments[0];
				fromArgs = true;
			} else {
				date = this.element.data('date') || (this.isInput ? this.element.val() : this.element.find('input').val()) || this.initialDate;
				if (typeof date == 'string' || date instanceof String) {
				  date = date.replace(/^\s+|\s+$/g,'');
				}
			}

			if (!date) {
				date = new Date();
				fromArgs = false;
			}

			this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType);

			if (fromArgs) this.setValue();

			if (this.date < this.startDate) {
				this.viewDate = new Date(this.startDate);
			} else if (this.date > this.endDate) {
				this.viewDate = new Date(this.endDate);
			} else {
				//设置相应的日期 Mr.T 2014年10月25日
				this._setDateConvenient();
				this.viewDate = new Date(this.date);
			}
			this.fill();
		},

		fillDow: function () {
			var dowCnt = this.weekStart,
				html = '<tr>';
			while (dowCnt < this.weekStart + 7) {
				html += '<th class="dow">' + dates[this.language].daysMin[(dowCnt++) % 7] + '</th>';
			}
			html += '</tr>';
			this.picker.find('.datetimepicker-days thead').append(html);
		},

		fillMonths: function () {
			var html = '',
				i = 0;
			while (i < 12) {
				html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
			}
			this.picker.find('.datetimepicker-months td').html(html);
		},

		fill: function () {
			if (this.date == null || this.viewDate == null) {
				return;
			}
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				dayMonth = d.getUTCDate(),
				hours = d.getUTCHours(),
				minutes = d.getUTCMinutes(),
				startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
				startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,
				endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
				endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity,
				currentDate = (new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate())).valueOf(),
				today = new Date();
			this.picker.find('.datetimepicker-days thead th:eq(1)')
				.text(dates[this.language].months[month] + ' ' + year);
			if (this.formatViewType == "time") {
				var hourConverted = hours % 12 ? hours % 12 : 12;
				var hoursDisplay = (hourConverted < 10 ? '0' : '') + hourConverted;
				var minutesDisplay = (minutes < 10 ? '0' : '') + minutes;
				var meridianDisplay = dates[this.language].meridiem[hours < 12 ? 0 : 1];
				this.picker.find('.datetimepicker-hours thead th:eq(1)')
					.text(hoursDisplay + ':' + minutesDisplay + ' ' + meridianDisplay.toUpperCase());
				this.picker.find('.datetimepicker-minutes thead th:eq(1)')
					.text(hoursDisplay + ':' + minutesDisplay + ' ' + meridianDisplay.toUpperCase());
			} else {
				this.picker.find('.datetimepicker-hours thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
				this.picker.find('.datetimepicker-minutes thead th:eq(1)')
					.text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
			}
			this.picker.find('tfoot th.today')
				.text(dates[this.language].today)
				.toggle(this.todayBtn !== false);
			this.updateNavArrows();
			this.fillMonths();
			/*var prevMonth = UTCDate(year, month, 0,0,0,0,0);
			 prevMonth.setUTCDate(prevMonth.getDate() - (prevMonth.getUTCDay() - this.weekStart + 7)%7);*/
			var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
			prevMonth.setUTCDate(day);
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
			var nextMonth = new Date(prevMonth);
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
			nextMonth = nextMonth.valueOf();
			var html = [];
			var clsName;
			while (prevMonth.valueOf() < nextMonth) {
				if (prevMonth.getUTCDay() == this.weekStart) {
					html.push('<tr>');
				}
				clsName = '';
				if (prevMonth.getUTCFullYear() < year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month)) {
					clsName += ' old';
				} else if (prevMonth.getUTCFullYear() > year || (prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month)) {
					clsName += ' new';
				}
				// Compare internal UTC date with local today, not UTC today
				if (this.todayHighlight &&
					prevMonth.getUTCFullYear() == today.getFullYear() &&
					prevMonth.getUTCMonth() == today.getMonth() &&
					prevMonth.getUTCDate() == today.getDate()) {
					clsName += ' today';
				}
				if (prevMonth.valueOf() == currentDate) {
					clsName += ' active';
				}
				if ((prevMonth.valueOf() + 86400000) <= this.startDate || prevMonth.valueOf() > this.endDate ||
					$.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1) {
					clsName += ' disabled';
				}
				html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() == this.weekEnd) {
					html.push('</tr>');
				}
				prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
			}
			this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));

			html = [];
			var txt = '', meridian = '', meridianOld = '';
			for (var i = 0; i < 24; i++) {
				var actual = UTCDate(year, month, dayMonth, i);
				clsName = '';
				// We want the previous hour for the startDate
				if ((actual.valueOf() + 3600000) <= this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (hours == i) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="hour"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (i % 12 ? i % 12 : 12);
					html.push('<span class="hour' + clsName + ' hour_' + (i < 12 ? 'am' : 'pm') + '">' + txt + '</span>');
					if (i == 23) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					html.push('<span class="hour' + clsName + '">' + txt + '</span>');
				}
			}
			this.picker.find('.datetimepicker-hours td').html(html.join(''));

			html = [];
			txt = '', meridian = '', meridianOld = '';
			for (var i = 0; i < 60; i += this.minuteStep) {
				var actual = UTCDate(year, month, dayMonth, hours, i, 0);
				clsName = '';
				if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
					clsName += ' disabled';
				} else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
					clsName += ' active';
				}
				if (this.showMeridian && dates[this.language].meridiem.length == 2) {
					meridian = (hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1]);
					if (meridian != meridianOld) {
						if (meridianOld != '') {
							html.push('</fieldset>');
						}
						html.push('<fieldset class="minute"><legend>' + meridian.toUpperCase() + '</legend>');
					}
					meridianOld = meridian;
					txt = (hours % 12 ? hours % 12 : 12);
					//html.push('<span class="minute'+clsName+' minute_'+(hours<12?'am':'pm')+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');
					if (i == 59) {
						html.push('</fieldset>');
					}
				} else {
					txt = i + ':00';
					//html.push('<span class="hour'+clsName+'">'+txt+'</span>');
					html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
				}
			}
			this.picker.find('.datetimepicker-minutes td').html(html.join(''));

			var currentYear = this.date.getUTCFullYear();
			var months = this.picker.find('.datetimepicker-months')
				.find('th:eq(1)')
				.text(year)
				.end()
				.find('span').removeClass('active');
			if (currentYear == year) {
				months.eq(this.date.getUTCMonth()).addClass('active');
			}
			if (year < startYear || year > endYear) {
				months.addClass('disabled');
			}
			if (year == startYear) {
				months.slice(0, startMonth).addClass('disabled');
			}
			if (year == endYear) {
				months.slice(endMonth + 1).addClass('disabled');
			}

			html = '';
			year = parseInt(year / 10, 10) * 10;
			var yearCont = this.picker.find('.datetimepicker-years')
				.find('th:eq(1)')
				.text(year + '-' + (year + 9))
				.end()
				.find('td');
			year -= 1;
			for (var i = -1; i < 11; i++) {
				html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
				year += 1;
			}
			yearCont.html(html);
			this.place();
		},

		updateNavArrows: function () {
			var d = new Date(this.viewDate),
				year = d.getUTCFullYear(),
				month = d.getUTCMonth(),
				day = d.getUTCDate(),
				hour = d.getUTCHours();
			switch (this.viewMode) {
				case 0:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()
						&& hour <= this.startDate.getUTCHours()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()
						&& hour >= this.endDate.getUTCHours()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 1:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()
						&& day <= this.startDate.getUTCDate()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()
						&& day >= this.endDate.getUTCDate()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 2:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()
						&& month <= this.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()
						&& month >= this.endDate.getUTCMonth()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
				case 3:
				case 4:
					if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
						this.picker.find('.prev').css({visibility: 'hidden'});
					} else {
						this.picker.find('.prev').css({visibility: 'visible'});
					}
					if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
						this.picker.find('.next').css({visibility: 'hidden'});
					} else {
						this.picker.find('.next').css({visibility: 'visible'});
					}
					break;
			}
		},

		mousewheel: function (e) {

			e.preventDefault();
			e.stopPropagation();

			if (this.wheelPause) {
				return;
			}

			this.wheelPause = true;

			var originalEvent = e.originalEvent;

			var delta = originalEvent.wheelDelta;

			var mode = delta > 0 ? 1 : (delta === 0) ? 0 : -1;

			if (this.wheelViewModeNavigationInverseDirection) {
				mode = -mode;
			}

			this.showMode(mode);

			setTimeout($.proxy(function () {

				this.wheelPause = false

			}, this), this.wheelViewModeNavigationDelay);

		},

		click: function (e) {
			e.stopPropagation();
			e.preventDefault();
			var target = $(e.target).closest('span, td, th, legend');
			if (target.length == 1) {
				if (target.is('.disabled')) {
					this.element.trigger({
						type:      'outOfRange',
						date:      this.viewDate,
						startDate: this.startDate,
						endDate:   this.endDate
					});
					return;
				}
				switch (target[0].nodeName.toLowerCase()) {
					case 'th':
						switch (target[0].className) {
							case 'switch':
								this.showMode(1);
								break;
							case 'prev':
							case 'next':
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
								switch (this.viewMode) {
									case 0:
										this.viewDate = this.moveHour(this.viewDate, dir);
										break;
									case 1:
										this.viewDate = this.moveDate(this.viewDate, dir);
										break;
									case 2:
										this.viewDate = this.moveMonth(this.viewDate, dir);
										break;
									case 3:
									case 4:
										this.viewDate = this.moveYear(this.viewDate, dir);
										break;
								}
								this.fill();
								break;
							case 'today':
								var date = new Date();
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);

								// Respect startDate and endDate.
								if (date < this.startDate) date = this.startDate;
								else if (date > this.endDate) date = this.endDate;

								this.viewMode = this.startViewMode;
								this.showMode(0);
								this._setDate(date);
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
								break;
						}
						break;
					case 'span':
						if (!target.is('.disabled')) {
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								day = this.viewDate.getUTCDate(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();

							if (target.is('.month')) {
								this.viewDate.setUTCDate(1);
								month = target.parent().find('span').index(target);
								day = this.viewDate.getUTCDate();
								this.viewDate.setUTCMonth(month);
								this.element.trigger({
									type: 'changeMonth',
									date: this.viewDate
								});
								if (this.viewSelect >= 3) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.year')) {
								this.viewDate.setUTCDate(1);
								year = parseInt(target.text(), 10) || 0;
								this.viewDate.setUTCFullYear(year);
								this.element.trigger({
									type: 'changeYear',
									date: this.viewDate
								});
								if (this.viewSelect >= 4) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.hour')) {
								hours = parseInt(target.text(), 10) || 0;
								if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {
									if (hours == 12 && target.hasClass('hour_am')) {
										hours = 0;
									} else if (hours != 12 && target.hasClass('hour_pm')) {
										hours += 12;
									}
								}
								this.viewDate.setUTCHours(hours);
								this.element.trigger({
									type: 'changeHour',
									date: this.viewDate
								});
								if (this.viewSelect >= 1) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							} else if (target.is('.minute')) {
								minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
								this.viewDate.setUTCMinutes(minutes);
								this.element.trigger({
									type: 'changeMinute',
									date: this.viewDate
								});
								if (this.viewSelect >= 0) {
									this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
								}
							}
							if (this.viewMode != 0) {
								var oldViewMode = this.viewMode;
								this.showMode(-1);
								this.fill();
								if (oldViewMode == this.viewMode && this.autoclose) {
									this.hide();
								}
							} else {
								this.fill();
								if (this.autoclose) {
									this.hide();
								}
							}
						}
						break;
					case 'td':
						if (target.is('.day') && !target.is('.disabled')) {
							var day = parseInt(target.text(), 10) || 1;
							var year = this.viewDate.getUTCFullYear(),
								month = this.viewDate.getUTCMonth(),
								hours = this.viewDate.getUTCHours(),
								minutes = this.viewDate.getUTCMinutes(),
								seconds = this.viewDate.getUTCSeconds();
							if (target.is('.old')) {
								if (month === 0) {
									month = 11;
									year -= 1;
								} else {
									month -= 1;
								}
							} else if (target.is('.new')) {
								if (month == 11) {
									month = 0;
									year += 1;
								} else {
									month += 1;
								}
							}
							this.viewDate.setUTCFullYear(year);
							this.viewDate.setUTCMonth(month, day);
							this.element.trigger({
								type: 'changeDay',
								date: this.viewDate
							});
							if (this.viewSelect >= 2) {
								this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
							}
						}
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
						break;
				}
			}
		},

		_setDate: function (date, which) {
			if (!which || which == 'date')
				this.date = date;
			if (!which || which == 'view')
				this.viewDate = date;
			this.fill();
			this.setValue();
			var element;
			if (this.isInput) {
				element = this.element;
			} else if (this.component) {
				element = this.element.find('input');
			}
			if (element) {
				element.change();
				if (this.autoclose && (!which || which == 'date')) {
					//this.hide();
				}
			}
			this.element.trigger({
				type: 'changeDate',
				date: this.date
			});
		},

		moveMinute: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCMinutes(new_date.getUTCMinutes() + (dir * this.minuteStep));
			return new_date;
		},

		moveHour: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCHours(new_date.getUTCHours() + dir);
			return new_date;
		},

		moveDate: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf());
			//dir = dir > 0 ? 1 : -1;
			new_date.setUTCDate(new_date.getUTCDate() + dir);
			return new_date;
		},

		moveMonth: function (date, dir) {
			if (!dir) return date;
			var new_date = new Date(date.valueOf()),
				day = new_date.getUTCDate(),
				month = new_date.getUTCMonth(),
				mag = Math.abs(dir),
				new_month, test;
			dir = dir > 0 ? 1 : -1;
			if (mag == 1) {
				test = dir == -1
					// If going back one month, make sure month is not current month
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
					? function () {
					return new_date.getUTCMonth() == month;
				}
					// If going forward one month, make sure month is as expected
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
					: function () {
					return new_date.getUTCMonth() != new_month;
				};
				new_month = month + dir;
				new_date.setUTCMonth(new_month);
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
				if (new_month < 0 || new_month > 11)
					new_month = (new_month + 12) % 12;
			} else {
				// For magnitudes >1, move one month at a time...
				for (var i = 0; i < mag; i++)
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
					new_date = this.moveMonth(new_date, dir);
				// ...then reset the day, keeping it in the new month
				new_month = new_date.getUTCMonth();
				new_date.setUTCDate(day);
				test = function () {
					return new_month != new_date.getUTCMonth();
				};
			}
			// Common date-resetting loop -- if date is beyond end of month, make it
			// end of month
			while (test()) {
				new_date.setUTCDate(--day);
				new_date.setUTCMonth(new_month);
			}
			return new_date;
		},

		moveYear: function (date, dir) {
			return this.moveMonth(date, dir * 12);
		},

		dateWithinRange: function (date) {
			return date >= this.startDate && date <= this.endDate;
		},

		keydown: function (e) {
			if (this.picker.is(':not(:visible)')) {
				if (e.keyCode == 27) // allow escape to hide and re-show picker
					this.show();
				return;
			}
			var dateChanged = false,
				dir, day, month,
				newDate, newViewDate;
			switch (e.keyCode) {
				case 27: // escape
					this.hide();
					e.preventDefault();
					break;
				case 37: // left
				case 39: // right
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 37 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir);
						newViewDate = this.moveDate(this.viewDate, dir);
					} else if (viewMode == 1) {
						newDate = this.moveHour(this.date, dir);
						newViewDate = this.moveHour(this.viewDate, dir);
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir);
						newViewDate = this.moveMinute(this.viewDate, dir);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 38: // up
				case 40: // down
					if (!this.keyboardNavigation) break;
					dir = e.keyCode == 38 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir * 7);
						newViewDate = this.moveDate(this.viewDate, dir * 7);
					} else if (viewMode == 1) {
						if (this.showMeridian) {
							newDate = this.moveHour(this.date, dir * 6);
							newViewDate = this.moveHour(this.viewDate, dir * 6);
						} else {
							newDate = this.moveHour(this.date, dir * 4);
							newViewDate = this.moveHour(this.viewDate, dir * 4);
						}
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir * 4);
						newViewDate = this.moveMinute(this.viewDate, dir * 4);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					break;
				case 13: // enter
					if (this.viewMode != 0) {
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							this.hide();
						}
					} else {
						this.fill();
						if (this.autoclose) {
							this.hide();
						}
					}
					e.preventDefault();
					break;
				case 9: // tab
					this.hide();
					break;
			}
			if (dateChanged) {
				var element;
				if (this.isInput) {
					element = this.element;
				} else if (this.component) {
					element = this.element.find('input');
				}
				if (element) {
					element.change();
				}
				this.element.trigger({
					type: 'changeDate',
					date: this.date
				});
			}
		},

		showMode: function (dir) {
			if (dir) {
				var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
				if (newViewMode >= this.minView && newViewMode <= this.maxView) {
					this.element.trigger({
						type:        'changeMode',
						date:        this.viewDate,
						oldViewMode: this.viewMode,
						newViewMode: newViewMode
					});

					this.viewMode = newViewMode;
				}
			}
			/*
			 vitalets: fixing bug of very special conditions:
			 jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.
			 Method show() does not set display css correctly and datetimepicker is not shown.
			 Changed to .css('display', 'block') solve the problem.
			 See https://github.com/vitalets/x-editable/issues/37

			 In jquery 1.7.2+ everything works fine.
			 */
			//this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
			this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();
		},

		reset: function (e) {
			this._setDate(null, 'date');
		}
	};

	$.fn.datetimepicker = function (option) {
		var args = Array.apply(null, arguments);
		args.shift();
		return this.each(function () {
			var $this = $(this),
				data = $this.data('datetimepicker'),
				options = typeof option == 'object' && option;
			if (!data) {
				$this.data('datetimepicker', (data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options))));
			}
			if (typeof option == 'string' && typeof data[option] == 'function') {
				data[option].apply(data, args);
			}
		});
	};

	$.fn.datetimepicker.defaults = {
	};
	$.fn.datetimepicker.Constructor = Datetimepicker;
	var dates = $.fn.datetimepicker.dates = {
		en: {
			days:        ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
			daysShort:   ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
			daysMin:     ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
			months:      ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
			meridiem:    ["am", "pm"],
			suffix:      ["st", "nd", "rd", "th"],
			today:       "Today"
		}
	};

	var DPGlobal = {
		modes:            [
			{
				clsName: 'minutes',
				navFnc:  'Hours',
				navStep: 1
			},
			{
				clsName: 'hours',
				navFnc:  'Date',
				navStep: 1
			},
			{
				clsName: 'days',
				navFnc:  'Month',
				navStep: 1
			},
			{
				clsName: 'months',
				navFnc:  'FullYear',
				navStep: 1
			},
			{
				clsName: 'years',
				navFnc:  'FullYear',
				navStep: 10
			}
		],
		isLeapYear:       function (year) {
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))
		},
		getDaysInMonth:   function (year, month) {
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
		},
		getDefaultFormat: function (type, field) {
			if (type == "standard") {
				if (field == 'input')
					return 'yyyy-mm-dd hh:ii';
				else
					return 'yyyy-mm-dd hh:ii:ss';
			} else if (type == "php") {
				if (field == 'input')
					return 'Y-m-d H:i';
				else
					return 'Y-m-d H:i:s';
			} else {
				throw new Error("Invalid format type.");
			}
		},
		validParts:       function (type) {
			if (type == "standard") {
				return /hh?|HH?|p|P|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;
			} else if (type == "php") {
				return /[dDjlNwzFmMnStyYaABgGhHis]/g;
			} else {
				throw new Error("Invalid format type.");
			}
		},
		nonpunctuation:   /[^ -\/:-@\[-`{-~\t\n\rTZ]+/g,
		parseFormat:      function (format, type) {
			// IE treats \0 as a string end in inputs (truncating the value),
			// so it's a bad format delimiter, anyway
			var separators = format.replace(this.validParts(type), '\0').split('\0'),
				parts = format.match(this.validParts(type));
			if (!separators || !separators.length || !parts || parts.length == 0) {
				throw new Error("Invalid date format.");
			}
			return {separators: separators, parts: parts};
		},
		parseDate:        function (date, format, language, type) {
			if (date instanceof Date) {
				var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
				dateUTC.setMilliseconds(0);
				return dateUTC;
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii', type);
			}
			if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
				format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);
			}
			if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
				var part_re = /([-+]\d+)([dmwy])/,
					parts = date.match(/([-+]\d+)([dmwy])/g),
					part, dir;
				date = new Date();
				for (var i = 0; i < parts.length; i++) {
					part = part_re.exec(parts[i]);
					dir = parseInt(part[1]);
					switch (part[2]) {
						case 'd':
							date.setUTCDate(date.getUTCDate() + dir);
							break;
						case 'm':
							date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
							break;
						case 'w':
							date.setUTCDate(date.getUTCDate() + dir * 7);
							break;
						case 'y':
							date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
							break;
					}
				}
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);
			}
			var parts = date && date.match(this.nonpunctuation) || [],
				date = new Date(0, 0, 0, 0, 0, 0, 0),
				parsed = {},
				setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P'],
				setters_map = {
					hh:   function (d, v) {
						return d.setUTCHours(v);
					},
					h:    function (d, v) {
						return d.setUTCHours(v);
					},
					HH:   function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					H:    function (d, v) {
						return d.setUTCHours(v == 12 ? 0 : v);
					},
					ii:   function (d, v) {
						return d.setUTCMinutes(v);
					},
					i:    function (d, v) {
						return d.setUTCMinutes(v);
					},
					ss:   function (d, v) {
						return d.setUTCSeconds(v);
					},
					s:    function (d, v) {
						return d.setUTCSeconds(v);
					},
					yyyy: function (d, v) {
						if(v < 10000){
							return d.setUTCFullYear(v);
						}
					},
					yy:   function (d, v) {
						return d.setUTCFullYear(2000 + v);
					},
					m:    function (d, v) {
						v -= 1;
						while (v < 0) v += 12;
						v %= 12;
						d.setUTCMonth(v);
						while (d.getUTCMonth() != v)
							d.setUTCDate(d.getUTCDate() - 1);
						return d;
					},
					d:    function (d, v) {
						return d.setUTCDate(v);
					},
					p:    function (d, v) {
						return d.setUTCHours(v == 1 ? d.getUTCHours() + 12 : d.getUTCHours());
					}
				},
				val, filtered, part;
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
			setters_map['dd'] = setters_map['d'];
			setters_map['P'] = setters_map['p'];
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
			if (parts.length == format.parts.length) {
				for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
					val = parseInt(parts[i], 10);
					part = format.parts[i];
					if (isNaN(val)) {
						switch (part) {
							case 'MM':
								filtered = $(dates[language].months).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].months) + 1;
								break;
							case 'M':
								filtered = $(dates[language].monthsShort).filter(function () {
									var m = this.slice(0, parts[i].length),
										p = parts[i].slice(0, m.length);
									return m == p;
								});
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
								break;
							case 'p':
							case 'P':
								val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);
								break;
						}
					}
					parsed[part] = val;
				}
				for (var i = 0, s; i < setters_order.length; i++) {
					s = setters_order[i];
					if (s in parsed && !isNaN(parsed[s]))
						setters_map[s](date, parsed[s])
				}
			}
			return date;
		},
		formatDate:       function (date, format, language, type) {
			if (date == null) {
				return '';
			}
			var val;
			if (type == 'standard') {
				val = {
					// year
					yy:   date.getUTCFullYear().toString().substring(2),
					yyyy: date.getUTCFullYear(),
					// month
					m:    date.getUTCMonth() + 1,
					M:    dates[language].monthsShort[date.getUTCMonth()],
					MM:   dates[language].months[date.getUTCMonth()],
					// day
					d:    date.getUTCDate(),
					D:    dates[language].daysShort[date.getUTCDay()],
					DD:   dates[language].days[date.getUTCDay()],
					p:    (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					// hour
					h:    date.getUTCHours(),
					// minute
					i:    date.getUTCMinutes(),
					// second
					s:    date.getUTCSeconds()
				};

				if (dates[language].meridiem.length == 2) {
					val.H = (val.h % 12 == 0 ? 12 : val.h % 12);
				}
				else {
					val.H = val.h;
				}
				val.HH = (val.H < 10 ? '0' : '') + val.H;
				val.P = val.p.toUpperCase();
				val.hh = (val.h < 10 ? '0' : '') + val.h;
				val.ii = (val.i < 10 ? '0' : '') + val.i;
				val.ss = (val.s < 10 ? '0' : '') + val.s;
				val.dd = (val.d < 10 ? '0' : '') + val.d;
				val.mm = (val.m < 10 ? '0' : '') + val.m;
			} else if (type == 'php') {
				// php format
				val = {
					// year
					y: date.getUTCFullYear().toString().substring(2),
					Y: date.getUTCFullYear(),
					// month
					F: dates[language].months[date.getUTCMonth()],
					M: dates[language].monthsShort[date.getUTCMonth()],
					n: date.getUTCMonth() + 1,
					t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),
					// day
					j: date.getUTCDate(),
					l: dates[language].days[date.getUTCDay()],
					D: dates[language].daysShort[date.getUTCDay()],
					w: date.getUTCDay(), // 0 -> 6
					N: (date.getUTCDay() == 0 ? 7 : date.getUTCDay()),       // 1 -> 7
					S: (date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : ''),
					// hour
					a: (dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : ''),
					g: (date.getUTCHours() % 12 == 0 ? 12 : date.getUTCHours() % 12),
					G: date.getUTCHours(),
					// minute
					i: date.getUTCMinutes(),
					// second
					s: date.getUTCSeconds()
				};
				val.m = (val.n < 10 ? '0' : '') + val.n;
				val.d = (val.j < 10 ? '0' : '') + val.j;
				val.A = val.a.toString().toUpperCase();
				val.h = (val.g < 10 ? '0' : '') + val.g;
				val.H = (val.G < 10 ? '0' : '') + val.G;
				val.i = (val.i < 10 ? '0' : '') + val.i;
				val.s = (val.s < 10 ? '0' : '') + val.s;
			} else {
				throw new Error("Invalid format type.");
			}
			var date = [],
				seps = $.extend([], format.separators);
			for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
				if (seps.length) {
					date.push(seps.shift());
				}
				date.push(val[format.parts[i]]);
			}
			if (seps.length) {
				date.push(seps.shift());
			}
			return date.join('');
		},
		convertViewMode:  function (viewMode) {
			switch (viewMode) {
				case 4:
				case 'decade':
					viewMode = 4;
					break;
				case 3:
				case 'year':
					viewMode = 3;
					break;
				case 2:
				case 'month':
					viewMode = 2;
					break;
				case 1:
				case 'day':
					viewMode = 1;
					break;
				case 0:
				case 'hour':
					viewMode = 0;
					break;
			}

			return viewMode;
		},
		headTemplate:     '<thead>' +
							  '<tr>' +
							  '<th class="prev"><i class="icon-arrow-left"/></th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><i class="icon-arrow-right"/></th>' +
							  '</tr>' +
			'</thead>',
		headTemplateV3:   '<thead>' +
							  '<tr>' +
							  '<th class="prev"><i class="glyphicon glyphicon-arrow-left"></i> </th>' +
							  '<th colspan="5" class="switch"></th>' +
							  '<th class="next"><i class="glyphicon glyphicon-arrow-right"></i> </th>' +
							  '</tr>' +
			'</thead>',
		contTemplate:     '<tbody><tr><td colspan="7"></td></tr></tbody>',
		footTemplate:     '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
	};
	DPGlobal.template = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplate +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplate +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	DPGlobal.templateV3 = '<div class="datetimepicker">' +
		'<div class="datetimepicker-minutes">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-hours">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-days">' +
		'<table class=" table-condensed">' +
		DPGlobal.headTemplateV3 +
		'<tbody></tbody>' +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-months">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'<div class="datetimepicker-years">' +
		'<table class="table-condensed">' +
		DPGlobal.headTemplateV3 +
		DPGlobal.contTemplate +
		DPGlobal.footTemplate +
		'</table>' +
		'</div>' +
		'</div>';
	$.fn.datetimepicker.DPGlobal = DPGlobal;

	/* DATETIMEPICKER NO CONFLICT
	 * =================== */

	$.fn.datetimepicker.noConflict = function () {
		$.fn.datetimepicker = old;
		return this;
	};

	/* DATETIMEPICKER DATA-API
	 * ================== */

	$(document).on(
		'focus.datetimepicker.data-api click.datetimepicker.data-api',
		'[data-provide="datetimepicker"]',
		function (e) {
			var $this = $(this);
			if ($this.data('datetimepicker')) return;
			e.preventDefault();
			// component click requires us to explicitly show it
			$this.datetimepicker('show');
		}
	);
	$(function () {
		$('[data-provide="datetimepicker-inline"]').datetimepicker();
	});

}(window.jQuery);

define("bootstrap/bootstrap-datetimepicker", function(){});

/**
 * 日期本地化初始化方法
 * @author Mr.T
 */
define('app/widgets/form/app-datetime',['app/core/app-jquery', 'app/core/app-core', localeFile, 'app/widgets/form/app-textbox',
        'app/util/app-utils','app/core/app-options', 'app/widgets/drag/app-droppanel', 'bootstrap/bootstrap-datetimepicker'],
        function($, App, AppLang, Textbox, Utils, Options, Expandable){
	
	'use strict';

	/**
	 * @class 
	 * @classdesc 日期时间框
	 * <span class="type-signature static">extend</span>textbox
	 * @see {@link textbox-class} datetime继承至textbox
	 * @name datetime-class
	 * @desc 日期时间框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 */
	var Datetime = Textbox.extend({
		Implements: Expandable,
		initialize: function(input, options) {
			if(!options){
				options = {};
			}
			options._ = $.extend({}, Options.appDefaults.Combo, Options.appDefaults.DateTime);
			Datetime.superclass.initialize.call(this, input, options);
			var that = this;
			setTimeout(function(){
				that._init();
				if(that.tempStartDate){
                    that.datetimepicker.setStartDate(that.tempStartDate);
                    delete that.tempStartDate;
                }
                if(that.tempEndDate){
                    that.datetimepicker.setEndDate(that.tempEndDate);
                    delete that.tempEndDate;
                }
                if(that.tempValue){
                    that.setValue(that.tempValue, that.tempNoTrigger);
                    delete that.tempValue;
                    delete that.tempNoTrigger;
                }
                if(that.tempDate){
                    that.setDate(that.tempDate);
                    delete that.tempDate;
                }
			}, 1);
		},
		/**
		 * 初始化
		 */
		_init: function(){
			if(this.setting.onlySelect){
				this._editable(false);
			}
			this._translator();
			this._setType();
			this.setting._datetime = this;
			this.$text.datetimepicker(this.setting);
			this.datetimepicker = this.$text.data('datetimepicker');
			this.datetimepicker._datetime = this;
			this.$dropPanel = this.datetimepicker.picker;
			this.$dropPanel.on('mousedown.datetime.api',function (e){e.stopPropagation();});
			this.$dropPanel.on('click.datetime.api', $.proxy(this.focus, this));
			if(!this.setting.custom){
				this.setting.custom = this.$input.getJsonAttr('custom');
			}
			this._initDateRange();
			if(this.setting.value){
				this.setValue(this.setting.value, true);
			}
			
			this._onPanelFadeOut();
		},
		/**
		 * 根据类型更改默认属性
		 */
		_setType: function(){
			var c = this.customSetting
				,s = this.setting;
			switch (s.type) {
			case 'year':
				s.startView = 4;
				s.minView = 4;
				s.format = 'yyyy';
				s.todayBtn = false;
				break;
			case 'year-month':
				if(!c.startView){
					s.startView = 3;
				}
				s.minView = 3;
				if(!c.format){
					s.format = 'yyyy-mm';
				}
				s.todayBtn = false;
				break;
			case 'month':
				s.startView = 3;
				s.minView = 3;
				s.format = 'mm';
				s.todayBtn = false;
				break;
			case 'date':
				if(!c.startView){
					s.startView = 2;
				}
				s.minView = 2;
				if(!c.format){
					s.format = 'yyyy-mm-dd';
				}
				break;
			case 'datetime':
				if(!c.startView){
					s.startView = 2;
				}
				s.minView = 0;
				if(!c.format){
					s.format = 'yyyy-mm-dd hh:ii';
				}
				break;
			case 'hour-minute':
				if(!c.startView){
					s.startView = 1;
				}
				s.minView = 0;
				if(!c.format){
					s.format = 'hh:ii';
				}
				s.todayBtn = false;
				break;
			case 'hour':
				if(!c.startView){
					s.startView = 1;
				}
				s.minView = 1;
				if(!c.format){
					s.format = 'hh';
				}
				s.todayBtn = false;
				break;
			case 'minute':
				if(!c.startView){
					s.startView = 0;
				}
				s.minView = 0;
				if(!c.format){
					s.format = 'ii';
				}
				s.todayBtn = false;
				break;
			default:
				break;
			}
		},
		/**
		 * 将属性翻译为datetimepicker的属性
		 */
		_translator: function(){
			var s = this.setting;
			if(s['weekstart'] != null){
				s.weekStart = s['weekstart'];
			}
			if(s['todaybtn'] != null){
				s.todayBtn = s['todaybtn'];
			}
			if(s['todayhighlight'] != null){
				s.todayHighlight = s['todayhighlight'];
			}
			if(s['startview'] != null){
				s.startView = parseFloat(s['startview']);
			}
			if(s['minview'] != null){
				s.minView = parseFloat(s['minview']);
			}
			if(s['forceparse'] != null){
				s.forceParse = s['forceparse'];
			}
			if(s['minutestep'] != null){
				s.minuteStep = s['minutestep'];
			}
			if(s['pickerposition'] != null){
				s.pickerPosition = s['pickerposition'];
			}
		},
		/**
		 * 初始化日期范围选择
		 */
		_initDateRange: function(){
			var begin = this.setting['datebegin']
				,end = this.setting['dateend'];
			if(begin || end){
				this.$rangeBtn = $('<a class="wrapper-btn wrapper-range" tabindex="-1"><i></i></a>');
				this.$openBtn.addClass('wrapper-date');
				this.$rangeBtn.insertBefore(this.$openBtn);
				var custom = this.setting.custom;
				if(custom && custom.onlyCustom){
					this.$dateRange = $('<div class="drop-panel"><ul class="date-range">' +
							this._getCustomRangeHtml() +
					'</ul></div>').appendTo($.$appPanelContainer);
					
				}else{
					this.$dateRange = $('<div class="drop-panel"><ul class="date-range">' +
							'<li>昨天</li>' +
							'<li>上月</li>' +
							'<li>去年</li>' +
							'<li>当天</li>' +
							'<li>本月</li>' +
							'<li>本季</li>' +
							'<li>本年</li>' +
							this._getCustomRangeHtml() +
					'</ul></div>').appendTo($.$appPanelContainer);
				}
				var that = this;
				this.$rangeBtn.on('click.datetime.api',function(e){
					that.toggleDateRange();
				});
				this.$dateRange.on('click.datetime-range.api', 'li', $.proxy(this._rangeClick,this));
				this.$dateRange.on('click.datetime-range.api', function(e){e.stopPropagation();});
				if(!this.setting.fadeout){
	            	return;
	            }
				this.$dateRange.on('mouseleave.datetime-range.api', $.proxy(this._fadeOut$DateRange, this));
				this.$dateRange.on('mouseenter.datetime-range.api', $.proxy(this._fadeIn$DateRange, this));
				this.$element.on('mouseout.datetime-range.api', $.proxy(this._fadeOut$DateRange, this));
				this.$element.on('mouseover.datetime-range.api', $.proxy(this._fadeIn$DateRange, this));
			}
		},
		/**
		 * 渐渐隐藏
		 */
		_fadeOut$DateRange: function(){
			if(!this.$dateRange.is(':visible')){
				return;
			}
			var opacity = 10
				,that = this;
			this._hideTimer1 = setInterval(function(){
				opacity -= 1;
				that.$dateRange.css('opacity', 0.1*opacity);
				if(opacity == 0){
					clearInterval(that._hideTimer1);
					that._hideRange();
					that.$dateRange.css('opacity', 1);
				}
			}, 130);
		},
		/**
		 * 停止渐渐隐藏 并显示
		 */
		_fadeIn$DateRange: function(){
			this.$dateRange.css('opacity', 1)
			clearInterval(this._hideTimer1);
		},
		/**
		 * 获取自定义日期
		 */
		_getCustomRangeHtml: function(){
			var custom = this.setting.custom
				,result = '';
			if(custom){
				result +=  '<div/>';
				this.customHander = custom.handle;
				var arr = custom.text.split(',');
				for ( var i = 0; i < arr.length; i++) {
					result += '<li>' + arr[i] + '</li>';
				}
			}
			return result;
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 设置隐藏值，根据隐藏值格式化函数格式化隐藏值
		 * @param {String} val 隐藏值
		 * @see textbox-class#setValue
		 * @todo 当隐藏值为空时，显示值也为空
		 * @example $('#demo').datetime('setValue','20151212');
		 * @memberof datetime-class
		 * @instance
		 */
		setValue: function(val, noTrigger){
			val = $.trim(val);
			if(!val){
				this.setText('');
				this._setValue('', noTrigger);
				return;
			}
			var text = val
				,value = val;
			var picker = this.datetimepicker;
			if(picker){
				var DPGlobal = $.fn.datetimepicker.DPGlobal;
				picker._setDateConvenient(val);
				var text = picker.getFormattedDate()
					,value = text;
				if(this.setting.valueFormat){
					var vf = DPGlobal.parseFormat(this.setting.valueFormat, picker.formatType);
					value = picker.getFormattedDate(vf);
				}
				
			}else{
                this.tempValue = val;
                this.tempNoTrigger = noTrigger;
                noTrigger = true;
			}
			this.setText(text);
			this._setValue(value, noTrigger);
		},
		/**
		 * 设置一个日期 
		 * @param {Date} date 设置的日期
		 * @todo 判断为日期类型，则设置日期
		 * @example $('#demo').datetime('setDate',new Date());
		 * @memberof datetime-class
		 * @instance
		 */
		setDate: function(date){
			if(date instanceof Date){
				if(this.datetimepicker){
					this.datetimepicker.viewDate = date;
					this.datetimepicker.setValue();
				}else{
                    this.tempDate = date;
                }
			}else{
				throw new Error('请设置日期对象');
			}
		},
		/**
		 * 显示或隐藏日期面板，该方法已绑定在组件的右边按钮中
		 * @todo 判断当前面板是否可见：
		 * @todo 1如果不可见，调用showPanel
		 * @todo 2如果可见，则关闭面板
		 * @example $('#demo').datetime('togglePanel');
		 * @memberof datetime-class
		 * @instance
		 */
		togglePanel: function(){
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}else{
				this.showPanel();
			}
		},
		/**
		 * 显示组件的日期时间面板
		 * @todo 判断当前面板是否可见：
		 * @todo 1如果不可见，调用showPanel
		 * @todo 2如果可见，则关闭面板
		 * @example $('#demo').datetime('showPanel');
		 * @memberof datetime-class
		 * @instance
		 */
		showPanel: function(){
			this._closeVisiblePanel();
			this.datetimepicker.show();
			$(document).on('mousedown.droppanel.api', $.proxy(this.hidePanel,this));
			limitDate(this);
		},
		/**
		 * 关闭组件的日期时间面板
		 * @example $('#demo').datetime('hidePanel');
		 * @memberof datetime-class
		 * @instance
		 */
		hidePanel: function(){
			this.datetimepicker.hide();
			$(document).off('mousedown.droppanel.api');
			limitDate(this);
		},
		/**
		 * 显示或关闭日期范围选择面板
		 * @todo 关闭其他显示的下拉面板
		 * @example $('#demo').datetime('toggleDateRange');
		 * @memberof datetime-class
		 * @instance
		 */
		toggleDateRange: function(){
			if(!this.$dateRange.is(':visible')){
				this._showRange();
			}else{
				this._hideRange();
			}
		},
		/**
		 * 显示时间范围选择面板
		 */
		_showRange: function(){
			this._closeVisiblePanel();
			var mainCss = {
					top: this._getDropPanelTop(this.$dateRange),
					left: this.$element.outerWidth() + this.$element.offset().left - this.$dateRange.outerWidth(),
					display: 'block'
				};
			mainCss['z-index'] = Options.zindexs.droppanel++;
			this.$dateRange.css(mainCss);
			$(document).on('click.date-range.api', $.proxy(this._hideRange,this));
		},
		/**
		 * 隐藏时间范围选择面板
		 */
		_hideRange: function(){
			this.$dateRange.hide();
			$(document).off('click.date-range.api');
		},
		/**
		 * 日期范围点击事件
		 */
		_rangeClick: function(e){
			var begin = this.setting['datebegin']
				,end = this.setting['dateend']
				,text = e.currentTarget.innerText
				,today = new Date()
				,range = undefined;
			if(!this._dateBegin){
				if(begin){
					this._dateBegin = $A('#' + begin).data('datetime');
					this._dateEnd = this;
				}else{
					this._dateBegin = this;
					this._dateEnd = $A('#' + end).data('datetime');
				}
			}
			var custom = this.setting.custom;
			if(custom && custom.onlyCustom){
				range = this.customHander(text);
			}else{
				switch (text) {
				case '昨天':
					var yesterday = new Date(today.setDate(today.getDate() - 1));
					range = {begin:today,end:yesterday};
					break;
				case '上月':
					var lastMonth = new Date(today.setMonth(today.getMonth() - 1));
					range = Utils.getMonthRange(lastMonth);
					break;
				case '去年':
					var lastYear= today.getFullYear() - 1;
					range = Utils.getYearRange(lastYear);
					break;
				case '当天':
					range = {begin:today,end:today};
					break;
				case '本月':
					var currentMonth = new Date(today.setMonth(today.getMonth()));
					range = Utils.getMonthRange(currentMonth);
					break;
				case '本季':
					range = Utils.getSeasonRange(today);
					break;
				case '本年':
					var currentYear= today.getFullYear();
					range = Utils.getYearRange(currentYear);
					break;
				default:
					range = this.customHander(text);
					break;
				}
			}
			this._hideRange();
			range.begin.setHours(8);
			range.end.setHours(8);
			this._dateBegin.setDate(range.begin);
			if(this._dateEnd){
				this._dateEnd.setDate(range.end);
			}
		},
		/**
		 * 设置最小日期值
		 * @example $('#demo').datetime('setStartDate', new Date());
		 * @memberof datetime-class
		 * @instance
		 */
		setStartDate: function(startDate, force){
			var val = '';
			if(force){
				val = startDate;
				this.setting.startDate = startDate;
			}else{
				if(startDate){
					val = startDate;
				}else{
					val = this.setting.startDate;
				}
			}
			if(this.datetimepicker){
            	this.datetimepicker.setStartDate(val);
            }else{
                this.tempStartDate = startDate;
            }
		},
		/**
		 * 设置最大日期值
		 * @example $('#demo').datetime('setEndDate', new Date());
		 * @memberof datetime-class
		 * @instance
		 */
		setEndDate: function(endDate, force){
			var val = '';
			if(force){
				val = endDate;
				this.setting.endDate = endDate;
			}else{
				if(endDate){
					val = endDate;
				}else{
					val = this.setting.endDate;
				}
			}
			if(this.datetimepicker){
            	this.datetimepicker.setEndDate(val);
            }else{
                this.tempEndDate = val;
            }
		},
		destroy: function(){
			if(this.$dropPanel){
				this.$dropPanel.remove();
			}
			if(this.$dateRange){
				this.$dateRange.remove();
			}
			this.$element.remove();
			this.$input.removeData('datetime');
		}	
	});
	$.fn.datetime = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'datetime';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Datetime(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	$.fn.datetimepicker.dates[AppLang.locale] = AppLang.datetimepicker;
	/**
	 * DatetimePicker对象
	 * @namespace DatetimePicker
	 */

	var exDpPrototype = {
		_attachEvents: function () {
			this._detachEvents();
			if (this.isInput) {
				this._events = [
					[this.element, {
						//单控件下 禁止聚焦时 展开面板事件 Mr.T
//						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this),
						blur:  $.proxy(this._myblur, this)//焦点失去事件 Mr.T
					}]
				];
			}
			else if (this.component && this.hasInput) { // component: input + button
				this._events = [
					// For components that are not readonly, allow keyboard nav
					[this.element.find('input'), {
						focus:   $.proxy(this.show, this),
						keyup:   $.proxy(this.update, this),
						keydown: $.proxy(this.keydown, this)
					}],
					[this.component, {
						click: $.proxy(this.show, this)
					}]
				];
				if (this.componentReset) {
					this._events.push([
						this.componentReset,
						{click: $.proxy(this.reset, this)}
					]);
				}
			}
			else if (this.element.is('div')) {  // inline datetimepicker
				this.isInline = true;
			}
			else {
				this._events = [
					[this.element, {
						click: $.proxy(this.show, this)
					}]
				];
			}
			for (var i = 0, el, ev; i < this._events.length; i++) {
				el = this._events[i][0];
				ev = this._events[i][1];
				el.on(ev);
			}
		},
		/** 
		 * 重写设置值的方法
		 * <PRE>
		 * 当设置值的时候，有存在_datetime的属性，则调用datetime.setValue(formatted)进行赋值
		 * </PRE>
		 * @memberof DatetimePicker
		 * @function setValue
		 */
		setValue: function () {
//			var formatted = this.getFormattedDate();
			//使用视图日期代替控件原日期设置值
			var formatted = $.fn.datetimepicker.DPGlobal.formatDate(this.viewDate, this.format, this.language, this.formatType);
			if (!this.isInput) {
				if (this.component) {
					this.element.find('input').val(formatted);
				}
				this.element.data('date', formatted);
			} else {
				this.element.val(formatted);
				if(this._datetime){
					this._datetime.setValue(formatted);
				}
			}
			if (this.linkField) {
				$('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));
			}
		},
		/** 
		 * 重写弹出框的位置方法
		 * <PRE>
		 * 每次弹出框都计算下弹出框的位置
		 * </PRE>
		 * @memberof DatetimePicker
		 * @function place
		 */
		place: function () {
			if (this.isInline) return;

			/**
			 * 显示日期时间面板
			 * 1、计算本身加面板高度是否大于当前的body的高度
			 * 2、不大于则下拉，否则上拉
			 */
			var dropDown = Expandable.prototype._isDropPanelUpside(this.element,this.picker);
			if(dropDown){
				this.pickerPosition = 'bottom-left';
			}else{
				this.pickerPosition = 'top-left';
			}
			
//			var index_highest = 0;
//			$('div').each(function () {
//				var index_current = parseFloat($(this).css("zIndex"), 10);
//				if (index_current > index_highest) {
//					index_highest = index_current;
//				}
//			});
//			var zIndex = index_highest + 10;
			//使用已管理的zindexs代替动态计算  2015年1月6日17:15:28 Mr.T
			var zIndex = Options.zindexs.droppanel++;
			var offset, top, left;
			if (this.component) {
				offset = this.component.offset();
				left = offset.left;
				if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {
					left += this.component.outerWidth() - this.picker.outerWidth();
				}
			} else {
				offset = this.element.offset();
				left = offset.left;
			}
			if (this.pickerPosition == 'top-left' || this.pickerPosition == 'top-right') {
				top = offset.top - this.picker.outerHeight();
			} else {
				top = offset.top + this.height;
			}
			this.picker.css({
				top:    top,
				left:   left,
				zIndex: zIndex
			});
		},
		/** 
		 * 重写按键事件方法
		 * <PRE>
		 * 对简单字符的输入进行日期格式化
		 * </PRE>
		 * @memberof DatetimePicker
		 * @function keydown
		 */
		keydown: function (e) {
			var keyCode = e.keyCode;
			if(this._datetime._dealSysKey(e)){
				return;
			}
			if (this.picker.is(':not(:visible)')) {
				//按键操作打开面板 Mr.T2014年11月21日17:50:19
				if(keyCode >= 48 && keyCode <= 57){
					this._datetime.showPanel();
				}else if(keyCode >= 96 && keyCode <= 105){//小键盘数字
					this._datetime.showPanel();
				}else if(App.containKeyCode(e, this._datetime.setting.keyShowPanel)){
					this._datetime.showPanel();
					e.stopPropagation();
				}else if($.inArray(keyCode, [App.keyCode.LEFT, App.keyCode.RIGHT, App.keyCode.UP, App.keyCode.DOWN]) != -1){
					
				}else if(keyCode == App.keyCode.DELETE 
						|| keyCode == App.keyCode.BACKSPACE){
					if(!this._datetime._isEditable()){
						this._datetime.clearValue();
					}
				}else if((keyCode == 67 || keyCode == 86)// ctrl+C, ctrl+V
						&& e.ctrlKey == true){
					
				}else{
					e.preventDefault();
				}
				return;
			}
			var dateChanged = false,
				dir, viewMode,
				newDate = '', newViewDate = '';
			switch (keyCode) {
				case App.keyCode.ESC: // escape
					//关闭前 先设置日期
					this._setDateConvenient();
					this.hide();
					e.preventDefault();
					break;
				case App.keyCode.LEFT: // left
				case App.keyCode.RIGHT: // right
					if (!this.keyboardNavigation) break;
					dir = keyCode == 37 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir);
						newViewDate = this.moveDate(this.viewDate, dir);
					} else if (viewMode == 1) {
						newDate = this.moveHour(this.date, dir);
						newViewDate = this.moveHour(this.viewDate, dir);
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir);
						newViewDate = this.moveMinute(this.viewDate, dir);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					e.stopPropagation();
					break;
				case App.keyCode.UP: // up
				case App.keyCode.DOWN: // down
					if (!this.keyboardNavigation) break;
					dir = keyCode == 38 ? -1 : 1;
					viewMode = this.viewMode;
					if (e.ctrlKey) {
						viewMode += 2;
					} else if (e.shiftKey) {
						viewMode += 1;
					}
					if (viewMode == 4) {
						newDate = this.moveYear(this.date, dir);
						newViewDate = this.moveYear(this.viewDate, dir);
					} else if (viewMode == 3) {
						newDate = this.moveMonth(this.date, dir);
						newViewDate = this.moveMonth(this.viewDate, dir);
					} else if (viewMode == 2) {
						newDate = this.moveDate(this.date, dir * 7);
						newViewDate = this.moveDate(this.viewDate, dir * 7);
					} else if (viewMode == 1) {
						if (this.showMeridian) {
							newDate = this.moveHour(this.date, dir * 6);
							newViewDate = this.moveHour(this.viewDate, dir * 6);
						} else {
							newDate = this.moveHour(this.date, dir * 4);
							newViewDate = this.moveHour(this.viewDate, dir * 4);
						}
					} else if (viewMode == 0) {
						newDate = this.moveMinute(this.date, dir * 4);
						newViewDate = this.moveMinute(this.viewDate, dir * 4);
					}
					if (this.dateWithinRange(newDate)) {
						this.date = newDate;
						this.viewDate = newViewDate;
						this.setValue();
						this.update();
						e.preventDefault();
						dateChanged = true;
					}
					e.stopPropagation();
					break;
				case App.keyCode.ENTER: // enter
					if (this.viewMode != 0) {
						var oldViewMode = this.viewMode;
						this.showMode(-1);
						this.fill();
						if (oldViewMode == this.viewMode && this.autoclose) {
							//关闭前 先设置日期
							this._setDateConvenient();
							this.hide();
						}
					} else {
						this.fill();
						if (this.autoclose) {
							//关闭前 先设置日期
							this._setDateConvenient();
							this.hide();
						}
					}
					e.preventDefault();
					e.stopPropagation();
					break;
				case App.keyCode.TAB: // tab
					//关闭前 先设置日期
					this._setDateConvenient();
					this.hide();
					break;
			}
			if (dateChanged) {
				var element = undefined;
				if (this.isInput) {
					element = this.element;
				} else if (this.component) {
					element = this.element.find('input');
				}
				if (element) {
					element.change();
				}
				this.element.trigger({
					type: 'changeDate',
					date: this.date
				});
			}
		},
		/**
		 * 失去焦点 重新设置一遍值，清除无效数据
		 */
		_myblur: function(){
			var text = this.element.val();
			if(!text){
				return;
			}
			var textDate = this._parseDate(text)
				,valueDate = this._parseDate(this._datetime.getValue());
			if(textDate && valueDate 
				&& textDate.toString() == valueDate.toString()){
				return;
			}
			if(text == this._datetime.setting.tips){
				return;
			}
			this._setDateConvenient(text);
			this.setValue();
			//修复日期年度月份类型进行格式化时 需要点击两次才能设置值的bug
			//每次视图值会根据显示框的值进行更新 从而导致需要两次点击
//			this.update();
			
		},
		/**
		 * 设置日期值
		 */
		_setDateConvenient: function(text){
			if(text === undefined){
				text = this.element.val();
			}
			if(!this._datetime){
				return;
			}
			if(text == $.trim(this._datetime.setting.tips)){
				return;
			}
			var d = this._parseDate(text);
			if(d){
				this.date = d;
				this.viewDate = d;
			}
		},
		/**
		 * 将字符串类型转换为日期类型
		 */
		_parseDate: function(text){
			text = $.trim(text);
			if(!text){
				return null;
			}
			var date = new Date();
			var infos = this._specialCase(text,date.getFullYear()+'');
			computeDate(date,infos);
			return date;
            /**
             * 将时间按照日期信息进行计算
             * @param date
             * @param obj
             */
            function computeDate(date,obj){
                if(!obj){
                    return;
                }
                if(obj.year && obj.year < 10000){
                    date.setFullYear(obj.year);
                }
                date.setDate(1);
                if(obj.month){
                    date.setMonth(obj.month-1);
                }
                if(obj.date){
                    date.setDate(obj.date);
                }
                if(obj.hours){
                    date.setHours(obj.hours);
                }
                if(obj.minute){
                    date.setMinutes(obj.minute);
                }
                date.setHours(date.getHours() + 8);//组件datetimepicker 使用utc时间输出
            }
		},
		/**
		 * 几种特殊的格式
		 * 1、纯数字格式  yyyymmdd 或 yyyymmddhhii 或大于12位格式的数字截取前12位
		 * 2、用分割符分割后，按分割的数组arr长度
		 * 		一：长度为2，如果arr[1]长度为4，则推断arr[1]为时间（hhii），arr[0]为日期
		 * 					如果分割符为 :，则推断为时间，arr[0]为时，arr[1]为分
		 * 		二：长度为4，如果同时满足arr[0]长度<5，arr[1]长度<3，arr[2]长度<3
		 * 				则推断 arr[0]为年，arr[1]为月，arr[2]为日，arr[3]为时间
		 * 		三：长度为5，如果同时满足arr[0]长度<5，arr[1]长度<3，arr[2]长度<3
		 * 				则推断 arr[0]为年，arr[1]为月，arr[2]为日，arr[3]为时，arr[4]为分
		 */
		_specialCase: function(text,currYear){
			if(!isNaN(text)){//[d+] 纯数字的格式
				return this._getDateInfos(text.substr(0,8),currYear);
			}else{//[*分隔符*] 分割符[可以使用任何非数字]格式
                var rs = {}
                    ,vs = parseArray(text);
                switch (vs.length) {
                case 1:
					return rs;
				case 2://日期+时 或 日期
					var v0 = parseFloat(vs[0])
					,v1 = parseFloat(vs[1]);
					if(isNaN(v0) && !isNaN(v1)){
						rs.date = v1;
					}else if(!isNaN(v0) && isNaN(v1)){
						rs.month = v0;
					}else if(vs[1].length == 4){//[*分隔符XXXX]  日期(X)  + 时间(时+分[hhii])
						$.extend(rs,this._getDateInfos(vs[0].substr(0,8),currYear));
						rs.hours = parseFloat(vs[1].substr(0,2));
						rs.minute = parseFloat(vs[1].substr(2,2));
					}else if(text.indexOf(':') > -1){//[XX:XX] 时+分
						rs.hours = parseFloat(vs[0]);
						rs.minute = parseFloat(vs[1]);
					}else if(vs[0].length == 4){//[XXXX分隔符*] 月日 + 时 或  年(yyyy) + 月
						var v00 = parseFloat(vs[0].substr(0,2))
						,v01 = parseFloat(vs[0].substr(2,2)),
						v1 =  parseFloat(vs[1]);
						if(v00 <= 12 && v01 <= 31 && v1 <= 24){
							rs.month = v00;
							rs.date = v01;
							rs.hours = v1;
						}else if(v1 <= 12){
							rs.year = parseFloat(vs[0]);
							rs.month = v1;
						}
					}else{//[*分隔符*] 月+日
						rs.month = parseFloat(vs[0]);
						rs.date = parseFloat(vs[1]);
					}
					return rs;
				case 3://[*分隔符*分隔符*]年+月+日
					if(vs[0].length <= 4 && vs[1].length <= 2 && vs[2].length <= 2){
						var dateStr = vs[0] +fitZero(vs[1]) + fitZero(vs[2]);
						$.extend(rs,this._getDateInfos(dateStr,currYear));
						return rs;
					}
				case 4://[*分隔符*分隔符*分隔符*] 年+月+日+时
					if(vs[0].length <= 4 && vs[1].length <= 2 && vs[2].length <= 2){
						var dateStr = vs[0] +fitZero(vs[1]) + fitZero(vs[2]);
						$.extend(rs,this._getDateInfos(dateStr,currYear));
						if(vs[3].length <= 2){
							rs.hours = parseFloat(vs[3]);
						}else{
							rs.hours = parseFloat(vs[3].substr(0,2));
							rs.minute = parseFloat(vs[3].substr(2,2));
						}
						return rs;
					}
				default://[*分隔符*分隔符*分隔符*分隔符*] 年+月+日+时+分
					if(vs[0].length <= 4 && vs[1].length <= 2 && vs[2].length <= 2){
						var dateStr = vs[0] +fitZero(vs[1]) + fitZero(vs[2]);
						$.extend(rs,this._getDateInfos(dateStr,currYear));
						rs.hours = parseFloat(vs[3]);
						rs.minute = parseFloat(vs[4]);
						return rs;
					}
				}
			}
            /**
             * 将文本按照非数值进行分割并返回数组
             */
            function parseArray(text){
                var rs = [];
                var temp = '';
                for(var i = 0; i < text.length; i++){
                    if(!isNaN(text[i]) && text[i] != ' '){
                        temp += text[i];
                    }else if($.trim(temp)){
                        rs.push(temp);
                        temp = '';
                    }
                }
                rs.push(temp);
                return rs;
            };
			/**
			 * 如果长度为1，则在前面补一个0
			 */
			function fitZero(t){
				if(t.length == 1)
					return '0' + t;
				return t;
			}
		},
		/**
		 * 根据输入字符串获取日期的年月日准确值
		 */
		_getDateInfos: function(dateStr,currYearStr){
            var format = this._datetime.setting.format;
            if(format == 'i' || format == 'ii'){
                return {minute: parseFloat(dateStr)};
            }else if(format == 'h' || format == 'hh'){
                return {hours: parseFloat(dateStr)};
            }else if(format == 'dd' || format == 'd'){
                return {date: parseFloat(dateStr)};
            }else if(format == 'm' || format == 'mm'){
                return {month: parseFloat(dateStr)};
            }else if(format == 'yyyy'){
                var year = 0
                    ,len = dateStr.length;
                if(len <= 4){
                    year = parseFloat(currYearStr.substr(0,4-len) + dateStr);
                }else{
                    year = parseFloat(dateStr.substr(0,4));
                }
                return {year: year};
            }
            var rs = {}
                ,minView = this._datetime.setting.minView;
            switch (dateStr.length) {
            case 1://d or m
                var x = parseFloat(dateStr);
                if(minView == 3){
                    rs.month = x;
                }else{
                    rs.date = x;
                }
                return rs;
            case 2://dd or mm
                var x = parseFloat(dateStr);
                if(minView == 3){
                    rs.month = x;
                }else{
                    rs.date = x;
                }
                return rs;
			case 3://ymm or mdd
                if(minView == 3){
                    rs.year = parseFloat(currYearStr.substr(0,3) + dateStr.substr(0,1));
                    rs.month = parseFloat(dateStr.substr(1,2));
                }else{
                    rs.month = parseFloat(dateStr.substr(0,1));
                    rs.date = parseFloat(dateStr.substr(1,2));
                }
				return rs;
			case 4://mmdd or yyyy or yymm
                if(parseFloat(dateStr.substr(0,2)) > 12){
					rs.year = parseFloat(dateStr);
                }else{
					var v0 = parseFloat(dateStr.substr(0,2))
					,v1 = parseFloat(dateStr.substr(2,2));
					if(v0 <= 12){
						rs.month = v0;
					}
					if(v1 <= 31){
						rs.date = v1;
					}
				}
				return rs;
			case 5://yyyym
                rs.year = parseFloat(dateStr.substr(0,4));
                rs.month = parseFloat(dateStr.substr(4,1));
				return rs;
			case 6://yyyymm
                rs.year = parseFloat(dateStr.substr(0,4));
                rs.month = parseFloat(dateStr.substr(4,2));
				return rs;
			case 7://yyyymmd
                rs.year = parseFloat(dateStr.substr(0,4));
                rs.month = parseFloat(dateStr.substr(4,2));
                rs.date = parseFloat(dateStr.substr(6,1));
				return rs;
            default://yyyymmdd
				rs.year = parseFloat(dateStr.substr(0,4));
				rs.month = parseFloat(dateStr.substr(4,2));
				rs.date = parseFloat(dateStr.substr(6,2));
				return rs;
			}
		}
	};
	$.extend($.fn.datetimepicker.Constructor.prototype,exDpPrototype);
	return Datetime;
	function limitDate(that){
		var $date = null
			,val = null
			,date = null;
		if(that.setting.datebegin){
			$date = $A('#' + that.setting.datebegin).data('datetime');
			val = $date.getText();
			if(val){
				date = $date.datetimepicker.getDate();
			}
			that.setStartDate(date);
		}else if(that.setting.dateend){
			$date = $A('#' + that.setting.dateend).data('datetime');
			val = $date.getText();
			if(val){
				date = $date.datetimepicker.getDate();
			}
			that.setEndDate(date);
		}
	};
});

define('app/widgets/grid/app-grid-headerContextMenu',['app/core/app-class', 'app/core/app-jquery', 'app/core/app-options', 
	'app/core/app-core', 'jquery/jquery.ztree'], function(Class, $, Options, App) {
	
	'use strict';
	
	/**
	 * 导出网格的扩展方法
	 */
	var GridHeaderContextMenu = Class.create({
		/**
		 * 初始化网格的导出模块
		 */
		_initContextMenu: function(){
			if(!this.setting.columnManager){
				return;
			}
			var $headerContextMenu = $('<div class="grid-column-tree" oncontextmenu="return false"><div>' +
									       '<ul id="' + App.uuid('app_ztree_') + '" class="ztree"></ul>' +
									   '</div></div>').appendTo($.$appPanelContainer)
				,$headerContextMsg = $('<div class="grid-tree-msg">主视图区域至少保留一个列</div>').appendTo($.$appPanelContainer);
			this.$headerContextMenu = $headerContextMenu;
			this.$headerContextMsg = $headerContextMsg;
			var context = this;
			this.$tableHeader.on('mouseup.grid.api', '>div,td', function(e){
				if(e.button !== 2){
					return;
				}
				var pageX = e.pageX || e.screenX
					,pageY = e.pageY || e.screenY
		        	,pos = {left:pageX-1, top: pageY-1, 'z-index': Options.zindexs.droppanel++, display: 'block'}
				$headerContextMenu.css(pos);
				initContextMenu(context);
			});
			this.$headerContextMenu.on('mouseleave.grid-context-menu.api', function(e){
				var opacity = 10
				$headerContextMenu.hideTimer = setInterval(function(){
					opacity -= 1;
					$headerContextMenu.css('opacity', 0.1*opacity);
					if(opacity == 0){
						$headerContextMenu.hide();
						clearInterval($headerContextMenu.hideTimer);
					}
				}, 130);
			});
			this.$headerContextMenu.on('mouseenter.grid-context-menu.api', function(e){
				clearInterval($headerContextMenu.hideTimer);
				$headerContextMenu.css('opacity', 1);
			});
		}
	});
	/**
	 * 初始化网格列菜单
	 */
	function initContextMenu(context){
		if(!context._contextMenuZtree){
			var treeList = context.getColumnTree()
				,$ul = context.$headerContextMenu.find('>div>ul')
				,data = [];
			for(var i = 0 ; i < treeList.length; i++){
				pushCol(treeList[i], data);
			}
			$.fn.zTree.init($ul, getZtreeSetting(context), data);
			context._contextMenuZtree = $.fn.zTree.getZTreeObj($ul.attr('id'));
		}
	}
	/**
	 * 递归放入表格列
	 */
	function pushCol(col, list){
		if(col.sysCol){
			return;
		}
		if(!col.showTree){
			return;
		}
		var node = {}; 
		node.chkDisabled = col.lockTree;
		node.checked = !col.hidden;
		node.id = col._cid;
		if(col.parentColumn){
			node.parent = col.parentColumn._cid;
		}
		node.name = col.title;
		node.open = true;
		node.viewPos = col.viewPos;
		list.push(node);
		var children = col.children;
		if(children){
			for(var i = 0; i < children.length; i++){
				pushCol(children[i], list);
			}
		}
	}
	/**
	 * 获取树的设置参数
	 */
	function getZtreeSetting(context){
		var s = context.setting;
		var setting = {
			view: {
				selectedMulti: false,
				dblClickExpand: true,
				showLine: true,
				showIcon: false					
			},
			data:{
				key:{
					name: 'name'
				},
				simpleData: {
					enable: true,
					idKey: 'id',
					pIdKey: 'parent',
					rootPId: ''
				}
			},
			check: {
				enable: true
			},
			callback: {
				onClick: function(event, treeId, treeNode){
					context._contextMenuZtree.checkNode(treeNode, !treeNode.checked, true, true);
				},
				onCheck: function(event, treeId, treeNode){
					if(treeNode.checked){
						showColumn(treeNode.id, context);
					}else{
						hideColumn(treeNode.id, context);
					}
				},
				beforeCheck: function(treeId, treeNode){
					var level = treeNode.level
						,mainNodes = context._contextMenuZtree.getNodesByFilter(function(node){
							return node.level == level && node.viewPos == 'main' && node.checked;
						});
					if(treeNode.viewPos == 'main' && mainNodes.length == 1 && treeNode.checked){
						var rect = $('#' + treeNode.tId + '_a')[0].getBoundingClientRect();
						context.$headerContextMsg.css({left: rect.left+ rect.width, top:rect.top});
						context.$headerContextMsg.show();
						setTimeout(function(){
							context.$headerContextMsg.hide(500);
						}, 2000);
						return false;
					}else{
						return true;
					}
				}
			}
		};
		return setting;
	}
	/**
	 * 根据内部列id显示列
	 * @param cid
	 */
	function showColumn(cid, context){
		var column = context._column[cid];
		if(column.children){
			var children = column.children;
			for(var i = 0 ; i < children.length; i++){
				var child = children[i]; 
				if(child.children){
					showColumn(child._cid, context);
				}else{
					context.showColumn(child.field);
				}
			}
		}else{
			context.showColumn(column.field);
		}
	}
	/**
	 * 根据内部列id隐藏列
	 * @param cid
	 */
	function hideColumn(cid, context){
		var column = context._column[cid];
		if(column.children){
			var children = column.children;
			for(var i = 0 ; i < children.length; i++){
				var child = children[i]; 
				if(child.children){
					hideColumn(child._cid, context);
				}else{
					context.hideColumn(child.field);
				}
			}
		}else{
			context.hideColumn(column.field);
		}
	}
	return GridHeaderContextMenu;
});
define('app/widgets/grid/app-grid-editor',['app/core/app-class', 'app/core/app-jquery', 'app/core/app-options', 'app/core/app-core'], function(Class, $, Options, App) {
	
	'use strict';
	
	/**
	 * 网格编辑的扩展方法
	 */
	var GridEditor = Class.create({
		/**
		 * 初始行编辑器
		 */
		_initEditor: function(){
			var s = this.setting
				,requestFiles = []
				,editorMap = this.editor
				,grid = this;
			this._gatherViewEditor(s.frozenColumns);
			this._gatherViewEditor(s.frozenColumnsRight);
			this._gatherViewEditor(s.columns);
			
			for(var editorField in editorMap){
				var fileName = 'app/widgets/form/app-' + editorMap[editorField].type;
				if($.inArray(fileName, requestFiles) == -1){
					requestFiles.push(fileName);
				}
			}
			require(requestFiles,function(){
				for(var editorField in editorMap){
					var editorInfo = editorMap[editorField];
					editorInfo.$editor[editorInfo.type](editorInfo.options);
					editorInfo.editor = editorInfo.$editor.data(editorInfo.type);
				}
				grid._linkEditor();
			});
			this._registEditorEvent();
		},
		/**
		 * 收集编辑器组件的信息
		 * @param viewColumns 视图列
		 */
		_gatherViewEditor: function(viewColumns){
			for ( var i = 0; i < viewColumns.length; i++) {
				for(var j = 0; j < viewColumns[i].length; j++){
					var col = viewColumns[i][j]
						,editor = col.editor;
					if(editor){
						this._initEditorOptions(editor, col);
						this.$rowEditor.append(editor.$editor);
						this.editor[col.field] = editor;					
						this.setting.hasEditor = true;
					}
				}
			}
		},
		/**
		 * 生成编辑器的默认参数
		 */
		_initEditorOptions: function(editor, col){
			editor.$editor = $('<input/>');
			editor.column = col;
			if(!editor.type){ editor.type = 'textbox'; }
			if(!editor.options){ editor.options = {}; }
			if(editor.type == 'combobox' && !editor.options.panelwidth){
				editor.options.panelwidth = '100%';
			}
			var grid = this;
			editor.options.editorField = col.field;
			editor.options.onFocus = function(){
				var field = this.setting.editorField;
				var $td = grid.$tableHeaderMain.find('[field=' + field + ']');
				if($td.length == 0){
					return;
				}
				var containerWidth = grid.$tableHeaderMain.outerWidth()  + 3
					,scrollLeft = grid.$tableHeaderMain.scrollLeft()
					,leftBorder = $td.offset().left - grid.$tableHeaderMain.offset().left + scrollLeft
					,rightBorder = leftBorder +  $td.outerWidth();
				if(leftBorder <= scrollLeft){
					grid.$xProxyScroll.scrollLeft(leftBorder);
					return;
				}
				if(rightBorder >= scrollLeft + containerWidth){
					grid.$xProxyScroll.scrollLeft(rightBorder - containerWidth);
				}
			};
			if(this.setting.editorDelBtn){
				editor.options.onMouseOver = function(){
					if(this.$proxyDelBtn == undefined){
						var proxy = this;
						this.$proxyDelBtn = $('<span class="proxy-delete-btn"><i></i></span>');
						this.$proxyDelBtn.on('mouseup', function(e){
							proxy.clearValue();
							e.stopPropagation();
						});
						this.$proxyDelBtn.on('mouseover', function(e){
							$(this).show();
						});
						this.$proxyDelBtn.on('mouseout', function(e){
							$(this).hide();
						});
						this.$proxyDelBtn.appendTo(grid.$absoluteComp);
					}
					if(this.getValue() || this.getText()){
						var pos = this.$element.position();
						pos.left += this.$element.outerWidth();
						this.$proxyDelBtn.css(pos);
						this.$proxyDelBtn.show();
					}
				};
				editor.options.onMouseOut =function(){
					if(this.$proxyDelBtn){
						this.$proxyDelBtn.hide();
					}
				};
			}
		},
		/**
		 * 将网格的编辑器按双向链表连接起来，并构成环状
		 */
		_linkEditor: function(){
			if(!this.setting.hasEditor){
				return;
			}
			var leftEdts = this._linkEditorForView(this.frozenColumns)
				,mainEdts = this._linkEditorForView(this.columns)
				,rightEdts = this._linkEditorForView(this.frozenColumnsRight);
			
			if(!leftEdts && !mainEdts && !rightEdts){
				return;
			}
			if(leftEdts && !mainEdts && !rightEdts){
				linkOne(leftEdts);
				return;
			}else if(mainEdts && !leftEdts && !rightEdts){
				linkOne(mainEdts);
				return;
			}else if(rightEdts && !leftEdts && !mainEdts){
				linkOne(rightEdts);
				return;
			}
			if(leftEdts && mainEdts){
				leftEdts.lastEditor._next = mainEdts.firstEditor;
				mainEdts.firstEditor._prev = leftEdts.lastEditor;
			}
			if(mainEdts && rightEdts){
				mainEdts.lastEditor._next = rightEdts.firstEditor;
				rightEdts.firstEditor._prev = mainEdts.lastEditor;
			}
			if(leftEdts && rightEdts){
				leftEdts.firstEditor._next = rightEdts.lastEditor;
				rightEdts.lastEditor._prev = leftEdts.firstEditor;
			}else if(leftEdts && mainEdts){
				leftEdts.firstEditor._prev = mainEdts.lastEditor;
				mainEdts.lastEditor._next = leftEdts.firstEditor;
			}else if(mainEdts && rightEdts){
				mainEdts.firstEditor._prev = rightEdts.lastEditor;
				rightEdts.lastEditor._next = mainEdts.firstEditor;
			}
			function linkOne(edts){
				edts.lastEditor._next = edts.firstEditor;
				edts.firstEditor._prev = edts.lastEditor;
			}
		},
		/**
		 * 将视图内的编辑器按双向链表连接起来，并返回视图内第一个和最后一个编辑器
		 */
		_linkEditorForView: function(cols){
			var firstEditor = null
				,lastEditor = null;
			for(var i=0; i< cols.length; i++){
				var currEditor = cols[i].editor; 
				if(currEditor){
					var nextEditor = this._getNextEditor(cols, i+1);
					if(nextEditor){
						currEditor._next = nextEditor;
						nextEditor._prev = currEditor; 
					}
					if(firstEditor == null){
						firstEditor = currEditor;
					}
					lastEditor = currEditor;
				}
			}
			if(firstEditor){
				return {firstEditor:firstEditor, lastEditor:lastEditor};
			}else{
				return null;
			}
		},
		/**
		 * 获取下一个编辑器
		 * @param cols
		 * @param index
		 */
		_getNextEditor: function(cols, index){
			var nextEditor = null;
			for(var i = index; i < cols.length; i++){
				nextEditor = cols[i].editor; 
				if(nextEditor){
					break;
				}
			}
			return nextEditor;
		},
		/**
		 * 注册编辑器相关事件
		 */
		_registEditorEvent: function(){
			if(this.setting._hasOperator){
				this.$tableHeader.on('click.grid.operator.api', 'td>div>.rowBtn', $.proxy(this._onRowOperatorBtnClick, this));
				this.$tableBody.on('click.grid.operator.api', 'td>div>.rowBtn', $.proxy(this._onRowOperatorBtnClick, this));
			}
			if(this.setting.hasEditor){
				this.$tableBody.on('click.grid-edit.api', 'td', $.proxy(this._onAutoBeginEdit, this));
				this.$element.on('mouseup.grid-edit.api', $.proxy(this._onAutoEndEdit, this));
				this.$tableBody.on('keydown.grid-edit.api', 'td', $.proxy(this._onTdKeyDown, this));
			}
		},
		/**
		 * 点击数据行开始编辑
		 */
		_onAutoBeginEdit: function(e){
			if(e.target.tagName == 'A'){
				return;
			}
			var	$td = $(e.currentTarget)
				,rowIndex = $td.parent().index();
			if(this.setting.autoBeginEdit){
				this.beginEdit(rowIndex);
				var field = $td.attr('field')
					,editorInfo = this.editor[field];
				if(editorInfo){
					editorInfo.editor.focus();		
				}
			}
		},
		/**
		 * 点击非数据行结束编辑
		 */
		_onAutoEndEdit: function(e){
			if($(e.target).closest('.grid-body-content').length > 0){
				return;
			}
			if(this.setting.autoEndEdit){
				if(this._currentEditRowId){
					var rowIndex = this._convertRowIdToRowIndex(this._currentEditRowId);
					this.endEdit(rowIndex);
				}
			}
		},
		/**
		 * 单元格接受按键按下的事件 控制编辑器的焦点切换
		 */
		_onTdKeyDown: function(e){
			var s = this.setting;
			if(App.containKeyCode(e, s.keyLeftEditor)){
				this._keyLeftEditor(e);
			}else if(App.containKeyCode(e, s.keyRightEditor)){
				this._keyRightEditor(e);
			}else if(App.containKeyCode(e, s.keyUpEditor)){
				this._keyUpEditor(e);
			}else if(App.containKeyCode(e, s.keyDownEditor)){
				this._keyDownEditor(e);
			}
			if(s.keySpecEnabled){
				if(App.containKeyCode(e, s.keyPrevEditor)){
					this._keyPrevEditor(e);
				}else if(App.containKeyCode(e, s.keyNextEditor)){
					this._keyNextEditor(e);
				}else if(App.containKeyCode(e, s.keyAppendRow)){
					this._keyAppendRow(e);
				}else if(App.containKeyCode(e, s.keyDeleteRow)){
					this._keyDeleteRow(e);
				}
			}
		},
		/**
		 * 让编辑器失去焦点
		 */
		_editorBlur: function(activeEditor, handle){
			activeEditor.editor.blur(handle);
		},
		/**
		 * 让编辑器获取焦点
		 */
		_editorFocus: function(activeEditor){
			var that = this;
			setTimeout(function(){
				if(!activeEditor.editor.isActive()){
					activeEditor.editor.focus();
				}
			}, 0);
		},
		/**
		 * 聚焦左边一个编辑器
		 */
		_keyLeftEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,grid = this;
			this._editorBlur(editor, function(){
				var activeEditor = editor._prev;
				while(true){
					if(!activeEditor.editor.isReadonly() && activeEditor.editor.isEnabled()
						&& grid.columnIsVisible(activeEditor.column.field)){
						break;
					}
					activeEditor = activeEditor._prev;
				}
				grid._editorFocus(activeEditor);
			});
			e.preventDefault();
		},
		/**
		 * 聚焦右边一个编辑器
		 */
		_keyRightEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,grid = this;
			this._editorBlur(editor, function(){
				var activeEditor = editor._next;
				while(true){
					if(!activeEditor.editor.isReadonly() && activeEditor.editor.isEnabled()
							&& grid.columnIsVisible(activeEditor.column.field)){
						break;
					}
					activeEditor = activeEditor._next;
				}
				grid._editorFocus(activeEditor);
			});
			e.preventDefault();
		},
		/**
		 * 聚焦上边一个编辑器
		 */
		_keyUpEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,rowIndex = this.getCurrentEditRowIndex()
				,prevRowIndex = this._getPrevVisibleRowIndex(rowIndex)
				,grid = this;
			this._editorBlur(editor, function(){
				grid.beginEdit(prevRowIndex);
				grid.locateRow(grid._currentEditRowId);
				grid._editorFocus(editor);
			});
			e.preventDefault();
		},
		/**
		 * 聚焦下边一个编辑器
		 */
		_keyDownEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,rowIndex = this.getCurrentEditRowIndex()
				,nextRowIndex = this._getNextVisibleRowIndex(rowIndex)
				,grid = this;
			this._editorBlur(editor, function(){
				grid.beginEdit(nextRowIndex);
				grid.locateRow(grid._currentEditRowId);
				grid._editorFocus(editor);
			});
			e.preventDefault();
		},
		/**
		 * 聚焦下一个编辑器
		 */
		_keyNextEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,grid = this;
			this._editorBlur(editor, function(){
				if(grid._isLastEditor(editor)){
					var rowIndex = grid.getCurrentEditRowIndex()
					,totalRowLen = grid.$tableBodyMain.find('tr').length;
					if(rowIndex == totalRowLen - 1){
						grid.appendRow();
						grid.beginEdit(totalRowLen);
					}else{
						var nextRowIndex = grid._getNextVisibleRowIndex(rowIndex);
						grid.beginEdit(nextRowIndex);
					}
				}
				grid._keyRightEditor(e);
			});
		},
		/**
		 * 聚焦上一个编辑器
		 */
		_keyPrevEditor: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,grid = this;
			this._editorBlur(editor, function(){
				if(grid._isFirstEditor(editor)){
					var rowIndex = grid.getCurrentEditRowIndex()
						,prevRowIndex = grid._getPrevVisibleRowIndex(rowIndex);
					grid.beginEdit(prevRowIndex);
				}
				grid._keyLeftEditor(e);
			});
		},
		/**
		 * 在末尾追加一行并进入编辑状态
		 */
		_keyAppendRow: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,grid = this;
			this._editorBlur(editor, function(){
				var totalRowLen = grid.$tableBodyMain.find('tr').length;
				grid.appendRow();
				grid.beginEdit(totalRowLen);
				grid._editorFocus(editor);
			});
			e.preventDefault();
		},
		/**
		 * 删除当前编辑的行
		 */
		_keyDeleteRow: function(e){
			var editor = this.editor[$(e.currentTarget).attr('field')]
				,rowIndex = this.getCurrentEditRowIndex()
				,nextRowIndex = -1
				,grid = this;
			this._editorBlur(editor, function(){
				if(grid.setting.markChange){
					nextRowIndex = grid._getNextVisibleRowIndex(rowIndex);
				}else{
					if(grid._isLastEditorRow(rowIndex)){
						nextRowIndex = grid._getPrevVisibleRowIndex(rowIndex);
					}else{
						nextRowIndex = grid._getNextVisibleRowIndex(rowIndex);
					}
				}
				grid.beginEdit(nextRowIndex);
				grid.deleteRow(rowIndex);
				grid._editorFocus(editor);
			});
			e.preventDefault();
		},
		/**
		 * 从当前行向下按顺序获取一个可视行，
		 * 	当到结尾还没取到则从第一行开始向下搜索可视行，
		 * 如果没有取到则返回本行
		 */
		_getNextVisibleRowIndex: function(rowIndex){
			var result = rowIndex + 1
				,lenTr = this.$tableBodyMain.find('tr').length;
			while(result != lenTr){
				var $tr = this.$tableBodyMain.find('tr:eq(' + result + '):visible'); 
				if($tr.length == 1){
					break;
				}
				result++;
			};
			if(result == lenTr){
				result = 0;
				while(result != rowIndex){
					var $tr = this.$tableBodyMain.find('tr:eq(' + result + '):visible'); 
					if($tr.length == 1){
						break;
					}
					result++;
				};
			}
			return result;
		},
		/**
		 * 从当前行向上按顺序获取一个可视行，
		 * 	当到第一行还没取到则从末尾开始往上搜索可视行，
		 * 如果没有取到则返回本行
		 */
		_getPrevVisibleRowIndex: function(rowIndex){
			var result = rowIndex - 1
				,lenTr = this.$tableBodyMain.find('tr').length;
			while(result != -1){
				var $tr = this.$tableBodyMain.find('tr:eq(' + result + '):visible'); 
				if($tr.length == 1){
					break;
				}
				result--;
			};
			if(result == -1){
				result = lenTr;
				while(result != rowIndex){
					var $tr = this.$tableBodyMain.find('tr:eq(' + result + '):visible'); 
					if($tr.length == 1){
						break;
					}
					result--;
				};
			}
			return result;
		},
		/**
		 * 判断编辑器是否在网格的最末尾
		 */
		_isLastEditor: function(editor){
			var $lastEditorWrapper = this.$tableBody.find('.app-wrapper:not(.wrapper-disabled):not(.wrapper-readonly):last');
			if(editor.editor.$element.is($lastEditorWrapper)){
				return true;
			}
			return false;
		},
		/**
		 * 判断编辑器是否在网格的最前边
		 */
		_isFirstEditor: function(editor){
			var $firstEditorWrapper = this.$tableBody.find('.app-wrapper:not(.wrapper-disabled):not(.wrapper-readonly):first');
			if(editor.editor.$element.is($firstEditorWrapper)){
				return true;
			}
			return false;
		},
		/**
		 * 是否为最后一行编辑器
		 */
		_isLastEditorRow: function(rowIndex){
			var $row = this.$tableBodyMain.find('tr:visible:last');
			if($row.index() == rowIndex){
				return true;
			}else{
				return false;
			}
		},
		/**
		 * 将行下索引转为行id
		 */
		_convertRowIndexToRowId: function(rowIndex){
			if(isNaN(rowIndex)){
				return rowIndex;				
			}
			return this.$tableBodyMain.find('tr:eq(' + rowIndex + ')').attr('id');
		},
		/**
		 * 将行Id转为行下索引
		 */
		_convertRowIdToRowIndex: function(rowId){
			if(!isNaN(rowId)){
				return rowId;				
			}
			return this.$tableBodyMain.find('tr#' + rowId + '').index();
		},
		/**
		 * 开始编辑行（一个网格只保持一行编辑状态）
		 * <PRE>
		 * 1、如果rowIndex为空或超过当前行号，则不处理
		 * 2、如果rowIndex编辑的行号正在编辑，则不处理
		 * </PRE>
		 * @param {Number} rowIndex 行号
		 * @todo 当已有行正在进行编辑时，则调用{@link geid#endEdit}关闭编辑
		 * @todo 将本行进入编辑状态
		 * @fires grid-class#beforeBeginEdit
		 * @fires grid-class#onBeginEdit
		 * @memberof grid-class
		 * @instance
		 */
		beginEdit: function(rowIndex){
			if(this.setting.editable == false){
				return;
			}
			var rowId = this._convertRowIndexToRowId(rowIndex);
			if(rowId == undefined){
				return;
			}
			if(rowId == this._currentEditRowId){
				return;
			}
			var g = this
				,exp = this._getRowExpr(rowId)
				,$trs = this.$tableBody.find(exp)
				,oriRowData = this._rowData[rowId]
				,rowData = this._getUpdateRowForBegin(rowId, oriRowData);
			if(!rowData){
				return;
			}
			if(this._currentEditRowId != null){
				if(this.endEdit(this._currentEditRowId) != true){
					return;
				}
			}
			this._resetEditorValue();
			/**
			 * 编辑行前事件
			 * @event grid-class#beforeBeginEdit
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 * @returns {Boolean} boolean 返回值为false 取消编辑
			 */
			if(this.trigger('beforeBeginEdit', rowData, rowIndex) === false){
				return;
			}
			this._currentEditRowId = rowId;
			for(var i = 0; i < $trs.length; i++){
				var $tr = $($trs[i])
					,$tds = $tr.find('>td');
				for(var j = 0; j < $tds.length; j++){
					g._cellIntoEdit($($tds[j]), rowData);
				}
			}
			setHiddenEditor.call(this, rowData);
            this._fixXProxyScroll();
            this.$tableBodyMain.find(exp).addClass('currEdit');
			/**
			 * 当行变为编辑模式时触发的事件
			 * @event grid-class#onBeginEdit
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 */
			this.trigger('onBeginEdit', rowData, rowIndex);
			/**
			 * 设置隐藏编辑器的值
			 */
			function setHiddenEditor(rowData){
				var editors = this.editor;
				for(var field in editors){
					if(editors[field].hasSet){
						continue;
					};
					editors[field].hasSet = true;
					editors[field].editor.setValue(rowData[field], true);
				}
			}
		},
		/**
		 * 获取编辑对象
		 */
		_getUpdateRowForBegin: function(rowId, oriRowData){
			var result = this._newData.updated[rowId];
			if(result){
				return result;
			}
			var result = this._newData.inserted[rowId];
			if(result){
				return result;
			}
			return oriRowData;
		},
		/**
		 * 将单元格转入编辑状态
		 * @param {Jquery} $td 要被编辑的单元格
		 * @param {Object} rowData 被编辑的行数据
		 */
		_cellIntoEdit: function($td, rowData){
			var col = this._column[$td.attr('_cid')]
				,field = col.field
				,editorInfo = this.editor[field];
			if(col && editorInfo){
				var editor = editorInfo.editor;
				var $inner = $td.find('>div:first-child');
				$inner.css('display', 'none');
				$td.css('width', $inner.outerWidth());
				var text = $.trim($td.text())
					,val = rowData[field];
				editor.setValue(val, true);
				editor.setText(text);
				editorInfo.hasSet = true;
				if($.isFunction(editor.setSelectedNode) && val){
					var node = {};
					if($.isFunction(editor.setting.createNode)){
						node = editor.setting.createNode(rowData, text);
					}else{
						node[editor.setting.valuefield] = val;
						node[editor.setting.textfield] = text;
					}
					editor.setSelectedNode(node, true);
				}
				$td.append(editor.$element);
			}
		},
		/**
		 * 结束编辑行，如果该行数据未被修改 不触发{@link grid-class#onEndEdit}
		 * <PRE>
		 * 1、如果传入的rowIndex不是正在编辑的行号，则不处理
		 * 2、如果传入的rowIndex为undefined，则认为是上一次编辑的行号
		 * </PRE>
		 * @param {Number} [rowIndex] 行号
		 * @fires grid-class#beforeEndEdit
		 * @fires grid-class#onEndEdit
		 * @returns {boolean} result true完成结束编辑
		 * @memberof grid-class
		 * @instance
		 */
		endEdit: function(rowIndex){
			$(document).trigger('mousedown.droppanel.api');
			if(this.setting.editable == false){
				return;
			}
			var rowId;
			if(rowIndex === undefined){
				if(this._currentEditRowId == null){
					return;
				}
				rowId = this._currentEditRowId;
			}else{
				rowId = this._convertRowIndexToRowId(rowIndex);
				if(rowId != this._currentEditRowId){
					return;
				}
			}
            var rowExp = this._getRowExpr(rowId);
            if(!this.$tableBodyMain.find(rowExp).hasClass('currEdit')){
                return;
            }
			if(this._beforeEndEdit(rowId) === false){
				return;
			}
			var editInfo = {
				$trs: this.$tableBody.find(this._getRowExpr(rowId))
			};
			var oriRowData = this._rowData[rowId]
				,triggerEnd = true;
			editInfo.oriRowData = oriRowData;
			editInfo.newRowData = this._getUpdateRowForEnd(rowId, oriRowData);
			if(oriRowData){//编辑原始行
				this._endEditOri(editInfo);
				if(!editInfo.realChange){
					this._cancelUpdateRow(rowId);
					triggerEnd = false;
				}
			}else{//编辑新增行
				this._endEditNew(editInfo);
			}
			this._restoreEditor();
			this.trigger('onDataChange');
            this.$tableBodyMain.find(rowExp).removeClass('currEdit');
			if(triggerEnd){
				this._onEndEdit(rowIndex, oriRowData, editInfo.newRowData);
			}
			this._currentEditRowId = null;
			$(document).off('mousedown.grid-edit.api');
			return true;
		},
		/**
		 * 编辑前事件
		 */
		_beforeEndEdit: function(rowId){
			var rowIndex = this._convertRowIdToRowIndex(rowId)
				,rowData = this._rowData[rowId];
			if(!rowData)
				rowData = this._newData[rowId];
			/**
			 * 编辑行前事件
			 * @event grid-class#beforeEndEdit
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 * @returns {Boolean} boolean 返回值为false 取消选择
			 */
			return this.trigger('beforeEndEdit', rowData, rowIndex);
		},
		/**
		 * 编辑事件
		 */
		_onEndEdit: function(rowIndex, rowData, newData){
			/**
			 * 当行变为编辑模式时触发的事件，新增行则rowData和newData相同
			 * @event grid-class#onEndEdit
			 * @param {Object} rowData 行数据
			 * @param {Object} newData 编辑后的数据
			 * @param {Number} rowIndex 行号
			 */
			this.trigger('onEndEdit', rowData, newData, rowIndex);
		},
		/**
		 * 还原编辑器的值
		 */
		_resetEditorValue: function(){
			var editors = this.editor;
			for(var field in editors){
				var editor = editors[field].editor;
				editor.setValue('', true);
				editor.setText('');
				editors[field].hasSet = false;
				if(editor.setSelectedNode){
					editor.setSelectedNode(null, true);
				}
			}
		},
		/**
		 * 还原编辑器到编辑器容器
		 */
		_restoreEditor: function(){
			var editors = this.editor;
			for(var field in editors){
				if(editors[field].editor){
					var $editor = editors[field].editor.$element;
					$editor.parent().css('width', 'auto');
					this.$rowEditor.append($editor);
				}
			}
		},
		/**
		 * 获取要编辑的编辑对象
		 * 	1、如果编辑对象为空，且存在源对象，则复制源对象为编辑对象
		 *  2、如果编辑对象为空，且不存在源对象，则源对象为新增的行
		 */
		_getUpdateRowForEnd: function(rowId, oriRowData){
			var result = this._newData.updated[rowId];
			if(result){
				
			}else if(oriRowData){
				result = this._newData.updated[rowId] = $.extend({}, oriRowData);
			}else{
				result = this._newData.inserted[rowId];
			}
			return result;
		},
		/**
		 * 搜集编辑行数据 并标记编辑的单元格
		 */
		_endEditOri: function(editInfo){
			var $trs = editInfo.$trs
				,grid = this;
			editInfo.realChange = false;
			editInfo.callback = function(e){
				e.newRowData[e.col.field] = e.value;
				if(e.value != e.oriRowData[e.col.field]){
					grid._markEditDisplay(e.$td);
					e.realChange = true;
				}
			};
			this._cellApplyEdit(editInfo);
		},
		/**
		 * 搜集新增行数据
		 */
		_endEditNew: function(editInfo){
			var $trs = editInfo.$trs;
			editInfo.callback = function(e){
				e.newRowData[e.col.field] = e.value;
			};
			this._cellApplyEdit(editInfo);
		},
		/**
		 * 对修改的单元格进行标记
		 * @param {JQuery} $td 单元格
		 */
		_markEditDisplay: function($td){
			if(this.setting.markChange){
				$td.addClass('updated');
			}
		},
		/**
		 * 应用编辑的修改
		 * @param {Jquery} $td 被编辑的单元格
		 * @param {Object} oriRowData 编辑前的行数据
		 * @param {Object} newRowData 编辑后的行数据
		 * @param {callback} callback 回调函数
		 */
		_cellApplyEdit: function(editInfo){
			var editors = this.editor;
			for(var field in editors){
				var editor = editors[field]
					,text = editor.editor.getText()
					,val = editor.editor.getValue()
					,$td = editInfo.$trs.find('td[_cid=' + editor.column._cid +']');
				if($td.length == 1){
					var $innerDiv = $td.find('>div:first-child');
					$innerDiv.text(text);
					$innerDiv.css('display', 'block');
					editInfo.$td = $td;
				}
				editInfo.col = editor.column;
				editInfo.value = val;
				if(editInfo.callback)
					editInfo.callback(editInfo);
			}
		},
		/**
		 * 撤销编辑行数据，恢复编辑前的状态
		 * @param {Number} rowIndex 行号
		 * @memberof grid-class
		 * @instance
		 */
		cancelEdit: function(rowIndex){
			if(this.setting.editable == false){
				return;
			}
			var rowId = this._convertRowIndexToRowId(rowIndex);
			if(rowId == this._currentEditRowId){
				this._restoreEditor();
				this._currentEditRowId = null;
			}
			this._cancelUpdateRow(rowId);
			this._cancelEditDisplay(rowId);
		},
		/**
		 * 还原行的展现
		 * @param {String} rowId
		 */
		_cancelEditDisplay: function(rowId){
			var rowData = this._rowData[rowId];
			if(!rowData){
				rowData = this._newData.inserted[rowId];
			}
			this._applyRowEditDisplay(rowId, rowData);
            this.$tableBodyMain.find(this._getRowExpr(rowId)).removeClass('currEdit');
		},
		/**
		 * 应用行的展现
		 * @param {String} rowId 行id
		 * @param {Object} rowData 要应用的行数据
		 */
		_applyRowEditDisplay: function(rowId, rowData){
			var exp = this._getRowExpr(rowId)
				,$trs = this.$tableBody.find(exp)
				,rowIndex = this._convertRowIdToRowIndex(rowId);
			for(var i = 0; i < $trs.length; i++){
				var $tr = $($trs[i])
					,$tds = $tr.find('>td');
				for(var j = 0; j < $tds.length; j++){
					this._applyCellEditDisplay($($tds[j]), rowData, rowIndex);
				}
			}
		},
		/**
		 * 还原单元格的展现
		 * @param {Jquery} $td 要取消编辑的单元格
		 * @param {Object} rowData 要应用的行数据
		 * @param {Number} rowIndex 行号
		 */
		_applyCellEditDisplay: function($td, rowData, rowIndex){
			var col = this._column[$td.attr('_cid')]
				,editor = this.editor[col.field];
			if(col && editor){
				var $tdInner = $td.find('>div:first-child')
					,text = this._getFormatText(col, rowData, rowIndex);
				$tdInner.text(text);
				$tdInner.css('display', 'block');
				this._unmarkEditDisplay($td);
			}
		},
		/**
		 * 取消对修改的单元格进行标记
		 * @param {JQuery} $td 单元格
		 */
		_unmarkEditDisplay: function($td){
			if(this.setting.markChange){
				$td.removeClass('updated');
			}
		},
		/**
		 * 取消被编辑的行的数据
		 */
		_cancelUpdateRow: function(rowId){
			delete this._newData.updated[rowId];
		},
		/**
		 * 获取编辑器
		 * @param {String} field 列属性
		 * @returns {JQuery} $editor 编辑器的Jquery元素
		 * @example {
		 * &#9;title : '格式化显示列',
		 * &#9;align : 'left',
		 * &#9;field : 'f1',
		 * &#9;editor : {
		 * &#9;&#9;type : 'combobox',
		 * &#9;&#9;options : {
		 * &#9;&#9;&#9;valuefield : 'value',
		 * &#9;&#9;&#9;textfield : 'text',
		 * &#9;&#9;&#9;data : data,
		 * &#9;&#9;&#9;afterSelected: function(node){
		 * &#9;&#9;&#9;&#9;var $f2 = $('#gridEditorOnClickTr').grid('getEditor','f2');
		 * &#9;&#9;&#9;&#9;var $f3 = $('#gridEditorOnClickTr').grid('getEditor','f3');
		 * &#9;&#9;&#9;&#9;$f2.combobox('setValue', node.value);
		 * &#9;&#9;&#9;&#9;$f2.combobox('setText', node.text);
		 * &#9;&#9;&#9;&#9;$f3.combobox('setValue', node.value);
		 * &#9;&#9;&#9;&#9;$f3.combobox('setText', node.text);
		 * &#9;&#9;&#9;}
		 * &#9;&#9;}
		 * &#9;}
		 * }
		 * @memberof grid-class
		 * @instance
		 */
		getEditor: function(field){
			return this.editor[field].$editor;
		},
		/**
		 * 允许编辑
		 * @memberof grid-class
		 * @instance
		 */
		enableEdit: function(){
			this.setting.editable = true;
		},
		/**
		 * 允许编辑
		 * @memberof grid-class
		 * @instance
		 */
		disableEdit: function(){
			this.setting.editable = false;
		},
		/**
		 * 允许编辑
		 * @memberof grid-class
		 * @instance
		 */
		getEditable: function(){
			return this.setting.editable;
		},
		/**
		 * 允许编辑
		 * @memberof grid-class
		 * @instance
		 */
		toggleEdit: function(){
			if(this.setting.editable == false){
				this.setting.editable = true;
			}else{
				this.setting.editable = false;
			}
		},
		/**
		 * 搜集新增行数据
		 * @param rowId
		 * @param rowData
		 */
		_insertRow: function(rowId, rowData){
			this._newData.inserted[rowId] = rowData;
			this.trigger('onDataChange');
		},
		/**
		 * 删除行
		 * <PRE>
		 * 1、当该行为原网格数据时，则只标记改行为删除行
		 * 2、当该行为新增的网格数据时，则直接移除该行
		 * </PRE>
		 * @param {Number} rowIndex 行号
		 * @example $('#demo').grid('deleteRow',0);
		 * @memberof grid-class
		 * @instance
		 */
		deleteRow: function(rowIndex){
			if(this.setting.editable == false){
				return;
			}
			var rowId = this._convertRowIndexToRowId(rowIndex);
			this._deleteRow(rowId);
			this._toggleMessage();
		},
		/**
		 * 对删除的行展现进行标记
		 * @param {String} exp 行搜索串
		 */
		_markDeleteDisplay: function(exp){
			if(this.setting.markChange){
				this.$tableBodyLeft.find(exp).addClass('deleted');
				this.$tableBodyMain.find(exp).addClass('deleted');
				this.$tableBodyRight.find(exp).addClass('deleted');
			}else{
				this.$tableBodyLeft.find(exp).hide();
				this.$tableBodyMain.find(exp).hide();
				this.$tableBodyRight.find(exp).hide();
			}
		},
		/**
		 * 搜集删除行数据
		 * @param rowId
		 */
		_deleteRow: function(rowId){
			var oriRowData = this._rowData[rowId];
			if(oriRowData){
				this._newData.deleted[rowId] = this._rowData[rowId];	
			}else{
				this._cancleInsertRow[rowId];
			}
			this._deleteRowDisplay(rowId);
			this.trigger('onDataChange');
		},
		/**
		 * 删除行
		 * @param rowIndex
		 */
		_deleteRowDisplay: function(rowId){
			var exp = this._getRowExpr(rowId);
			if(this._newData.inserted[rowId] != null){
				if(rowId == this._currentEditRowId){
					this._restoreEditor();
				}
				this.$tableBodyLeft.find(exp).remove();
				this.$tableBodyMain.find(exp).remove();
				this.$tableBodyRight.find(exp).remove();
				this._footerFollow();
				this._fixYProxyScrollHeight();
			}else{
				this._markDeleteDisplay(exp);
			}
			if(rowId == this._currentEditRowId){
				delete this._currentEditRowId;
			}
			this._reOrderNumber();
			this._pagerDeleteRow();
		},
		/**
		 * 撤销新增行
		 * @param rowId
		 */
		_cancleInsertRow: function(rowId){
			delete this._newData.inserted[rowId];
		},
		/**
		 * 撤销删除行
		 * @param {Number} rowIndex 行号
		 * @example $('#demo').grid('deleteRow',0);
		 * @memberof grid-class
		 * @instance
		 */
		cancelDelete: function(rowIndex){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			this._unmarkDeleteDisplay(rowId);
			this._cancelDeleteRow(rowId);
		},
		/**
		 * 取消对删除的行展现标记
		 * @param rowId
		 */
		_unmarkDeleteDisplay: function(rowId){
			var exp = this._getRowExpr(rowId);
			if(this.setting.markChange){
				this.$tableBodyLeft.find(exp).removeClass('deleted');
				this.$tableBodyMain.find(exp).removeClass('deleted');
				this.$tableBodyRight.find(exp).removeClass('deleted');
			}else{
				this.$tableBodyLeft.find(exp).show();
				this.$tableBodyMain.find(exp).show();
				this.$tableBodyRight.find(exp).show();
			}
		},
		/**
		 * 撤销删除行
		 * @param rowId
		 */
		_cancelDeleteRow: function(rowId){
			delete this._newData.deleted[rowId];
		},
		/**
		 * 应用所有的改变
		 * @memberof grid-class
		 * @instance
		 */
		acceptChanges: function(){
			var changeds = this.getChanges()
				,deleted = changeds.deleted
				,inserted = changeds.inserted
				,updated = changeds.updated;
			if(deleted){
				for(var rowId in deleted){
					var rowIndex = this._convertRowIdToRowIndex(rowId);
					this.acceptChange(rowIndex);
				}
			}
			if(inserted){
				for(var rowId in inserted){
					var rowIndex = this._convertRowIdToRowIndex(rowId);
					this.acceptChange(rowIndex);
				}
			}
			if(updated){
				for(var rowId in updated){
					var rowIndex = this._convertRowIdToRowIndex(rowId);
					this.acceptChange(rowIndex);
				}
			}
		},
		/**
		 * 根据类型获取更改的行数据，当类型参数未指定，返回所有更改的行
		 * <PRE>
		 * type的可选参数:
		 * 新增：inserted
		 * 删除：deleted
		 * 新增：updated
		 * </PRE>
		 * @param {String} [type] 更改类型
		 * @returns 被改变的数据
		 * @memberof grid-class
		 * @instance
		 */
		getChanges: function(type){
			if(type){
				return $.extend({}, this._newData[type]);
			}else{
				return $.extend({}, this._newData);
			}
		},
		/**
		 * 应用改变
		 * <span style="color:red;">当改行被编辑 又被删除时，删除操作优先于编辑操作</span>
		 * @param {Number} rowIndex
		 * @memberof grid-class
		 * @instance
		 */
		acceptChange: function(rowIndex){
			var changed = this.getChange(rowIndex);
			if(changed){
				switch(changed.type){
					case('updated'):
						this._acceptUpdated(rowIndex, changed.data);
						break;
					case('inserted'):
						this._acceptInserted(rowIndex, changed.data);
						break;
					case('deleted'):
						this._acceptDeleted(rowIndex, changed.data);
						break;
				}
			}
		},
		/**
		 * 获取改变后的数据
		 * @param {Number} rowIndex
		 * @returns {Object} result 被改变的数据
		 * @property {String} returns.type 改变类型
		 * @property {Object} returns.data 改变数据
		 * @memberof grid-class
		 * @instance
		 */
		getChange: function(rowIndex){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			if(rowId == this._currentEditRowId){
				this.endEdit(rowId);
			}
			var changed = this._newData.deleted[rowId]
				,result = {};
			if(changed){
				result.type = 'deleted';
				result.data = $.extend({}, changed);
				return result;
			}
			changed = this._newData.updated[rowId];
			if(changed){
				result.type = 'updated';
				result.data = $.extend({}, changed);
				return result;
			}
			changed = this._newData.inserted[rowId];
			if(changed){
				result.type = 'inserted';
				result.data = $.extend({}, changed);
				return result;
			}
			return result;
		},
		/**
		 * 应用修改后的数据
		 * @param rowIndex
		 * @param rowData
		 */
		_acceptUpdated: function(rowIndex, rowData){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			$.extend(this._rowData[rowId], rowData);
			this._applyRowEditDisplay(rowId, rowData);
			this._cancelUpdateRow(rowId);
		},
		/**
		 * 应用新增后的数据
		 * @param rowIndex
		 * @param rowData
		 */
		_acceptInserted: function(rowIndex, rowData){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			if(rowIndex == 0){
				this.getRows().unshift(rowData);
			}else{
				this.getRows()[rowIndex] = rowData;
			}
			this._rowData[rowId] = rowData;
			this._cancleInsertRow(rowId);
			this._acceptInsertDisplay(rowId);
		},
		/**
		 * 应用新增后的数据的展现
		 * @param rowId
		 */
		_acceptInsertDisplay: function(rowId){
			if(this.setting.markChange){
				var exp = this._getRowExpr(rowId);
				this.$tableBody.find(exp).removeClass('inserted');
			}
		},
		/**
		 * 应用删除后的数据
		 * @param rowIndex
		 * @param rowData
		 */
		_acceptDeleted: function(rowIndex, rowData){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			this.getRows().splice(rowIndex, 1);
			delete this._rowData[rowId];
			this._cancelDeleteRow(rowId);
			this._cancelUpdateRow(rowId);
			this._acceptDeletedDisplay(rowId);
		},
		/**
		 * 应用删除后的展现
		 * @param rowIndex
		 */
		_acceptDeletedDisplay: function(rowId){
			var exp = this._getRowExpr(rowId);
			this.$tableBody.find(exp).remove();
			this._reOrderNumber();
			this._footerFollow();
			this._fixYProxyScrollHeight();
		},
		/**
		 * 对单元格为无效数据
		 * @param {Object} info 单元格信息
		 * @param {Number} info.rowIndex 第几行
		 * @param {String} info.field 列名
		 * @param {String} info.msg 提示信息
		 * @example $('#grid').grid('setCellInvalid');
		 * @memberof grid-class
		 * @instance
		 */
		setCellInvalid: function(info){
			var $td = this._findTdByInfo(info);
			$td.addClass('invalid');
			this._initInvalidMsg($td, info.msg);
		},
		/**
		 * 根据info查询td
		 * @param info（rowIndex,field）
		 */
		_findTdByInfo: function(info){
			var $td = this.$tableBodyMain.find('tr:eq(' + info.rowIndex + ') td[field="' + info.field +'"]');
			if($td.length == 0){
				$td = this.$tableBodyLeft.find('tr:eq(' + info.rowIndex + ') td[field="' + info.field +'"]');
				if($td.length == 0){
					$td = this.$tableBodyRight.find('tr:eq(' + info.rowIndex + ') td[field="' + info.field +'"]');
				}
			}
			return $td;
		},
		/**
		 * 清除单元格的无效信息
		 * @param {Object} info 单元格信息
		 * @param {Number} info.rowIndex 第几行
		 * @param {String} info.field 列名
		 * @example $('#grid').grid('setCellValid');
		 * @memberof grid-class
		 * @instance
		 */
		setCellValid: function(info){
			var $td = this._findTdByInfo(info);
			$td.removeClass('invalid');
			this._hideInvalidMsg($td);
		},
		/**
		 * 隐藏提示框
		 * @param $target
		 */
		_hideInvalidMsg: function($target){
			if($target.length == 1){
				var $msg = $target.data('invalidMsg');
				if($msg){
					$msg.hide();
				}
			}else{
				$target.each(function(){
					var $msg = $(this).data('invalidMsg');
					if($msg){
						$msg.hide();
					}
				});
			}
		},
		/**
		 * 设置一行数据为无效数据
		 * @param {Object} info 单元格信息
		 * @param {Number} info.rowIndex 第几行
		 * @param {String} info.msg 提示信息
		 * @example $('#grid').grid('setRowInvalid', 0);
		 * @memberof grid-class
		 * @instance
		 */
		setRowInvalid: function(info){
			var rowIndex = info.rowIndex
				,$left = this.$tableBodyLeft.find('tr:eq(' + rowIndex + ')')
				,$main = this.$tableBodyMain.find('tr:eq(' + rowIndex + ')')
				,$right = this.$tableBodyRight.find('tr:eq(' + rowIndex + ')');
			$left.addClass('invalid');
			$main.addClass('invalid');
			$right.addClass('invalid');
			this._initInvalidMsg($main, info.msg);
			$left.data('invalidMsg',$main.data('invalidMsg'));
			$right.data('invalidMsg',$main.data('invalidMsg'));
		},
		/**
		 * 清除一行的无效信息，该行上设置的单元格无效信息也会被清除
		 * @param {Object} info 行号
		 * @example $('#grid').grid('setRowInvalid', 0);
		 * @example $('#grid').grid('setRowInvalid', {rowIndex:0});
		 * @memberof grid-class
		 * @instance
		 */
		setRowValid: function(info){
			var rowIndex = info;
			if(isNaN(info)){
				rowIndex = info.rowIndex;
			}
			var $leftTr = this.$tableBodyLeft.find('tr:eq(' + rowIndex + ')')
				,$mainTr = this.$tableBodyMain.find('tr:eq(' + rowIndex + ')')
				,$rightTr = this.$tableBodyRight.find('tr:eq(' + rowIndex + ')')
				,$leftTd = this.$tableBodyLeft.find('tr:eq(' + rowIndex + ')>td.invalid')
				,$mainTd = this.$tableBodyMain.find('tr:eq(' + rowIndex + ')>td.invalid')
				,$rightTd = this.$tableBodyRight.find('tr:eq(' + rowIndex + ')>td.invalid');
			$leftTr.removeClass('invalid');
			$mainTr.removeClass('invalid');
			$rightTr.removeClass('invalid');
			$leftTd.removeClass('invalid');
			$mainTd.removeClass('invalid');
			$rightTd.removeClass('invalid');
			this._hideInvalidMsg($mainTr);
			this._hideInvalidMsg($leftTd);
			this._hideInvalidMsg($mainTd);
			this._hideInvalidMsg($rightTd);
		},
		/**
		 * 清除全部的无效标志
		 * @param {Number} rowIndex 行号
		 * @example $('#grid').grid('setRowInvalid', 0);
		 * @memberof grid-class
		 * @instance
		 */
		clearAllInvalid: function(){
			this.$tableBody.find('tr.invalid').removeClass('invalid');
			this.$tableBody.find('td.invalid').removeClass('invalid');
			this.$absoluteComp.find('>div').hide();
		},
		/**
		 * 生成一个错误信息的显示框
		 */
		_initInvalidMsg: function($target, msg){
			var $msg = $target.data('invalidMsg');
			if($msg){
				$msg.find('>div>span').html(msg);
				$msg.show();
			}else{
				$msg = $('<div class="errorWrapper"><div><span>' + msg + '</span><div></div></div></div>');
				this.$absoluteComp.append($msg);
				this._initInvalidMsgCss($target, $msg);
				$target.data('invalidMsg', $msg); 
			}
		},
		/**
		 * 错误信息的初始样式
		 */
		_initInvalidMsgCss: function($target, $msg){
			var position = $target.position()
				,css = {display: 'block', left: position.left, top: position.top - 42};
			$msg.css(css);
			/**
			 * 修复提示信息的位置
			 */
			if(this.$element.offset().top > $msg.offset().top){
				css.top += ($target.outerHeight() + $msg.outerHeight());
				$msg.css(css);
				$msg.addClass('up');
			}else{
				$msg.removeClass('up');
			}
		},
		/**
		 * 绑定错误信息的显示事件
		 */
		_bindInvalidMsgEvent: function(){
			var g = this;
			this.$tableBody.on('mousemove.grid.api', 'td.invalid,tr.invalid>td', function(e){
				var $this = $(this)
					,position = $this.position()
					,$msg = null;
				if($this.find('div>.rowBtn').length > 0){
					return;
				}
				if($this.hasClass('invalid')){
					$msg = $this.data('invalidMsg');
				}else{
					$msg = $this.parent().data('invalidMsg');
				}
                if($msg){
                	g._initInvalidMsgCss($this, $msg);
                }
			});
			this.$tableBody.on('mouseout.grid.api', '.invalid', function(e){
				var errMsg = $(this).data('invalidMsg');
                if(errMsg){
                	errMsg.hide();
                }
			});
		},
		/**
		 * 保存（新增、修改、删除）行数据
		 * <PRE>
		 * infos为一个对象
		 * infos.command: 删除[del]、新增[add]、修改[update]，新增修改时 可以无需指定command，由rowData的主键进行判断
		 * infos.rowIndex: 要操作的行号
		 * infos.rowData: 要执行的行对象数据
		 * 1、当该表格有设置主键时，可以根据rowData推算出rowIndex，即rowIndex可以不需要指明
		 * 2、当该表格没有设置主键时，必须指明更新第几行 即该对象 存在两个属性：rowIndex 和 rowData
		 * </PRE>
		 * @todo 优先使用指定的rowIndx属性作为更新的行号，当没有指定rowIndex时，尝试根据主键搜索rowIndex
		 * @todo 如果根据信息能够计算出rowIndex，则认为是更新行，否则认为是追加行
		 * @param {Object|RowData} infos 保存信息
		 * @param {String} [infos.command] 命令
		 * @param {Number} [infos.rowIndex] 行号
		 * @param {Object} [infos.rowData] 行数据
		 * @example $('#grid').grid('saveRow', {id:'idVal',......}); 
		 * 有主键 直接传入rowData 对象，如果网格存在该id的行，则进行更新，不存在则进行追加
		 * @example $('#grid').grid('saveRow', {rowData:{id:'idVal'}, command:'del'}); 
		 * 删除操作，必须指定command为del，有主键 可以只指定rowData，如果网格存在该id的行，则进行删除操作
		 * @example $('#grid').grid('saveRow', {rowData:{id:'idVal'}, command:'del'}); 
		 * 删除操作，必须指定command为del，没有主键 可以指定rowIndex
		 * @example $('#grid').grid('saveRow', {rowIndex:2, rowData:{} }); 
		 * 没有主键 必须指明rowIndex，并将行数据设置在rowData属性上
		 * @example $('#grid').grid('saveRow', {rowIndex:2, command:'del'}); 
		 * 没有主键 必须指明rowIndex，指定命令del
		 * @memberof grid-class
		 * @instance
		 */
		saveRow: function(infos){
			var rowIndex = infos.rowIndex
				,command = infos.command
				,rowData = null
				,idField = this.setting.idField;
			if(infos.rowData && typeof(infos.rowData) == 'object'){
				rowData = infos.rowData;
			}else{
				rowData = infos;
			}
			if(rowIndex == undefined){
				if(rowData[idField] != undefined){
					rowIndex = this.$tableBodyMain.find('tr[_v="' + rowData[idField] + '"]').index();
					rowIndex = rowIndex == -1 ? undefined : rowIndex;
				}
			}
			var totalRows = this.$tableBodyMain.find('tr').length - 1;
			if(rowIndex == undefined 
				|| rowIndex > totalRows){
				this.appendRow(rowData);
				if(!infos.manualCommit){
					this.acceptChange(totalRows + 1);
				}
			}else{
				if(command == 'del'){
					var rowId = this._convertRowIndexToRowId(rowIndex);
					this._deleteRow(rowId);
					if(!infos.manualCommit){
						this.acceptChange(rowIndex);
					}
						
				}else{
					this._updateRow(rowIndex, rowData);
					if(!infos.manualCommit){
						this.acceptChange(rowIndex);
					}
				}
			}
		},
		/**
		 * 更新行
		 * @param rowIndex
		 * @param rowData
		 */
		_updateRow: function(rowIndex, rowData){
			var rows = this.data[this.setting.jsonReader.rows];
			if(rows.length < rowIndex){
				return;
			}
			rows[rowIndex] = rowData;
			var rowId = this._convertRowIndexToRowId(rowIndex);
			this._newData.updated[rowId] = rowData;	
			this._updateRowDisplay(rowIndex, rowData);
			this.trigger('onDataChange');
		},
		/**
		 * 更新展现
		 */
		_updateRowDisplay: function(rowIndex, rowData){
			var columns = this._column
				,that = this;
			update$tr(this.$tableBodyLeft.find('tr:eq(' + rowIndex + ')'));
			update$tr(this.$tableBodyMain.find('tr:eq(' + rowIndex + ')'));
			update$tr(this.$tableBodyRight.find('tr:eq(' + rowIndex + ')'));
			function update$tr($tr){
				if($.isFunction(that.setting.rowCheckable)){
					if(that.setting.rowCheckable(rowData, rowIndex) === false){
						$tr.addClass('row-uncheckable');
					}else{
						$tr.removeClass('row-uncheckable');
					}
				}
				var $tds = $tr.find('td');
				$tds.each(function(){
					update$td($(this));
				});
			}
			function update$td($td){
				var col = columns[$td.attr('_cid')];
				if(!col){
					return;
				}
				if(col.field == '_rownumbers'){
					return;
				}
				if(col._html){
					return;
				}
				if($td.find('.app-wrapper').length == 1){
					col.editor.editor.setValue(rowData[col.field]);	
				}
				var html = '';
				if(col.buttons){
					html = that._getBtnHtml(col, rowData);
				}else{
					html = that._getFormatText(col, rowData);
				}
				if(typeof($td.attr('title')) != 'undefined'){
					var title = html;
					if(typeof html == 'string'){
						var $html = $('<div>' + html + '</div>');
						if($html.children().length != 0){
							title = $html.text();
						}
					}
					$td.attr('title', title);
				}
				$td.find('div:first').html(html);
				var css = '';
				if($.isFunction(col.styler)){
					css = col.styler(rowData[col.field], rowData);
				}else if(col.styler){
					css = col.styler;	
				}
				if(css){
					$td.attr('style', css);
				}
			}
		}		
	});
	return GridEditor;
});
/**
 * 格式化函数库
 * @author Mr.T
 */
define('app/widgets/grid/app-grid-formatter',['app/util/app-utils'], function(Utils) {
	/**
	 * 格式化管理器
	 */
	var FormatterManager = function(){
		this.formatterPool = {};
	};
	FormatterManager.prototype = {
		/**
		 * 添加格式化函数
		 * @param formatterCode 格式化函数编码
		 */
		add: function(formatterCode, formatterFunc, formatterName){
			if(this.formatterPool[formatterCode]){
				throw new Error('已经存在编码为[' + formatterCode + ']的格式化函数，请更换编码');
			}
			this.formatterPool[formatterCode] = {
				name: formatterName,
				func: formatterFunc
			};
		},
		/**
		 * 移除格式化函数
		 */
		remove: function(formatterCode){
			this.formatterPool[formatterCode];
		},
		/**
		 * 获取格式化方法
		 */
		get: function(formatterCode){
			var format = this.formatterPool[formatterCode];
			if(format && $.isFunction(format.func)){
				return format.func;
			}
			return null;
		},
		/**
		 * 格式化
		 */
		formatter: function(formatterCode, text, row, rowIndex, col){
			var func = this.get(formatterCode);
			if(func){
				text = func(text, row, rowIndex, col);
			}else{
				text = row[formatterCode];
			}
			return text;
		},
		/**
		 * 获取格式化名称的列表
		 */
		getNameList: function(){
			var list = []
				,pool = this.formatterPool;
			for(var code in pool){
				var name = pool[code].name;
				if(name){
					list.push({name:name,id:code});
				}
			}
			return list;
		}
	};
	var formatterManager = new FormatterManager();
	/**
	 * 千分数值
	 */
	formatterManager.add('thousandsFormatter', function(text, row, index){
		return $A.NumberFormat.format(text, '#,##0.00;;#');
	}, '千分格式化(0不显示)');
	/**
	 * 千分数值
	 */
	formatterManager.add('thousand', function(text, row, index){
		return $A.NumberFormat.format(text, '#,##0.00');
	}, '千分格式化');
	/**
	 * 整数千分数值
	 */
	formatterManager.add('###,###(0)', function(text, row, index){
		return $A.NumberFormat.format(text, '#,##0;;#');
	}, '###,###(0不显示)');
	formatterManager.add('yyyy-MM-dd', function(text, row, index){
		if(text){
			if(text.length == 8){
				return text.substr(0,4) + '-' + text.substr(4,2) + '-' + text.substr(6,2);
			}else{
				return text;
			}
		}else{
			return '';
		}
	}, 'yyyy-MM-dd');
	formatterManager.add('yyyy年MM月dd日', function(text, row, index){
		if(text){
			if(text.length == 8){
				return text.substr(0,4) + '年' + text.substr(4,2) + '月' + text.substr(6,2) + '日';
			}else{
				return text;
			}
		}else{
			return '';
		}
	}, 'yyyy年MM月dd日');
	formatterManager.add('oneYesZeroNo', function(text, row, index){
		if(text == '1'){
			return '是';
		}else{
			return '否';
		}
	}, '1是0否');
	formatterManager.add('numberFormatter', function(text, row, index, col){
		if(col.formatPattern){
			return $A.NumberFormat.format(text, col.formatPattern);
		}else{
			return text;
		}
	});
	return formatterManager;
});

define('bs-http-plugin/config-ext',["app/core/app-core",],function ($A) {
    var config = {
        "bs-client-config":{
            //控件下载地址
            downloadUrl:$A.getHostUrl()+'resources/bsnetfun/bosssoft-assistant-v1.5.4.exe',
            //前端控件实例初始化时更新，如果客户端未启动，会在启动成功后再发一次更新请求
            initUpdate:true,
            //客户端更新地址，initUpdate为true时才起作用
            updateUrl:$A.getHostUrl()

        }
    }
    return config;
});
/**
 * Created by qiu.yong on 2017/5/16.
 */
define('bs-http-plugin/config',["app/core/app-jquery","app/core/app-core","bs-http-plugin/config-ext"], function (AppCore,$A,GlobalConfig) {

    var Config = {
        version:'1.0',
        url:'http://127.0.0.1:13526/',
        guardUrl:'http://127.0.0.1:13528/controlMainApp',
        heartbeat:'heart',
        update:'update',
        startUrl:'BosssoftAssistant://',
        cookies: window._cookies||'no-cookies',
        timeout:2000,
        sliceSize:1024
    }
    var gcfg = GlobalConfig["bs-client-config"];
    if(gcfg){
        $.extend(Config,gcfg);
    }
    return Config;
});
//https://github.com/kelektiv/node-uuid

define('bs-http-plugin/util/uuid',[],function () {
    var uuid = null;

    !function(e){uuid=e()}(function(){return function e(n,r,o){function t(f,u){if(!r[f]){if(!n[f]){var a="function"==typeof require&&require;if(!u&&a)return a(f,!0);if(i)return i(f,!0);var d=new Error("Cannot find module '"+f+"'");throw d.code="MODULE_NOT_FOUND",d}var s=r[f]={exports:{}};n[f][0].call(s.exports,function(e){var r=n[f][1][e];return t(r?r:e)},s,s.exports,e,n,r,o)}return r[f].exports}for(var i="function"==typeof require&&require,f=0;f<o.length;f++)t(o[f]);return t}({1:[function(e,n,r){var o=e("./v1"),t=e("./v4"),i=t;i.v1=o,i.v4=t,n.exports=i},{"./v1":4,"./v4":5}],2:[function(e,n,r){function o(e,n){var r=n||0,o=t;return o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+"-"+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]+o[e[r++]]}for(var t=[],i=0;i<256;++i)t[i]=(i+256).toString(16).substr(1);n.exports=o},{}],3:[function(e,n,r){(function(e){var r,o=e.crypto||e.msCrypto;if(o&&o.getRandomValues){var t=new Uint8Array(16);r=function(){return o.getRandomValues(t),t}}if(!r){var i=new Array(16);r=function(){for(var e,n=0;n<16;n++)0===(3&n)&&(e=4294967296*Math.random()),i[n]=e>>>((3&n)<<3)&255;return i}}n.exports=r}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],4:[function(e,n,r){function o(e,n,r){var o=n&&r||0,t=n||[];e=e||{};var f=void 0!==e.clockseq?e.clockseq:a,l=void 0!==e.msecs?e.msecs:(new Date).getTime(),c=void 0!==e.nsecs?e.nsecs:s+1,v=l-d+(c-s)/1e4;if(v<0&&void 0===e.clockseq&&(f=f+1&16383),(v<0||l>d)&&void 0===e.nsecs&&(c=0),c>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=l,s=c,a=f,l+=122192928e5;var p=(1e4*(268435455&l)+c)%4294967296;t[o++]=p>>>24&255,t[o++]=p>>>16&255,t[o++]=p>>>8&255,t[o++]=255&p;var y=l/4294967296*1e4&268435455;t[o++]=y>>>8&255,t[o++]=255&y,t[o++]=y>>>24&15|16,t[o++]=y>>>16&255,t[o++]=f>>>8|128,t[o++]=255&f;for(var b=e.node||u,w=0;w<6;++w)t[o+w]=b[w];return n?n:i(t)}var t=e("./lib/rng"),i=e("./lib/bytesToUuid"),f=t(),u=[1|f[0],f[1],f[2],f[3],f[4],f[5]],a=16383&(f[6]<<8|f[7]),d=0,s=0;n.exports=o},{"./lib/bytesToUuid":2,"./lib/rng":3}],5:[function(e,n,r){function o(e,n,r){var o=n&&r||0;"string"==typeof e&&(n="binary"==e?new Array(16):null,e=null),e=e||{};var f=e.random||(e.rng||t)();if(f[6]=15&f[6]|64,f[8]=63&f[8]|128,n)for(var u=0;u<16;++u)n[o+u]=f[u];return n||i(f)}var t=e("./lib/rng"),i=e("./lib/bytesToUuid");n.exports=o},{"./lib/bytesToUuid":2,"./lib/rng":3}]},{},[1])(1)});

    return uuid;
})
;
/**
 * Created by qiu.yong on 2017/5/24.
 */

define('bs-http-plugin/data-transmit/message',["jquery"], function ($) {
    var Message = function () {
        var _self = this;
        _self.msgStack = {};
        $(window).on('message', function (event) {
            var data = event.originalEvent.data;
            data = $.parseJSON(data);
            var callback = _self.get(data.id);
            if (!!callback) {
                callback.call({}, data);
            }
        });
    };
    Message.prototype = {
        constructor:Message,
        set: function (id, callback) {
            this.msgStack[id] = callback;
        },
        get: function (id) {
            var callback = this.msgStack[id];
            if (!!callback) {
                delete this.msgStack[id];
            }
            return callback;
        }
    };
    return new Message();
});
/*
 * Dotpl-JS v1.0
 * http://code.google.com/p/dotpl-js/
 * (c) 2012 by Chunzhan.He. All rights reserved.
 * chunzhan.he@gmail.com
 */
// alert(dotpl.diving("data", {data:{data1:{val:"evolution"}}}));
// alert(dotpl.diving("data.data1", {data:{data1:{val:"evolution"}}}));
// alert(dotpl.diving("data.data1.val", {data:{data1:{val:"evolution"}}}));
// alert(dotpl.applyTpl("hello ${val}", {val:"world"}));
// alert(dotpl.applyTpl("hello ${val} ${val2}", {val:"world",val1:"wide-web",val2:"good"}, function(k,v,kv){
// if(k=='val') return kv['val']+"-"+kv['val1'];
// }));
// alert(dotpl.applyTpl("hello ${data.val}", {data:{val:"freedom"}}));
// alert(dotpl.applyTpl("hello ${data.val} nothing ${none}", {data:{val:"freedom"}}));
// alert(dotpl.applyTpl("hello ${data.data1.val}", {data:{data1:{val:"evolution"}}}));
// alert(dotpl.applyTpl("hello ${val},i ${action} you", {val:"town", action:'love'}));
// alert(dotpl.applyTpl("hello ${val},<tpl if=\"'${action}'=='love'\">i ${action} you</tpl>", {val:"town", action:'love'}));
// alert(dotpl.applyTpl("hello ${val},if false<tpl if=\"'${action}'=='love'\">i ${action} you</tpl>", {val:"town", action:'like'}));
// alert(dotpl.applyTpl("list:\n<tpl for=\".\">${__offset} hello ${key} ${val}\n</tpl>", [{key:"world", val:'like'},{key:"town", val:'freedom'}]));
// alert(dotpl.applyTpl("list:\n<tpl for=\"data\">${__offset} hello ${key} ${val}\n</tpl>", {data:[{key:"world", val:'like'},{key:"town", val:'freedom'}]}));
// alert(dotpl.applyTpl("list:\n<tpl for=\"data\">${__offset} hello ${__val} \n</tpl>", {data:[1,2,4]}));
// alert(dotpl.applyTpl("list:\n<tpl for=\"data\">${__offset} hello ${__val} \n</tpl>", {data:["s1","s2","s3"]}));
// alert(dotpl.applyTpl("list:\n<tpl for=\"data\">${__offset} hello ${key} ${val}\n</tpl>list2:\n<tpl for=\"data\">${__offset} 1024 ${key} ${val}\n</tpl>", {data:[{key:"world", val:'like'},{key:"town", val:'freedom'}]}));
// alert(dotpl.applyTpl("<tpl for=\".\">list${__offset} \n <ul><tpl0 for=\"data\"><li>${__offset} \n ${key} ${val}</li></tpl0></ul></tpl>", [{data:[{key:"world", val:'like'},{key:"town", val:'freedom'}]},{data:[{key:"world1", val:'like1'},{key:"town1", val:'freedom1'}]}]));
// dotpl.applyRTpl("/display.tpl",{key:'hellow world'},function(view){alert(view);});
define('base/dotpl-js',[],function () {
    var dotpl = function() {
        function _diving(key,kv) {
            var keys = key.split("\.");
            var i = 0;
            do {
                kv = kv[keys[i++]];
                if(kv==null) break;
            } while(i<keys.length&&typeof(kv)=='object');
            return kv;
        }
        function _applyMapTpl(tpl, values, renderer, pk, parent) {
            var re = /\${1}\{([^\}]+?)\}/ig;
            var view = tpl.replace(re, function($0,$1) {
                try {
                    var val = _diving($1,values);
                    val = (val==null?"":val);
                    if(typeof renderer=='function') {
                        var tmp = renderer.call(this, $1, val, values, pk, parent);
                        return tmp==null?val:tmp;
                    }
                    return val;
                } catch(e){ alert($1||e.message||e);return null;}
            });
            return view;
        }
        function _request(url,cb,sync) {
            var xmlhttp = null;
            if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari
                xmlhttp=new XMLHttpRequest();
            } else {// code for IE6, IE5
                xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
            }
            xmlhttp.onreadystatechange=function() {
                if (xmlhttp.readyState==4) {
                    try {
                        cb.call(this, xmlhttp.responseText,xmlhttp.status);
                    } catch(e){ alert(e.message||e);return null;}
                }
            }
            try {
                xmlhttp.open('GET',url,!!sync);
                xmlhttp.send();
            } catch(e){ alert(e.message||e);return null;}
            return xmlhttp;
        }
        function _applyTpl(tpl, data, renderer, pk, parent){
            var regx = /<(tpl\d?)\s+(\w+)\s*=\s*(['|"]{1})([^\3]+?)\3\s*>([\s\S]+?)<\/\1>/ig;
            if(regx.test(tpl)) {
                tpl = tpl.replace(regx, function($0,$1,$2,$3,$4,$5){
                    var output = "";
                    if($2!=null) {
                        if($2.toUpperCase()=="FOR") {
                            var arr = data;
                            if($4!=".") {
                                arr = _diving($4,data);
                            }
                            for(var i=0;arr!=null&&i<arr.length;i++) {
                                var item = {};
                                if(typeof(arr[i])!='object') {
                                    item.__val = arr[i];
                                } else {
                                    item = arr[i];
                                }
                                item.__offset = i;
                                output+=_applyTpl($5,item,renderer,$4,arr);
                            }
                        } else if($2.toUpperCase()=="IF") {
                            try {
                                if(eval(applyTpl($4,data))) {
                                    return _applyTpl($5, data, renderer, pk, parent);
                                }
                            } catch(e) {
                                alert($4||e.message||e);
                            }
                        }
                    }
                    return output;
                });
            }
            return _applyMapTpl(tpl, data, renderer, pk, parent);
        }
        return function(){
            this.diving=_diving;
            this.applyTpl=_applyTpl;
            //remote template
            this.applyRTpl=function(url, data, cb, renderer){
                _request(url, function(tpl, status){
                    if(status==200) {
                        cb.call(this, _applyTpl(tpl, data, renderer));
                    } else {
                        alert("Error "+status+":"+url);
                    }
                });
            };
            return this;
        };
    }()();
    window.dotpl = dotpl;
    return dotpl;
});
/*
 * $Id: base64.js,v 2.15 2014/04/05 12:58:57 dankogai Exp dankogai $
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 */

(function(global) {
    'use strict';
    // existing version for noConflict()
    var _Base64 = global.Base64;
    var version = "2.1.9";
    // if node.js, we use Buffer
    var buffer;
    if (typeof module !== 'undefined' && module.exports) {
        try {
            buffer = require('buffer').Buffer;
        } catch (err) {}
    }
    // constants
    var b64chars
        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    var b64tab = function(bin) {
        var t = {};
        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
        return t;
    }(b64chars);
    var fromCharCode = String.fromCharCode;
    // encoder stuff
    var cb_utob = function(c) {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))
                                + fromCharCode(0x80 | (cc & 0x3f)))
                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))
                   + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                   + fromCharCode(0x80 | ( cc         & 0x3f)));
        } else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))
                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))
                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))
                    + fromCharCode(0x80 | ( cc         & 0x3f)));
        }
    };
    var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    var utob = function(u) {
        return u.replace(re_utob, cb_utob);
    };
    var cb_encode = function(ccc) {
        var padlen = [0, 2, 1][ccc.length % 3],
        ord = ccc.charCodeAt(0) << 16
            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)
            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),
        chars = [
            b64chars.charAt( ord >>> 18),
            b64chars.charAt((ord >>> 12) & 63),
            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),
            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)
        ];
        return chars.join('');
    };
    var btoa = global.btoa ? function(b) {
        return global.btoa(b);
    } : function(b) {
        return b.replace(/[\s\S]{1,3}/g, cb_encode);
    };
    var _encode = buffer ? function (u) {
        return (u.constructor === buffer.constructor ? u : new buffer(u))
        .toString('base64')
    }
    : function (u) { return btoa(utob(u)) }
    ;
    var encode = function(u, urisafe) {
        return !urisafe
            ? _encode(String(u))
            : _encode(String(u)).replace(/[+\/]/g, function(m0) {
                return m0 == '+' ? '-' : '_';
            }).replace(/=/g, '');
    };
    var encodeURI = function(u) { return encode(u, true) };
    // decoder stuff
    var re_btou = new RegExp([
        '[\xC0-\xDF][\x80-\xBF]',
        '[\xE0-\xEF][\x80-\xBF]{2}',
        '[\xF0-\xF7][\x80-\xBF]{3}'
    ].join('|'), 'g');
    var cb_btou = function(cccc) {
        switch(cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                |    ((0x3f & cccc.charCodeAt(1)) << 12)
                |    ((0x3f & cccc.charCodeAt(2)) <<  6)
                |     (0x3f & cccc.charCodeAt(3)),
            offset = cp - 0x10000;
            return (fromCharCode((offset  >>> 10) + 0xD800)
                    + fromCharCode((offset & 0x3FF) + 0xDC00));
        case 3:
            return fromCharCode(
                ((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    |  (0x3f & cccc.charCodeAt(2))
            );
        default:
            return  fromCharCode(
                ((0x1f & cccc.charCodeAt(0)) << 6)
                    |  (0x3f & cccc.charCodeAt(1))
            );
        }
    };
    var btou = function(b) {
        return b.replace(re_btou, cb_btou);
    };
    var cb_decode = function(cccc) {
        var len = cccc.length,
        padlen = len % 4,
        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)
            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)
            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)
            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),
        chars = [
            fromCharCode( n >>> 16),
            fromCharCode((n >>>  8) & 0xff),
            fromCharCode( n         & 0xff)
        ];
        chars.length -= [0, 0, 2, 1][padlen];
        return chars.join('');
    };
    var atob = global.atob ? function(a) {
        return global.atob(a);
    } : function(a){
        return a.replace(/[\s\S]{1,4}/g, cb_decode);
    };
    var _decode = buffer ? function(a) {
        return (a.constructor === buffer.constructor
                ? a : new buffer(a, 'base64')).toString();
    }
    : function(a) { return btou(atob(a)) };
    var decode = function(a){
        return _decode(
            String(a).replace(/[-_]/g, function(m0) { return m0 == '-' ? '+' : '/' })
                .replace(/[^A-Za-z0-9\+\/]/g, '')
        );
    };
    var noConflict = function() {
        var Base64 = global.Base64;
        global.Base64 = _Base64;
        return Base64;
    };
    // export Base64
    global.Base64 = {
        VERSION: version,
        atob: atob,
        btoa: btoa,
        fromBase64: decode,
        toBase64: encode,
        utob: utob,
        encode: encode,
        encodeURI: encodeURI,
        btou: btou,
        decode: decode,
        noConflict: noConflict
    };
    // if ES5 is available, make Base64.extendString() available
    if (typeof Object.defineProperty === 'function') {
        var noEnum = function(v){
            return {value:v,enumerable:false,writable:true,configurable:true};
        };
        global.Base64.extendString = function () {
            Object.defineProperty(
                String.prototype, 'fromBase64', noEnum(function () {
                    return decode(this)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64', noEnum(function (urisafe) {
                    return encode(this, urisafe)
                }));
            Object.defineProperty(
                String.prototype, 'toBase64URI', noEnum(function () {
                    return encode(this, true)
                }));
        };
    }
    // that's it!
    if (global['Meteor']) {
        Base64 = global.Base64; // for normal export in Meteor.js
    }
    if (typeof module !== 'undefined' && module.exports) {
        module.exports.Base64 = global.Base64;
    }
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define('base/base64',[], function(){ return global.Base64 });
    }
})(typeof self !== 'undefined' ? self
 : typeof window !== 'undefined' ? window
 : typeof global !== 'undefined' ? global
 : this
);
/**
 * 跨域http数据传输
 * Created by qiu.yong on 2017/5/15.
 */

define('bs-http-plugin/data-transmit/socket',["jquery",
    "bs-http-plugin/util/uuid",
    "bs-http-plugin/config",
    "bs-http-plugin/data-transmit/message",
    "base/dotpl-js",
    "base/base64"
], function ($,uuid,config,msg) {

    //切割默认大小
    var sliceSize = config.sliceSize;
    //url最大长度 TODO 根据浏览器设置
    var urlMaxLen = 2000;
    var sendByIframeTimeout = 5*60*1000;
    //状态
    var STATE = {
        pending:{
            code:0,
            name:'pending',
            msg:'准备阶段'
        },
        sendData:{
            code:1,
            name:'sendData',
            msg:'发送数据'
        },
        sendDataCompleted:{
            code:2,
            name:'sendDataCompleted',
            msg:'发送数据完成'
        },
        invoking:{
            code:3,
            name:'invoking',
            msg:'dll调用'
        },
        invoked:{
            code:4,
            name:'invoked',
            msg:'dll调用完成并返回结果'
        },
        state:function(name,op){
            return $.extend(true,{},STATE[name],op);
        },
        //注册事件
        register:function (obj,fn) {
            if($.type(obj)==='undefined'){
                obj = {};
            }
            //注册状态事件
            var $eventObj = $(obj);
            var stateChange = $.isFunction(fn)?fn:$.noop;
            $eventObj.on('stateChange',stateChange);
            $eventObj.trigger('stateChange',[STATE.state('pending')]);
            return $eventObj;
        },
        //触发
        trigger:function ($eventObj,state,args) {
            if($.type(args)==='undefined'){
                args = [];
            }
            $eventObj.trigger('stateChange',[STATE.state(state)].concat([].slice.call(args,0)));
        }
    };

    var getRs = function () {
      return this.ret.ret_msg;
    };
    var Socket = function () {
    };
    Socket.prototype = {
        constructor:Socket,
        /**
         * 通过get跨域发送数据 后端给实现jsonp返回执行函数包裹结果集
         * @param op
         * {
         *  url:'xxx',
         *  sliceSize:500,//切割大小
         *  data:{
         *      xx:d,
         *      xx2:d2,
         *      payload:d3   //只有这个属性会被拆分编码
         *      },
         *  success:function(){
         *
         *  },
         *  error:function(){
         *
         *  },
         *  stateChange:function(){
         *
         *  }
         *  }
         */
        get: function (op) {
            var _self = this;
            //注册状态事件
            var $eventObj = STATE.register({},op.stateChange);
            //参数初始化
            op.success = $.isFunction(op.success)?op.success:$.noop;
            op.error = $.isFunction(op.error)?op.error:$.noop;
            //payload 初始化
            var payload = op.data;
            payload = $.type(payload)==='undefined'?{}:payload;
            // $.extend(op.data,{id:uuid.v4().replace(/-/g,'')});

            payload = JSON.stringify(payload);
            payload = _self.encodeURI(payload);
            var size = op.sliceSize?op.sliceSize:sliceSize;
            //校验url长度是否超标
            var _op = $.extend(true,{},op);
            delete _op.data.payload;
            var urlLen = op.url.length + JSON.stringify(_op.data).length+size;
            if(urlLen>urlMaxLen){
                throw new Error('url 长度超过超过可发送最大长度，请重新设置sliceSize!');
            }
            //切割
            var fragements = _self.sliceData(payload,size);
            //生成调用列表
            var ajaxRS = _self.generateAjaxArray(op,fragements);
            var dataSendCompletedAjaxConfig = ajaxRS.dataSendCompletedAjaxConfig;
            var ajaxConfig = ajaxRS.ajaxConfig;
            var deferreds = ajaxRS.deferreds;


            //发送数据包
            $(ajaxConfig).each(function (index,item) {
               $.ajax(item).done(item.success).fail(item.error);
            });
            STATE.trigger($eventObj,'sendData');
            var retDef = $.Deferred();
            //获取操作结果
            $.when.apply($,deferreds).done(function() {
                retDef.resolve.apply($,arguments);
                STATE.trigger($eventObj,'sendDataCompleted');
                dataSendCompletedAjaxConfig.success = function (data) {
                    STATE.trigger($eventObj,'invoked',arguments);
                    op.success.apply(op,arguments);
                };
                dataSendCompletedAjaxConfig.error = function (data) {
                    STATE.trigger($eventObj,'invoked',arguments);
                    op.error.apply(op,arguments);
                }
                //$.ajax(dataSendCompletedAjaxConfig);
                STATE.trigger($eventObj,'invoking');
            }).fail(function() {
                retDef.reject.apply($,arguments);
                STATE.trigger($eventObj,'invoked',arguments);
                op.error.apply(op,arguments);
            })
            return retDef;
        },
        /**
         * 通过post跨域发送，后端返回头部给添加相应跨域设置
         *
         * Access-Control-Allow-Origin 为允许哪些Origin发起跨域请求. 这里设置为”*”表示允许所有，通常设置为所有并不安全，最好指定一下。
         * Access-Control-Allow-Methods 为允许请求的方法.
         * Access-Control-Max-Age 表明在多少秒内，不需要再发送预检验请求，可以缓存该结果
         * Access-Control-Allow-Headers 表明它允许跨域请求包含content-type头，这里设置的x-requested-with ，表示ajax请求
         *
         * resp.setHeader( "Access-Control-Allow-Origin", "http://localhost:8080" );
         * resp.setHeader( "Access-Control-Allow-Headers", "x-requested-with" );
         * resp.setHeader( "Access-Control-Allow-Methods", "POST" );
         * resp.setHeader( "Access-Control-Max-Age", "3628800" );
         * @param op
         */
        post:function (op) {
            var _self = this;
            //注册状态事件
            var $eventObj = STATE.register({},op.stateChange);
            //参数初始化
            op.success = $.isFunction(op.success)?op.success:$.noop;
            op.error = $.isFunction(op.error)?op.error:$.noop;
            //payload 初始化
            var payload = op.data;
            payload = $.type(payload)==='undefined'?{}:payload;
            op.data = {id:uuid.v4().replace(/-/g,'')};
            payload = JSON.stringify(payload);
            payload = _self.base64Encode(payload);
            op.crossDomain = true;
            op.data.payload = payload;
            op.contentType = "application/x-www-form-urlencoded; charset=utf-8";
            op.dataType = "json";
            op.type = "POST";

            $.support.cors = true;
            //获取操作结果
            $.when($.ajax(op)).done(function() {
                STATE.trigger($eventObj,'invoked',arguments);
                op.success.apply(op,arguments);
            }).fail(function() {
                STATE.trigger($eventObj,'invoked',arguments);
                op.error.apply(op,arguments);
            });
            STATE.trigger($eventObj,'invoking');
        },
        send:function (op) {
            if(op.data){
                op.data = {
                    id:uuid.v4().replace(/-/g,''),
                    payload:JSON.stringify(op.data)
                }
                op.id = op.data.id;
            }
            return this.sendByIframe(op);
        },
        /**
         * 通过 form iframe post跨域发送数据 后端给实现window.parent.postMessage()返回执行执行
         * @param op
         * {
         *  url:'xxx',
         *  timeout:30000, //default 30000
         *  base64:true, //default true
         *  data:{
         *      xx:d,
         *      xx2:d2,
         *      payload:d3
         *      },
         *  success:function(){
         *
         *  },
         *  error:function(){
         *
         *  },
         *  stateChange:function(){
         *
         *  }
         *  }
         */
        sendByIframe:function (op) {
            var operateDefer = op['-operateDefer'];
            if($.type(operateDefer)==='undefined'){
                operateDefer = $.Deferred();
                op['-operateDefer'] = operateDefer;
            }
            var socketDefer = operateDefer;
            var _self = this;
            //注册状态事件
            var $eventObj = STATE.register({},op.stateChange);
            //参数初始化
            op.success = $.isFunction(op.success)?op.success:$.noop;
            op.error = $.isFunction(op.error)?op.error:$.noop;
            var $iframe = _self.createIframe(op);
            var $form = _self.createForm(op);
            var callback = function (data) {
                if($.type(data)==='undefined'){
                    data = {};
                }
                data['getResult'] = getRs;
                try {
                    var args = [data.getResult(),STATE.state('invoked')];
                    op.success.apply(this,args);
                    if(data.ret['ret_code']==='0'){
                        op.success.apply(op,args);
                        operateDefer.resolve.apply(operateDefer,args);
                    }else{
                        op.error.apply(op,args);
                        operateDefer.reject.apply(operateDefer,args);
                    }
                    $form.remove();
                    $iframe.remove();
                }catch (e){
                    args.push(e);
                    op.error.apply(this,args);
                    if(window.console){
                        window.console.error(e);
                    }else {
                        throw e;
                    }
                }
            };
            msg.set(op.data.id,callback);
            //保证 defer 方法队列先绑定
            setTimeout(function () {
                $form.submit();
            },0);
            //超时
            var timeout = op.timeout?op.timeout:sendByIframeTimeout;
            var startTime = new Date();
            var timer = setInterval(function(){
                var endTime = new Date();
                if(socketDefer.state()!=='pending'){
                    clearInterval(timer);
                    return;
                };
                if((endTime-startTime)>timeout){
                    op.error.apply(this,[{code:'timeout',msg:'超时'}]);
                    socketDefer.reject({code:'timeout',msg:'超时'});
                    clearInterval(timer);
                }
            },800);
            STATE.trigger($eventObj,'invoking');
            return socketDefer;
        },
        createIframe:function (op) {
            var template= '<iframe \
                                id="socketIframe${id}" \
                                name="socketIframe${id}" \
                                style="position:absolute; top:-9999px; left:-9999px">\
                            </iframe>';
            var $iframe = $(dotpl.applyTpl(template,op));
            $iframe.appendTo('body');
            return $iframe;
        },
        createForm:function (op) {
            if(!!op.func){
                op.invokeType = 'func';
                op.invokeValue = op.func;
            }else{
                op.invokeType = 'proc';
                op.invokeValue = op.proc;
            }
            var template= '<form id="socketForm${id}" name="socketForm${id}" \
                target="socketIframe${id}" \
                action="${url}" \
                method="post" \
                accept-charset="UTF-8" \
                > \
                </form>';
            var $form = $(dotpl.applyTpl(template,op));
            var fieldTemp = '<input type="hidden" name="" value="" />';
            if($.type(op.data)==='object'){
                for(field in op.data){
                    var $field = $(fieldTemp);
                    $field.prop('name',field);
                    $field.prop('value',op.data[field]);
                    $form.append($field);
                }
            }
            $form.appendTo('body');
            return $form;
        },
        /**
         * 拆分数据块
         */
        sliceData: function (data, size) {
            var fragments = [];
            var dataStr = '';
            if ($.type(data) === 'string') {
                dataStr = data;
            } else{
                dataStr = JSON.stringify(data);
            }
            var sum = Math.ceil(dataStr.length / size);
            for (var i = 0, start = 0; i < sum; i++, start += size) {
                fragments.push(dataStr.substr(start, size));
            }
            return fragments;
        },
        /**
         * 生成发送ajax数组
         * @param op
         * @param fragments
         * @returns {{ajaxConfig: Array, ajaxArray: Array}}
         */
        generateAjaxArray: function (op,fragments) {
            //ajax配置
            var ajaxConfig = [];
            //配置调用ajax调用
            var deferreds = [];
            var options =  {};
            $.extend(true,options,op);
            delete options.data.payload;
            var len = fragments.length;
            if(len===0){
                len = 1;
            }

            options.data.sum = len;
            var baseConfig = {
                url:op.url,
                timeout:options.timeout?options.timeout:5000,
                contentType:"application/x-www-form-urlencoded; charset=utf-8",
                dataType: 'jsonp',
                jsonp: 'jsonp',
                type:'GET'
            };
            for(var i = 0;i < len;i++){
                var data = {};
                var dfd = $.Deferred();
                deferreds.push(dfd.promise());
                $.extend(true,data,options.data);
                data.curr = i;
                if(typeof fragments[i]!=="undefined"){
                    data.payload = fragments[i];
                }
                var config = $.extend(true,{},baseConfig);
                config.success = (function(dfd){
                    return function(data){
                        dfd.resolve();
                    }
                })(dfd);
                config.error = (function(dfd){
                    return function(data){
                        dfd.reject();
                    }
                })(dfd);
                config.data = data;
                ajaxConfig.push(config);
            }
            var result ={
                dataSendCompletedAjaxConfig:$.extend(
                    true,{},
                    baseConfig,
                    options,
                    {
                        data:{
                            res:1
                        },
                        timeout:0
                    }
                ),
                ajaxConfig:ajaxConfig,
                deferreds:deferreds
            }
            return result;
        },
        /**
         */
        encodeURI: function (data) {
            return encodeURIComponent(data);
        },
        base64Encode:function (data) {
            return Base64.encode(data);
        }
    };

    var instant = new Socket();
    return instant;
});

define('app/widgets/drag/app-drag',["app/core/app-jquery","app/core/app-core"],function($,App){
	$.fn.drager = function(options){
		if (typeof options == 'string') {
			if (options == 'destroy') 
				return this.each(function(){
					$(this).unbind('mousedown', App.dragTool.start);
					$.data(this, 'app/widgets/drag/app-dragdata', null);
				});
		}
		return this.each(function(){
			var el = $(this);
			$.data(App.dragTool, 'app/widgets/drag/app-dragdata', {
				options: $.extend({
					el: el,
					obj: el
				}, options)
			});
			if (options.event) 
				App.dragTool.start(options.event);
			else {
				var select = options.selector;
				$(select, obj).bind('mousedown', App.dragTool.start);
			}
		});
	};
	App.dragTool = {
		start: function(e){
			document.onselectstart=function(e){return false};//禁止选择

			var data = $.data(this, 'app/widgets/drag/app-dragdata');
			var el = data.options.el[0];
			$.data(el, 'app/widgets/drag/app-dragdata', {
				options: data.options
			});
			if (!App.dragTool.current) {
				App.dragTool.current = {
					el: el,
					oleft: parseInt(el.style.left) || 0,
					otop: parseInt(el.style.top) || 0,
					ox: e.pageX || e.screenX,
					oy: e.pageY || e.screenY
				};
				$(document).bind("mouseup", App.dragTool.stop).bind("mousemove", App.dragTool.drag);
			}
		},
		drag: function(e){
			if (!e)  var e = window.event;
			var current = App.dragTool.current;
			var data = $.data(current.el, 'app/widgets/drag/app-dragdata');
			var left = (current.oleft + (e.pageX || e.clientX) - current.ox);
			var top = (current.otop + (e.pageY || e.clientY) - current.oy);
			if (top < 1) top = 0;
			if (data.options.move == 'horizontal') {
				if ((data.options.minW && left >= $(data.options.obj).cssNum("left") + data.options.minW) && (data.options.maxW && left <= $(data.options.obj).cssNum("left") + data.options.maxW)) 
					current.el.style.left = left + 'px';
				else if (data.options.scop) {
					if (data.options.relObj) {
						if ((left - parseInt(data.options.relObj.style.left)) > data.options.cellMinW) {
							current.el.style.left = left + 'px';
						}
					} else 
						current.el.style.left = left + 'px';
				}
			} else if (data.options.move == 'vertical') {
					current.el.style.top = top + 'px';
			} else {
				var selector = data.options.selector ? $(data.options.selector, data.options.obj) : $(data.options.obj);
				if (left >= -selector.outerWidth() * 2 / 3 && top >= 0 && (left + selector.outerWidth() / 3 < $(window).width()) && (top + selector.outerHeight() < $(window).height())) {
					current.el.style.left = left + 'px';
					current.el.style.top = top + 'px';
				}
			}
			
			if (data.options.drag) {
				data.options.drag.apply(current.el, [current.el]);
			}
			
			return App.dragTool.preventEvent(e);
		},
		stop: function(e){
			var current = App.dragTool.current;
			var data = $.data(current.el, 'app/widgets/drag/app-dragdata');
			$(document).unbind('mousemove', App.dragTool.drag).unbind('mouseup', App.dragTool.stop);
			if (data.options.stop) {
				data.options.stop.apply(current.el, [current.el]);
			}
			App.dragTool.current = null;

			document.onselectstart=function(e){return true};//启用选择
			return App.dragTool.preventEvent(e);
		},
		preventEvent:function(e){
			if (e.stopPropagation) e.stopPropagation();
			if (e.preventDefault) e.preventDefault();
			return false;			
		}
	};
	return App.dragTool;
});

define('app/widgets/drag/app-dialogdrag',["app/core/app-jquery","app/core/app-core","app/data/app-ajax","app/widgets/drag/app-drag"],function($,$a,$ajax){
	var dialogDragTarget=".dialog-header,.dlg-box-head";
	
	function disableSelection(){
//		document.onselectstart=function(){return false;};
//		$("body").css("-moz-user-select","none");
	}
	
	function enableSelection(){
//		document.onselectstart=function(){return true;};
//		$("body").css("-moz-user-select","inherit");
	}
	
	$.fn.dialogDrag = function(options){
		if (options&&options.dragTarget){
			dialogDragTarget=options.dragTarget;
		}else{
			dialogDragTarget=".dialog-header,.dlg-box-head";
		}
        if (typeof options == 'string') {
            if (options == 'destroy') 
				return this.each(function() {
						var dialog = this;
						
						$(dialogDragTarget, dialog).unbind("mousedown");
                });
        }
		return this.each(function(){
			var $dlg = $(this);
			$(dialogDragTarget, $dlg).mousedown(function(e){
//				//如果是在dialogheader中的A上触发的，则不拖拽
				disableSelection();
				var $target = $(e.target);
				if($target.is('label')|| $target.is('input')
					||$target.is("a")||$target.parents("a").size()>0){
					return;
				}
				$a.dialog.switchDialog($dlg);
				$dlg.data("task",true);
				setTimeout(function(){
					if($dlg.data("task"))
						$.dialogDrag.start($dlg,e);
				},100);
				
				//modify by tw，拖拽的mouseup事件绑定在document上，并且在mouseup后自动删除该事件
				$(document).on("mouseup",{"$dlg":$dlg},function(e){
					$dlg.data("task",false);
					$(document).unbind("mouseup",arguments.callee);
					enableSelection();
					return true;
				});
				
				return true;//Mr.t 事件继续传播
			});
		});
	};
	$.dialogDrag = {
		_init:function($dlg) {
			var $shadow = $("#dialogProxy");
			if (!$shadow.size()) {
				$shadow = $($a.frags["dialogProxy"]);
				$("body").append($shadow);
			}
			$("h5", $shadow).html($(dialogDragTarget+" h5", $dlg).html());
		},
		start:function($dlg,event){
				this._init($dlg);
				var $shadow = $("#dialogProxy");
				$shadow.css({
					left: $dlg.css("left"),
					top: $dlg.css("top"),
					marginLeft: $dlg.css("marginLeft"),
					height: $dlg.css("height"),
					width: $dlg.css("width"),
					zIndex:parseInt($dlg.css("zIndex")) +1
				}).show();
				$("div.dialog-content",$shadow).css("height",$("div.dialog-content",$dlg).css("height"));
				$shadow.data("dialog",$dlg);
				//$dlg.css({left:"-10000px",top:"-10000px"});
				$shadow.drager({
					selector:dialogDragTarget,
					stop: this.stop,
					event:event
				});
				return false;
		},
		stop:function(){
			var $shadow = $(arguments[0]);
			var $dlg = $shadow.data("dialog");
			$dlg.css({left:$shadow.css("left"),top:$shadow.css("top")});
			$shadow.hide();
		}
	};
});
/**
 * 对话框
 */
define('app/widgets/window/app-dialog',["app/core/app-jquery","app/core/app-core","app/data/app-ajax","app/core/app-options","app/widgets/drag/app-dialogdrag"],function($,$A,$ajax,$options) {
    //对话框状态
    var DIALOG_STATE ={
        OPENING:0,
        OPENED:1,
        TAG:'_dialog_open_statue'
    };

	/**
	 * 内部方法显示对话框
	 */
	function showDialog($dlg,options){
		 if (options.mask) {
				var $mask = $("#_dialogMask");
				if($mask.size() == 0){
					$("body").append("<div id='_dialogMask' class='dialog-mask'></div>");
				}
				$mask.css("zIndex",$options.zindexs.dialogMask);
				$("#_dialogMask").show();
			 }
		 var $h5 = $("div.dialog-header h5,div.dlg-box-head h5",$dlg);
		 if($h5.length>0&& !$h5.html()){
			 var $ti = $("title",$dlg);
			 var html = $ti.html();
			 $ti.remove();
			 if(!html){
				 html=options["title"]||"对话框";
			 }
			 var icon = $ti.attr("icon")||options.icon;
			 if(icon){
				 html= '<i class="'+icon+'"></i><span>'+html+"</span>";
			 }
			 $h5.html(html);
		 }
		 $dlg.one('hide', function () {
			 if(options.src)
			 	$(options.src).focus();
			 var hideHandle = options['closeCallback'];
			 if(hideHandle && $.isFunction(hideHandle)){
				 hideHandle($dlg,options);
			 }
		 });
	
		 if ($("body").height()<$dlg.height()){
		 	$dlg.height($("body").height());
		 }

		 	var $dlgContent=$(".dialog-content",$dlg);
			 var $header=$(".dialog-header,.dlg-box-head",$dlg);
			 $header.on("selectstart",function(){return false;});
			 $header.on("copy",function(){return false;});
			 $header.on("paste",function(){return false;});
			 $header.on("cut",function(){return false;});
			 var $footer=$(".dialog-footer",$dlg);
			 	var height=Math.min($dlg.height(),$(document).height());
			 	var ch=$dlg.outerHeight()-$header.outerHeight()-$footer.outerHeight();
				$dlgContent.innerHeight(ch);
				if (options.width){

					if ($dlgContent.outerWidth()>options.width){

						$dlg.width($dlgContent.outerWidth())
					}
				}
			 	
		 $A.dialog.relayout($dlg);
		
	
		
		 $A.dialog.setCurrent($dlg);
		 var callback = options['callback'];
		 if(callback && $.isFunction(callback)){
			 callback($dlg,options);
		 }
		 	if (options&&options.afterShow){
				options.afterShow.call(this,$dlg);
		}
		 	
		 if(options.mode=="url"){
		  $dlg.on($A.eventType.pageLoad,function(){
					timeout = setTimeout(function() {
						$dlg.css("visibility", "");
						$dlg.show();
					}, 50);
					
					
					
		})
		 	}else{
		 		
		 		$dlg.css("visibility", "");
				$dlg.show();
		 	}

        $dlg.data(DIALOG_STATE.TAG,DIALOG_STATE.OPENED);
	 };
	/**
	 * 对话框堆栈
	 */
	$A.dialog = {
		_op:{
			hasheader:true,
			mask:true, 
			dragTarget:null,
			drawable:true,
			reload:true,
			mode:"url",
			beforShow:function(){},
			afterShow:function(){},
			afterClose:function(){}
		},
		_current:[],
		_zIndex:42,
		/**
		 * 取得当前对话框
		 */
		getCurrent:function(){
			if(this._current.length==0)
				return null;
			return this._current[this._current.length-1];
		},
		getDialog:function(dlgId){
			for(var i=0,n=this._current.length;i<n;i++){
				if(this._current[i].is("#"+dlgId)){
					return this._current[i];
				}
			}
			return null;
		},
		/**
		 * 取得当前对话框
		 */
		relayout:function($dlg){
			if(!$dlg)
				$dlg = this.getCurrent();
			$dlg.css( "left", Math.max(($(window).width() - $dlg.width())/2,0) + "px" );
			$dlg.css( "top",  Math.max((document.body.clientHeight - $dlg.height())/2,0) + "px" );
			
		},
		/**
		 * 重新载入对话框内容
		 */
		reload:function(url, options){
			var $dlg = (options.dialogId && $("#_dialogs #"+options.dialogId)) || this.getCurrent();
			if (!$dlg||$dlg.size()==0)
				return;
			var op = $.extend({},$dlg.data("options"), options);
			$dlg.data("options",op);
			if(op.hasheader)
				$dlg.find(">:not(:first)").remove();
//			else
//				$dlg.html("");
			$dlg.data("url",url);
			if(op.reload){
				$dlg.attr("reload","true");
			}else{
				$dlg.removeAttr("reload");
			}
			if(options.mode=="url"){
				  
				var p = {
					type:"POST", 
					url:url,
					data:op.params,
					history:false,
					operator: op.operator ? op.operator : "append",
					callback:function(response){
						
					
						//$dlg.find("[layoutHeight]").layoutHeight($dlg);
						$(".btn.close", $dlg).click(function(){
							$A.dialog.close($dlg);
							return false;
						});
						if (op.dragTarget){
							$dlg.dialogDrag(op);
						}else if(op.drawable&&!op.hasheader){
							$dlg.dialogDrag(op);
						}
						 $A.dialog.setCurrent($dlg)
						if (options && options.beforShow) {
							options.beforShow.call(this, $dlg);
						}
						//$dlg.css("visibility","hidden");

						showDialog($dlg, op);
					},error:function(){
						  $dlg.data(DIALOG_STATE.TAG,"");
					}
				};
				if(options.onPageLoad){
					p["onPageLoad"] = options.onPageLoad;
				}
				if(options.beforePageInit){
					p["beforePageInit"] = options.beforePageInit;
				}	
				$dlg.loadAppURL(p);
			
			}else if(options.mode=="html"){
				$dlg.append(url);
				//$dlg.find("[layoutHeight]").layoutHeight($dlg);
				$(".btn.close", $dlg).click(function(){
					$A.dialog.close($dlg);
					return false;
				});
				if (options && options.beforShow) {
							options.beforShow.call(this, $dlg);
						}
				//add by tw 在initPageUI之后在重新计算一次位置
				$dlg.one($A.eventType.pageLoad,{"$dlg":$dlg},function(e){
					$A.dialog.relayout(e.data.$dlg);
				});
				
				$dlg.initPageUI();
				showDialog($dlg,op);
			}else if(options.mode=="node"){
				if(options.hasheader){
	                $dlg.find(">:not(.dialog-header)").remove();
				}else{
					$dlg.empty();
				}
				$dlg.append($(url));
				//$dlg.find("[layoutHeight]").layoutHeight($dlg);
				$(".btn.close", $dlg).click(function(){
					$A.dialog.close($dlg);
					return false;
				});
				if(options.onPageLoad){
					$dlg.one($A.eventType.pageLoad,{"$dlg":$dlg},function(e){
						options.onPageLoad(options,$dlg);
						
						
					});
				}
				$dlg.initPageUI();
				if (options && options.beforShow) {
					options.beforShow.call(this, $dlg);
				}
						
				$dlg.dialogDrag(options);
						
				showDialog($dlg,op);
			}
			
		},
		/**
		 * 打开对话框
		 */
		open:function(url, dlgid, title, options) {
			var $dialogs = $('#_dialogs');
			if($dialogs.size() == 0){
				$('body').append('<div id="_dialogs"></div>');
				$dialogs = $('#_dialogs');
			}
			if(typeof url == "object"){
				options=url;
				url=options.url;
				dlgid=options.dialogId;
				title=options.title;
			}else if(typeof dlgid == "object"){
				options=dlgid;
				dlgid=options.dialogId;
				title=options.title;
			}else if(typeof title == "object"){
				options=title;
				title=options.title;
			}
			var $dlg = $("#"+dlgid,$dialogs);
			if($dlg.size() == 0 && url=="#")
				 return;
			if(!dlgid){
				dlgid = "dialog"+$A.nextId();
			}
			options["dialogId"]=dlgid;
			options["title"]=title;
			var op = $.extend({},$A.dialog._op, options);
			//重复打开一个层
			if($dlg.size()>0) {
//				if(width>0){
//					$dlg.css("width",width);
//					$dlg.css("marginLeft",0-width/2);
//				}
                //获取dialog 目前状态
                var dlgOpState = $dlg.data(DIALOG_STATE.TAG);
                if(dlgOpState===DIALOG_STATE.OPENING){
                    return;
                }
                $dlg.data(DIALOG_STATE.TAG,DIALOG_STATE.OPENING);

				if(op.reload || url != $dlg.data("url")){
					this.reload(url,op);
				}else{
					showDialog($dlg,op);
				}
				//初始化对话框时，加载自定义绑定数据
				$dlg.removeData("bindData");
				if(op.bindData){
					$dlg.data("bindData",op.bindData);
				}

			} else { //打开一个全新的层
				if(op.hasheader){
					var ht=$template($A.frags["dialogFrag"],op);
					$dialogs.append($(ht.toString()));
				}else{
					var ht=$template($A.frags["dialogNoHeaderFrag"],op);
					$dialogs.append($(ht.toString()));
				}
				$dlg = $(">.dialog:last-child", $dialogs);
				//对话框添加状态
                $dlg.data(DIALOG_STATE.TAG,DIALOG_STATE.OPENING);
                //初始化对话框时，加载自定义绑定数据
				if(op.bindData){
					$dlg.data("bindData",op.bindData);
				}
				
				($.fn.bgiframe && $dlg.bgiframe());
				/*注册事件*/
				var pageLoad = op[$A.eventType.pageLoad];
				if(typeof pageLoad =="function"){
					$dlg.on($A.eventType.pageLoad,pageLoad);
				}else if(op.pageLoad===false){
					$dlg.unbind($A.eventType.pageLoad);
				}
//				if(width>0){
//					$dlg.css("width",width);
//					$dlg.css("marginLeft",0-width/2);
//				}
				
				$dlg.find(".dialog-header").find("h5").html(title);
				 if(options.width){
					 $dlg.css( "width", options.width);
				 }
				 if(options.height){
					// $dlg.css( "height", options.height);
				 		$dlg.innerHeight(options.height);
					 
				 }
				if(!op.mask){
					$dlg.click(function(){
						$A.dialog.switchDialog($dlg);
					});
				}
				
//				if(op.resizable)
//					$dlg.jresize();
				
				if(op.drawable&&op.hasheader)
					$dlg.dialogDrag();
				$("a.close", $dlg).click(function(event){ 
					$A.dialog.close($dlg,event);
					return false;
				});
				
//				$("div.dialog-header a", $dlg).mousedown(function(){
//					return false;
//				});
				$dlg.attr("reload",op.reload);
				this.reload(url,op);
				return $dlg;
			}
		},

		/**
		 * 设置当前对话框
		 */
		setCurrent:function($dlg) {
			var old = this.getCurrent();
			if(old&&old.is($dlg))
				return;
			$dlg.css("zIndex", ($options.zindexs.dialog));
			this._current.push($dlg);
			if(old)
				old.css("zIndex",$options.zindexs.dialogBack);
		},
		/**
		 * 切换当前层
		 * @param {Object} dialog
		 */
		switchDialog:function($dlg) {
			if($dlg == null || $dlg.length == 0)
				return;
			if($dlg.is(this.getCurrent()))
				return;
			var index = $dlg.css("zIndex");
			if(this.getCurrent()) {
				var cindex = $(this.getCurrent()).css("zIndex");
				$(this._current).css("zIndex", index);
				$dlg.css("zIndex", cindex);
				for(var i = 0; i< this._current.length; i++){
					if($dlg.equalObject(this._current[i])){
						this._current.splice(i,1);
					}
				}
				this._current.push($dlg);
			}
		},
		/**
		 * 关闭对话框
		 */
		close:function($dlg,event) {
			if ($dlg){
			var opt=$dlg.data("options");
			if (opt&&opt.beforeClose){
				
				if (opt.beforeClose.call(this,$dlg,event) === false){
					
					return;
				}
				
			}}
			if(typeof $dlg == 'string') 
				$dlg = $("#_dialogs #"+$dlg);
			if($dlg == null || $dlg.length == 0)
				return;
			$dlg.css("display","none");
			for(var i = 0; i< this._current.length; i++){
				if($dlg.equalObject(this._current[i])){
					this._current.splice(i,1);
				}
			}
			var cr= this.getCurrent();
			
			if(cr!=null)
				cr.css("zIndex", $options.zindexs.dialog);
			else
				$("#_dialogMask").hide();
			$dlg.trigger("hide");
			if($dlg.attr("reload")=="true"){
				$A.destroyDom($dlg);
				$dlg.trigger($A.eventType.pageDestroy).remove();
			}
			if (opt&&opt.afterClose){
				opt.afterClose.call(this,$dlg)
			}
		},
		/**
		 * 关闭当前对话框
		 */
		closeCurrent:function(){
			this.close(this.getCurrent());
		},
		//添加绑定数据功能
		getBindData:function($dlg){
			if(!$dlg){
				$dlg = this.getCurrent();
			}
			return $dlg.data("bindData");
		},
		checkTimeout:function(){
			var $conetnt = $(".dialog-content", this.getCurrent());
			var json = $A.jsonEval($conetnt.html());
			if (json && json.statusCode == $A.statusCode.timeout) this.closeCurrent();
		}
	};
	
	/**
	 * 对话框
	 */
	$.fn.closeDialog = function(){
		$A.dialog.close($(this));
	};
	
	$.fn.showDialog = function(){
		 $A.dialog.setCurrent($(this));
		 $(this).show();
	};
	/**
	 * 定义全局方法
	 */
	$.closeDialog = function($dlg){
		if($dlg){
			$dlg.closeDialog();
		}else{
			$A.dialog.closeCurrent();
		}
	};
	/**
	 * 定义全局方法
	 */
	$.openModalDialog = function(options){
		return $A.dialog.open(options);
	};
	
	$(document).on('click',"a[target=dialog]", function (e) {
		e.preventDefault();
		var $this = $(this);
		var opt = $this.getJsonAttr("_dialog_options");
		$.openModalDialog(opt);
	});
	
	return $A.dialog;
	
});




define('bs-http-plugin/base-pluginvoke',["app/core/app-class",
    "app/core/app-attribute",
    "app/core/app-events",
    "bs-http-plugin/config",
    "bs-http-plugin/data-transmit/socket",
    "bs-http-plugin/util/uuid",
    "app/widgets/window/app-dialog",
    "app/widgets/window/app-messager",
    "base/dotpl-js",
    "app/app-funcbase",
    "base/base64"
], function (Class, Attribute, Events,Config,Socket,uuid) {

    //状态
    var STATE = {
        initParams:{
            code:0,
            name:'initializing',
            msg:'初始化'
        },
        initialized:{
            code:1,
            name:'',
            msg:'初始化完成'
        },
        state:function(name,op){
            return $.extend(true,{},STATE[name],op);
        }
    };


    /**
     * @desc 使用请引入 'bs-http-plugin/base-pluginvoke'
     * @class
     * @classdesc dll http 调用基类
     * @name base-pluginvoke
     * @extends Class
     *
     */
    var BasePluginvoke = Class.create({
        Implements: [Attribute, Events],
        /**
         * @type {string} dll名称，可在第一次实例化时指定
         * @memberOf base-pluginvoke
         * @instance
         * @example
         * var p = BasePluginvoke.create({
         *      module:'print',
         *      config:{appId:'xxxx'}
         *  });
         */
        module:'',
        /**
         *
         * @type {object}  dll名称 ，可在第一次实例化时指定。
         * @memberOf base-pluginvoke
         * @example
         * BasePluginvoke.getInstance({
		 * 	config:{
		 * 		appId:'xxxx'
		 * 	}
		 * })
         *@instance
         */
        config:{appId:'bosssoft'},
        /**
         *
         * @type {boolean}  调用博思客户端助手失败时是否自动弹出帮助对话框,如果设置为true请配置url地址。
         * @memberOf base-pluginvoke
         * @example
         * var instance = BasePluginvoke.getInstance({
		 * 	config:{
		 * 		appId:'xxxx'
		 * 	},
		 * 	isShowHelp:true
		 * })
         * instance.enableShowHelp();
         * instance.enableShowHelp('downloadUrl');
         * instance.disableShowHelp();
         *@instance
         */
        isShowHelp:true,

        /**
         *
         * @private
         * @type {string} 博思客户端下载地址
         * @memberOf base-pluginvoke
         * @example
         * var instance = BasePluginvoke.getInstance({
		 * 	config:{
		 * 		appId:'xxxx'
		 * 	},
		 * 	isShowHelp:true,
		 * 	downloadUrl:'xxxxxxxxxxx'
		 * })
         * BasePluginvoke.setDownloadUrl('xxxxxxxxxx');
         *@instance
         */
        downloadUrl:Config.downloadUrl,
        /**
         * @memberOf base-pluginvoke
         * @type {array} 自动生成函数列表。
         * @example
         *  var BsPrintX = BasePluginvoke.extend({
         *      functions:[
         *          {
         *           jsName:'initParams',    //js对象实例化后生成的方法吗
         *            dllName:'INIT_PARAMS',  //js对象方法调用后发送的请求参数，proc:'INIT_PARAMS'
         *            initRequired:false      //默认true，需要init返回的$.Deferred() 对象为resolve状态才能执行，为false时不需init返回的Deferred对象
         *        },
         *        'funts'//jsName = 'funts'，dllName = 'funts',initRequired = true
         *      ]
         *      //..........此处省略一坨代码
         * });
         *    var instance = BsPrintX.getIntance();
         *    instance.funts();
         * @instance
         */
        functions:[],
        /**
         * @memberOf base-pluginvoke
         * @type {array} 自动生成函数列表。
         * @example
         *  var BsPrintX = BasePluginvoke.extend({
         *      processes:[
         *          {
         *           jsName:'initParams',    //js对象实例化后生成的方法吗
         *            dllName:'INIT_PARAMS',  //js对象方法调用后发送的请求参数，proc:'INIT_PARAMS'
         *            initRequired:false      //默认true，需要init返回的$.Deferred() 对象为resolve状态才能执行，为false时不需init返回的Deferred对象
         *        },
         *        'funts'//jsName = 'funts'，dllName = 'funts',initRequired = true
         *      ]
         *      //..........此处省略一坨代码
         * });
         *    var instance = BsPrintX.getIntance();
         *    instance.initParams()
         * @instance
         */
        processes:[],
        /**
         * @private
         * @param op
         */
        initialize: function (op) {
            var _self = this;
            $.extend(_self,op);
            if(Config.initUpdate){
                BasePluginvoke.clientUpdate(Config.updateUrl);
            }
            _self.addConfig('version',Config.version);
            if(typeof _self['module'] === "undefined"){
                throw new Error('请设置module属性!');
            }
            //方法初始化functions
            _self.initMethods(_self.functions,'func');
            //过程初始化processes
            _self.initMethods(_self.processes,'proc');
            //初始化
            _self.initStateDefer = _self.init();
        },
        /**
         * @private
         * 初始化方法集
         * @param array
         * @param type
         */
        initMethods:function (array,type) {
            var _self = this;
            if($.isArray(array)){
                $(array).each(function (index,funName,callType) {
                    if(typeof _self[funName] === "undefined"){
                        _self.generateFun(funName,type);
                    }
                })
            }
        },
        /**
         *
         * @private
         * @memberOf base-pluginvoke
         * @description 在调用由functions或者processes方法列表生成的js方法，如果需要添加配置项比如success、
         * error、stateChange等配置项时可先调用operateConfig方法提前设置，然后该方法会返回一个可调用自带function
         * @param operate   dll方法（必填）
         * @param options 方法调用配置（必填）
         * @example
         *  printInstance.operateConfig('doPos',{
         *      stateChange:function (event,state,data) {
         *          console.info('stateChange',state,data,new Date());
         *      }
         *  })('appCode',{Module:'dll'},{A:'AA'}).done(function (data) {
         *      console.log('config dos success',data);
         *  }).fail(function (obj) {
         *      console.log('config dos error',obj);
         *  });
         * @returns {Function}
         * @instance
         */
        operateConfig:function (operate,options) {
            var _self = this;
            if(!$.isFunction(_self[operate])) {
                throw new Error(operate+ " 不是函数...");
            }
            options['-isOptions-'] = true;
            return function () {
                var funcArray = [].slice.apply(arguments);
                funcArray.unshift(options);
                return  _self[operate].apply(_self,funcArray);
            }
        },
        /**
         * @private
         * 生成调用function
         */
        generateFun:function(funObj,callType){
            var _self = this;
            var jsName = '';
            var dllName = '';
            //校验并赋值
            if($.type(funObj)==='string'){
                jsName = dllName = funObj;
            }else if($.type(funObj)==='object'){
                jsName = funObj.jsName;
                dllName = funObj.dllName;
                if($.type(jsName)==='string' && $.type(dllName)==='undefined' ){
                    dllName = jsName;
                }
                if($.type(jsName)==='undefined' && $.type(dllName)==='string' ){
                    jsName = dllName;
                }
                if($.type(jsName)==='undefined' && $.type(dllName)==='undefined' ){
                    throw new Error('必须定义一个jsName 或者 dllName')
                }
            }
            var options = {
                module:_self.module
            };
            options[callType] = dllName;
            //根据-isOptions-属性判断是否是配置对象，如果没有配置对象则自动生成。
            _self[jsName] = function (op) {
                var callOp = _self._initArgs(arguments);
                $.extend(true,callOp,options);
                var operateDefer = _self.newOperation(callOp);
                var exec = function(){
                    return _self.operate.apply(_self,[callOp]);
                }
                //不需要初始化直接执行
                if(funObj.initRequired===false){
                    exec();
                    return operateDefer;
                }
                $.when(_self.initStateDefer)
                .done(function () {
                    exec();
                })
                .fail(function(){
                    operateDefer.reject.apply(operateDefer,arguments);
                    if(_self.isShowHelp){
                        _self.showHelp();
                    }
                });
                return operateDefer;
            };
        },
        /**
         * @private
         * @returns {object}
         * @instance
         */
        _initArgs:function (args) {
            var funArgs = [].slice.apply(args,[1]);
            var callOp = args[0];
            if(!($.type(callOp)==='object'&&callOp['-isOptions-']===true)){
                callOp = {};
                funArgs = [].slice.apply(args);
            }
            callOp.data = funArgs;
            return callOp;
        },
        /**
         * @private
         * @returns $.Deferred
         * @instance
         */
        newOperation:function (op) {
            return op['-operateDefer'] = $.Deferred();
        },
        setOperation:function (op) {
            if(op['-operateDefer']){
                return op['-operateDefer'];
            }
            return op['-operateDefer'] = $.Deferred();
        },
        /**
         * @private
         * @memberOf base-pluginvoke
         * @description 获取初始化状态$.Deferred对象
         * @returns  $.Deferred()
         * @example
         * printInstance.getInitState();
         * @instance
         */
        getInitState:function () {
            var _self = this;
            return _self.initStateDefer;
        },
        /**
         *
         * @private
         * @description 初始化回调函数，子类需要覆盖，必须返回$.Deferred(); $.Deferred() jquery版的promise实现，虽然不好，将就着用吧，等待兼容高版本浏览器
         * @returns $.Deferred();
         * @see 关于 $.Derferred http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html
         */
        init:function () {
            var defer = $.Deferred();
            defer.resolve();
            return defer;
        },
        /**
         *
         * @memberOf base-pluginvoke
         * @event
         * @virtual
         * @description 调用错误统一回调接口，子类需要覆盖
         * @param data {object} dll调用返回结果
         * @param state {object} 状态
         * @param state.code {number} 状态code
         * @param state.msg {number} 状态中文描述
         * @param state.name {number} 状态英文描述
         * @param ret  {object} dll调用返回结果,包含成功失败code
         * @instance
         */
        onError:function (data, state, ret) {
        },
        /**
         *
         * @memberOf base-pluginvoke
         * @private
         * @description 调用dll的公共操作方法{func:'funName',data:[]}
         * @param {object}  options
         * @param {string}  options.func dll调用方法名，func和proc只能存在一个
         * @param {string}  options.proc dll调用方法名，func和proc只能存在一个
         * @param {array}   object.data dll方法参数列表，按照dll方法参数顺序填写
         * @param {function}   object.stateChange 调用dll方法状态更新回调；第一个参数回调事件，第二个参数为回调返回的数据，只有invoked才有结果，其他都为undefined
         * @param {function}   object.success 调用dll方法成功回调；第一个参数为返回结果，第二个参数为事件
         * @param {function}   object.error 调用dll方法失败回调；第一个参数为返回结果，第二个参数为事件
         * @example
         *  var instantce = BasePluginvoke.create({
         *          module:'print',
         *          config:{
         *              app:'123'
         *          }
         *         });
         * instantce.operate(
         * {
         *    data:[ //dll方法参数列表，按照dll方法参数顺序填写
         *       'templateId',
         *       '001'
         *   ],
         *    func:'queryPrintTemplate',//dll方法名，相对的process为 proc:'queryPrintTemplate'
         *   stateChange:function (event,state,data) {   //调用dll方法状态更新回调
         *       console.info(state,data,new Date());
         *   }
         * }
         * ).done(function (data,state) { //成功后的回调，也可以在options中定义success:function(data,state){}
         *   console.info('done base call success      ',data);
         * }).fail(function (data,state) {//失败后的回调，也可以在options中定义error:function(data,state){}
         *   console.info('base call error      ',data);
         * });
         * @returns $.Deferred();
         *
         * @instance
         */
        operate: function (op) {
            var _self = this;
            var operateDefer = _self.setOperation(op);
            var id = uuid.v4().replace(/-/g,'');
            var data = {
                id:id,
                payload:Base64.encode(JSON.stringify({
                    config:_self.config,
                    data:op.data
                }))
            };
            if(op.func){
                data.func = op.func;
            }else if(op.proc){
                data.proc = op.proc;
            }
            var options = $.extend({},op,{
                id:id,
                url:Config.url + _self.module,
                data:data,
                sliceSize:op.sliceSize
            });
            //当发生错误时，回调onError
            var socketDefer = Socket.sendByIframe(options);
            var heartbeat = BasePluginvoke.heartbeat().fail(function () {
                _self.getInitState().reject.apply(_self.getInitState(),arguments);
                if(_self.isShowHelp){
                    _self.showHelp();
                }
            });
            var deferArray = [
                heartbeat,
                operateDefer,
                socketDefer
            ];
            $.when.apply($,deferArray).fail(function () {
                var args = [];
                args = args.concat([].slice.call(arguments,0));
                _self.onError.apply(_self,args);
                operateDefer.rejectWith(op,args);
            })
            return operateDefer;
        },
        /**
         * @memberOf base-pluginvoke
         * @private
         * @description 添加config配置
         * @example printInstance.addConfig('key',1);
         * @param key
         * @param value
         * @instance
         */
        addConfig:function (key,value) {
            if($.type(key)!=='string'){
                return;
            }
            this.config[key] = value;
        },
        /**
         *
         * @private
         * @description 删除config配置
         * @example printInstance.removeConfig('key');
         * @param key
         * @instance
         */
        removeConfig:function (key) {
            delete this.config[key];
        },
        /**
         * 注销方法
         * @private
         * @instance
         */
        destroy: function () {
            for (var p in this) {
                if (this.hasOwnProperty(p)) {
                    delete this[p];
                }
            }
        },
        /**
         * 绑定事件
         * @private
         * @param eventName
         * @param eventCallFun
         * @instance
         */
        bind: function (eventName, eventCallFun) {
            this.on(eventName, eventCallFun, this);
        },
        /**
         * 解除绑定
         * @private
         * @param eventName
         * @instance
         */
        unbind: function (eventName) {
            if (typeof eventName == "string") {
                this.off(eventName, null, this);
            }
        },
        /**
         * @private
         * @description  启用自动弹出帮助窗口,请配置url地址。
         * @memberOf base-pluginvoke
         * @param {string} url 下载url
         * @example
         * instance.enableShowHelp();
         * instance.enableShowHelp('downloadUrl');
         *@instance
         */
        enableShowHelp:function (url) {
            this.setDownloadUrl(url);
            this.isShowHelp = true;
        },
        /**
         *
         * @description  禁用自动弹出帮助窗口
         * @memberOf base-pluginvoke
         * @private
         * @example
         * instance.disableShowHelp();
         *@instance
         */
        disableShowHelp:function () {
            this.isShowHelp = false;
        },
        /**
         * @private
         * @description  配置下载url
         * @memberOf base-pluginvoke
         * @param {string} url 下载url
         * @example
         * instance.setDownloadUrl('xxxx');
         *@instance
         */
        setDownloadUrl:function (url) {
            // if($.type(url)==='string'){
            //     this.downloadUrl = url;
            // }
        },
        /**
         * @memberOf base-pluginvoke
         * @private
         * @description 添加config配置
         * @example printInstance.addConfig('key',1);
         * @instance
         */
        showHelp:function () {
            var _self = this;
            if($('#bsClientHelpDlg').length){
                return;
            }
            var html = '\
                    <div class="dlg-box-head" id="unInstallControl_dialog" style="height:50px;">\
                    <div class="dlg-box-head-left" id="dragTarget" style="height:40px;width:480px;display:inline;">\
                      <span class="dlg-box-head-title" style="font-size:18px">控件提示</span> <span class="dlg-box-head-text"></span>\
                        </div>\
                    <div class="dlg-box-head-right" style="width:60px;float:right;display:inline;">\
                    </div>\
                    </div>	\
                    <div class="dialog_content" style="height: 210px;">\
                    <div style="box-sizing: border-box;height:100px;padding:40px 20px 20px 20px;;font-size:16px;font-weight:normal;text-align:center;">本系统需要安装    <span style="color:red;">博思客户端助手</span>   才能保证正常运行</div> \
                    <div style="height:60px;padding:20px 20px;font-size:16px;font-weight:normal;text-align:center;"> \
                    <a id="startBtn" class="app-button l-btn l-btn-small" style="height:35px;background:#449d44;color:#fff;margin-right:20px;filter:none;">\
                            <span class="l-btn-left">\
                                <span class="l-btn-text" style="font-size:14px;padding-top:3px;">启动博思客户端</span>\
                            </span>\
                        </a>\
                    <a id="handlerStartBtn" data-url="${startUrl}" class="app-button l-btn l-btn-small" \style="height:35px;background: rgba(206, 52, 38, 0.8);color:#fff;margin-right:20px;filter:none;display:none;">\
                            <span class="l-btn-left">\
                                <span class="l-btn-text" style="font-size:14px;padding-top:3px;">手动启动博思客户端</span>\
                            </span>\
                        </a>\
                    <a id="downBtn" data-url="${downloadUrl}" class="app-button l-btn l-btn-small" \style="height:35px;background:#ec971f;color:#fff;margin-right:20px;filter:none;">\
                            <span class="l-btn-left">\
                                <span class="l-btn-text" style="font-size:14px;padding-top:3px;">下载博思客户端助手</span>\
                            </span>\
                        </a>\
                    <a id="closeBtn" class="app-button l-btn l-btn-small" style="height:35px;background:#e6e6e6;color:#333;margin-right:20px;">\
                            <span class="l-btn-left">\
                                <span class="l-btn-text" style="font-size:14px;padding-top:3px;">关闭提示</span>\
                            </span>\
                        </a>\
                    </div> \
                    </div>';

            // 获取未安装打印控件界面
            var $node = $(dotpl.applyTpl(html,{
                downloadUrl:_self.downloadUrl,
                startUrl:Config.startUrl
            }));
            $node.find('#downBtn').on('click',function () {
                window.open($(this).data('url'),'下载博思客户端')
            });
            $node.find('#handlerStartBtn').on('click',function () {
                window.open($(this).data('url'),'通过浏览器手动启动博思客户端')
            });
            $node.find('#startBtn').on('click',function () {
                var timeout = 2500;
                Socket.get({
                    url:Config.guardUrl+"?ct=2",
                    timeout:10000,
                    data:{
                        payload:{

                        }
                    }
                }).done(function () {
                    $('#bsClientHelpDlg').fadeOut(1000);
                    $A.messager.correct('启动成功!',3000);
                    setTimeout(function () {
                        $('#bsClientHelpDlg').closeDialog();
                        if(Config.initUpdate){
                            BasePluginvoke.clientUpdate(Config.updateUrl);
                        }
                    },timeout);
                }).fail(function () {
                    $A.messager.warn('启动失败，请尝试手动启动或重新安装博思客户端...');
                    $('#startBtn').hide();
                    $('#handlerStartBtn').css('display','inline-block');
                }).always(function () {
                });
            });
            // 绑定取消事件
            $node.find("#closeBtn").bind("click",function(){
                $('#bsClientHelpDlg').closeDialog();
            });
            var options = {
                dialogId : "bsClientHelpDlg",
                hasheader : false,
                height : '260px',
                width : '200px',
                mode : "node",
                url : $node,
                beforeClose:function () {

                },
                onPageLoad:function(){

                }
            }
            $.openModalDialog(options);
        },

        Statics:{
            /**
             * @static
             * @memberOf base-pluginvoke
             * @function create
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)

             * @param {string} op.module 模块名称(<span style="color:red">必填</span>)
             * @example
             *         var instantce = BasePluginvoke.create({
             *          module:'print',
             *          config:{
             *              app:'123'
             *          }
             *         });
             */
            create:function (op) {
                return new BasePluginvoke(op);
            },
            /**
             * @static
             * @function heartbeat
             * @memberOf base-pluginvoke
             * @param {number} time
             * @description 心跳检查bs客户端是否启动。心跳检查响应时间设置，默认是3000毫秒
             * @example
             * BasePluginvoke.heartbeat(1500).done(function(){
             *  console.log('success');
             * }).fail(function(){
             *  console.log('error');
             * })
             */
            heartbeat:function (time) {
                if(!$.isNumeric(time)){
                    time = Config.timeout;
                }
                var heart = $.Deferred();
                var jsonp = 'heartbeat_'+ uuid.v4().replace(/-/g,'');
                window[jsonp] = function () {
                    heart.resolve();
                }
                var headNode = document.getElementsByTagName('head')[0];
                var scriptNode = document.createElement('script');
                scriptNode.type = 'text/javascript';
                scriptNode.charset = 'utf-8';
                scriptNode.async = true;
                scriptNode.src = Config.url + Config.heartbeat + '?jsonp='+jsonp;
                var step = time/2;
                var timeconsum = 0;
                var interval = setInterval(function () {
                    timeconsum += step;
                    if(timeconsum>=time){
                        window[jsonp] = undefined;
                        clearInterval(interval);
                        if(heart.state() == 'pending'){
                            heart.reject({code:'timeout',msg:'超时'})
                        }
                    }
                },step);
                headNode.appendChild(scriptNode);
                return heart;
            },
            clientUpdate:function (url,time) {
                if(!$.isNumeric(time)){
                    time = Config.timeout;
                }
                return Socket.get({
                    url:Config.url+Config.update,
                    timeout:time,
                    data:{
                        url:url,
                        payload:{

                        }
                    }
                }).done(function () {

                }).fail(function () {

                });
            }
        }
    });



    return BasePluginvoke;
});

define('bs-http-plugin/util/img-lazyload',["jquery"
], function (jQuery) {

    /**
     * Created by qiuyong on 2017/7/19.
     * 参考：https://zhuanlan.zhihu.com/p/24057749?refer=dreawer
     */
    (function ($) {
        /**
         * 防抖动函数
         * @param fun
         * @param delay
         * @param time
         * @return {Function}
         */
        function throttle(fun,args, delay, time) {
            var timeout,
                startTime = new Date();
            return function(e) {
                var context = this,
                    curTime = new Date();
                args.push(e);
                clearTimeout(timeout);
                // 如果达到了规定的触发时间间隔，触发 handler
                if (curTime - startTime >= time) {
                    fun.apply(context, args);
                    startTime = curTime;
                    // 没达到触发间隔，重新设定定时器
                } else {
                    timeout = setTimeout(function () {
                        fun.apply(context, args);
                    }, delay);
                }
            };
        };

        function onload(img, fn) {
            var timer = setInterval(function() {
                if (img.complete) {
                    fn(img)
                    clearInterval(timer)
                }
            }, 500)
        }

        function lazyload($contanier,imgSel,defImg,onloadFn){
            var imgs = $contanier.find(imgSel);
            //过滤已经正在延迟加载的
            imgs = imgs.filter(function(index,img){
                if($(img).attr('lazyloaded')) return false;
                return true;
            })
            $(imgs).each(function (index,item) {
                var $img = $(item);
                if (item.offsetTop < parseInt($contanier.height()) + parseInt($contanier.scrollTop())) {
                    if ($img.attr('src') === defImg) {
                        $img.attr('lazyloaded',true);
                        var src = $img.attr("data-src");
                        //加载中图片隐藏
                        var $loadImg = $(document.createElement('img'));
                        $loadImg.attr('src',src);
                        $('body').append($loadImg);
                        $loadImg.hide();
                        onload($loadImg[0],function () {
                            $img.attr("src", src);
                            $loadImg.remove();
                            onloadFn($img);
                        })
                    }
                }
            })
        }

        $.fn.extend({
            imgLazyLoad:function (imgSel,defImg,onloadFn) {
                var $contanier =  $(this);
                onloadFn = $.isFunction(onloadFn)?onloadFn:$.noop;
                $contanier.find(imgSel).each(function(index,img){
					if(!$(img).attr('lazyloaded')){
						$(img).attr('src',defImg);
					}
				})
                $contanier.scroll(throttle(lazyload,[$contanier,imgSel,defImg,onloadFn],500,1000));
                lazyload($contanier,imgSel,defImg,onloadFn);
            }
        });
    })(jQuery);


});

define('bs-http-plugin/bs-print',['bs-http-plugin/base-pluginvoke',
    "bs-http-plugin/data-transmit/socket",
    "bs-http-plugin/config",
    "bs-http-plugin/util/img-lazyload",
], function (BasePluginvoke, Socket, Config) {


    /**
     * @desc 打印控件 使用请引入 'bs-http-plugin/bs-print'
     * @class
     * @classdesc
     * @name bs-print
     * @extends base-pluginvoke
     */
    var BsPrint = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-print
         * @instance
         * @example
         * module:'print'
         */
        module: 'print',
        /**
         * @description 自动生成函数列表
         */
        functions: [

            {
                jsName: 'initParams',  //js对象实例化后生成的方法吗
                dllName: 'initParams',//js对象方法调用后发送的请求参数，func:'initParams'
                initRequired: false////默认true，需要init返回的$.Deferred() 对象为resolve状态才能执行，为false时不需init返回的Deferred对象
            },

            /**
             * @function doPrintRemoteImage
             * @instance
             * @memberOf bs-print
             * @description 打印图片
             * @param {object} options
             * @param {object} options.PrintPreview  是否预览 默认值false
             * @param {object} options.ShowPrintSet  是否显示打印份数设置 默认值false
             * @param {int} options.ShowMode  1：裁剪、2：铺满、3：按比例缩放、4：完整显示、5：平铺 。默认值4
             * @param {object} options.PrintSet
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doPrintRemoteImage({
             *      Url: "",
             *      PrintPreview: true, //是否预览
             *      ShowPrintSet: true, //是否显示打印份数设置
             *      ShowMode: 4,        //1：裁剪、2：铺满、3：按比例缩放、4：完整显示、5：平铺
             *      Name: "" ,           //打印任务名称
             *      PrintSet:{}         //打印设置，默认获取ModuleId:00000000
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            "doPrintRemoteImage",

            /**
             * @deprecated 已废弃，不建议使用
             * @function getTemplateList
             * @instance
             * @memberOf bs-print
             * @description 一种票据可能会配置多个模板，所以通过ModuleId可以获取到多个模板
             * @param {object} options
             * @param {string} options.ModuleId 模块编号
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getTemplateList({
			 * 	ModuleId:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getTemplateList',

            /**
             * @deprecated 已废弃，不建议使用
             * @function getDefaultTemplete
             * @instance
             * @memberOf bs-print
             * @description 获取默认模板
             * @param {object} options
             * @param {string} options.ModuleId 模块ID
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getDefaultTemplete({
			 * 	ModuleId:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getDefaultTemplete',


            /**
             * @deprecated 已废弃，不建议使用
             * @function getLocal
             * @instance
             * @memberOf bs-print
             * @description 获取存储本地信息
             * @param {object} options
             * @param {string} options.Node 模块编号
             * @param {string} options.Key 模块编号
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getLocal({
			 * 	Node:'xxxx',
			 * 	Key:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getLocal',

            /**
             * @deprecated 已废弃，不建议使用
             * @function setLocal
             * @instance
             * @memberOf bs-print
             * @description 存储本地信息
             * @param {object} options
             * @param {string} options.Node 模块编号
             * @param {string} options.Key 模块编号
             * @param {string} options.Value 模块编号
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.setLocal({
			 * 	Node:'xxxx',
			 * 	Key:'xxxx',
			 * 	Value:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'setLocal',


            /**
             * @function getPrinter
             * @instance
             * @memberOf bs-print
             * @description 获取预览图片
             * @param {object} options
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet     打印设置
             * @param {string} options.PrintTemplateUrl 打印模板地址
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getPrinter({
			 * 	PrintData:{...},
			 * 	PrintSet:{...},
			 * 	PrintTemplateUrl:{...}
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getPrinter',

            /**
             * @function setPrinter
             * @instance
             * @memberOf bs-print
             * @description 打印设置
             * @param {object} options
             * @param {string} options.ModuleId 模块编号
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.setPrinter({
			 * 	ModuleId:''
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'setPrinter',

            /**
             * @function getPrintSet
             * @instance
             * @memberOf bs-print
             * @description 获取打印设置
             * @param {object} options
             * @param {object} options.ModuleId 模块编号
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getPrintSet({
			 * 	ModuleId:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getPrintSet',


            /**
             * @deprecated 已废弃，不建议使用
             * @function getTemplatePath
             * @instance
             * @memberOf bs-print
             * @description 获取模板路径
             * @param {object} options
             * @param {string} options.ModuleId 模块ID
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getTemplatePath({
			 * 	ModuleId:''
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getTemplatePath',


            /**
             * @function getPrintPreviewImage
             * @instance
             * @memberOf bs-print
             * @description 获取预览图片
             * @param {object} options
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet     打印设置
             * @param {string} options.PrintTemplateUrl 打印模板地址
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.getPrintPreviewImage({
			 * 	PrintData:{...},
			 * 	PrintSet:{...},
			 * 	PrintTemplateUrl:'xxx'
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'getPrintPreviewImage',

            /**
             * @function doDesign
             * @instance
             * @memberOf bs-print
             * @description 打印模板设计
             * @param {object} options
             * @param {string} options.LoadReportURL 模板加载地址
             * @param {string} options.SaveReportURL 模板保存地址
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doDesign({
			 * 	SaveReportURL:'xxxx',
			 * 	LoadReportURL:'xxxx'
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doDesign',

            /**
             * @function doPreview
             * @instance
             * @memberOf bs-print
             * @description 打印预览。支持批量打印，PrintData传入数组，PrintSize参数是切割PrintData，每次发送的大小
             * @param {object} options
             * @param {string} options.LoadReportURL 模板加载地址
             * @param {boolean} options.PrintPreview 是否打印预览
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet 打印设置
             * @param {integer} options.PrintSize 打印或者预览每次发送数据大小，默认打印全部
             * @param {function} options.ProcessChange 打印或者预览处理回调函数
             * @param {function} options.PrintCallBack 打印按钮回调函数，预览的时候才有打印按钮
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doPreview({
			 * 	LoadReportURL:'xxxx',
			 * 	PrintPreview:false,
			 * 	PrintData:{...},
			 * 	PrintSet:{...}
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doPreview',

            /**
             * @function printReport
             * @instance
             * @memberOf bs-print
             * @description 打印报表
             * @param {object} options
             * @param {boolean} options.PrintPreview 是否打印预览
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet 打印设置
             * @param {object} options.Header 报表头
             * @param {object} options.Detail 详细数据
             * @param {integer} options.ColumnPrintAdaptMethod 打印适配方法
             * @returns {object}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.printReport({
			 * 	PrintPreview:false,
			 * 	PrintData:{...},
			 * 	PrintSet:{...},
			 * 	Header:{...},
			 * 	Detail:{...},
			 * 	ColumnPrintAdaptMethod:1
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'printReport',

            /**
             * @function doPrintMultiSubReport
             * @instance
             * @memberOf bs-print
             * @description  打印多重子报表
             * @param {object} options
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet     打印设置
             * @param {string} options.LoadReportURL 模板加载地址
             * @param {object/array} options.SubReports 子报表数据
             * @param {boolean} options.PrintPreview 是否打印预览
             * @param {object} options.Groups 打印控制等信息
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doPrintMultiSubReport({
			 * 	PrintData:{...},
			 * 	PrintSet:{...},
			 * 	LoadReportURL:'xxxxx',
			 * 	SubReports:{...},
			 * 	PrintPreview:false,
			 * 	Groups:{...}
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doPrintMultiSubReport',

            /**
             * @function doCoordinate
             * @instance
             * @memberOf bs-print
             * @description 点阵打印
             * @param {object} options
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet     打印设置
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doCoordinate({
			 * 	PrintData:{...},
			 * 	PrintSet:{...}
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doCoordinate',
            /**
             * @function doCustomPrint
             * @instance
             * @memberOf bs-print
             * @description 自定义打印
             * @param {object} options
             * @param {object} options.PrintData 打印数据
             * @param {object} options.PrintSet     打印设置
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.doCustomPrint({
			 * 	PrintData:{...},
			 * 	PrintSet:{...}
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doCustomPrint',


            /**
             * @function openFile
             * @instance
             * @memberOf bs-print
             * @description 选择文件夹
             * @param {object} options
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.openFile().done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'openFile',

            /**
             * @function exportMedia
             * @instance
             * @memberOf bs-print
             * @description 导出多媒体文件
             * @param {object} options
             * @param {object} options.PrintData    打印数据
             * @param {object} options.PrintSet     打印设置
             * @returns {string}
             *
             * @example
             * var print = BsPrint.getInstance();
             * print.exportMedia({
                    "PrintData": [{
                        "Name": "导出文件名",
                        "Data": {}
                    }],
                    "PrintSet": {},
                    "ExportType": "PDF/Excel(默认PDF)",
                    "LoadReportURL": "模板地址(支持http下载模板和使用本地模板)",
                    "tempVersion": "模板版本"
			 * }).done(function(data){
			 * 		//TODO show image
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'exportMedia'
        ],
        init: function () {
            var _self = this;
            var initOptions = _self.initOptions;
            var defer = $.Deferred();
            _self.initParams(initOptions).done(function (data, state, Rs) {
                defer.resolve();
            }).fail(function (data, state, Rs) {
                defer.reject({code: -1, msg: '初始化失败！！！！'});
            });
            return defer;
        },

        template: {
            /**
             * 打印预览窗口
             * @type {string}
             */
            printPreViewDialog: '\
                <div class="dlg-box-head">\
                    <div class="dlg-box-head-left">\
                        <span class="dlg-box-head-title">打印预览</span>\
                        <span class="pre-view-msg"></span>\
                    </div>\
                    <div class="dlg-box-head-right">\
                        <div class=" btnarea menubar btn-dlg-toolbar">\
                        </div>\
                    </div>\
                </div>\
                <div class="dialog-content print-pre-view" style="padding: 30px;">\
                </div>',
            /**
             * 打印窗口
             * @type {string}
             */
            printDialog: '\
            <div class="dlg-box-head">\
                <div class="dlg-box-head-left">\
                    <span class="dlg-box-head-title">打印</span>\
                </div>\
            </div>\
            <div class="dialog-content print-pre-view">\
                <span class="print-view-msg"></span>\
            </div>'
        },


        exportMedia: function (data) {
            var self = this;
            return self.openFile().then(function (path) {
                data.ExportPath = path;
                return self.operate({
                    data: [data],
                    func: 'exportMedia'
                })
            })
        },
        /**
         * @return {*}
         */
        doPreview: function () {
            var _self = this;
            var op = _self._initArgs(arguments);
            var dfd = $.Deferred();
            $.when(_self.initStateDefer)
                .done(function () {
                    //初始化参数
                    var index = 0;
                    var dialogOptions = _self.getItem(op, 'DialogOptions');
                    dialogOptions = $.type(dialogOptions) === 'undefined' ? {} : dialogOptions;
                    //是否由前端展示窗体，false的时候由前端展示窗体。默认false
                    var showForm = _self.getItem(op, 'ShowForm');
                    var printPreView = _self.getItem(op, 'PrintPreview');
                    var msgDlg = _self.getItem(op, 'MessageDialog');
                    var defImg = _self.getItem(op, 'DefImg');
                    if ($.type(msgDlg) === 'undefined') {
                        msgDlg = true
                    }
                    showForm = showForm === false ? showForm : true;
                    _self.setItem(op, 'ShowForm', showForm);
                    var isPreview = !showForm && printPreView;
                    //打印数据
                    var printData = _self.getItem(op, 'PrintData');
                    printData = $.isArray(printData) ? printData : [printData];
                    var printLength = printData.length;
                    //打印或者预览每次调用dll的数据大小
                    var frequency = _self.getItem(op, 'PrintSize');
                    frequency = $.isNumeric(frequency) ? frequency : printLength;

                    //打印按钮回调
                    var printCallBack = _self.getItem(op, 'PrintCallBack');
                    printCallBack = _self.isFunction(printCallBack);
                    //过程改变回调
                    var processChange = _self.getItem(op, 'ProcessChange');
                    processChange = _self.isFunction(processChange);

                    //默认图片
                    if(!!!defImg)
                        defImg = $A.getHostUrl() + 'resources/common/themes/images/print/default.gif';
                    var message = {
                        printSuccessMsg: '打印成功！',
                        printErrorMsg: '预览失败！',
                        preViewSuccessMsg: '预览成功！',
                        preViewErrorMsg: '预览成功！',
                        printDoingMsg: '正在打印',
                        preViewDoingMsg: '正在预览',
                        getSuccessMsg: function () {
                            if (printPreView) {
                                return this.preViewSuccessMsg;
                            }
                            return this.printSuccessMsg;
                        },
                        getErrorMsg: function () {
                            if (printPreView) {
                                return this.preViewErrorMsg;
                            }
                            return this.printErrorMsg;
                        },
                        getDoingMsg: function () {
                            if (printPreView) {
                                return this.preViewDoingMsg;
                            }
                            return this.printDoingMsg;
                        }
                    };
                    $.extend(message, _self.getItem(op, 'Message'));

                    //打印图片数组
                    var printImg = [];
                    //保证页面只有一个滚动条
                    var bodyOverflow = $(document.body).css('overflow');
                    $(document.body).css('overflow', 'hidden');
                    //打开对话框配置
                    var html = "";
                    var dlgOptions = {
                        dialogId: "_dlgdoPreViewImg",
                        hasheader: false,
                        title: ' ',
                        height: '75%',
                        width: '60%',
                        mode: "node",
                        buttons: [
                            {
                                id: 'btnPrint',
                                text: '打印',
                                visible: false,
                                click: function () {
                                    op.func = 'doPrintImage';
                                    _self.newOperation(op);
                                    _self.setItem(op, 'PrintData', printImg);

                                    var printDlgOp = $.extend(true, {}, dlgOptions)
                                    printDlgOp.dialogId = "_printDlg";
                                    printDlgOp.beforeClose = $.noop;
                                    printDlgOp.url = dotpl.applyTpl(_self.template.printDialog, {
                                        msg: message.printDoingMsg + '请稍后...'
                                    });
                                    printDlgOp.width = '600px';
                                    printDlgOp.height = '200px';
                                    msgDlg && $.openModalDialog(printDlgOp);
                                    var printDlg = $("#" + printDlgOp.dialogId);

                                    $.when(_self.operate(op)).done(function (data) {
                                        printDlg.find('.print-view-msg')
                                            .removeClass("print-view-msg")
                                            .addClass("print-view-msg-success")
                                            .text(message.printSuccessMsg);
                                        printDlg.fadeOut(2600, function () {
                                            printDlg.closeDialog();
                                        });
                                        dfd.resolve.apply(dfd, arguments);
                                    }).fail(function (data) {
                                        dfd.resolve.apply(dfd, arguments);
                                        printDlg.find('.print-view-msg')
                                            .removeClass("print-view-msg")
                                            .addClass("print-view-msg-success")
                                            .text(message.printErrorMsg);
                                    });
                                    printCallBack();
                                }
                            },
                            {
                                id: 'btnClose',
                                text: '关闭',
                                click: function () {
                                    var $dlg = $('#' + dlgOptions.dialogId);
                                    $dlg.closeDialog();
                                }
                            }
                        ],
                        buttonsExt: [],
                        buttonGen: function () {
                            var $dlg = $('#' + dlgOptions.dialogId);
                            var $right = $dlg.find('.dlg-box-head-right>div');
                            var template = '<a id="${id}" class="app-button hidden l-btn l-btn-large l-btn-plain">\
                                        <span class="l-btn-left l-btn-icon-top">\
                                            <span class="l-btn-text">${text}</span>\
                                            <i class="l-btn-icon add48">&nbsp;</i>\
                                        </span>\
                                    </a>';
                            var buttons = this.buttons.concat(this.buttonsExt);
                            $(buttons).each(function (index, btnOp) {
                                var $button = $(dotpl.applyTpl(template, btnOp));
                                $button.on('click', btnOp.click);
                                btnOp.visible === false && $button.hide();
                                $right.append($button);
                            })
                        },
                        beforeClose: function () {
                            $(document.body).css('overflow', bodyOverflow);
                        }
                    };
                    if (isPreview) {
                        html = _self.template.printPreViewDialog;
                    } else {
                        html = _self.template.printDialog;
                        dlgOptions.height = '220px';
                        dlgOptions.width = '600px';
                    }
                    $.extend(true, dlgOptions, dialogOptions);

                    dlgOptions.url = $(html);
                    if ($('#' + dlgOptions.dialogId).length) {
                        $('#' + dlgOptions.dialogId).closeDialog();
                    }
                    msgDlg && $.openModalDialog(dlgOptions);
                    dlgOptions.buttonGen();
                    var $dlg = $('#' + dlgOptions.dialogId);
                    var $content = $dlg.find('.dialog-content');
                    var $msg = isPreview ? $dlg.find(".pre-view-msg") : $dlg.find(".print-view-msg");

                    doPreView(op, index);

                    function doPreView(options, index) {
                        options.func = 'doPreview';
                        var end = index + frequency;
                        if (end > printLength) end = printLength;
                        _self.setItem(options, 'PrintData', printData.slice(index, end));
                        var curIndex = {
                            index: end == 0 ? 1 : end,
                            total: printLength == 0 ? 1 : printLength
                        }
                        index = end;
                        _self.newOperation(options);
                        $.when(_self.operate(options)).done(function (data) {
                            //过程回调
                            var processRs = processChange(data, index, printLength);
                            var showMsg = "(${index}/${total})";
                            showMsg = dotpl.applyTpl(showMsg, curIndex);
                            if (isPreview) {
                                printImg = printImg.concat(data.list);
                                $(data.list).each(function (i, imgPath) {
                                    var $img = $('<img style="display: block;margin: 100px auto;" />');
                                    $img.attr('data-src', data.url + '?fn=' + imgPath);
                                    // $img.attr('data-src',data.url+'/'+imgPath);
                                    $content.append($img)
                                });
                                $content.imgLazyLoad('img',
                                    defImg,
                                    function ($img) {
                                        $img.addClass('print-img-loaded');
                                        $img.attr('style', '');
                                    }
                                );
                                showMsg = "正在生成预览图片" + showMsg;
                            } else {
                                showMsg = message.getDoingMsg() + showMsg;
                            }
                            if ($.type(processRs) !== 'undefined') {
                                showMsg = processRs;
                            }
                            $msg.text(showMsg);
                            //传输结束
                            if (index == printLength) {

                                if (isPreview) {
                                    $dlg.find('#btnPrint').css('display', 'inline-block');
                                    $msg.fadeOut(600, function () {
                                        $msg.remove();
                                    });
                                } else {
                                    setTimeout(function () {
                                        $msg.removeClass("print-view-msg")
                                            .addClass("print-view-msg-success").text(message.getSuccessMsg());
                                        $dlg.fadeOut(2600, function () {
                                            $dlg.closeDialog();
                                        });
                                    }, 800);
                                }
                                dfd.resolve.apply(dfd, arguments);
                                return;
                            }
                            doPreView(options, index);
                        }).fail(function () {
                            dfd.reject.apply(dfd, arguments);
                            if (!showForm) {

                            } else {
                                $msg.removeClass("print-view-msg")
                                    .addClass("print-view-msg-success").text(message.getErrorMsg());
                                $dlg.fadeOut(2600, function () {
                                    $dlg.closeDialog();
                                });
                            }
                        });
                    }
                })
                .fail(function () {

                });
            return dfd;
        },
        /**
         * @instance
         * @memberOf bs-print
         * @description 生成预览图片，图片路径为本地客户端为服务器
         * @param {object} options
         * @param {string} options.LoadReportURL 模板加载地址
         * @param {object} options.PrintData 打印数据
         * @param {object} options.PrintSet 打印设置
         * @returns {object}
         *
         * @example
         * var print = BsPrint.getInstance();
         * print.doImage({
         * 	LoadReportURL:'xxxx',
         * 	PrintData:{...},
         * 	PrintSet:{...}
         * }).done(function(data){
         * 		//TODO success
         * }).fail(function(){
         * 		//TODO error
         * })
         */
        doImage: function () {
            var _self = this;
            var dfd = $.Deferred();
            var op = _self._initArgs(arguments);
            $.when(_self.initStateDefer).done(function () {
                _self.setItem(op, 'ShowForm', false);
                _self.setItem(op, 'PrintPreview', true);
                var printData = _self.getItem(op, 'PrintData');
                if (!$.isArray(printData)) {
                    printData = [printData];
                    _self.setItem(op, 'PrintData', printData);
                }
                op.func = 'doPreview';
                _self.newOperation(op);
                _self.operate(op).done(function () {
                    dfd.resolveWith(op, arguments);
                }).fail(function (arg) {
                    dfd.rejectWith(op, arguments);
                })
            }).fail(function () {
                dfd.reject();
            });
            return dfd;
        },
        getItem: function (options, key) {
            return options.data[0][key];
        },
        setItem: function (options, key, val) {
            return options.data[0][key] = val;
        },
        isFunction: function (fn) {
            return $.isFunction(fn) ? fn : function () {
            };
        },
        Statics: {
            getDefInstance: function (op) {
                var defOp = {
                    initOptions: {
                        Cookie: Config.cookies,
                        HostUrl: $A.getHostUrl(),
                        DownLoadUrl: 'undefined',
                        QueryTempListUrl: 'undefined',
                        QueryTempNameUrl: 'undefined'
                    }
                };
                if ($.type(op) === 'undefined') {
                    op = {};
                }
                $.extend(true, op, defOp);
                if (!this.instance || this.instance.getInitState().state() === 'rejected') {
                    this.instance = new BsPrint(op);
                }
                return this.instance;
            },
            /**
             * @description 获取控件实例
             * @static
             * @memberOf bs-print
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @param {object} op.initOptions 初始化函数
             * @param {string} op.initOptions.Cookie cookie
             * @param {string} op.initOptions.HostUrl 主机地址
             * @param {string} op.initOptions.DownLoadUrl 模板下载地址
             * @param {string} op.initOptions.QueryTempListUrl 模板查询地址
             * @param {string} op.initOptions.QueryTempNameUrl 模板查询地址
             * @example
             *         var instantce = BsPrint.getInstance({
             *          config:{
             *              appId:'123'
             *          },
             *          initOptions:{
             *          	Cookie:_cookies,
             *          	HostUrl:$A.getHostUrl(),
             *          	DownLoadUrl:'xxxx/yyyy/download.do',
             *          	QueryTempListUrl:'xxxx/yyyy/queryList.do',
             *          	QueryTempNameUrl:'xxxx/yyyy/query.do'
             *          }
             *         });
             */
            getInstance: function (op) {
                if (!this.instance || this.instance.getInitState().state() === 'rejected') {
                    this.instance = new BsPrint(op);
                }
                return this.instance;
            }
        }
    });
    return BsPrint;
});
define('app/widgets/grid/app-grid-print',['app/core/app-class', 'app/core/app-jquery', 'app/core/app-core', 
		'app/data/app-ajax', 'app/widgets/grid/app-grid-formatter',
		'bs-http-plugin/bs-print'],
		function(Class, $, App, AppAjax, Formatter, BSPrint) {
	'use strict';
	
	if(!$.grid){
		$.grid = {};
	}
	$.grid.getColumnFormatPattern = function(col){
		if(col.formatPattern){
			return col.formatPattern;
		}
		var format = col.format;
		if(format && format.charAt(0) == '[' && format.charAt(format.length-1) == ']'){
			return format.substr(1, format.length-2);
		}
		if(col.printType && 
				col.printType.indexOf('Number') != -1){
			var precision = parseInt(col.printType.substring('6'))
				,result = '#,##0';
			if(precision > 0){
				result += '.'
				for(var x = 0 ; x < precision; x++){
					result += '0';
				}
			}
			return result;
		}
		if(col.formatter == 'thousandsFormatter'){
			return '#,##0.00;;#';
		}
		if(col.formatter == 'thousand'){
			return '#,##0.00';
		}
		if(col.formatter == '###,###(0)'){
			return '#,##0;;#';
		}
	}
	
	//最大导出条数
	var MAX_EXPORT_ROW_COUNT = 5000;
	/**
	 * 导出网格的扩展方法
	 */
	var GridPrint = Class.create({
		/**
		 * 打印
		 * @param {PrintOption} [opts] 报表配置参数
		 * @property {Object} [PrintOption] 报表配置参数
		 * @property {String} [PrintOption.Name] 报表名称(导出文件名称)
		 * @property {Object} [PrintOption.ReportDetail] 明细表格
		 * @property {Boolean} [PrintOption.ReportDetail.PrintOnePage=true] 报表横向分页输出时，尽量将横向产生的页面组合在一页中
		 * @property {Boolean} [PrintOption.ReportDetail.CellAdaptMethod=1] 单元格内容显示策略
		 * <PRE>
		 * 可选值
		 * 1 缩小适应
		 * 2 内容会被修剪
		 * 3 内容换行显示
		 * 4 自动宽度 
		 * </PRE>
		 * @property {Number} [PrintOption.ReportDetail.PrintAdaptMethod=8] 打印策略
		 * <PRE>
		 * 可选值
		 * 1 在打印输出时，超出页面输出范围的列内容将被忽略掉，即不输出显示。
		 * 2 在打印输出时，超出页面输出范围的列内容将另起新行输出显示。
		 * 3 在打印输出时，根据列的宽度按比列将所有要输出的列的总宽度调整到页面输出区域的宽度。 
		 * 4 在打印输出时，如果列的总宽度超出页面输出范围，与3相同，反之按设计时宽度输出。
		 * 5 在打印输出时，超出页面输出范围的列内容将另起新页输出显示，按先从上到下的顺序输出。
		 * 6 在打印输出时，超出页面输出范围的列内容将另起新页输出显示，按先从左到右的顺序输出。
		 * 7 在打印输出时，超出页面输出范围的列内容将另起新页输出显示，且左边的固定列在每页中重复输出，按先从上到下的顺序输出。 
		 * 8 在打印输出时，超出页面输出范围的列内容将另起新页输出显示，且左边的固定列在每页中重复输出，按先从左到右的顺序输出。 
		 * </PRE>
		 * @property {Object} [PrintOption.ReportDetail.FullBlank] 填充空白
		 * @property {Enum} [PrintOption.ReportDetail.FullBlank.Method=0] 填充类型
		 * <PRE>
		 * 可选值
		 * 0: 不填充
		 * 1: 填充列
		 * 2: 填充行
		 * 3: 填充行列
		 * </PRE>
		 * @property {Number} [PrintOption.ReportDetail.FullBlank.Width=0] 填充列宽
		 * <PRE>
		 * 当填充列宽为0时，根据每页的最后一列列宽进行填充
		 * </PRE>
		 * @property {Object} [PrintOption.ReportDetail.RowNumber] 行号
		 * @property {String} [PrintOption.ReportDetail.RowNumber.Title=序号] 标题
		 * @property {String} [PrintOption.ReportDetail.RowNumber.SummaryText] 合计行文本
		 * @property {String} [PrintOption.ReportDetail.HeaderBgColor] 表格头背景色
		 * @property {String} [PrintOption.ReportDetail.FooterBgColor] 表格合计背景色
		 * @property {Object} [PrintOption.PageHeader] 页眉
		 * @property {Object} [PrintOption.PageHeader.Left] 左页眉
		 * @property {String} [PrintOption.PageHeader.Left.Title] 左页眉文字
		 * @property {Object} [PrintOption.PageHeader.Center] 中页眉
		 * @property {String} [PrintOption.PageHeader.Center.Title] 中页眉文字
		 * @property {Object} [PrintOption.PageHeader.Right] 右页眉
		 * @property {String} [PrintOption.PageHeader.Right.Title] 右页眉文字
		 * @property {Object} [PrintOption.PageFooter] 页脚
		 * @property {Object} [PrintOption.PageFooter.Left] 左页脚
		 * @property {String} [PrintOption.PageFooter.Left.Title] 左页脚文字
		 * @property {Object} [PrintOption.PageFooter.Center] 中页脚
		 * @property {String} [PrintOption.PageFooter.Center.Title] 中页脚文字
		 * @property {Object} [PrintOption.PageFooter.Right] 右页脚
		 * @property {String} [PrintOption.PageFooter.Right.Title] 右页脚文字
		 * @property {Object} [PrintOption.ReportHeader] 报表标题
		 * @property {Boolean} [PrintOption.ReportHeader.Repeat] 是否每页重复
		 * @property {Object} [PrintOption.ReportHeader.MainTitle] 主标题
		 * @property {String} [PrintOption.ReportHeader.MainTitle.Title] 主标题文本
		 * @property {Array} [PrintOption.ReportHeader.SubTitles] 副标题集合
		 * @property {SubTitle} [PrintOption.ReportHeader.SubTitles.SubTitle] 副标题
		 * @property {Object} [PrintOption.ReportHeader.SubTitles.SubTitle.Left] 左标题
		 * @property {String} [PrintOption.ReportHeader.SubTitles.SubTitle.Left.Title] 左标题文本
		 * @property {Object} [PrintOption.ReportHeader.SubTitles.SubTitle.Center] 中标题
		 * @property {String} [PrintOption.ReportHeader.SubTitles.SubTitle.Center.Title] 中标题文本
		 * @property {Object} [PrintOption.ReportHeader.SubTitles.SubTitle.Right] 右标题
		 * @property {String} [PrintOption.ReportHeader.SubTitles.SubTitle.Right.Title] 右标题文本
		 * @property {Object} [PrintOption.ReportFooter] 报表尾标题
		 * @property {Boolean} [PrintOption.ReportFooter.Repeat] 是否每页重复
		 * @property {Array} [PrintOption.ReportFooter.SubTitles] 副标题集合
		 * @property {SubTitle} [PrintOption.ReportFooter.SubTitles.SubTitle] 副标题
		 * @property {Object} [PrintOption.ReportFooter.SubTitles.SubTitle.Left] 左标题
		 * @property {String} [PrintOption.ReportFooter.SubTitles.SubTitle.Left.Title] 左标题文本
		 * @property {Object} [PrintOption.ReportFooter.SubTitles.SubTitle.Center] 中标题
		 * @property {String} [PrintOption.ReportFooter.SubTitles.SubTitle.Center.Title] 中标题文本
		 * @property {Object} [PrintOption.ReportFooter.SubTitles.SubTitle.Right] 右标题
		 * @property {String} [PrintOption.ReportFooter.SubTitles.SubTitle.Right.Title] 右标题文本
		 * @param {PaperSet} [paperSet] 纸张设置
		 * @property {PaperSet} [PaperSet] 纸张设置
		 * @property {Enum} [PaperSet.Paper=A4] 纸张类型
		 * <PRE>
		 * 可选值：A3、A4、A5、B4、B5
		 * </PRE>
		 * @property {Enum} [PaperSet.Direction=纵向] 纸张方向
		 * <PRE>
		 * 可选值:纵向、横向
		 * </PRE>
		 * @property {Number} [PaperSet.MarginUp] 上边距（厘米）
		 * @property {Number} [PaperSet.MarginDown] 下边距（厘米）
		 * @property {Number} [PaperSet.MarginLeft] 左边距（厘米）
		 * @property {Number} [PaperSet.MarginRight] 右边距（厘米）
		 * @property {Number} [PaperSet.OffsetX] 横向偏移（厘米）
		 * @property {Number} [PaperSet.OffsetY] 纵向偏移（厘米）
		 * @param {Array} [rows] 打印表格内容行
		 * @example $('#demo').grid('print');
		 * @memberof grid-class
		 * @instance
		 */
		print: function(opts, paperSet, rows){
			exportGrid.call(this, opts, paperSet, 'Print', rows);
		},
		/**
		 * 快速打印
		 * @todo 按照默认打印设置进行打印，不弹出打印设置
		 * @todo 参数请参照打印接口
		 * @example $('#demo').grid('fastPrint');
		 * @memberof grid-class
		 * @instance
		 */
		fastPrint: function(opts, paperSet){
			exportGrid.call(this, opts, paperSet, 'FastPrint');
		},
		/**
		 * 打印预览
		 * @todo 参数请参照打印接口
		 * @example $('#demo').grid('printPreview');
		 * @memberof grid-class
		 * @instance
		 */
		printPreview: function(opts, paperSet, rows){
			exportGrid.call(this, opts, paperSet, 'Preview', rows);
		},
		/**
		 * 导出excel
		 * @todo 参数请参照打印接口
		 * @example $('#demo').grid('exportExcel');
		 * @memberof grid-class
		 * @instance
		 */
		exportExcel: function(opts, paperSet){
			exportGrid.call(this, opts, paperSet, 'Excel');
		},
		/**
		 * 打印全部数据
		 * @todo 参数请参照打印接口
		 * @example $('#demo').grid('printAll');
		 * @memberof grid-class
		 * @instance
		 */
		printAll: function(opts, paperSet){
			exportAll.call(this, opts, paperSet, 'Print');
		},
		/**
		 * 快速全部打印
		 * @todo 按照默认打印设置进行打印，不弹出打印设置
		 * @todo 参数请参照打印接口
		 * @example $('#demo').grid('fastPrint');
		 * @memberof grid-class
		 * @instance
		 */
		fastPrintAll: function(opts, paperSet){
			exportAll.call(this, opts, paperSet, 'FastPrint');
		},
		/**
		 * 预览全部数据
		 * @todo 参数请参照打印接口
		 * @memberof grid-class
		 * @instance
		 */
		printPreviewAll: function(opts, paperSet){
			exportAll.call(this, opts, paperSet, 'Preview');
		},
		/**
		 * 导出全部数据excel
		 * @todo 参数请参照打印接口
		 * @memberof grid-class
		 * @instance
		 */
		exportAllExcel: function(opts, paperSet){
			exportAll.call(this, opts, paperSet, 'Excel');
		},
		/**
		 * 获取打印模型
		 * @todo 参数请参照打印接口
		 * @memberof grid-class
		 * @instance
		 */
		getPrintModel: function(opts, rows){
			return getPrintInfo.call(this, opts, rows)
		}
	});
	function exportAll(opts, paperSet, opType){
		if(isLocalExport.call(this)){
			exportGrid.call(this, opts, paperSet, opType);
		}else{
			var that = this
				,totalRows = this.data[this.setting.jsonReader.total];
			if(totalRows >= MAX_EXPORT_ROW_COUNT){
				$messager.confirm('当前内容总数[<strong style="color:red;">' + totalRows 
						+ '</strong>]超过[' + MAX_EXPORT_ROW_COUNT + ']条，</br>数据处理需要较多时间，确认继续？',{
					okCall: function(){
						if(!opts){
							opts = {};
						}
						if(!opts.ReportDetail){
							opts.ReportDetail = {};
						}
						if(!opts.ReportDetail.DetailLoader){
							opts.ReportDetail.DetailLoader = {
								LimitRowNum: totalRows
							}
						}else{
							opts.ReportDetail.DetailLoader.LimitRowNum = totalRows;
						}
						exportGrid.call(that, opts, paperSet, opType, true);
					}}
				);
			}else{
				exportGrid.call(this, opts, paperSet, opType, true);
			}
		}
		/**
		 * 是否为本地打印
		 */
		function isLocalExport(){
			if(this.setting.pager == 'none'){
				return true;
			}
			if(this.getCurrentPageSize() >= this.data[this.setting.jsonReader.total]){
				return true;
			}
			return false;
		}
	}
	/**
	 * 打印数据
	 */
	function exportGrid(opts, paperSet, opType, allData){
		var printData = getPrintInfo.call(this, opts, allData);
		paperSet = applyDefaultPrintPaperSet(printData, paperSet);
		if(!printData.PageFooter){
			printData.PageFooter = {Center:{Title: '第[#SystemVar(PageNumber)#]页 共[#SystemVar(PageCount)#]页'}};
		}
		if(paperSet){
			doExportGrid.call(this, printData, paperSet, opType, allData)
		}else{
			var that = this
				,printSetDfd = BSPrint.getDefInstance().getPrintSet({ModuleId:'00000000'});
			$A.showWaitScreen('正在获取打印设置...');
			$.when(printSetDfd).done(function (printSet) {
				doExportGrid.call(that, printData, printSet, opType, allData);
			}).fail(function(){
				$a.hideWaitScreen();
			});
		}
	}
	
	function doExportGrid(printData, printSet, opType, allData){
		var data = {
			PrintData: printData,
            PrintSet: printSet
        };
		if(opType == 'FastPrint'){
			
		}else if(opType == 'Print'){
			data.ShowPrintSet = true;
		}else if(opType == 'Preview'){
			data.PrintPreview = true;
		}else{
			data.ExportFile = opType;
		}
		$A.showWaitScreen('正在打印中...');
		BSPrint.getDefInstance().doCustomPrint(data).done(function () {
			$a.hideWaitScreen();
        }).fail(function (e) {
        	$A.hideWaitScreen();
        	if(e && e.code == 'timeout'){
        		return;
        	}
        	$A.messager.error('打印插件调用异常');
        	if(window.console){
        		window.console.log('打印插件调用异常', arguments); 
        	}
        });
	}

	var ALIGN = {
		left: 4,
		center: 5,
		right: 6
	};
	var ALIGN_UPPER = {
		left: 'Left',
		center: 'Center',
		right: 'Right'
	};
	var SUMMARY = {
		sum: 1,
		avg: 2,
		count: 3,
		min: 4,
		max: 5
	};
	
	function getPrintInfo(opts, allData){
		var result = {};
		result.ReportDetail = getReportDetail.call(this, allData);
		$.extend(true, result, opts);
		return result;
	};
	function getReportDetail(allData){
		var result = {};
		result.DetailHeaders = getGridColumns.call(this);
		result.FixCols = getFrozenCount(result.DetailHeaders);
		if(this.setting.rownumbers != 'none'){
			result.FixCols++;
		}
		if($.isArray(allData)){
			result.DetailDatas = getGridData.call(this, allData);
		}else if(allData 
				&& this.data[this.setting.jsonReader.total] > 0){
			result.DetailLoader = {
				Url: 'http://'+window.location.host+window._contextPath +'/' +this.setting.url,
				QueryParam: JSON.stringify(this._getQueryParam()),
				JsonReader: {
					Total: 'totalRecords',
					Rows: 'data',
					Footer: 'footer'
				}
			};
		}else{
			result.DetailDatas = getGridData.call(this);
		}
		result.HAlign = this.setting.halign;
		result.Nowrap = true;
		if(this.setting.rownumbers == 'normal'){
			result.RowNumber = {
				SummaryText: ''
			};
		}
    	return result;
    	function getGridColumns(){
    		var cols = this.getColumnTree();
    		return convert(cols);
    		function convert(cols){
    			if(!cols || cols.length == 0){
    				return;
    			}
    			var result = [];
    			for(var i = 0; i < cols.length; i++){
    				var temp = {}
    					,col = cols[i];
    				if(col.sysCol || col.hidden){
    					continue;
    				}
    				result.push(temp);
    				temp.Name = col.field;
    				temp.Title = col.title;
					temp.Align = ALIGN[col.align];
    				temp.Frozen = col.viewPos;
    				if(col.printWidth){
						temp.Width = col.printWidth/10;
    				}
    				var format = $.grid.getColumnFormatPattern(col);
    				if(format){
    					temp.Format = format;
    					temp.DataType = 'Number';
    				}
    				if(col.summary){
    					if(col.summary.text){
    						temp.Summary = {
    							Text: col.summary.text
    						};
    					}else{
    						temp.Summary = {
    							Function: SUMMARY[col.summary.type]
    						};
    					}
    				}
    				if(col.children){
    					temp.SubHeaders = convert(col.children);
    					temp.Name = $a.uuid();
    				}
    			}
    			return result;
    		}
    	}
    	function getFrozenCount(cols){
    		var result = 0;
    		for(var i = 0; i < cols.length; i++){
    			var col = cols[i];
    			if(col.SubHeaders){
    				result += getFrozenCount(col.SubHeaders)
    			}else if(col.Frozen == 'left'){
    				result++;
    			}
    			delete col.Frozen;
    		}
    		return result;
    	}
    	function getGridData(rows){
    		if(!rows){
    			rows = this.data[this.setting.jsonReader.rows];
    		}
    		return formatterData.call(this, rows);
    		function formatterData(data){
    			var fieldColumns = this._fieldColumns
    				,formatterFields = {}
    				,result = [];
    			for(var field in fieldColumns){
    				var col = fieldColumns[field]
    					,formatter = col.formatter; 
    				if(formatter){
    					if(col.printType.indexOf('Number') != -1){
    						continue;
    					}
    					if(col.template){
    						formatterFields[field] = col.template;
    						continue;
    					}
    					if(!$.isFunction(formatter)){
    						formatter = Formatter.get(col.formatter);
    					}
    					if($.isFunction(formatter)){
    						formatterFields[field] = formatter;
    					}
    				}
    			}
    			for(var i = 0; i < data.length; i++){
    				var row = $.extend({}, data[i]);
    				delete row.__rowId;
    				result.push(row);
    				for(var field in formatterFields){
    					if($.isFunction(formatterFields[field])){
    						var text = formatterFields[field](row[field], row, i, fieldColumns[field]);
    						row[field] = getPrintText(text);
    					}else{
    						row[field] = formatterFields[field].apply(row);
    					}
    				}
    			}
    			return result;
    			function getPrintText(str){
    				var $t = $('<span>'+str+'</span>')
						,children = $t.children();
					if(children.length >= 1){
						return children.attr('printText') || children.attr('title') || children.text();
					}
    				return str;
    			}
    		}
    	}
	};

	function applyDefaultPrintPaperSet(printData, paperSet){
		var defaults = null;
		if(!$.isFunction($.getDefaultPrintPaperSet)){
			return paperSet;
		}
		defaults = $.getDefaultPrintPaperSet(printData);
		if(!defaults){
			return paperSet;
		}
		if(!paperSet){
			paperSet = {};
		}
		if(!paperSet.Pager){
			paperSet.Pager = defaults.Pager;
		}
		if(!paperSet.Direction){
			paperSet.Direction = defaults.Direction;
		}
		if(paperSet.MarginUp == undefined){
			if(!isNaN(defaults.MarginUp)){
				paperSet.MarginUp = defaults.MarginUp;
			}
		}
		if(paperSet.MarginDown == undefined){
			if(!isNaN(defaults.MarginDown)){
				paperSet.MarginDown = defaults.MarginDown;
			}
		}
		if(paperSet.MarginLeft == undefined){
			if(!isNaN(defaults.MarginLeft)){
				paperSet.MarginLeft = defaults.MarginLeft;
			}
		}
		if(paperSet.MarginRight == undefined){
			if(!isNaN(defaults.MarginRight)){
				paperSet.MarginRight = defaults.MarginRight;
			}
		}
		if(paperSet.OffsetX == undefined){
			if(!isNaN(defaults.OffsetX)){
				paperSet.OffsetX = defaults.OffsetX;
			}
		}
		if(paperSet.OffsetY == undefined){
			if(!isNaN(defaults.OffsetY)){
				paperSet.OffsetY = defaults.OffsetY;
			}
		}
		return paperSet;
	}
	return GridPrint;
});
define('app/widgets/grid/app-grid-sort',['app/core/app-class', 'app/core/app-jquery', 'app/core/app-core', 
	'app/data/app-ajax'], function(Class, $, App, AppAjax) {
	
	'use strict';
	
	/**
	 * 网格排序
	 */
	var GridSort = Class.create({
		/**
		 * 根据列的排序信息初始化排序功能
		 * @param col
		 * @param $col
		 */
		 _appendSortable: function(col, $col){
		 	if(!col.sortable || (col.colspan > 1)){
		 		return;
		 	}
		 	var $sort = $('<span class="grid-header-sort"></span>')
				,that = this;
			$sort.appendTo($col.find('>div'));
			$col.css('cursor','pointer');
			$col.on('click.grid.api', function(){
				var $this = $(this)
					,cid = $this.attr('_cid')
					,col = that._column[cid]
					,order = ''
					,nextOrder = '';
				if($this.hasClass('asc')){
					order = 'asc';
					nextOrder = 'desc';
				}else if($this.hasClass('desc')){
					order = 'desc';
					nextOrder = '';
				}else{
					order = '';
					nextOrder = 'asc';
				}
				/**
				 * 排序前事件
				 * <PRE>
				 * 	order: asc 升序， desc降序, 空-不排序
				 * </PRE>
				 * @event grid-class#beforeSortColumn
				 * @param {String} field 字段
				 * @param {String} order 方向
				 * @returns {Boolean} 返回false 取消排序
				 */
				if(that.trigger('beforeSortColumn', col.field, nextOrder) === false){
					return;
				}
				nextOrder = doSort.call(that, col, nextOrder);
				$this.removeClass(order);
				$this.addClass(nextOrder);
			});
		},
		/**
		 * 初始化排序信息
		 */
		_initSort: function(){
			initSort.call(this);
			var data = this.setting.data;
			if(this._sort.length > 0 && data){
				var rows = null;
				if($.isArray(data)){
					rows = data;
				}else{
					rows = data[this.setting.jsonReader.rows];
				}
				sortData.call(this, rows);
			}
		},
		/**
		 * 获取当前排序方式
		 * @returns {Array<Object>} result 设置查询参数
		 * @returns {String} result.field 字段
		 * @returns {String} result.order 方向
		 * @example $('#demo').grid('getCurrentSort');
		 * @memberof grid-class
		 * @instance
		 */
		getCurrentSort: function(){
			var orders = this._sort
				,result = [];
			if(orders.length == 0){
				return result;
			}
			for(var i = 0; i < orders.length; i++){
				if(orders[i].order){
					result.push({field: orders[i].col.field, order: orders[i].order});
				}
			}
			return result;
		},
		/**
		 * 如果当前表格存在排序设置 则根据排序设置进行数据排序
		 */
		_sortData: function(){
			if(this.setting.remoteSort){
				return;
			}
			var rows = this.getRows();
			if(!rows || rows.length == 0){
				return;
			}
			delete this._oriRows;
			if(this._sort.length > 0){
				sortData.call(this, rows);
			}
		}
	});
	/**
	 * 初始化排序信息
	 */
	function initSort(){
		var sort = this.setting.sort;			
		if($.isArray(sort)){
			var _sort = []
				,that = this;
			$(sort).each(function(){
				var col = that._fieldColumns[this.field]
					,$col = that.$tableHeader.find('[_cid=' + col._cid + ']');
				if($col.length == 1){
					_sort.push({col: col, order: this.order});
					$col.addClass(this.order);
				}
			});
			this._sort = _sort;
		}else{
			this._sort = [];
		}
	}
	/**
	 * 根据传入的列和排序方式进行排序
	 * @param col 要排序的列
	 * @param order 排序方式
	 */
	function doSort(col, order){
		order = setSort.call(this, col, order);
		if(this.setting.remoteSort){
			doRemoteSort.call(this);
		}else{
			doLocalSort.call(this);
		}
		return order;
	}
	/**
	 * 设置当前排序参数
	 */
	function setSort(col, order){
		var orders = this._sort;
		if(orders.length == 1 && order == ''){
			order = 'asc';
		}
		if(this.setting.multiSort){
			var append = true;
			for ( var i = 0; i < orders.length; i++) {
				if(orders[i].col == col){
					orders.splice(i, 1);
					if(order){
						orders.push({col:col, order:order});
					}
					append = false;
					break;
				}
			}
			if(append){
				orders.push({col:col, order:order});
			}
		}else{
			this._sort = [{col:col, order:order}];
			this.$tableHeader.find('td.asc').removeClass('asc');
			this.$tableHeader.find('td.desc').removeClass('desc');
		}
		return order;
	}
	/**
	 * 远程排序
	 */
	function doRemoteSort(){
		var that = this;
		this._ajax(function(data){
			that._loadPagers(1, data[that.setting.jsonReader.total]);
			that._loadData(data, 1);
			/**
			 * 排序完成事件
			 * @event grid-class#onSortColumn
			 */
			that.trigger('onSortColumn');
		});
	}
	/**
	 * 本地排序
	 */
	function doLocalSort(){
		if(this._sort.length > 0){
			sortData.call(this, this.getRows());
		}else{
			this._setRows(this._oriRows.slice(0));
		}
		this._rownumbers = this._rownumbers - this.getRows().length;
        this._loadBody(this.getRows(), this._rownumbers);
        if(this.$yProxyScroll){
	        this.$yProxyScroll.scrollTop(0);
        }
        this._checkSummary();
		this.trigger('onSortColumn');
	}
	/**
	 * 将数据进行排序 并缓存原数据
	 */
	function sortData(rows){
		if(!this._oriRows){
			this._oriRows = rows.slice(0);
		}
		rows.sort($.proxy(sortBySetting, this));
	}
	function sortBySetting(a, b){
		return getComparator.call(this, a, b, this._sort, 0);
		function getComparator(a, b, orders, i){
			var t = orders[i];
			if(!t){
				return 0;
			}
			var col = t.col
				,order = t.order
				,val = 0;
				i++;
			if(col){
				if($.isFunction(col.sorter)){
					val= col.sorter(a, b);
				}else{
					var field = col.field;
					var x = a[field]
						,y = b[field];
					if(!isNaN(x) && !isNaN(y)){
						x = parseFloat(x);
						y = parseFloat(y);
					}
					if(col.printType && col.printType.indexOf('Number') >= 0){
						if(isNaN(x)&&isNaN(y)){
							return 0;
						}
						if(isNaN(x)){
							return -1;
						}
						if(isNaN(y)){
							return 1;
						}
					}
					if(x > y){
						val = 1;
					}else if(x == y){
						val = 0;
					}else{
						val = -1;
					}
				}
				if(order == 'desc'){
					val = -val;
				}
				if(val == 0){
					return getComparator.call(this, a, b, orders, i);
				}else{
					return val;
				}
			}
			return val;
		}
	}
	return GridSort;
});
define('app/widgets/grid/app-grid-summary',['app/core/app-class', 'app/core/app-jquery', 'app/core/app-core', 
	'app/data/app-ajax'], function(Class, $, App, AppAjax) {
	
	'use strict';
	
	/**
	 * 网格数据本地小计
	 */
	var GridSummary = Class.create({
		/**
         * 输出合计行
         */
        _appendSummary: function(){
           this._appendDefinedSummary();
           this._appendCustomSummary();
        },
        /**
         * 输出预定义合计行
         */
        _appendDefinedSummary: function(){
            if(this._sumCols.length == 0){
                return;
            }
            var rows = this.getRows();
            this.summaryRow = this._summary(rows);
            if(this.summaryRow){
                this._appendFooter([this.summaryRow]);
            }
        },
        /**
         * 输出自定义合计栏
         */
        _appendCustomSummary: function(){
            var s = this.setting;
            if(!s.summary){
                return;
            }
            if(!s.summary._template){
                return;
            }
            var summaryData = null;
            if(s.summary.method){
                summaryData = s.summary.method(this.getData());
            }else{
                summaryData = this.getData();
            }
            var temp = s.summary._template
                ,html = temp.apply(summaryData);
            this.$tableFooterCustom.append(html);
            this.$tableFooter.css('display', 'block');
            this._fixHeight();
            this._footerFollow();
        },
        /**
         * 计算合计值
         */
        _summary: function(rows){
            var cols = this._sumCols;
            if(cols.length == 0){
            	return null;
            }
            var result = {};
            if(rows.length > 0){
                for(var i = 0; i < rows.length; i++){
                    for(var j = 0; j < cols.length; j++){
                        summaryColumn(result, cols[j], rows[i]);
                    }
                }
            }else{
                for(var j = 0 ; j < cols.length; j++){
                    var col = cols[j],
                        colSumOpt = col.summary;
                    if(!colSumOpt){
                        continue;
                    }
                    if(colSumOpt.text){
                        result[col.field] = colSumOpt.text;
                    }else{
                        result[col.field] = 0;
                    }
                }
            }
            return result;
        }
	});
	return GridSummary;
	
	/**
     * 合计值计算
     * @param col
     * @param row
     */
    function summaryColumn(summaryRow, col, row){
        if(!col.summary){
            return;
        }
        var val = row[col.field];
        if(!val){
            val = 0;
        }
        summaryTheValue(summaryRow, col.summary, col.field, parseFloat(val));
    }
    /**
     * 累加合计值
     * @param summary 汇总对象
     * @param type 汇总类型
     * @param field 汇总的字段
     * @param val 被汇总的值
     */
    function summaryTheValue(summaryRow, summaryOpt, field, val){
        if(summaryOpt.text){
            summaryRow[field] = summaryOpt.text;
            return;
        }
        if(!val){
            val = 0;
        }
        switch(summaryOpt.type) {
            case 'sum' :
                if(summaryRow[field] == undefined){
                    summaryRow[field] = val;
                }else{
                    summaryRow[field] = sum(summaryRow[field], val);
                }
                break;
            case 'avg' :
                if(summaryRow[field] == undefined){
                    summaryRow['__'+field] = val;
                    summaryRow['__count'+field] = 1;
                }else{
                    summaryRow['__'+field] = sum(summaryRow['__'+field], val);
                    summaryRow['__count'+field]++;
                }
                summaryRow[field] = summaryRow['__'+field]/summaryRow['__count'+field];
                break;
            case 'min' :
                if(summaryRow[field] == undefined){
                    summaryRow[field] = val;
                }else if(val < summaryRow[field]){
                    summaryRow[field] = val;
                }
                break;
            case 'max' :
                if(summaryRow[field] == undefined){
                    summaryRow[field] = val;
                }else if(val > summaryRow[field]){
                    summaryRow[field] = val;
                }
                break;
            case 'count' :
                if(summaryRow[field] == undefined){
                    summaryRow[field] = 1;
                }else{
                    summaryRow[field]++;
                }
                break;
            default:
        }
    }
    /**
     * 解决js浮点数运算不精确的问题
     * 原理 放大倍数为整数后 得出结果在相除
     */
	function sum(arg1,arg2){
		var r1,r2,m;
		try{r1 = arg1.toString().split(".")[1].length}catch(e){r1 = 0}
 		try{r2 = arg2.toString().split(".")[1].length}catch(e){r2 = 0}
 		m = Math.pow(10, Math.max(r1, r2));
 		return ( Math.round(arg1*m) + Math.round(arg2*m) ) / m;
	}
});
define('app/widgets/grid/app-grid-ext',['app/core/app-class', 'app/core/app-jquery', 
        'app/core/app-core'], function(Class, $, App) {

    'use strict';
    var cellBorderWidth = 1;
    /**
     * 网格扩展
     * 1、表格列根据内容自适应
     * 2、根据勾选自动计算 合计值
     */
    var GridExt = Class.create({
        _fitWordColumn: function(){
            if(this.setting.fitColumns != 'Content'){
                return;
            }
            var fontSize = this.$tableBodyMain.css('font-size')
                ,fieldColumns = this._fieldColumns;
            var fields = getFields(fieldColumns);
            for(var field in fields){
                var colTexts = this.$table.find('[field=' + field + ']');
                colTexts.each(function(){
                    var text = $(this).text();
                    if(text){
                        var width = getWidth(text, fontSize);
                        if(width > fields[field]){
                            fields[field] = width;
                        }
                    }
                });
            }
            for(var field in fields){
                var $td = this.$tableHeader.find('td[field="' + field + '"]')
                    ,oriWidth = $td.outerWidth()
                    ,diff = fields[field] - oriWidth + 20;
                var cid = $td.attr('_cid');
                var tdWidth = $td.outerWidth() - cellBorderWidth + diff;
                this.$table.find('td[_cid=' + cid + ']>div:not(.app-wrapper)').css('width', tdWidth);
                this._column[cid].width = tdWidth;
            }
            this._resetViewWidth();
            this._footerFollow();
            this._fixHeight();
            fullBlankWidth(this);
            function fullBlankWidth(context){
                var freeWidth = context.$tableHeaderMain.width() - context.$tableHeaderMain.find('>div>table').width();
                if(freeWidth > 0){
                    var $lastTd = context._getLast$Td();
                    var cid = $lastTd.attr('_cid');
                    var tdWidth = $lastTd.outerWidth() - cellBorderWidth + freeWidth;
                    context.$table.find('td[_cid=' + cid + ']>div:not(.app-wrapper)').css('width', tdWidth);
                    context._column[cid].width = tdWidth;
                    var lastWidth = $lastTd.data('freeWidth');
                    if(lastWidth != undefined){
                        freeWidth = freeWidth + lastWidth
                    }
                    $lastTd.data('freeWidth', freeWidth);
                }
            }
            function getFields(fcs){
                var result = {};
                for(var field in fcs){
                    var col = fcs[field];
                    if(!col.sysCol && !col.hidden){
                        result[field] = 0;
                    }
                }
                return result;
            }
            function getWidth(str, fontSize){
                var $t = $('<div style="font-size:' + fontSize + ';display: none;">' + str + '</div>');
                $t.appendTo('body');
                var result = $t.width();
                $t.remove();
                return result;
            }
        },
        _onCheckSummary: function(){
            if(!this.setting.checkSummary){
                return;
            }
            this.$tableHeaderLeft.on('click.grid.api', 'td[field="_rownumbers"]', $.proxy(this._checkSummary, this));
            this.$tableHeaderLeft.on('click.grid.api', 'td[field="_checkbox"]', $.proxy(this._checkSummary, this));
            this.$tableHeaderLeft.on('click.grid.api', 'td[field="_checkbox"] input', $.proxy(this._checkSummary, this));
            this.$tableBodyLeft.on('click.grid.api', 'td[field="_checkbox"]', $.proxy(this._checkSummary, this));
            this.$tableBodyLeft.on('click.grid.api', 'td[field="_checkbox"] input', $.proxy(this._checkSummary, this));
            this.$tableBody.on('click.grid-row-check.api', 'tr.data-row td', $.proxy(this._checkSummary, this));
        },
        _checkSummary: function(){
            var rows = this.getSelections();
            if(rows.length == 0){
                rows = this.getRows();
            }
           	this.summaryRow = this._summary(rows);
            if(!$.isEmptyObject(this.summaryRow)){
                replaceFooter(this, this.summaryRow);
            }
        },
        resetSummary: function(){
             if(this.setting.checkSummary){
                this._checkSummary();
            }else{
               	this.summaryRow = this._summary(this.getRows());
                if(!$.isEmptyObject(this.summaryRow)){
                     replaceFooter(this, this.summaryRow);
                }
            }
        }
    });
    function replaceFooter(context, footer){
    	 context._setFooterRows(footer);
    	 for(var field in footer){
    	 	var col = context._fieldColumns[field];
    	 	if(col){
	    	 	var text = context._getFormatText(col, footer);
		    	context.$tableFooter.find('td[field="' + field + '"]>div').text(text);
    	 	}
    	 }
    }
    return GridExt;
});
define('app/widgets/grid/app-grid-pager',['app/core/app-class'], function(Class) {

    'use strict';
    /**
     * 网格分页栏
     */
    var GridPager = Class.create({
    	/**
         * 初始化分页栏
         */
        _initPagination: function(){
            var s = this.setting;
            if(s.pager == 'none'){
                return;
            }
            var $p = this._initPagerElement();
            if(s.pager == 'all' || s.pager == 'up'){
            	if(!s.title && s.toolbar && s.toolbar.length > 0){
                    $p.appendTo(this.$toolbar);
            	}else{
            		$p.appendTo(this.$title);
            	}
            }
            if(s.pager == 'all' || s.pager == 'down'){
                $p.clone().appendTo(this.$element);
            }
            this.$pagers = this.$element.find('.grid-pager');
            this.$pagerUp = this.$element.find('.grid-header-title>.grid-pager');
            this.$pagerDown = this.$element.find('>.grid-pager');
            this.$switchView = this.$element.find('.grid-switchview');
            this._bindPagerEvents();
        },
        /**
         * 生成分页栏的html元素
         */
        _initPagerElement: function(){
            var s = this.setting;
            var to = s.pageNumber * s.pageSize
                ,from = to - s.pageSize + 1
                ,downloadIcon = ''
                ,printIcon = ''
                ,switchViewIco='';
            if(s.pagerToolbarIcon && s.pagerToolbarIcon.download){
                downloadIcon = '<td><span class="icon icon-download"></span></td>';
            }
            if(s.pagerToolbarIcon && s.pagerToolbarIcon.print){
                printIcon = '<td><span class="icon icon-print"></span></td>';
            }

            //开启切换视图 by sjq
            if (s.switchView){

                switchViewIco = '<td><span title="网格视图" class="icon icon-gridview grid-switchview"></span></td><td><span class="icon icon-cardview grid-switchview"  title="卡片视图"></span></td>';

            }

            return $('<div class="grid-pager">'+
                '<div class="pager-infos"> <label>' + from + '</label> - <label>' + to
                + '</label>　共 <label>0</label> 条</div>' +
                '<table class="pager-tool" cellspacing="0" cellpadding="0">' +
                '<tbody>' +
                '<tr>' +
                '<td>' +
                '<span class="icon icon-seek-first"></span>' +
                '</td>' +
                '<td>' +
                '<span class="icon icon-seek-prev"></span>' +
                '</td>' +
                '<td style="width: 4px;">' +
                '<span class="separator"></span>' +
                '</td>' +
                '<td>' +
                '<input tabindex="-1" class="currPage" value="' + s.pageNumber
                + '"/>共<label class="totalPages">1</label>页' +
                '</td>' +
                '<td style="width: 4px;">' +
                '<span class="separator"></span>' +
                '</td>' +
                '<td>' +
                '<span class="icon icon-seek-next"></span>' +
                '</td>' +
                '<td>' +
                '<span class="icon icon-seek-end"></span>' +
                '</td>' +
                '<td>' +
                '<span class="icon icon-refresh"></span>' +
                '</td>' +
                downloadIcon + printIcon +switchViewIco+
                '<td>' + this._getPageSizeSltHtml() + '</td>' +
                '</tr>' +
                '</tbody>' +
                '</table>' +
                '</div>');
        },
        /**
         * 获取当前分页数
         */
        getCurrentPageSize: function(){
            var result = this.$pagers.find('.pager-pagesize input').val();
            if(result){
                return Number(result);
            }else{
                return -1;
            }
        },
        /**
         * 获取分页的下拉框html
         */
        _getPageSizeSltHtml: function(){
        	inCludePageSize.call(this);
            var s = this.setting
                ,pageSizeSlt = '<div class="pager-pagesize"><select tabindex="-1" class="currPageSize">';
            for(var i = 0; i < s.pageList.length; i++){
                var val = s.pageList[i];
                pageSizeSlt += '<option value="' + val + '"'
                    + (s.pageSize == val ? 'selected="selected"' : '') + '>' + val + '</option>';
            }
            pageSizeSlt += '</select><input value="' + s.pageSize + '"/></div>';
            return pageSizeSlt;
            function inCludePageSize(){
            	var pageList = this.setting.pageList
            		,pageSize = this.setting.pageSize
            		,index = 0;
            	for(var i = 0; i < pageList.length; i++){
            		var size = pageList[i];
            		if(size == pageSize){
            			return;
            		}
            		if(pageSize > size){
            			index = i;
            		}
            	}
            	if(index >= 0){
            		this.setting.pageList.splice(index, 0, pageSize);
            	}
            }
        },
        /**
         * 对分页控件绑定事件
         */
        _bindPagerEvents: function(){
            var grid = this
                ,$ps = this.$pagers
                ,$currPage = $ps.find('.currPage')
                ,$total = $ps.find('.totalPages');
            $ps.find('.currPageSize').on('change.grid.pagination.api', function(){
            	var currPageSize = $(this).val();
                $ps.find('.currPageSize').val(currPageSize);
                $ps.find('.pager-pagesize input').val(currPageSize);
                grid.loadForPage(1);
            }).on('click.grid.pagination.api', function(e){
                e.stopPropagation();
            });
            $ps.find('.icon-seek-first').on('click.grid.pagination.api', function(){
                grid.loadForPage(1);
            });
            $ps.find('.icon-seek-prev').on('click.grid.pagination.api', $.proxy(this.prevPage, this));
            $currPage.on('focus.grid.pagination.api', function(e){
                var $this = $(this);
                $this.data('oriText', $this.val());
                $this.one('blur.grid.pagination.api', function(e){
                    var $this = $(this);
                    $this.val($this.data('oriText'));
                });
            }).on('keydown.grid.pagination.api', function(e){
                var keyCode = e.keyCode;
                if ((keyCode >= 48 && keyCode <= 57) || keyCode == 8
                    || keyCode == 46) {
                    return true;
                }
                if(keyCode == 13){
                    var $this = $(this)
                        ,curr = parseInt($this.val())
                        ,allPage = parseInt($total.html());
                    if(!isNaN(curr) &&
                        curr >= 1 && curr <= allPage){
                    	$this.data('oriText', curr);
                        grid.loadForPage(curr);
                    }
                    if(grid._combogrid){
                        grid._combogrid.focus();
                    }
                }
            }).on('click.grid.pagination.api', function(e){
                e.stopPropagation();
            });
            $ps.find('.icon-seek-next').on('click.grid.pagination.api', $.proxy(this.nextPage, this));
            $ps.find('.icon-seek-end').on('click.grid.pagination.api', function(){
                var totalPage = $total.html();
                if(totalPage == '0'){
                    totalPage = 1;
                }
                grid.loadForPage(totalPage);
            });
            $ps.find('.icon-refresh').on('click.grid.pagination.api', function(){
                grid.reload();
            });
            $ps.find('.icon-download').on('click.grid.pagination.api', function(){
                grid.exportExcel();
            });
            $ps.find('.icon-print').on('click.grid.pagination.api', function(){
                grid.print();
            });

            $ps.find('.pager-pagesize input').on('focus.grid.pagination.api', function(){
            	var $this = $(this);
                $this.data('oriText', $this.val());
                $this.one('blur.grid.pagination.api', function(e){
                    var $this = $(this);
                    $this.val($this.data('oriText'));
                });
            }).on('keydown.grid.pagination.api', function(e){
                var keyCode = e.keyCode;
                if ((keyCode >= 48 && keyCode <= 57) || keyCode == 8
                    || keyCode == 46) {
                    return true;
                }
                var $this = $(this);
                if(keyCode == 13){
                	var val = $this.val()
                		,pageSize = parseInt(val, 10);
                    if(!isNaN(pageSize)){
	            		var pageSize = parseInt(val, 10)
	            			,maxPageSize = getMaxPageSize();
	            		if(pageSize > maxPageSize){
	            			pageSize = maxPageSize;
	            		}
	            		$ps.find('.pager-pagesize input').val(pageSize);
	            		$ps.find('.pager-pagesize input').data('oriText', pageSize);
	            		$ps.find('.currPageSize').val(pageSize);
	            		grid.loadForPage(1);
	            	}
                }
                function getMaxPageSize(){
            		var list = grid.setting.pageList
            			,max = 0;
            		for(var i =0 ; i < list.length; i++){
            			if(list[i] > max){
            				max = list[i];
            			}
            		}
            		return max;
            	}
            });
            this.$switchView.on("click.grid.pagination.api",function(){
                var $this=$(this);
                if ($this.hasClass("icon-gridview")){
                    grid.viewType='GridView'
                }
                if ($this.hasClass("icon-cardview")){

                    grid.viewType='CardView'
                }
                grid._switchView(grid.viewType,true)
            })
        },
        /**
         * 上一页
         * @example $('#demo').grid('prevPage');
         * @memberof grid-class
         * @instance
         */
        prevPage: function(){
            if(!(this.$pagers && this.$pagers.length > 0)){
                return;
            }
            var $currPage = this.$pagers.find('.currPage')
                ,$total = this.$pagers.find('.totalPages')
                ,prev = 1
                ,curr = parseInt($currPage.val());
            if(curr == 1){
                prev = parseInt($total.html());
            }else{
                prev = curr - 1;
            }
            if(prev == 0){
                prev = 1;
            }
            this.loadForPage(prev);
        },
        /**
         * 下一页
         * @example $('#demo').grid('nextPage');
         * @memberof grid-class
         * @instance
         */
        nextPage: function(){
            if(!(this.$pagers && this.$pagers.length > 0)){
                return;
            }
            var $currPage = this.$pagers.find('.currPage')
                ,$total = this.$pagers.find('.totalPages')
                ,next = 1
                ,curr = parseInt($currPage.val())
                ,allPage = parseInt($total.html());
            if(curr == allPage){
                next = 1;
            }else{
                next = curr + 1;
            }
            if(allPage == 0){
                next = 1;
            }
            this.loadForPage(next);
        },
        /**
         * 载入传入页码的载入数据
         * @param {Number} page 页码
         * @example $('#demo').grid('loadForPage',1);
         * @memberof grid-class
         * @instance
         */
        loadForPage: function(page){
            if(isNaN(page)){
                return;
            }
            var grid = this
                ,footer = keepFooter();

            this._ajax(function(data) {
                grid._loadPagers(page, data[grid.setting.jsonReader.total]);
                grid._loadData(data, grid._getStarRowNumber());
                appendKeepFooter(footer);

            }, {page: page});
            /**
             * 保留上次表格尾
             */
            function keepFooter(){
                if(page > 1){
                    return grid.getFooterRows();
                }
            }
            /**
             * 输出表格尾
             */
            function appendKeepFooter(footer){
                if(grid.setting.keepFooter){
                    grid.appendFooter(footer);
                }
            }
        },
        /**
         * 载入分页信息，当total为空时，不进行更新总行数
         * @param curr 当前页索引
         * @param total 一共几行
         */
        _loadPagers: function(curr, total){
            if(!this.$pagers || this.$pagers.length == 0){
                return;
            }
            var $ps = this.$pagers;
            $ps.find('.currPage').val(curr);
            if(!$ps){
                return;
            }
            var currPageSize = parseInt($ps.find('.pager-pagesize input').val())
                ,to = curr * currPageSize
                ,from = this._rownumbers = to - currPageSize + 1
                ,$from = $ps.find('.pager-infos>label:first');
            $from.html(from);
            $from.next().html(to);

            if(total == undefined){
                return;
            }
            var pages = Math.ceil(total / currPageSize);
            $ps.find('.pager-tool .totalPages').html(pages);
            $from.next().next().html($A.utils.formatNumber(total,0));
            if(this.setting.rownumbers == 'repeat'){
                this._rownumbers = 1;
            }
        },
        /**
         * 获取当前分页信息
         * @returns {Object} result 数据对象
         * @returns {Integer} result.page 当前页码
         * @returns {Integer} result.rows 每页行数
         * @example $('#demo').grid('getCurrentPager');
         * @memberof grid-class
         * @instance
         */
        getCurrentPager: function(){
            if(this.$pagers && this.$pagers.length > 0){
                var result = {};
                result.page = parseInt(this.$pagers.find('.currPage').val());
                result.rows = parseInt(this.$pagers.find('.pager-pagesize input').val());
                return result;
            }
            return null;
        },
        _pagerAddRow: function(){
        	if(this.$pagers){
                var $total = this.$pagers.find('.pager-infos label:last')
                    ,total = $total.text();
                total = parseInt(total.replaceAll(',','')) + 1;
                $total.text($A.utils.formatNumber(total,0));
            }
        },
        _pagerDeleteRow: function(){
        	if(this.$pagers){
				var $total = this.$pagers.find('.pager-infos label:last')
					,total = $total.text();
				total = parseInt(total.replaceAll(',','')) - 1;
				$total.text($A.utils.formatNumber(total,0));
			}
        },
     	hidePager: function(){
            this.$pagers.hide();
            this.resize();
        },
        showPager: function(){
            this.$pagers.show();
            this.resize();
        },
        _hasPager: function(){
        	return this.$pagers && this.$pagers.length > 0;
        },
        _setPagerDownCss: function(css){
        	if(this.$pagerDown){
                this.$pagerDown.css(css);
            }
        },
        _getPagerDownHeight: function(){
        	return this.$pagerDown && this.$pagerDown.is(':visible') ? this.$pagerDown.outerHeight():0;
        },
         /**
         * 获取当前页码
         * @returns {Integer} result 当前页码
         * @example $('#demo').grid('getPageIndex');
         * @memberof grid-class
         * @instance
         */
        getPageIndex: function(){
        	if(this.$pagers && this.$pagers.length > 0){
	        	return this.$pagers.find('.currPage').val();
        	}
        	return -1;
        },
        /**
         * 获取当前页面的起始行号
         */
        _getStarRowNumber: function(){
            var starNum = 1;
            if(this.setting.rownumbers != 'repeat' && this.$pagers && this.$pagers.length > 0){
                starNum = parseInt(this.$pagers.find('.pager-infos>label:first').html());
            }
            return starNum;
        },
        _hasTitlePager: function(){
        	return this.$title.find('.grid-pager').length > 0;
        }
    });
    return GridPager;
});
define('app/widgets/grid/app-grid-merger',['app/core/app-class'], function(Class) {
	
	'use strict';
	
	/**
	 * 网格行合并
	 */
	var GridSummary = Class.create({
		 /**
         * 按列自动合并相同值单元格
         * @param {String|Array<String>} fields 合并列字段
         * @example $('#grid').grid('mergeColumns', 'type');
         * @example $('#grid').grid('mergeColumns', ['type', 'subType']);
         * @memberof grid-class
         * @instance
         */
        mergeColumns: function(fields){
            if($.isArray(fields)){
            	if(this.setting.mergeGroup){
            		mergeColumns.call(this, fields);
            	}else{
            		for(var i = 0; i < fields.length; i++){
            			mergeColumn.call(this, fields[i]);
            		}
            	}
            }else{
                mergeColumn.call(this, fields);
            }
        }
	});
	function mergeColumns(fields){
		var $firstTds = null
			,$prevTds = null
			,spanNum = 1
			,fieldsLen = fields.length
			,$fieldTds = getFieldTds.call(this, fields);
		for(var i = 0; i < $fieldTds[0].length; i++){
			var $tds = getTrTds($fieldTds, i);
			if(i == 0){
				$firstTds = $tds;
				spanNum = 1;
			}else{
				 if(whetherMerge($prevTds, $tds)){
                    spanNum++;
                    merge($firstTds, $tds, spanNum);
                }else{
                    $firstTds = $tds;
                    spanNum = 1;
                }
			}
			$prevTds = $tds;
		}
		function getFieldTds(fields){
			var result = [];
			for(var i = 0; i < fieldsLen; i++){
				result.push(this.$tableBody.find('td[field="' + fields[i] + '"]'))
			}
			return result;
		}
		function getTrTds($fieldTds, index){
			var result = [];
			for(var i = 0; i < fieldsLen; i++){
				result.push($($fieldTds[i][index]));
			}
			return result;
		}
		function whetherMerge($prevTds, $tds){
			for(var i = 0; i < $tds.length; i++){
				var $td = $tds[i]
					,$prevTd = $prevTds[i]
					,text = $td.text(); 
				if($prevTd.text() != text){
					return false;
				}
			}
			return true;
		}
		function merge($firstTds, $tds, spanNum){
			for(var i = 0; i < $tds.length; i++){
				 $tds[i].addClass('grid-cell-merger');
                 $firstTds[i].attr('rowSpan',spanNum);
			}
		}
	}
    /**
     * 合并列中相同值的单元格
     */
    function mergeColumn(filed){
        var $firstTd = null
            ,$prevTd = null
            ,spanNum = 1
            ,$fieldTd = this.$tableBody.find('td[field="' + filed + '"]');
        for(var i = 0; i < $fieldTd.length; i++){
            var $td = $($fieldTd[i]);
            if(i==0){
                $firstTd = $td;
                spanNum = 1;
            }else{
                if(whetherMerge($prevTd, $td)){
                    spanNum++;
                    $td.addClass('grid-cell-merger');
                    $firstTd.attr('rowSpan',spanNum);
                }else{
                    $firstTd = $td;
                    spanNum = 1;
                }
            }
            $prevTd = $td;
        }
        /**
         * 是否为内容相同且紧邻的单元格
         * @param $tdA
         * @param $tdB
         */
        function whetherMerge($tdA, $tdB){
            var text = $tdA.text();
            if(text != '' && text == $tdB.text()){
               return true;
            }
            return false;
        }
    };
	return GridSummary;
});
/**
 * 按钮控件
 * 
 * @author sjq
 */
define('app/widgets/menu/app-menu',["app/core/app-jquery", "app/core/app-core", "app/core/app-options","app/widgets/app-widget"], function($, $A,
		Options,Widget) {
	var Menu = Widget.extend({
		initialize : function(el, options) {
			Menu.superclass.initialize.call(this, options);
			if (!options) {
				options = {};
			};
            this.element = el;
			$.data(el, "menu", {
						options : $.extend({}, Options.appDefaults.Menu,
								options, this.parseOptions(el))
					});

		},
		/**
		 * 转换
		 */
		parseOptions : function(target) {
			var t = $(target);
			return $.extend({}, t.parseOptions(target, [{
										minWidth : 'number',
										duration : 'number',
										hideOnUnhover : 'boolean'
									}]));
		},
		init : function(target) {
			var _self = this;
			// console.log($A)
			// $(target).appendTo('body');
			$(target).addClass('menu-top'); // the top menu

			$(document).unbind('.menu').bind('mousedown.menu', function(e) {
						// var allMenu = $('body>div.menu:visible');
						// var m = $(e.target).closest('div.menu', allMenu);
						var m = $(e.target).closest('div.menu,div.combo-p');
						if (m.length) {
							return
						}
						$('body>div.menu-top:visible').menu('hide');
					});

			var menus = splitMenu($(target));
			for (var i = 0; i < menus.length; i++) {
				createMenu(menus[i]);
			}

			function splitMenu(menu) {
				var menus = [];
				menu.addClass('menu');
				menus.push(menu);
				if (!menu.hasClass('menu-content')) {
					menu.children('div').each(function() {
								var submenu = $(this).children('div');
								if (submenu.length) {
									submenu.insertAfter(target);
									this.submenu = submenu; // point to the sub
									// menu
									var mm = splitMenu(submenu);
									menus = menus.concat(mm);
								}
							});
				}
				return menus;
			}

			function createMenu(menu) {
				//TODO 暂时丢appPanelContainer里面，后续优化
				menu.appendTo($A.getContainer());
				var wh = $(menu).parseOptions(menu[0], ['width', 'height']);
				menu[0].originalHeight = wh.height || 0;
				if (menu.hasClass('menu-content')) {
					menu[0].originalWidth = wh.width || menu._outerWidth();
				} else {
					menu[0].originalWidth = wh.width || 0;
					menu.children('div').each(function() {
						var item = $(this);
						var itemOpts = $.extend({}, item.parseOptions(this, [
												'name', 'iconCls', 'href', {
													separator : 'boolean'
												}]), {
									disabled : (item.attr('disabled')
											? true
											: undefined)
								});
						if (itemOpts.separator) {
							item.addClass('menu-sep');
						}
						if (!item.hasClass('menu-sep')) {
							item[0].itemName = itemOpts.name || '';
							item[0].itemHref = itemOpts.href || '';

							var text = item.addClass('menu-item').html();
							item.empty()
									.append($('<div class="menu-text"></div>')
											.html(text));
							if (itemOpts.iconCls) {
								$('<div class="menu-icon"></div>')
										.addClass(itemOpts.iconCls)
										.appendTo(item);
							}
if (!itemOpts.iconCls){
	item.addClass("menu-item-noico")
}
							if (itemOpts.disabled) {
								_self._setDisabled(target, item[0], true);
							}
							// if (itemOpts.height){
							// item.height(itemOpts.height);
							// }
							if (item[0].submenu) {
								$('<div class="menu-rightarrow"></div>')
										.appendTo(item); // has sub menu
							}

							_self.bindMenuItemEvent(target, item);
						}
					});
					$('<div class="menu-line"></div>').prependTo(menu);
				}
				_self._setMenuSize(target, menu);
				menu.hide();

				_self.bindMenuEvent(target, menu);
			}
		},
		_setMenuSize : function(target, menu) {
			if (target.length&&target.length>0){
				target=target[0];
			}
			var opts = $.data(target, 'menu').options;
			var style = menu.attr('style') || '';
			menu.css({
						display : 'block',
						left : -10000,
						height : 'auto',
						width:'auto',
						overflow : 'hidden'
					});

			var el = menu[0];
			var width = el.originalWidth || 0;

			if (!width) {
				width = 0;
				menu.find('div.menu-text').each(function() {
					//console.log( $(this)._outerWidth())
					if (width < $(this)._outerWidth()) {
						width = $(this)._outerWidth();
					}
					$(this).closest('div.menu-item')._outerHeight($(this)
							._outerHeight()
							+ 2);
				});
			width += 12;
			}

			width = Math.max(width, opts.minWidth);
			// var height = el.originalHeight || menu.outerHeight();
			var height = el.originalHeight || 0;
			if (!height) {
				height = menu.outerHeight();

				if (menu.hasClass('menu-top') && opts.alignTo) {
					var at = $(opts.alignTo);
					var h1 = at.offset().top - $(document).scrollTop();
					var h2 = $(window)._outerHeight() + $(document).scrollTop()
							- at.offset().top - at._outerHeight();
					height = Math.min(height, Math.max(h1, h2));
				} else if (height > $(window)._outerHeight()) {
					height = $(window).height();
					style += ';overflow:auto';
				} else {
					style += ';overflow:hidden';
				}

				// if (height > $(window).height()-5){
				// height = $(window).height()-5;
				// style += ';overflow:auto';
				// } else {
				// style += ';overflow:hidden';
				// }
			}
			var lineHeight = Math.max(el.originalHeight, menu.outerHeight())
					- 2;
			menu._outerWidth(width)._outerHeight(height);
			menu.children('div.menu-line')._outerHeight(lineHeight);

			style += ';width:' + el.style.width + ';height:' + el.style.height;

			menu.attr('style', style);
		},

		/**
		 * bind menu event
		 */
		bindMenuEvent : function(target, menu) {
			var state = $(target).data('menu');
			var _self = this;
			menu.unbind('.menu').bind('mouseenter.menu', function() {
						if (state.timer) {
							clearTimeout(state.timer);
							state.timer = null;
						}
					}).bind('mouseleave.menu', function() {
						if (state.options.hideOnUnhover) {
							state.timer = setTimeout(function() {
										_self._hideAll(target);
									}, state.options.duration);
						}
					});
		},

		/**
		 * bind menu item event
		 */
		bindMenuItemEvent : function(target, item) {
			if (!item.hasClass('menu-item')) {
				return
			}
			var _self = this;
			item.unbind('.menu');
			item.bind('click.menu', function() {
						if ($(this).hasClass('menu-item-disabled')) {
							return;
						}
						// only the sub menu clicked can hide all menus
						if (!this.submenu) {
							_self._hideAll(target);
							var href = this.itemHref;
							if (href) {
								location.href = href;
							}
						}
						var item = $(target).menu('getItem', this);
						$.data(target, 'menu').options.onClick.call(target,
								item);
					}).bind('mouseenter.menu', function(e) {
						// hide other menu
						item.siblings().each(function() {
									if (this.submenu) {
										_self._hideMenu(this.submenu);
									}
									$(this).removeClass('menu-active');
								});
						// show this menu
						item.addClass('menu-active');

						if ($(this).hasClass('menu-item-disabled')) {
							item.addClass('menu-active-disabled');
							return;
						}

						var submenu = item[0].submenu;

						if (submenu) {
							$(target).menu('show', {
										menu : submenu,
										parent : item
									});
						}
					}).bind('mouseleave.menu', function(e) {
						item.removeClass('menu-active menu-active-disabled');
						var submenu = item[0].submenu;
						if (submenu) {
							
							if (e.pageX >= parseInt(submenu.css('left'))) {
								item.addClass('menu-active');
							} else {
								_self._hideMenu(submenu);
							}

						} else {
							item.removeClass('menu-active');
						}
					});
		},

		/**
		 * hide top menu and it's all sub menus
		 */
		_hideAll : function(target) {
			var state = $.data(target, 'menu');
			if (state) {
				if ($(target).is(':visible')) {
					this._hideMenu($(target));
					state.options.onHide.call(target);
				}
			}
			return false;
		},

		/**
		 * show the menu, the 'param' object has one or more properties: left:
		 * the left position to display top: the top position to display menu:
		 * the menu to display, if not defined, the 'target menu' is used
		 * parent: the parent menu item to align to alignTo: the element object
		 * to align to
		 */
		_showMenu : function(target, param) {
			var left, top;
			param = param || {};
			var menu = $(param.menu || target);
			if (param.alignTo && param.autoWidth) {
				var at = $(param.alignTo);
				$(target).menu('setSize', {
							width : at.width()
						});

			}
			$(target).menu('resize', menu[0]);
			if (menu.hasClass('menu-top')) {
				var opts = $.data(target, 'menu').options;
				$.extend(opts, param);
				left = opts.left;
				top = opts.top;
				if (opts.alignTo) {
					var at = $(opts.alignTo);
					var pos;
					if (menu.parent()[0]==at.parent()[0]){
						pos = at.position();
					}else{
						pos = at.offset();
					}
					

					left = pos.left;
					top = pos.top + at._outerHeight();
					if (opts.align == 'right') {
						left += at.outerWidth() - menu.outerWidth();
					}
				}
				if (left + menu.outerWidth() > $(window)._outerWidth()
						+ $(document)._scrollLeft()) {
					left = $(window)._outerWidth() + $(document).scrollLeft()
							- menu.outerWidth() - 5;
				}
				if (left < 0) {
					left = 0;
				}
				top = _fixTop(top, opts.alignTo);
			} else {

				var parent = param.parent; // the parent menu item
				// console.log(parent.offset())
				left = parent.offset().left + parent.outerWidth() - 2;
				if (left + menu.outerWidth() + 5 > $(window)._outerWidth()
						+ $(document).scrollLeft()) {
					left = parent.offset().left - menu.outerWidth() + 2;
				}
				top = _fixTop(parent.position().top - 3);
			}

			function _fixTop(top, alignTo) {
				if (top + menu.outerHeight() > $(window)._outerHeight()
						+ $(document).scrollTop()) {
					if (alignTo) {
						top = $(alignTo).offset().top - menu._outerHeight();
					} else {
						top = $(window)._outerHeight()
								+ $(document).scrollTop() - menu.outerHeight();
					}
				}
				if (top < 0) {
					top = 0;
				}
				return top;
			}

			menu.css({
						left : left,
						top : top
					});
			menu.show(0, function() {
						if (!menu[0].shadow) {
							menu[0].shadow = $('<div class="menu-shadow"></div>')
									.insertAfter(menu);
						}
						menu[0].shadow.css({
									display : 'block',
									zIndex : Options.appDefaults.Menu.zIndex++,
									left : menu.css('left'),
									top : menu.css('top'),
									width : menu.outerWidth(),
									height : menu.outerHeight()
								});
						menu.css('z-index', Options.appDefaults.Menu.zIndex++);
						if (menu.hasClass('menu-top')) {
							$.data(menu[0], 'menu').options.onShow
									.call(menu[0]);
						}
					});
		},
		hide : function(jq) {
			var _slef = this;
			return jq.each(function() {
						_slef._hideAll(this);
					});
		},
		_hideMenu : function(menu) {
			var _self = this;
			if (!menu)
				return;

			hideit(menu);
			menu.find('div.menu-item').each(function() {
						if (this.submenu) {
							_self._hideMenu(this.submenu);
						}
						$(this).removeClass('menu-active');
					});

			function hideit(m) {
				m.stop(true, true);
				if (m[0].shadow) {
					m[0].shadow.hide();
				}
				m.hide();
			}
		},

		show : function(jq, pos) {
			var _self = this;
			return jq.each(function() {
						_self._showMenu(this, pos);
					});
		},
		resize : function(jq, menuEl) {
			var _self = this;
			return jq.each(function() {
						_self._setMenuSize(this, $(menuEl));
					});
		},
		findItem : function(target, text) {
			var result = null;
			var tmp = $('<div></div>');
			function find(menu) {
				menu.children('div.menu-item').each(function() {
							var item = $(target).menu('getItem', this);
							var s = tmp.empty().html(item.text).text();
							if (text == $.trim(s)) {
								result = item;
							} else if (this.submenu && !result) {
								find(this.submenu);
							}
						});
			}
			find($(target));
			tmp.remove();
			return result;
		},
		_setDisabled : function(target, itemEl, disabled) {
			var t = $(itemEl);
			if (!t.hasClass('menu-item')) {
				return
			}

			if (disabled) {
				t.addClass('menu-item-disabled');
				if (itemEl.onclick) {
					itemEl.onclick1 = itemEl.onclick;
					itemEl.onclick = null;
				}
			} else {
				t.removeClass('menu-item-disabled');
				if (itemEl.onclick1) {
					itemEl.onclick = itemEl.onclick1;
					itemEl.onclick1 = null;
				}
			}
		},

		appendItem : function(target, param) {
			var menu = $(target);
			if (param.parent) {
				if (!param.parent.submenu) {
					var submenu = $('<div class="menu"><div class="menu-line"></div></div>')
							.appendTo('body');
					submenu.hide();
					param.parent.submenu = submenu;
					$('<div class="menu-rightarrow"></div>')
							.appendTo(param.parent);
				}
				menu = param.parent.submenu;
			}
			if (param.separator) {
				var item = $('<div class="menu-sep"></div>').appendTo(menu);
			} else {
				var item = $('<div class="menu-item"></div>').appendTo(menu);
				$('<div class="menu-text"></div>').html(param.text)
						.appendTo(item);
			}
			if (param.iconCls)
				$('<div class="menu-icon"></div>').addClass(param.iconCls)
						.appendTo(item);
			if (param.id)
				item.attr('id', param.id);
			if (param.name) {
				item[0].itemName = param.name
			}
			if (param.href) {
				item[0].itemHref = param.href
			}
			if (param.onclick) {
				if (typeof param.onclick == 'string') {
					item.attr('onclick', param.onclick);
				} else {
					item[0].onclick = eval(param.onclick);
				}
			}
			if (param.handler) {
				item[0].onclick = eval(param.handler)
			}
			if (param.disabled) {
				this._setDisabled(target, item[0], true)
			}

			this.bindMenuItemEvent(target, item);
			this.bindMenuEvent(target, menu);
			this._setMenuSize(target, menu);
		},
		removeItem : function(target, itemEl) {
			function removeit(el) {
				if (el.submenu) {
					el.submenu.children('div.menu-item').each(function() {
								removeit(this);
							});
					var shadow = el.submenu[0].shadow;
					if (shadow)
						shadow.remove();
					el.submenu.remove();
				}
				$(el).remove();
			}
			var menu = $(itemEl).parent();
			removeit(itemEl);
            this._setMenuSize(target, menu);
		},
		options:function(target){
				var opts = $(target).data('menu').options;
				return opts;
		},

		_setVisible : function(target, itemEl, visible) {
			var menu = $(itemEl).parent();
			if (visible) {
				$(itemEl).show();
			} else {
				$(itemEl).hide();
			}
			this._setMenuSize(target, menu);
		},

		destroy : function(target) {
			var _slef = this;
            this._destroyMenu(_slef.element);
		},
		_destroyMenu : function(target) {
			var _self=this;
			$(target).children('div.menu-item').each(function() {
						_self.removeItem(target, this);
					});
			if (target.shadow)
				target.shadow.remove();
			$(target).remove();
		},
		setText : function(jq, param) {
			return jq.each(function() {
						$(param.target).children('div.menu-text')
								.html(param.text);
					});
		},
/**
 * set the menu icon class param: { target: DOM object, indicate the menu item
 * iconCls: the menu item icon class }
 */
		setIcon : function(jq, param) {
			return jq.each(function() {
						$(param.target).children('div.menu-icon').remove();
						if (param.iconCls) {
							$('<div class="menu-icon"></div>')
									.addClass(param.iconCls)
									.appendTo(param.target);
						}
					});
		},
/**
 * get the menu item data that contains the following property: { target: DOM
 * object, the menu item id: the menu id text: the menu item text iconCls: the
 * icon class href: a remote address to redirect to onclick: a function to be
 * called when the item is clicked }
 */
		getItem : function(jq, itemEl) {
			var t = $(itemEl);
			var item = {
				target : itemEl,
				id : t.attr('id'),
				text : $.trim(t.children('div.menu-text').html()),
				disabled : t.hasClass('menu-item-disabled'),
				// href: t.attr('href'),
				// name: t.attr('name'),
				name : itemEl.itemName,
				href : itemEl.itemHref,
				onclick : itemEl.onclick
			};
			var icon = t.children('div.menu-icon');
			if (icon.length) {
				var cc = [];
				var aa = icon.attr('class').split(' ');
				for (var i = 0; i < aa.length; i++) {
					if (aa[i] != 'menu-icon') {
						cc.push(aa[i]);
					}
				}
				item.iconCls = cc.join(' ');
			}
			return item;
		},
		enableItem : function(jq, itemEl) {
			var _slef = this;
			return jq.each(function() {
						_slef._setDisabled(this, itemEl, false);
					});
		},
		disableItem : function(jq, itemEl) {
			var _slef = this;
			return jq.each(function() {
						_slef._setDisabled(this, itemEl, true);
					});
		},
		showItem : function(jq, itemEl) {
			var _slef = this;
			return jq.each(function() {
						_slef._setVisible(this, itemEl, true);
					});
		},
		hideItem : function(jq, itemEl) {
			var _slef = this;
			return jq.each(function() {
						_slef._setVisible(this, itemEl, false);
					});
		},
		_setSize : function(target, param) {

			var opts = $.data(target, 'menu').options;

			if (param) {
				if (param.width)
					opts.width = param.width;
				if (param.height)
					opts.height = param.height;
			}
			if (opts.width) {
				$(target).outerWidth(opts.width);
			}
			if (opts.height) {
				$(target).outerHeight(opts.height);
			}
			//$(target).menu('resize', menu[0]);

		},
		setSize : function(jq, param) {
			var _slef = this;
			return jq.each(function() {

						_slef._setSize(this, param);
					});
		}
	});

	
	$.fn.menu = function(option, param){
		var methodReturn = undefined;
		var $set = this.each(function() {
					var $this = $(this);
					var data = $this.data('menuObj'),state = $this.data('menu');
					var options = typeof option === 'object' && option;
					if (!state){
						$this.data('menuObj', (data = new Menu(this,options)));	
						data.init(this);
					}else{
						$.extend(state.options, options);
						
					}
					
					if (typeof option === 'string')
						methodReturn = data[option]($this,param);
				});
		return (methodReturn === undefined) ? $set : methodReturn;
	};

	$.fn.menu.Constructor = Menu;
	return Menu;
});
/**
 * 按钮控件
 * 
 * @author sjq
 */
define('app/widgets/button/app-menubutton',["app/core/app-jquery", "app/core/app-core", "app/core/app-options", "app/widgets/menu/app-menu", "app/widgets/button/app-button"], function($, $A,
		Options,Menu,Button) {
	/**
	 * @class
	 * @name MenuButton
	 * @classdesc 下拉按钮
	 * @extends Button
	 * 
	 */
	var MenuButton = Button.extend({
				initialize : function(options) {
					if (!options) {
						options = {};
					}
					Button.superclass.initialize.call(this, options);
					this.attrs= $.extend({},
										Options.appDefaults.MenuButton,
										options, this.parseOptions());
				   this.init();
				},
				parseOptions : function() {
					var t = $(this.element);
					return $.extend({}, t.parseOptions(this.element, {
								disabled : $(this).attr('disabled') == 'true',
								plain : ($(this).attr('plain') == 'false'
										? false
										: true),
								menu : $(this).attr('menu'),
								duration : (parseInt($(this).attr('duration')) || 100)
							}));
				},
				/**
				 * 初始化
				 */
				init : function() {
					var target=this.element;
					var opts = this.attrs;
					if (typeof opts.menu=="string"){
						if (opts.menu && opts.menu.indexOf("#") < 0) {
							opts.menu = "#" + opts.menu;
						}
					}
					var _slef = this;
					var btn = $(target);
					btn.removeClass('m-btn-active m-btn-plain-active').addClass("m-btn");
					btn.button(opts);
					var txtcon = btn.find(".l-btn-left");
		$("<span></span>").addClass("m-btn-downarrow").appendTo(txtcon);
		$("<span></span>").addClass("m-btn-line").appendTo(txtcon);
					if (opts.menu) {
						$(opts.menu).menu({
							onShow : function() {
								btn.addClass((opts.plain == true)
										? 'm-btn-plain-active'
										: 'm-btn-active');
							},
							onHide : function() {
								btn.removeClass((opts.plain == true)
										? 'm-btn-plain-active'
										: 'm-btn-active');
							}
						});
					};
					btn.unbind('.menubutton');
					if (opts.menu) {
						btn.bind('click.menubutton', function() {
									if (!getButtonState()) {
										showMenu();
										return false;
									}
								});
						var timeout = null;
						btn.bind('mouseenter.menubutton', function() {

									if (!getButtonState()) {
										timeout = setTimeout(function() {
													showMenu();
												}, opts.duration);
										return false;
									}
								}).bind('mouseleave.menubutton', function() {
									if (timeout) {
										clearTimeout(timeout);
									}
									$(opts.menu).triggerHandler("mouseleave");
								});
					}

					function showMenu() {
						var left = btn.offset().left;
						if (left + $(opts.menu).outerWidth() + 5 > $(window)
								.width()) {
							left = $(window).width()
									- $(opts.menu).outerWidth() - 5;
						}

						$('.menu-top').menu('hide');
						$(opts.menu).menu('show', {
									alignTo : btn,
									autoWidth : true,
									menuAlign : opts.menuAlign
								});
						btn.blur();
					};

					function getButtonState() {
						return $(target).button("options").disabled;
					};
				},
				_setDisabled : function(target, disabled) {
					var opts = this.attrs;
					var target=this.element;
					// $(target).removeClass("l-btn-disabled
					// l-btn-plain-disabled");
					if (disabled) {
						opts.disabled = true;
						$(target).button("disable");
					} else {
						opts.disabled = false;
						$(target).enable("enable");
					}
				},
				/**
				 * 启用
				 * @memberof Button
				 */
				enable : function(jq) {
					this._setDisabled(false);
				},
				/**
				 * 禁用
				 * @memberof Button
				 */
				disable : function(jq) {
					this._setDisabled( true);
				},
				destroy:function () {
					var opts = this.attrs;
					opts.menu&&$(opts.menu).length&&$(opts.menu).data('menuObj').destroy();
				}
			});


	$.fn.menubutton = function(option) {
		var methodReturn = undefined;
		var $set = this.each(function() {
					var $this = $(this);
					var data = $this.data('menubuttonObj'), state = $this
							.data('menubutton');
					var options = typeof option === 'object' ?option:{};
					if (data) {
						$.extend(data.attrs, options);
					} else {
						options=$.extend({},options,{"element":this});
						$this.data('menubuttonObj', (data = new MenuButton(options)));
						$(this).removeAttr('disabled');
					}
					if (typeof option === 'string')
						methodReturn = data[option]($this);

				});
		return (methodReturn === undefined) ? $set : methodReturn;

	};

	return MenuButton;
});
define('app/widgets/grid/app-grid-toolbar',['app/core/app-class', 'app/core/app-core', 
        'app/widgets/button/app-menubutton'], function(Class, App) {

    'use strict';

    var GridToolbar = Class.create({
    	/**
		 * 初始化工具栏
		 */
		_initToolbar: function(){
			var btns = this.setting.toolbar;
			if(!btns || btns.length == 0){
				return;
			}
			var result = ''
				,$ul = this.$toolbar.find('>ul');
			for(var i = 0 ;i < btns.length; i++){
				var btn = btns[i]
					,$btn = null;
				if(!btn.id){
					btn.id = App.uuid();
				}
				if(btn.children && btn.children.length > 0){
					$btn = initMenuButtonHtml(btn);
				}else{
					$btn = initButtonHtml(btn);
				}
				$ul.append($('<li>').append($btn));
			}
		},
		/**
		 * 禁用工具条的按钮
		 * @param btnId {String} 按钮id
		 * @example $('#demo').grid('disableToolbarBtn', 'addBtn');
		 * @memberof grid-class
		 * @instance
		 */
		disableToolbarBtn: function(btnId){
			var $btn = this.$toolbar.find('#' + btnId);
			$btn.button('disable');
		},
		/**
		 * 启用工具条的按钮
		 * @param btnId {String} 按钮id
		 * @example $('#demo').grid('enableToolbarBtn', 'addBtn');
		 * @memberof grid-class
		 * @instance
		 */
		enableToolbarBtn: function(btnId){
			var $btn = this.$toolbar.find('#' + btnId);
			$btn.button('enable');
		}
    });
    /**
	 *生成菜单按钮
	 */
	function initMenuButtonHtml(btn){
		var $btn = $('<a id="' + btn.id + '" >' + btn.text + '</a>');
		btn.menuId = App.uuid();
		initMenu(btn);
		$btn.menubutton({
			iconCls: btn.iconCls,
			onClick: btn.handler,
			plain: false,
			menu: btn.menuId,
			menuStyle: btn.style ? btn.style : 'width:150px'
		});
		return $btn;
		function initMenu(btn){
			var children = btn.children
				,$menu = $('<div id="' + btn.menuId + '" style="' + btn.menuStyle + ';display:none;"></div>');
			for(var i = 0; i < children.length; i++){
				var child = children[i];
				if(child.menuSep){
					$menu.append('<div class="menu-sep"></div>');
				}else{
					initMenuItem(child);
				}
			}
			$.$appPanelContainer.append($menu);
			function initMenuItem(child){
				if(!child.id){
					child.id = App.uuid();
				}
				var $child = $('<div id="' + child.id 
					+ '" ' + getDataOptions(child) + '>' + child.text + '</div>');
				$menu.append($child);
				$child.on('click.grid.toolbar.api', function(e){
					if(child.handler){
						child.handler();
					}
				});
			}
			function getDataOptions(btn){
				var result = '';
				if(btn.iconCls){
					result += 'iconCls:\'' + btn.iconCls + '\'';
				}
				if(result){
					result = 'data-options="'+ result +'"';
				}
				return result;
			}
		}
	}
	/**
	 * 生成普通按钮
	 */
	function initButtonHtml(btn){
		var $btn = $('<a id="' + btn.id + '" >' + btn.text + '</a>');
		$btn.button({
			iconCls: btn.iconCls,
			onClick: btn.handler
		});
		return $btn;
	}
    return GridToolbar;
});
/**
 * 网格控件
 * @author Mr.T
 */
define('app/widgets/grid/app-grid',['app/core/app-base', 'app/core/app-jquery', 'app/core/app-options', 'app/core/app-core',
        'app/data/app-ajax', 'app/widgets/grid/app-grid-headerContextMenu', 'app/widgets/grid/app-grid-editor',
        'app/widgets/grid/app-grid-formatter', 'app/widgets/grid/app-grid-print', 'app/widgets/grid/app-grid-sort',
        'app/widgets/grid/app-grid-summary', 'app/widgets/grid/app-grid-ext', 'app/widgets/grid/app-grid-pager', 
        'app/widgets/grid/app-grid-merger', 'app/widgets/grid/app-grid-toolbar', 'jquery/jquery.mousewheel'],
    function(Base, $, Options, App, AppAjax, GridHeaderContextMenu,
             GridEditor, Formatter, GridPrint, GridSort, GridSummary,
             GridExt, GridPager, GridMerger, GridToolbar) {

	'use strict';
	var scrollBarWidth = 18
		,cellBorderWidth = 1
		,minWidth = 20
		,currentRowCls = 'row-current'
		,hoverRowCls = 'row-hover'
		,selectedRowCls = 'row-selected'
		,checkedRowCls = 'row-checked'
		,loading = '正在努力加载中...'
		,empty = '无记录'
		,error = '数据加载出错'
		,IE8_TD_EMPTY = ' '
		,VIEW_TYPE={GRID_VIEW:'GridView',CARD_VIEW:'CardView'};//视圉类型，GRID_VIEW为网格视力,CARD_VIEW为卡片式视图

	/**
	 * @class
	 * @classdesc 表格
	 * @name grid-class
	 * @desc 表格的初始化方法
	 * @param {input} table 要渲染的table组件
	 * @param {object} options 组件的选项设置
	 * @author Mr.T
	 * @example $('#demo').grid({
	 * &#9;title: '数据控制',
	 * &#9;rownumbers: true,
	 * &#9;url: 'platform/sample/base/ui/gridDemo.do',
	 * &#9;columns: [
	 * &#9;[
	 * &#9;&#9;{title:'组合1-3',colspan:3},
	 * &#9;&#9;{title:'主列标题7=1',field:'c1',width:200,rowspan:2},
	 * &#9;&#9;{title:'组合3-6',colspan:3}
	 * &#9;],[
	 * &#9;&#9;{title: '主列标题1',field: 'c1',width: 100},
	 * &#9;&#9;{title: '主列标题2',field: 'c2',width: 120},
	 * &#9;&#9;{title: '主列标题3',field: 'c3',width: 150},
	 * &#9;&#9;{title: '主列标题4',field: 'c4',width: 200},
	 * &#9;&#9;{title: '主列标题5',field: 'c5',width: 250},
	 * &#9;&#9;{title: '主列标题6',field: 'c6',width: 500}
	 * &#9;]]
	 * });
	 *
	 */
	var Grid = Base.extend({
		Implements: [GridHeaderContextMenu, GridEditor, GridPrint, GridSort, GridSummary, GridExt, GridPager, GridMerger, GridToolbar],
		initialize: function(table, options) {
			this.$t = $(table).css({display:'none'});
			this.$t.removeClass('app-grid');
			this.options = $.extend(true, {}, options);
			this._init();

		},
		/**
		 * 初始化网格
		 */
		_init: function(){
			this._initOptions();
			this._eventRegister();
			this._initElement();
			this._initToolbar();
			this._initPagination();
			this._initHeaderHtml();
			this._switchView(this.viewType,false);
			this._fixHeight();
			this._initData();
			this._fit();
			this._registEvents();
			this._initEditor();
			this._initContextMenu();
		},
		/**
		 * 视力切换 by sjq
		 */
		_switchView:function(viewType,isLoadData){
			this.$tableBodyMain.find('>div>table>tbody').html('');
			if (viewType==VIEW_TYPE.GRID_VIEW){
				this.$tableBody.removeClass("grid-card-view");
				this.$tableHeader.show();
				if (this.setting.view&&this.setting.view["region"]){
					this.$cardRegion[this.setting.view["region"]].find('.grid-body-card-form').hide();
				}
				if (this.setting.view.cardListTpl){
					
					if (this.$cardRegion["center"].find(".grid-card-view-list").length>0){
						 var $firstChild=this.$cardRegion["center"].find(".grid-body-content");
						 var carListTpl=$firstChild.children();
						 $firstChild.append(this.$cardRegion["center"].find('.grid-view'));
						 carListTpl.remove();
						//this.$cardRegion["center"].find(".grid-body-content").append(();
					}
					this.$cardRegion["center"].find('.grid-view').show();
					
				}
			   
			}
			if (viewType==VIEW_TYPE.CARD_VIEW){
				this.$cardRegion[this.setting.view["region"]].find('.grid-body-card-form').show();
				if (this.setting.view.formEl){
					if (!this.setting.view.loadForm){
						if (typeof this.setting.view.formEl=="string"){
							this.$cardRegion[this.setting.view["region"]].find('.grid-body-card-form').append($A("#"+this.setting.view.formEl));

							this.setting.view.formEl=$A("#"+this.setting.view.formEl);
						}else{
							
							this.$cardRegion[this.setting.view["region"]].find('.grid-body-card-form').append(this.setting.view.formEl);

						}
						this.setting.view.loadForm=true;
					}
					this.setting.view.formEl.show();
				}
				this.$tableBody.addClass("grid-card-view");
				if (this.setting.view.cardListTpl){
					if (this.$cardRegion["center"].find(".grid-card-view-list").length==0){
						var cardListTpl=$(this.setting.view.cardListTpl);
						this.$cardRegion["center"].find(".grid-body-content").append(cardListTpl);
						cardListTpl.find(".grid-card-view-list").append(this.$cardRegion["center"].find('.grid-view'));
					}
				}
				this.$tableHeader.hide();
				 this.$tableBodyMessage.hide();
			}
			if (isLoadData){
			   /// this.reflashData();
				this._loadData(this.data, 1);
				this.resize();
			}
		},
		/**
		 * 初始化设置
		 * @param options
		 */
		_initOptions: function (){
			var customSetting = $.extend(this._getAttrOptions(), this.options);
			if($.isFunction(customSetting.beforeRender)){
				customSetting.beforeRender.call(this, customSetting);
			}
			var s = this.setting = $.extend({}, Options.appDefaults.Grid, customSetting);
			this.setting.columnManager = false;
			this._column = {};
			this._fieldColumns = {};
			this._operator = {};
			this._rowData = {};
			this._ts = {};
			this._newData = {updated:{}, inserted:{}, deleted:{}};
			this.editor = {};
			if(!s.id){
				s.id = App.uuid();
			}
			if(s.headRowHeight == 0){
				s.headRowHeight = Options.appDefaults.Grid.headRowHeight;
			}
			if(!s.url){
				s.url = s.action;
			}
			if(s.height != 'push'){
				if(!customSetting.follow){
					s.follow = 'none';
				}
				this.$t.parent().addClass('app-grid-wrap');
			}
			s.checkbox = s.checkbox || s.multiple == true;
			this.data = {};
			this.data[this.setting.jsonReader.rows] = [];
			if(!s.columns){
				s.columns = [[]];
			}
			if(!s.frozenColumns){
				s.frozenColumns = [[]];
			}
			if(!s.frozenColumnsRight){
				s.frozenColumnsRight = [[]];
			}

			this._splitColumns();

			if(s.queryParams){
				this.setParameter(s.queryParams);
			}
			if(s.fixedParams){
				this.setFixedParameter(s.fixedParams);
			}
			this._sumCols = [];
			this._sumColMap = {};
			this._initSystemCol();
			this._initFormula();
			this._initViewColumns();
			this._markChildrenAndParent();
			this._rownumbers = 1;
			if(s.summary && s.summary.template){
				s.summary._template = new Template(s.summary.template);
			}
			if(!$.isArray(s.columns[0]) || s.columns[0].length < 1){
				throw new Error('columns非二维数组，或无实体列存在');
				$messager.error('表格配置错误，无法展现');
			}
			/* this.setting.switchView=true;

			 this.setting.view={
			 type:'CardView',region:'left',
			 formEl:'afaAppMenuPage_form_show',
			 cardWidth:400,

			 rowRender:function(rowData){

			 return "<div style='height:300px;'></div>"

			 }

			 }*/
			//新增卡片视图  by sjq begin
			if (this.setting.view&&this.setting.view.isDefault){
				this.viewType=this.setting.view.type;
			}else{
				this.viewType=VIEW_TYPE.GRID_VIEW;
			}
			//新增卡片视图  by sjq end
		},
		/**
		 * 分割列到各自的视图中
		 */
		_splitColumns: function(){
			var s = this.setting
				,cols = s.columns;
			for(var i = 0 ; i < cols.length; i++){
				for(var j = 0 ; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.frozen == 'left'){
						pushMulArray(s.frozenColumns, col, i);
					}else if(col.frozen == 'right'){
						pushMulArray(s.frozenColumnsRight, col, i);
					}
				}
			}
			for(var i = 0 ; i < cols.length; i++){
				for(var j = 0 ; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.frozen == 'left' || col.frozen == 'right'){
						cols[i].splice(j, 1);
						j--;
					}
				}
			}
			function pushMulArray(arr, col, level){
				if(arr.length <= level){
					for(var i = 0; i <= level; i++){
						if(!$.isArray(arr[level])){
							arr.push([]);
						}
					}
				}
				var lvlCol = arr[level];
				lvlCol.push(col);
			}
		},
		/**
		 * 事件的注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterDataRender)){
				this.on('afterDataRender', s.afterDataRender);
			}
			if($.isFunction(s.beforeBeginEdit)){
				this.on('beforeBeginEdit', s.beforeBeginEdit);
			}
			if($.isFunction(s.beforeEndEdit)){
				this.on('beforeEndEdit', s.beforeEndEdit);
			}
			if($.isFunction(s.beforeLoad)){
				this.on('beforeLoad', s.beforeLoad);
			}
			if($.isFunction(s.beforeSelect)){
				this.on('beforeSelect', s.beforeSelect);
			}
			if($.isFunction(s.beforeSortColumn)){
				this.on('beforeSortColumn', s.beforeSortColumn);
			}
			if($.isFunction(s.onBeginEdit)){
				this.on('onBeginEdit', s.onBeginEdit);
			}
			if($.isFunction(s.onClickCell)){
				this.on('onClickCell', s.onClickCell);
			}

			if($.isFunction(s.onClickRow)){
				this.on('onClickRow', s.onClickRow);
			}
			if($.isFunction(s.onDataChange)){
				this.on('onDataChange', s.onDataChange);
			}
			if($.isFunction(s.onDblClickCell)){
				this.on('onDblClickCell', s.onDblClickCell);
			}
			if($.isFunction(s.onDblClickRow)){
				this.on('onDblClickRow', s.onDblClickRow);
			}
			if($.isFunction(s.onEndEdit)){
				this.on('onEndEdit', s.onEndEdit);
			}

			if($.isFunction(s.onLoadSuccess)){
				this.on('onLoadSuccess', s.onLoadSuccess);
			}
			if($.isFunction(s.onSelect)){
				this.on('onSelect', s.onSelect);
			}
			if($.isFunction(s.onSelectAll)){
				this.on('onSelectAll', s.onSelectAll);
			}
			if($.isFunction(s.onSortColumn)){
				this.on('onSortColumn', s.onSortColumn);
			}
			if($.isFunction(s.onUnselect)){
				this.on('onUnselect', s.onUnselect);
			}
			if($.isFunction(s.onUnselectAll)){
				this.on('onUnselectAll', s.onUnselectAll);
			}
			if($.isFunction(s.rowCls)){
				this.on('rowCls', s.rowCls);
			}
		},
		/**
		 * 获取页面元素的属性作为组件对象的属性
		 */
		_getAttrOptions: function(){
			var attr = App.getAttrFromElement(this.$t)
				,columns = this._getColumnOptions();
			if(columns.length > 0){
				attr.columns = columns;
			}
			return attr;
		},
		/**
		 * 获取页面元素的列配置作为组件对象的列
		 */
		_getColumnOptions: function(){
			var $tr = this.$t.find('>thead>tr')
				,columns = [];
			$tr.each(function(){
				var t = [];
				var $th = $(this).find('>th');
				$th.each(function(){
					var col = App.getAttrFromElement($(this));
					col.title = this.innerHTML;
					t.push(col);
				});
				columns.push(t);
			});
			return columns;
		},
		/**
		 * 设置系统列
		 */
		_initSystemCol: function(){
			var s = this.setting;
			if(s.checkbox){
				var checkbox = {};
				checkbox.sysCol = true;
				checkbox.resizable = false;
				checkbox.field = '_checkbox';
				checkbox.title = '<input type="checkbox" />';
				checkbox._html = checkbox.title;
				checkbox.width = 30;
				checkbox.showTree = false;
				checkbox.rowspan = s.columns.length;
				s.frozenColumns[0].unshift(checkbox);
			}else if(s.radiobox){
				var radiobox = {};
				radiobox.sysCol = true;
				radiobox.resizable = false;
				radiobox.field = '_radiobox';
				radiobox.title = '<input name="' + App.uuid() + '" type="radio"/>';
				radiobox._html = radiobox.title;
				radiobox.width = 30;
				radiobox.showTree = false;
				radiobox.rowspan = s.columns.length;
				s.frozenColumns[0].unshift(radiobox);
			}
			if(s.rownumbers == 'normal' || s.rownumbers == 'repeat'){
				var rownumbers = {};
				rownumbers.sysCol = true;
				rownumbers.resizable = false;
				rownumbers.field = '_rownumbers';
				rownumbers.title = '序号';
				rownumbers.cls = 'grid-row-head';
				rownumbers.width = 30;
				rownumbers.showTree = false;
				rownumbers.rowspan = s.columns.length;
				s.frozenColumns[0].unshift(rownumbers);
			}
		},
		/**
		 * 收集表达式列填充到容器中
		 */
		_initFormula: function(){
			var s = this.setting;
			s.formulaContainer = [];
			this._initFormulaColumn(s.frozenColumns);
			this._initFormulaColumn(s.frozenColumnsRight);
			this._initFormulaColumn(s.columns);
		},
		/**
		 * 收集表达式列
		 */
		_initFormulaColumn: function(cols){
			for ( var i = 0; i < cols.length; i++) {
				for(var j = 0; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.field && col.formula){
						var formula = col.formula;
						formula = formula.replace(new RegExp('getNum\\(\'', 'gm'), 'formulaHelper.getNum(__obj__, \'');
						formula = formula.replace(new RegExp('getStr\\(\'', 'gm'), 'formulaHelper.getStr(__obj__, \'');
						try{
							new Function([], 'return (' + formula + ');');
							this.setting.formulaContainer.push({field: col.field, formula: formula});
						}catch(e){
							this.setting.formulaContainer.push({field: col.field, formula: '"表达式错误"'});
						}
					}
				}
			}
		},
		/**
		 * 初始化网格列的设置
		 * 固定列、右固定列和主视图列
		 */
		_initViewColumns: function(){
			var s = this.setting;
			s.viewLeftWidth = this._initColumnsGroup(s.frozenColumns, 'left');
			s.viewRightWidth = this._initColumnsGroup(s.frozenColumnsRight, 'right');
			s.viewMainWidth = this._initColumnsGroup(s.columns, 'main') - cellBorderWidth; //第一列没有左边框
		},
		/**
		 * 初始化列组，并返回列组的合计宽度
		 * @param cols
		 */
		_initColumnsGroup: function(cols, viewPos){
			var fixWidth = 0;
			if(cols){
				for ( var i = 0; i < cols.length; i++) {
					for(var j = 0; j < cols[i].length; j++){
						var col = cols[i][j];
						if(col.hidden){
							if(col.lockTree == undefined){
								col.lockTree = true;
							}
							if(col.showTree == undefined){
								col.showTree = false;
							}
						}
						col = cols[i][j] = $.extend({}, Options.appDefaults.Column, col);
						this._initColumn(col);
						fixWidth += getColumnWidth(col);
						col.viewPos = viewPos;
					}
				}
			}
			return fixWidth;
			/**
			 * 获取列的占位宽度
			 */
			function getColumnWidth(col){
				var result = 0;
				if(col.field){
					result = col.width + cellBorderWidth;
				}
				if(col.hidden){
					result = 0;
				}
				return result;
			}
		},
		/**
		 * 根据列设置预定义变量，
		 * 	并返回列宽，如果列colspan大于1，则列宽为0
		 */
		_initColumn: function(col){
			var buttons = col.buttons;
			if(buttons){
				col.sysCol = true;
				this.setting._hasOperator = true;
				var hasDisabledFunc = false;
				for(var i = 0 ; i < buttons.length; i++){
					var btn = buttons[i];
					if(!btn.id){
						btn.id = App.uuid();
					}
					if($.isFunction(btn.disabled)){
						hasDisabledFunc = true;
					}
					this._operator[btn.id] = btn.handler;
				}
				initHeadColumnButton.call(this, col, buttons);
				if(!hasDisabledFunc){//缓存按钮的html
					col._html = '';
					for(var i = 0; i < buttons.length; i++){
						col._html += this._createRowBtn(buttons[i]);
					}
				}
			}
			if(col.colspan && col.colspan > 1){
				delete col.field;
			}else if(col.field){
				if(typeof(col.width) == 'string'){
					col.width = parseInt(col.width);
				}
			}
			var formatter = col.formatter;
			if(formatter){
				if(typeof(formatter) == 'string' && formatter.indexOf('{') >= 0){
					col.template = new Template(formatter);
				}
			}
			if(col.summary && !this._sumColMap[col.field]){
				this._sumCols.push(col);
				this._sumColMap[col.field] = col;
			}
			if(col.rowHeader){
				col.cls = ' grid-row-head';
			}
			if(col.cls){
				col.cls += ' grid-cell-'+col.align;
			}else{
				col.cls = ' grid-cell-'+col.align;
			}
			if(!col.title){
				col.title = col.field;
			}
			col._cid = App.uuid();
			this._column[col._cid] = col;
			this._fieldColumns[col.field] = col;
			if(col.titleVar){
				if(!this._titleVarColumns){
					this._titleVarColumns = {};
				}
				col.oriTitle = col.title;
				this._titleVarColumns[col._cid] = col;
			}
			initBodyTdAttrExp(col);
			initFooterTdAttrExp(col);
			function initBodyTdAttrExp(col){
				if(!col.field){
					return;
				}
				var attr = '_cid="' + col._cid + '"';
				if(col.editor && (!col.editor.options || (col.editor.options && !col.editor.options.readonly ))){
					col.cls = col.cls ? col.cls + ' grid-td-editable' : 'grid-td-editable'
				}
				if(col.field){
					attr += ' field="' + col.field + '"';
				}
				if(col.buttons){
					attr += ' opts="true"';
				}
				col.bodyTdAttrExp = attr;
			}
			function initFooterTdAttrExp(col){
				if(!col.field){
					return;
				}
				var attr = '_cid="' + col._cid + '"';
				if(col.field){
					attr += ' field="' + col.field + '"';
				}
				if(col.buttons){
					attr += ' opts="true"';
				}
				col.footerTdAttrExp = attr;
			}
			/**
			 * 生成表头按钮
			 */
			function initHeadColumnButton(col, buttons){
				var title = col.title + '';
				if(isNaN(title.replaceAll(',', ''))){
					return;
				}
				var bis = title.split(',')
					,btitle = '';
				for(var i = 0; i < bis.length; i++){
					var bi = bis[i]
						,btn = buttons[bi];
					if(!btn){
						return;
					}else{
						btitle += this._createRowBtn(btn);
					}
				}
				bis.sort();
				for(var i = bis.length - 1; i >= 0; i--){
					buttons.splice(bis[i], 1);
				}
				col._isBtn = true;
				col.title = btitle;
			}
		},
		/**
		 * 生成按钮
		 */
		_createRowBtn: function(btn, rowData, rowIndex){
			var disabled = '';
			if($.isFunction(btn.disabled)){
				if(btn.disabled(rowData, rowIndex)){
					disabled = ' disabled';
				}
			}else if(btn.disabled === true){
				disabled = ' disabled';
			}
			return '<a id="' + btn.id + '" class="rowBtn' +
				disabled + '" tab-index="-1">' +
				'<i class="' + btn.iconCls + '" title="' + btn.text + '"></i>' +
				'</a>';
		},
		/**
		 * 绑定行的编辑
		 */
		_onRowOperatorBtnClick: function(e){
			var $btn = $(e.currentTarget);
			if($btn.hasClass('disabled')){
				e.stopPropagation();
				return;
			}
			var bid = $btn.attr('id')
				,$row = $btn.closest('tr')
				,rowIndex = $row.index()
				,rowData = this._converRowToData($row)[0];
			this._renderRow(rowIndex);
			if(this._operator[bid]){
				this._operator[bid].call(this, rowData, rowIndex);
				e.stopPropagation();
			}
		},
		/**
		 * 标注列的上下级关系
		 */
		_markChildrenAndParent: function(){
			var level = this.setting.columns.length
				,colMap = this._column;
			try{
				mark(this.setting.frozenColumns);
			}catch(e){
				throw new Error('左固定列设置错误：' + e);
			}
			try{
				mark(this.setting.columns);
			}catch(e){
				throw new Error('主视图列设置错误：' + e);
			}
			try{
				mark(this.setting.frozenColumnsRight);
			}catch(e){
				throw new Error('右固定列设置错误：' + e);
			}
			/**
			 * 标注父节点和子节点
			 */
			function mark(view){
				if(!view){
					return;
				}
				var matrix = buildMatrix(view);
				for(var i = 1; i < matrix.length; i++){
					for(var j = 0; j < matrix[i].length; j++){
						var parentColumn = matrix[i-1][j]
							,thisColumn = matrix[i][j];
						if(typeof(thisColumn) == 'string'){
							continue;
						}
						if(typeof(parentColumn) == 'string'){
							parentColumn = colMap[parentColumn];
						}
						thisColumn.parentColumn = parentColumn;
						var children = parentColumn.children;
						if(!children){
							children = parentColumn.children = [];
						}
						children.push(thisColumn);
						delete parentColumn.field;
					}
				}
			}
			/**
			 * 构造列矩阵
			 */
			function buildMatrix(oriArr){
				var matrix = [];
				for(var i = 0 ;i < level; i++){
					matrix.push([]);
				}
				if(level > 1 && oriArr.length == 1){
					for(var i = 0; i < oriArr[0].length; i++){
						oriArr[0][i].rowspan = level;
					}
				}
				for(var i = 0; i < oriArr.length; i++){
					for(var j = 0 ;j < oriArr[i].length; j++){
						var col = oriArr[i][j];
						tileCol(col, i, matrix);
					}
				}
				checkMatrix(matrix);
				return matrix;
				/**
				 * 检验矩阵是否对齐
				 */
				function checkMatrix(matrix){
					for(var i = 0; i < matrix.length - 1; i++){
						if(matrix[i].length != matrix[i + 1].length){
							$a.messager.warn('列的colspan或rowspan设置错误');
							throw new Error('列的colspan或rowspan设置错误');
						}
					}
				}
			}
			/**
			 * 根据单元格，设置到目标数组
			 * @param col
			 * @param rowIndex
			 * @param matrix
			 */
			function tileCol(col, rowIndex, matrix){
				var rowspan = col.rowspan == undefined ? 1 : col.rowspan
					,colspan = col.colspan == undefined ? 1 : col.colspan
					,colIndex = 0;
				for(var i = 0; i < rowspan; i++){
					for(var j = 0; j < colspan; j++){
						var element = col._cid;
						if(i == 0 && j == 0){
							element = col;
						}
						if(i > 0){
							matrix[rowIndex + i][colIndex] = element;
						}else{
							colIndex = appendCol(matrix[rowIndex + i], element);
						}
					}
				}
			}
			/**
			 * 元素放入数组，并返回放入的数组下标
			 * @param target 数组
			 * @param col 元素
			 * @returns {Number}
			 */
			function appendCol(target, col){
				var i = 0;
				while(target[i] != undefined){
					i++;
				}
				target[i] = col;
				return i;
			}
		},
		/**
		 * 禁用数据行的按钮
		 * @param rowIndex {Number} 行号
		 * @param btnId {String} 按钮id
		 * @example $('#demo').grid('disableRowBtn', 'addBtn');
		 * @memberof grid-class
		 * @instance
		 */
		disableRowBtn: function(rowIndex, btnId){
			var exp = this._getRowExpr(rowIndex);
			if(!exp){
				return;
			}
			var $btn = this.$tableBodyRight.find(exp).find('#'+btnId);
			$btn.addClass('disabled');
		},
		/**
		 * 启用数据行的按钮
		 * @param rowIndex {Number} 行号
		 * @param btnId {String} 按钮id
		 * @example $('#demo').grid('enableRowBtn', 'addBtn');
		 * @memberof grid-class
		 * @instance
		 */
		enableRowBtn: function(rowIndex, btnId){
			var exp = this._getRowExpr(rowIndex);
			if(!exp){
				return;
			}
			var $btn = this.$tableBodyRight.find(exp).find('#'+btnId);
			$btn.removeClass('disabled');
		},
		/**
		 * 初始化整体html结构
		 */
		_initElement: function(){
			this._initElementStruct();
			var $e = this.$element
				,grid = this;
			$e.data('grid', this);
			this.$wrap = $e.parent();
			this.$rowEditor = $e.find('.grid-row-editor');
			this.$absoluteComp = $e.find('.grid-absolute-comp');
			this.$focusInput = $e.find('.focusInput');
			this.$focusInput.on('keydown.grid-proxy-focus.api', $.proxy(this._keyLocateCell, this));
			this.$focusInput.on('focus.grid-proxy-focus.api', function(){
				grid.$table.addClass('table-active');
				grid._fixXProxyScroll();
			});
			this.$focusInput.on('blur.grid-proxy-focus.api', function(){
				grid.$table.removeClass('table-active');
				grid.$focusInput.css('position', 'absolute');
				grid.$focusInput.appendTo(grid.$absoluteComp);
			});


			this.$header = $e.find('.grid-header');
			this.$title = this.$header.find('.grid-header-title');
			this.$toolbar = this.$header.find('.grid-header-toolbar');
			this.$headerCustom = this.$header.find('.grid-header-custom');

			this.$table = $e.find('.grid-table');
			this.$tableHeader = $e.find('.grid-table-header');
			this.$tableHeaderLeft = this.$tableHeader.find('.grid-header-left');
			this.$tableHeaderMain = this.$tableHeader.find('.grid-header-main');
			this.$tableHeaderRight = this.$tableHeader.find('.grid-header-right');
			this.$tableBody = $e.find('.grid-table-body');
			this.$tableBodyMessage = $e.find('.grid-table-message');
			this.$tableBodyLeft = this.$tableBody.find('.grid-body-left');
			this.$tableBodyMain = this.$tableBody.find('.grid-body-main');
			this.$tableBodyRight = this.$tableBody.find('.grid-body-right');
			this.$tableFooter = $e.find('.grid-table-footer');
			this.$tableFooterLeft = this.$tableFooter.find('.grid-footer-left');
			this.$tableFooterMain = this.$tableFooter.find('.grid-footer-main');
			this.$tableFooterRight = this.$tableFooter.find('.grid-footer-right');
			this.$tableFooterCustom = this.$tableFooter.find('.grid-footer-custom');
			this.$cardRegion={
				left:this.$tableBodyLeft,
				right:this.$tableBodyRight,
				center:this.$tableBodyMain
			};
			if(this.setting.headerCustom){
				this.$headerCustom.append($A(this.setting.headerCustom));
			}
		},
		/**
		 * 显示提示信息
		 */
		_showMessage: function(msg){
			this.$tableBodyMessage.html(msg).show();
		},
		/**
		 * 隐藏提示信息
		 */
		_hideMessage: function(){
			this.$tableBodyMessage.hide();
		},
		/**
		 * 设置网格的最小宽度，
		 * 		防止固定列与主视图在缩放时位置错乱
		 * 		防止分页栏在缩放时位置错乱
		 * @param {Number} minWidth 最小宽度
		 * @memberof grid-class
		 * @instance
		 */
		setGridMinWidth: function(minWidth){
			var min = 0;
			if(this._hasPager()){
				min = 400;
			}
			if(minWidth < min){
				minWidth = min;
			}
			this.$element.css('min-width', minWidth);
		},
		/**
		 * 初始化网格结构
		 */
		_initElementStruct: function(){
			var s = this.setting
				,footerHtml = '<div class="grid-table-footer">' +
				'<div>' +
				'<div class="grid-footer-left">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				'<div class="grid-footer-right">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				'<div class="grid-footer-main">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				'</div>' +
				'<div class="grid-footer-custom"></div>' +
				'</div>';
			this.$element = $(
				'<div class="app-grid">' +
				'<div class="grid-header">' +
				'<div class="grid-header-title">' +
				'<span>' + s.title + '</span>' +
				'</div>' +
				'<div class="grid-header-toolbar" style="max-height:' + s.toolbarHeight + 'px;">' +
				'<ul></ul>' +
				'</div>' +
				'<div class="grid-header-custom">' +
				'</div>' +
				'</div>' +
				'<div class="grid-table' + (s.height == 'push' ?' autoHeight':' fixHeight') + '">' +
				'<div class="row-dragging-mask"></div>' +
				'<div class="grid-table-header" oncontextmenu="return false">' +
				'<div class="col-resize-proxy"></div>' +
				'<div class="grid-header-left">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				'<div class="grid-header-right">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				'<div class="grid-header-main">' +
				'<div>' +
				'<table cellpadding="0" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'</div>' +
				'</div>' +
				(this.setting.summaryPos == 'top' ? footerHtml : '') +
				'</div>' +
				'<div class="grid-table-body' + (s.striped?' useStriped':'') + '">' +
				'<div class="grid-table-message"></div>' +
				'<div class="grid-body-left" >' +
				'<div class="grid-body-content">' +
				'<table cellpadding="0"  class="grid-view" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +
				'<div class="grid-body-card-form" style="display:none"></div>'	+
				'</div>' +
				'</div>' +
				'<div class="grid-body-right" >' +
				'<div class="grid-body-content">' +
				'<table cellpadding="0"  class="grid-view" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>' +

				'<div class="grid-body-card-form form" style="display:none"></div>'	+
				'</div>' +
				'</div>' +
				'<div class="grid-body-main">' +
				'<div class="grid-body-content">' +
				'<table cellpadding="0"  class="grid-view" cellspacing="0">' +
				'<tbody></tbody>' +
				'</table>'  +
				'</div>' +
				'</div>' +
				'<div class="grid-row-editor"></div>' +
				'<div class="grid-absolute-comp">' +
				'<input class="focusInput" style="position:absolute;"/>' +
				'</div>' +
				'</div>' +
				(this.setting.summaryPos == 'bottom' ? footerHtml : '') +
				'</div>' +
				'</div>').insertAfter(this.$t);
		},
		/**
		 * 根据当前的表头展现调整当前的列顺序
		 * 左固定列 右固定列和主数据列
		 */
		_resetColumnsInOrder: function(){
			this.frozenColumns = this._getColumnsInTable(this.$tableHeaderLeft.find('>div>table'));
			this.frozenColumnsRight = this._getColumnsInTable(this.$tableHeaderRight.find('>div>table'));
			this.columns = this._getColumnsInTable(this.$tableHeaderMain.find('>div>table'));
		},
		/**
		 * 根据当前的表头展现获取当前的列顺序
		 * @param $table
		 */
		_getColumnsInTable: function($table){
			var trs = $table.find('>tbody>tr')
				,trLen = trs.length
				,result = [];
			for ( var i = trLen - 1; i >= 0; i--) {
				var tds = $(trs[i]).find('>td');
				if(i == trs.length-1){
					for ( var j = 0; j < tds.length; j++) {
						var cid = $(tds[j]).attr('_cid');
						result.push(this._column[cid]);
					}
				}else{
					for ( var j = 0; j < tds.length; j++) {
						var rowspan = $(tds[j]).attr('rowspan');
						rowspan = rowspan == undefined ? 1 : parseInt(rowspan);
						if(rowspan + i == trLen){
							var order = this._getColumnOrder(j, tds)
								,cid = $(tds[j]).attr('_cid');
							result.splice(order, 0, this._column[cid]);
						}
					}
				}
			}
			linkCol(result);
			return result;
			function linkCol(cols){
				var len = cols;
				if(len <= 1){
					return;
				}
				for(var i = 1; i < result.length; i++){
					result[i].__prev = result[i-1];
				}
			}
		},
		/**
		 * 获取该td属于第几顺序列
		 */
		_getColumnOrder: function(tdi, tds){
			var result = 0;
			for ( var i = 0; i < tdi; i++) {
				var colspan = $(tds[i]).attr('colspan');
				colspan = colspan == undefined ? 1 : parseInt(colspan);
				result += colspan;
			}
			return result;
		},
		/**
		 * 生成网格头
		 */
		_initHeaderHtml: function(){
			this.gridHeadHeight = this.setting.columns.length * (this.setting.headRowHeight+1);
			this._initFrozenViewHtml();
			this._initFrozenRightViewHtml();
			if(this.setting.fitColumns == 'E' || this.setting.fitColumns == 'ES'){
				this._setColumnPercent();
				this._fitMainViewWidth();
			}
			this._initMainViewHtml();
			this._resetColumnsInOrder();
		},
		/**
		 * 设置网格列的百分比
		 */
		_setColumnPercent: function(){
			var s = this.setting
				,cols = s.columns
				,allWidth = this._getColumnsWidth(cols);
			if(s.fitColumns != 'E' && s.fitColumns != 'ES'){
				return;
			}
			for ( var i = 0; i < cols.length; i++) {
				for(var j = 0; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.field && !col.hidden){
						col.percent = parseFloat((col.width / allWidth).toFixed(4));
					}
				}
			}
		},
		/**
		 * 获取数组列的总宽度
		 */
		_getColumnsWidth: function(cols){
			var result = 0;
			for ( var i = 0; i < cols.length; i++) {
				for(var j = 0; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.hidden){
						continue;
					}
					if(!col.field){
						continue;
					}
					result += col.width;
				}
			}
			return result;
		},
		/**
		 * 自适应主视图的宽度大小
		 * 如果视图不可见，则根据逻辑宽度进行设置
		 */
		_fitMainViewWidth: function(){

			if (this.viewType==VIEW_TYPE.CARD_VIEW){
				var gridWidth = this.$element.outerWidth();
				var cardFromWidth=gridWidth-this.setting.view.cardWidth;
				this.$cardRegion[this.setting.view["region"]].find('.grid-body-card-form').outerWidth(cardFromWidth);

			}
			var s = this.setting
				,freeWidth = 0;
			if(this.$element.is(':visible')){
				var gridWidth = this.$element.outerWidth()
					,diffWidth = this._getYProxyScrollWidth();
				freeWidth = gridWidth - this.$tableHeaderLeft.outerWidth() - this.$tableHeaderRight.outerWidth() - diffWidth;
			}else{
				freeWidth = this.setting.viewMainWidth;
			}
			if(s.fitColumns == 'ES'){
				this._fitMainColumnsWidth(freeWidth);
			}else if(s.fitColumns == 'E'){
				if(freeWidth >= s.viewMainWidth - scrollBarWidth){
					this._fitMainColumnsWidth(freeWidth);
				}
			}
		},
		/**
		 * 获取y轴的宽度
		 */
		_getYProxyScrollWidth: function(){
			var result = 1;
			if(this.setting.height == 'push'){
				this.$wrap.scrollTop(1);
				var scrollTop = this.$wrap.scrollTop();
				if(scrollTop == 1){
					result += scrollBarWidth;
				}
			}else if(this._hasYProxyScroll()){
				if(!this.setting.autoScroll){
					result += scrollBarWidth;
				}
			}
			return result;
		},
		/**
		 * 根据传入的主视图宽度按比例调整主视图的列宽
		 */
		_fitMainColumnsWidth: function(mainViewWidth){
			var cols = this.setting.columns
				,calc = 0;
			for ( var i = 0; i < cols.length; i++) {
				for( var j = 0; j < cols[i].length; j++){
					var col = cols[i][j];
					if(col.field && !col.hidden){
						col.width = parseInt((col.percent * mainViewWidth).toFixed());
						calc += col.width;
						col.width -= 1;
					}
				}
			}
			col.width += mainViewWidth - calc;
			this.setting.viewMainWidth = mainViewWidth;
		},
		/**
		 * 初始化左固定视图的html
		 * 	返回左固定视图宽度
		 */
		_initFrozenViewHtml: function(){
			var s = this.setting
				,css = {width: s.viewLeftWidth}
				,cols = s.frozenColumns;
			if(cols){
				this.$tableHeaderLeft.find('>div>table>tbody').append(this._initHeaderTrHtml(cols));
				this.$tableHeaderLeft.height(this.gridHeadHeight);
				this.$tableHeaderLeft.css('overflow','hidden');
			}
		},
		/**
		 * 初始化右固定视图的html
		 * 	返回右固定视图宽度
		 */
		_initFrozenRightViewHtml: function(){
			var s = this.setting
				,css = {width:s.viewRightWidth}
				,cols = s.frozenColumnsRight;
			if(cols){
				this.$tableHeaderRight.find('>div>table>tbody').append(this._initHeaderTrHtml(cols));
				this.$tableHeaderRight.height(this.gridHeadHeight);
				this.$tableHeaderRight.css('overflow','hidden');
			}
		},
		/**
		 * 初始化主视图的html
		 */
		_initMainViewHtml: function(){
			var s = this.setting
				,w = s.viewMainWidth
				,$tr = this._initHeaderTrHtml(s.columns);
			setLastTdShowBorder($tr);
			this.$tableHeaderMain.find('>div>table>tbody').append($tr);
			this.$tableHeaderMain.height(this.gridHeadHeight);
			this.$tableHeaderMain.css('overflow','hidden');
			this.$focusInput.appendTo(this.$tableHeaderMain.find('td:visible:first>div'));
			function setLastTdShowBorder($tr){
				if($tr.length == 1){
					return;
				}
				for(var i = 1; i < $tr.length; i++){
					$($tr[i]).find('td:last-child').addClass('show-right-border');
				}
			}
		},
		/**
		 * 获取网格的信息
		 */
		_initHeaderTrHtml: function(cols){
			var _g = this
				,$trs = []
				,height = this.setting.headRowHeight
				,trHmtl = '<tr style="height:' + height + 'px;line-height:' + height + 'px;"></tr>';
			for ( var i = 0; i < cols.length; i++) {
				var $tr = $(trHmtl);
				for ( var j = 0; j < cols[i].length; j++) {
					var $td = initHeader$Td(cols[i][j]);
					$tr.append($td);
				}
				$trs.push($tr);
			}
			return $trs;

			function initHeader$Td(col){
				var $col = $('<td ' + createTdStyle(col) + createHeaderTdAttr(col) + '>' +
					'<div ' + createTdInnerStyle(col) + '>' + col.title + '</div>' +
					'</td>');
				_g._appendSortable(col, $col);
				if(col.headerBtns){
					var btns = col.headerBtns;
					for(var i = 0; i < btns.length; i++){
						appendHeaderBtn($col, btns[i]);
					}
				}
				return $col;
				function appendHeaderBtn($col, btn){
					var $btn = $('<span class="' + btn.iconCls + ' grid-header-btn"></span>');
					if(btn.title){
						$btn.attr('title', btn.title);
					}
					$btn.on('click', function(e){
						e.stopPropagation();
						btn.handler();
					});
					if(btn.hoverShow){
						$btn.hide();
						$col.on('mouseenter', function(e){
							$btn.show();
						}).on('mouseleave', function(){
							$btn.hide();
						});
					}
					$col.find('>div').append($btn);
				}
				function createTdStyle(col){
					var result = '';
					if(col.rowspan && col.rowspan > 1){
						var height = _g.setting.headRowHeight *col.rowspan +(col.rowspan -1);
						result += 'height:' + height  + 'px;line-height:' + height  + 'px;';
					}
					if(result){
						result = 'style="' + result + '" ';
					}
					return result;
				}

				function createHeaderTdAttr(){
					var attr = '_cid="' + col._cid + '"'
						,cls = col.cls;
					if(!_g.setting.halign){
						cls = cls.replace('grid-cell-left','grid-cell-center');
						cls = cls.replace('grid-cell-right','grid-cell-center');
					}
					if(col.hidden){
						cls += ' grid-cell-hidden';
					}
					attr += ' class="' + cls + '"';
					if(col.field){
						attr += ' field="' + col.field + '"';
					}
					if(col.buttons){
						attr += ' opts="true"';
					}
					var colspan = getColspan(col);
					if(colspan == 0){
						colspan = 1;
					}
					attr += ' colspan="' + colspan + '"';
					if(col.rowspan){
						attr += ' rowspan="' + col.rowspan + '"';
					}
					if(col._isBtn){
						attr += ' isBtn="true"';
					}
					return attr;
					/**
					 * 获取要合并的列数
					 */
					function getColspan(col){
						var result = 0
							,children = col.children;
						if(children && children.length > 0){
							for(var i = 0; i < children.length; i++){
								result += getColspan(children[i]);
							}
						}else if(!col.hidden){
							result = 1;
						}
						return result;
					}
				}
				function createTdInnerStyle(col){
					var result = '';
					if(col.field){
						result = 'style="width:' + col.width + 'px;"';
					}
					return result;
				}
			}
		},
		/**
		 * 注册事件
		 */
		_registEvents: function(){
			this.$tableBody.on('click.grid-cell.api', 'tr.data-row td', $.proxy(this._onClickCell, this));
			this.$tableBody.on('mouseup.grid-cell.api', 'tr.data-row td', $.proxy(this._onMouseUpCell, this));
			this.$tableBody.on('dblclick.grid-cell.api', 'tr.data-row td', $.proxy(this._onDblClickCell, this));
			this.$tableBody.on('click.grid-row.api', 'tr.data-row td', $.proxy(this._onClickRow, this));
			this.$tableBody.on('dblclick.grid-row.api', 'tr.data-row td', $.proxy(this._onDblClickRow, this));

			this.$tableBody.on('mousewheel.grid.api', $.proxy(this._onMouseWheel, this));
			this.$tableBody.on('mouseover.grid.api', 'tr.data-row', $.proxy(this._onBodyTrMouseOver, this));
			this.$tableBody.on('mouseleave.grid.api', 'tr.data-row', $.proxy(this._onBodyTrMouseLeave, this));
			this.$tableHeader.on('click.grid.api', 'td[isbtn="true"]', headBtnTdClick);
			if(this.setting.checkbox){
				this.$tableHeaderLeft.on('click.grid.api', 'td[field="_rownumbers"]', $.proxy(this._onHeaderRowNumberTdClick, this));
				this.$tableHeaderLeft.on('click.grid.api', 'td[field="_checkbox"]', $.proxy(this._onHeaderCheckboxTdClick, this));
				this.$tableHeaderLeft.on('click.grid.api', 'td[field="_checkbox"] input', $.proxy(this._onHeaderCheckboxClick, this));
				this.$tableBodyLeft.on('click.grid.api', 'td[field="_checkbox"]', $.proxy(this._onBodyCheckboxTdClick, this));
				this.$tableBodyLeft.on('click.grid.api', 'td[field="_checkbox"] input', $.proxy(this._onBodyCheckboxClick, this));
			}
			this._registResizeColumnProxy();

			this._bindInvalidMsgEvent();
			this._bindResize();
			this.onMouseEvent();
			this._onCheckSummary();
		},
		/**
		 * 表格体的鼠标滚轮事件
		 */
		_onMouseWheel: function(event, delta, deltaX, deltaY){
			if(this._hasYProxyScroll()){
				setDataRowHeight.call(this);
				var rowHeight = this._rowHeight
					,scrollTop = this.$yProxyScroll.scrollTop()
					,scrollIndex = parseInt(scrollTop/rowHeight);
				if(delta < 0){
					this.$yProxyScroll.scrollTop((scrollIndex + 1) * rowHeight);
				}else{
					this.$yProxyScroll.scrollTop((scrollIndex - 1) * rowHeight);
				}
			}
		},
		/**
		 * 表格体的单元格单击事件
		 * @param e
		 */
		_onClickCell: function(e){
			var $td = $(e.currentTarget)
				,$row = $td.parent()
				,rowData = this._getDataByRowId($row.attr('id'))
				,rowIndex = $row.index()
				,field = $td.attr('field');
			/**
			 * 单元格单击事件
			 * @event grid-class#onClickCell
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 * @param {String} field 单元格的列名
			 */
			this.trigger('onClickCell', rowData, rowIndex, field, e);
		},
		/**
		 * 是否进行焦点获取以进行上下左右的按键导航
		 */
		_onMouseUpCell: function(e){
			if(getCellSelectText() != ''){
				return;
			}
			var $td = $(e.currentTarget);
			if(!this.setting.hasEditor){
				this._focusProxyInput($td);
			}
			function getCellSelectText(){
				if(window.getSelection) {
					return window.getSelection().toString();
				} else if(document.selection && document.selection.createRange) {
					return document.selection.createRange().text;
				}
				return '';
			}
		},
		/**
		 * 将焦点移入到代理的输入框中
		 */
		_focusProxyInput: function($td){
			this.setCurrentRow($td.parent().index());
			try{
				this.$focusInput[0].focus();
			}catch(e){
				
			}
		},
		/**
		 * 代理单元格定位的事件
		 */
		_keyLocateCell: function(e){
			e.preventDefault();
			e.stopPropagation();
			var keyCode = e.keyCode;
			switch(keyCode){
				case App.keyCode.LEFT:
					this.$xProxyScroll.scrollLeft(this.$xProxyScroll.scrollLeft() - 35);
					break;
				case App.keyCode.RIGHT:
					this.$xProxyScroll.scrollLeft(this.$xProxyScroll.scrollLeft() + 35);
					break;
				case App.keyCode.UP:
					this.prevRow();
					this.locateCurrent();
					break;
				case App.keyCode.DOWN:
					this.nextRow();
					this.locateCurrent();
					break;
				case App.keyCode.ENTER:
					this.toggleSelectCurrent();
					break;
			}
		},
		/**
		 * 表格体的单元格双击事件
		 * @param e
		 */
		_onDblClickCell: function(e){
			if(atOnceMoment(e, 'onDblClickCell', this)){
				return;
			}
			var $td = $(e.currentTarget)
				,$row = $td.parent()
				,rowData = this._getDataByRowId($row.attr('id'))
				,rowIndex = $row.index()
				,field = $td.attr('field');
			/**
			 * 单元格双击事件
			 * @event grid-class#onDblClickCell
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 * @param {String} field 单元格的列名
			 */
			this.trigger('onDblClickCell', rowData, rowIndex, field, e);
		},
		/**
		 * 网格单击事件
		 */
		_onClickRow: function(e){
			var $tr = $(e.currentTarget).parent()
				,rowId = $tr.attr('id')
				,rowIndex = this._convertRowIdToRowIndex(rowId)
				,rowData = this._getDataByRowId(rowId);
			this.setCurrentRow(rowIndex);
			if(!$tr.hasClass('row-uncheckable')){
				if(this.isSelectedRow(rowIndex)){
					this.unselectRow(rowIndex);
				}else{
					this.selectRow(rowIndex);
				}
			}
			/**
			 * 行点击事件
			 * @event grid-class#onClickRow
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 */
			this.trigger('onClickRow', rowData, rowIndex, e);
		},
		/**
		 * 网格双击事件
		 */
		_onDblClickRow: function(e){
			if(atOnceMoment(e, 'onDblClickRow', this)){
				return;
			}
			var $tr = $(e.currentTarget).parent()
				,rowId = $tr.attr('id')
				,rowIndex = this._convertRowIdToRowIndex(rowId)
				,rowData = this._getDataByRowId(rowId);
			if(!$tr.hasClass('row-uncheckable')){
				if(this.isSelectedRow(rowIndex)){
					this.unselectRow(rowIndex);
				}else{
					this.selectRow(rowIndex);
				}
			}
			/**
			 * 行双击事件
			 * @event grid-class#onDblClickRow
			 * @param {Object} rowData 行数据
			 * @param {Number} rowIndex 行号
			 */
			this.trigger('onDblClickRow', rowData, rowIndex, e);
		},
		/**
		 * 鼠标经过tr时 将tr渲染为当前行的样式
		 * @param e
		 */
		_onBodyTrMouseOver: function(e){
			this._setRowClass(e.currentTarget.id, hoverRowCls);
		},
		/**
		 * 表格头的rownumber所在的td点击事件
		 * @param e
		 */
		_onHeaderRowNumberTdClick: function(e){
			this._onHeaderCheckboxTdClick(e);
		},
		/**
		 * 表格头的checkbox所在的td点击事件
		 * @param e
		 */
		_onHeaderCheckboxTdClick: function(e){
			var checkbox = this.$tableHeaderLeft.find('td[field="_checkbox"] input')[0];
			checkbox.checked = !checkbox.checked;
			this._onHeaderCheckboxClick(e);
		},
		/**
		 * 表格头的checkbox点击事件
		 * @param e
		 */
		_onHeaderCheckboxClick: function(e){
			if(this.$tableHeaderLeft.find('td[field="_checkbox"] input')[0].checked){
				this.selectAll();
			}else{
				this.unselectAll();
			}
			e.stopPropagation();
		},
		/**
		 * 表格体的checkbox点击事件
		 * @param e
		 */
		_onBodyCheckboxTdClick: function(e){
			var $curr = $(e.currentTarget)
				,checkbox = $curr.find('input')[0]
				,id = $curr.closest('tr')[0].id;
			if(checkbox.checked){
				this.unselectRow(id);
			}else{
				this.selectRow(id);
			}
			e.stopPropagation();
		},
		/**
		 * 表格体的checkbox点击事件
		 * @param e
		 */
		_onBodyCheckboxClick: function(e){
			var checkbox = e.currentTarget
				,id = $(e.currentTarget).closest('tr')[0].id;
			if(!checkbox.checked){
				this.unselectRow(id);
			}else{
				this.selectRow(id);
			}
			e.stopPropagation();
		},
		/**
		 * 调整高度和宽度
		 */
		_fit: function(){
			var s = this.setting;
			if(!s.title){
				if(!this._hasTitlePager()){
					this.$title.css('display', 'none');
				}
			}
			if(!s.toolbar || s.toolbar.length == 0){
				this.$toolbar.css('display','none');
				this.$title.css('border-bottom-width', 0);
			}
			this._initProxyScroll();
			this._fixHeight();
			if(s.width){
				this.$element.css({width:s.width});
			}
			this.setGridMinWidth(s.viewLeftWidth + s.viewRightWidth + 30);
		},
		/**
		 * 生成代理滚动条
		 */
		_initProxyScroll: function(){
			this._initXProxyScroll();
			this._initYProxyScroll();
			this._bindWrapYScrollEvent();
		},
		/**
		 * 生成横向代理滚动条
		 */
		_initXProxyScroll: function(){
			this.$xProxyScroll =
				$('<div class="grid-body-xscrollproxy" style="margin-left:' +
					this.$tableHeader.find('.grid-header-left>div').outerWidth() +
					'px; margin-right:' +
					this.$tableHeader.find('.grid-header-right>div').outerWidth() + 'px;">' +
					'<div style="width:' + (this.$tableHeader.find('.grid-header-main>div>table').outerWidth()-3) + 'px;"></div>' +
					'</div>');
			this.$xProxyScroll.insertAfter(this.$tableBody);
			var grid = this;
			this.$xProxyScroll.scroll(function() {
				grid.$tableHeaderMain.scrollLeft($(this).scrollLeft());
				grid.$tableBodyMain.scrollLeft($(this).scrollLeft());
				grid.$tableFooterMain.scrollLeft($(this).scrollLeft());
			});
			this._setFooterBorderTop();
		},
		/**
		 * 是否显示有横向向滚动条
		 */
		_hasXProxyScroll: function(){
			return this.$xProxyScroll && this.$xProxyScroll.outerWidth() < this.$xProxyScroll.find('>div').outerWidth();
		},
		/**
		 * 生成纵向代理滚动条
		 */
		_initYProxyScroll: function(){
			if(this.setting.autoScroll){
				return;
			}
			this.$yProxyScroll =
				$('<div class="grid-body-yscrollproxy" style="height:' + this.$tableBody.find('.grid-body-main').outerHeight()
					+ 'px;margin-top:' + this.$tableHeader.outerHeight() + 'px">' +
					'<div style="height:' + (this.$tableBody.find('.grid-body-main>div').outerHeight()) + 'px;"></div>' +
					'</div>');
			this.$yProxyScroll.insertBefore(this.$tableHeader);
			var grid = this;
			this.$yProxyScroll.scroll(function() {
				setDataRowHeight.call(grid);
				var ele = grid.$yProxyScroll[0]
					,scrollTop = ele.scrollTop
					,scrollHeight = ele.scrollHeight
					,clientHeight = ele.clientHeight;
				if(scrollTop == 0){
					 grid.$tableBodyLeft.scrollTop(0);
					 grid.$tableBodyMain.scrollTop(0);
					 grid.$tableBodyRight.scrollTop(0);
					 return;     
				}
				var scrollTop = $(this).scrollTop()
					,rowHeight = grid._rowHeight;
				if(scrollTop + clientHeight > rowHeight * (grid.getAllData().length-0.5)){
					scrollTop =  scrollHeight - clientHeight;
				}else{
					scrollTop = parseInt(scrollTop/rowHeight) * rowHeight;
				}
				grid.$tableBodyLeft.scrollTop(scrollTop);
				grid.$tableBodyMain.scrollTop(scrollTop);
				grid.$tableBodyRight.scrollTop(scrollTop);
			});
		},
		/**
		 * 是否显示有纵向滚动条
		 */
		_hasYProxyScroll: function(){
			if(!this.$yProxyScroll){
				return false;
			}
			if(this.$yProxyScroll.css('display') == 'none'){
				return false;
			}
			if(this.$yProxyScroll.outerHeight() < this.$yProxyScroll.find('>div').outerHeight()){
				return true;
			}
			return false;
		},
		/**
		 * 外部纵向滚动事件
		 */
		_bindWrapYScrollEvent: function(){
			var grid = this
				,s = this.setting;
			if(s.follow == 'all'){
				this.$wrap.scroll(function() {
					grid._headerFollow();
					grid._footerFollow();
				});
			}else if(s.follow == 'header'){
				this.$wrap.scroll(function() {
					grid._headerFollow();
				});
			}else if(s.follow == 'footer'){
				this.$wrap.scroll(function() {
					grid._footerFollow();
				});
			}
		},
		/**
		 * 修复网格高度,动态设置纵向滚动条的高度
		 */
		_fixHeight: function(){
			if(this.setting.height == 'push'){
				return;
			}
			this._fixGridHeight();
			this._fixYProxyScrollHeight();
		},
		/**
		 * 修复网格主体的高度
		 */
		_fixGridHeight: function(){
			var height = 0;
			if(!this.$element.is(':visible')){
				return;
			}
			if(!this.setting.height){
				height = this.$element.parent().height();
			}else{
				height = parseInt(this.setting.height);
			}
			height -= this.$header.outerHeight() + 1 ;
		   //卡片网格不需要计算合计长高度
			if (this.viewType&&this.viewType==VIEW_TYPE.GRID_VIEW){

				if(this.setting.summaryPos == 'top'){
					height -= this.$tableHeader.outerHeight();
				}else{
					height -= this.$tableHeader.outerHeight() + this.$tableFooter.outerHeight();
				}
			}
			height -= this._getPagerDownHeight();
			if(this._hasXProxyScroll()){
				height -= 16;
			}
			this.$tableBodyLeft.css({height:height});
			this.$tableBodyRight.css({height:height});
			this.$tableBodyMain.css({height:height});
		},
		/**
		 * 高度变化，修复滚动条的高度
		 */
		_fixYProxyScrollHeight: function(){
			if(!this.$yProxyScroll || this.setting.height == 'push'){
				return;
			}
			var oriHasYScroll = this.$yProxyScroll[0].scrollHeight > this.$yProxyScroll.outerHeight()
				,wrapHeight = this.$tableBody.outerHeight()
				,innerHeight = this.$tableBody.find('.grid-body-main>div').outerHeight();

			this.$yProxyScroll.css('height', wrapHeight).css('margin-top', this.$tableHeader.outerHeight());
			this.$yProxyScroll.find('>div').css('height', innerHeight);

			var currHasYScroll = innerHeight > this.$yProxyScroll.outerHeight();
			if(currHasYScroll == oriHasYScroll){
				if(currHasYScroll && this.$yProxyScroll.outerWidth() == 0){
					var css = {};
					css.width = scrollBarWidth;
					css.display = 'block';
					css['overflow-y'] = 'scroll';
					this.$yProxyScroll.css(css);
					if(this.setting.summaryPos == 'bottom'){
						this.$tableFooterRight.css('margin-right', scrollBarWidth);
					}
				}
				return;
			}
			if(currHasYScroll){
				var css = {};
				css.width = scrollBarWidth;
				css.display = 'block';
				css['overflow-y'] = 'scroll';
				this.$yProxyScroll.css(css);
				if(this.setting.summaryPos == 'bottom'){
					this.$tableFooterRight.css('margin-right', scrollBarWidth);
				}
			}else{
				this.$yProxyScroll.css('display', 'none');
				if(this.setting.summaryPos == 'bottom'){
					this.$tableFooterRight.css('margin-right', 0);
				}
			}
			this.resize();
		},
		_fixXProxyScroll: function(){
			if(this._hasXProxyScroll()){
				this.$xProxyScroll.scroll();
			}
		},
		/**
		 * 网格头跟随滚动
		 */
		_headerFollow: function(){
			var gridTop = this.$element.offset().top
				,wrapTop = this.$wrap.offset().top
				,bodyHeight = this.$tableBodyMain.outerHeight()
				,css = {top : wrapTop - gridTop};
			if(css.top < 0){
				css.top = 0;
			}else if(css.top > bodyHeight ){
				css.top = bodyHeight;
			}
			this.$header.css(css);
			this.$tableHeader.css(css);
		},
		/**
		 * 网格尾跟随滚动
		 */
		_footerFollow: function(){
			if(this.setting.follow != 'all' && this.setting.follow != 'footer'){
				return;
			}
			var wrapTop = this.$wrap.offset().top
				,gridFooterTop = this.$element.offset().top + this.$element.outerHeight()
				,wrapHeight = this.$wrap.outerHeight()
				,bodyHeight = this.$tableBody.outerHeight()
				,css = {top: wrapTop - gridFooterTop + wrapHeight};
			if(css.top > 0){
				css.top = 0;
			}else if(css.top < -bodyHeight ){
				css.top = -bodyHeight;
			}
			if(this.$xProxyScroll){
				this.$xProxyScroll.css(css);
			}
			this.$tableFooter.css(css);
			this._setPagerDownCss(css);
			if(css.top != 0){
				this.$tableFooter.addClass('relativeFooter');
			}else{
				this.$tableFooter.removeClass('relativeFooter');
			}
		},
		/**
		 * 初始化数据到网格中
		 */
		_initData: function(){
			var s = this.setting;
			this._initSort();
			if(s.data){
				this._loadPagers(1, s.data[s.jsonReader.total]);
				this._loadData(s.data);
				updateColumnTitle.call(this);
			}else if(s.url){
				if(s.autoLoad){
					this.load(s.url);
				}
			}
		},
		/**
		 * 异步请求数据
		 * @param successHandle 加载成功事件
		 * @param params 查询参数
		 */
		_ajax: function(successHandle, params){
			/**
			 * 远程数据加载前事件，并返回一个值，当为false时不进行远程加载
			 * @event grid-class#beforeLoad
			 * @returns {Boolean} boolean 返回值为false 不加载数据
			 */
			if(this.trigger('beforeLoad') === false){
				return;
			}
			var url = this.setting.url
				,grid = this;
			if(!url){
				return;
			}
			var rowData = this.getRows();
			if(rowData && rowData.length > 0){
				this._loadData([], null, true);
			}
			this._showMessage(loading);
			AppAjax.ajaxCall({
				url: url,
				data: this._getQueryParam(params),
				dataType: 'json',
				type: 'POST',
				success: function(data){
					updateColumnTitle.call(grid);
					grid._hideMessage();
					/**
					 * 远程数据加载完成事件
					 * <PRE>
					 * 	该事件传入加载的数据，可以通过该函数对数据进一步加工
					 * </PRE>
					 * @event grid-class#onLoadSuccess
					 * @param {Object} data 加载的数据
					 */
					grid.trigger('onLoadSuccess', data);
					if(!data){data = [];}
					successHandle(data);
				},
				errorHandle: function(){
					grid._showMessage(error);
				}
			});
		},
		/**
		 * 获取请求的查询参数
		 */
		_getQueryParam: function(params){
			var sortParam = {};
			if(this.setting.remoteSort){
				var sort = this.getCurrentSort();
				sortParam = {__sort__: JSON.stringify(sort)};
			}
			return $.extend({}, this.getFixedParameter(), this.getParameter(), this.getCurrentPager(), sortParam, params);
		},
		/**
		 * 设置固定查询参数，当下次请求远程数据的时候加入该固定查询参数
		 * @param {Object} param 设置查询参数
		 * @example $('#demo').grid('setFixedParameter',{a:1, b:2});
		 * @memberof grid-class
		 * @instance
		 */
		setFixedParameter: function(params){
			this._FixedParameter = params;
		},
		/**
		 * 获取当前的固定查询参数
		 * @returns {Object} String 查询参数
		 * @example $('#demo').grid('getFixedParameter');
		 * @memberof grid-class
		 * @instance
		 */
		getFixedParameter: function(){
			return this._FixedParameter;
		},
		/**
		 * 设置查询参数，当下次请求远程数据的时候加入该查询参数
		 * @param {Object} param 设置查询参数
		 * @example $('#demo').grid('setParameter',{a:1, b:2});
		 * @memberof grid-class
		 * @instance
		 */
		setParameter: function(params){
			this._parameter = params;
		},
		/**
		 * 获取当前的查询参数
		 * @returns {Object} String 查询参数
		 * @example $('#demo').grid('getParameter');
		 * @memberof grid-class
		 * @instance
		 */
		getParameter: function(){
			if(this._parameter){
				return this._parameter;
			}else{
				return null;
			}
		},
		/**
		 * 加载数据
		 * @param {object/string} obj 如果是对象则作为查询参数，如果为字符串做为远程url地址
		 * @todo 如有分页则定位到第一页
		 * @fires grid-class#beforeLoad
		 * @fires grid-class#onLoadSuccess
		 * @example $('#demo').grid('load','a.do');
		 * @memberof grid-class
		 * @instance
		 */
		load: function(obj){
			if(typeof(obj) == 'string'){
				this.setting.url = obj;
			}else if(typeof(obj) == 'object'){
				this.setParameter(obj);
			}
			var g = this
				,params = null;
			if(this._hasPager()){
				params = {page: 1};
			}
			this._ajax(function(data){
				g._loadPagers(1, data[g.setting.jsonReader.total]);
				g._loadData(data, 1);
			}, params);
		},
		/**
		 * 根据条件查询数据
		 */
		query: function(params){
			this.setParameter(params);
			this.load();
		},
		/**
		 * 重新加载行，就像 load 方法一样，但是保持在当前页。
		 * @param {object/string} obj 如果是对象则作为查询参数，如果为字符串做为远程url地址
		 * @fires grid-class#beforeLoad
		 * @fires grid-class#onLoadSuccess
		 * @example $('#demo').grid('reload');
		 * @memberof grid-class
		 * @instance
		 */
		reload: function(obj){
			if(typeof(obj) == 'string'){
				this.setting.url = obj;
			}else if(typeof(obj) == 'object'){
				this.setParameter(obj);
			}
			var g = this;
			this._ajax(function(data){
				g._loadPagers(g.getPageIndex(), data[g.setting.jsonReader.total]);
				g._loadData(data, g._getStarRowNumber());
			});
		},
		/**
		 * 载入静态数据，清除编辑信息
		 * @param {Object|Array} data 行数组数据{Array} 或 数据对象{rows,footer}
		 * @todo 行号重置为1
		 * @todo 替换表格体数据，如果存在footer，替换footer
		 * @example $('#demo').grid('loadData',[{col1:1,col2:2,col3:3}]);
		 * @example $('#demo').grid('loadData',{rows:[{col1:1,col2:2,col3:3}],footer:[{col1:100,col3:100}]});
		 * @memberof grid-class
		 * @instance
		 */
		loadData: function(data){
			this._loadData(data, 1);
			this._newData = {updated:{}, inserted:{}, deleted:{}};
		},
		/**
		 * 重新渲染表格数据，清除编辑信息
		 * @example $('#demo').grid('reflashData');
		 * @memberof grid-class
		 * @instance
		 */
		reflashData: function(){
			this._loadData(this.getRows(), this._getStarRowNumber());
			this._newData = {updated:{}, inserted:{}, deleted:{}};
		},
		/**
		 * 加载数据，包括数据体和数据尾
		 * 	清除表格原本数据，再载入新数据
		 */
		_loadData: function(data, starNum, noDataRender){
			var that = this
				,rows = null
				,footer = null;
			resetNewData();
			if($.isArray(data)){
				rows = data;
				this._setRows(rows);
			}else{
				rows = data[this.setting.jsonReader.rows];
				footer = data[this.setting.jsonReader.footer];
				this.data = data;
				if(data.dicts){
					if(this.dicts){
						$.extend(true, this.dicts, data.dicts);
					}else{
						this.dicts = data.dicts;
					}
				}
				this._setRows(rows);
				if(footer){
					this._setFooterRows(footer);
				}else{
					this._setFooterRows([]);
				}
			}
			this._calculateData(this.getRows());
			this._sortData();
			this._loadBody(rows, starNum);
			this.loadFooter(footer);
			this._fitWordColumn();
			if(!noDataRender){
				this._afterDataRender(data);
			}
			setTimeout(function(){
				that.resize();
			}, 100);
			function resetNewData(){
				that._newData.updated = {};
				that._newData.inserted = {};
				that._newData.deleted = {};
			}
		},
		setDicts: function(dicts){
			this.dicts = dicts;
		},
		getDicts: function(){
			return this.dicts;
		},
		/**
		 * 初始化计算函数
		 */
		_initCalcFunc: function(data){
			var formulaContainer = this.setting.formulaContainer;
			if(formulaContainer[0].func != undefined){
				return;
			}
			if(data.length > 0){
				var row = data[0];
				var argKeys = [];
				argKeys.push('__obj__');
				for(var attr in row){
					if(attr.indexOf('|') == -1){
						argKeys.push(attr);
					}
				}
				for(var i = 0 ; i < formulaContainer.length; i++){
					var formula = formulaContainer[i];
					formula.func = new Function(argKeys, 'return (' + formula.formula + ');');
				}
			}
		},
		/**
		 * 计算数据
		 */
		_calculateData: function(data){
			var formulaContainer = this.setting.formulaContainer;
			if(formulaContainer.length == 0){
				return;
			}
			this._initCalcFunc(data);
			for(var i = 0 ; i < data.length; i++){
				for(var j = 0; j < formulaContainer.length; j++){
					this._calculateRow(formulaContainer[j], data[i]);
				}
			}
		},
		/**
		 * 计算行数据
		 */
		_calculateRow: function(formula, row){
			var args = [];
			args.push(row);
			for(var attr in row){
				args.push(row[attr]);
			}
			row[formula.field] = formula.func.apply(row, args);
		},
		/**
		 * 载入表格体数据
		 * @param {Array} rows 尾数据数据
		 */
		_loadBody: function(rows, starNum){
			if(!rows){
				return;
			}
			if(!isNaN(starNum)){
				this._rownumbers = starNum;
			}
			this._clearBodyHtml();
			if(rows.length > 0){
				this._hideMessage();
			}else{
				this._showMessage(empty);
			}
			this._loadBodyHtml(rows);
			/**
			 * 当网格体的数据发生改变的事件
			 * @event grid-class#onDataChange
			 */
			this.trigger('onDataChange');
		},
		/**
		 * 清除数据体Html
		 * 清除前 将编辑器移动回编辑器容器
		 */
		_clearBodyHtml: function(){

			this._currentEditRowId = null;

			this._restoreEditor();
			this.$tableBodyLeft.find('>div>table>tbody').html('');
			this.$tableBodyRight.find('>div>table>tbody').html('');
			this.$tableBodyMain.find('>div>table>tbody').html('');
		   if (this.$cardRegion["center"]){
				this.$cardRegion["center"].find('.grid-view>tbody').html('');
			}



		},
		/**
		 * 追加数据行的网格体
		 * @param {Array} rows
		 */
		_loadBodyHtml: function(rows){
			//视图内容加载 by sjq
			if (this.viewType==VIEW_TYPE.GRID_VIEW){
				this._fixRowNumberWidth(rows);
				this._loadBodyHtmlSimpleRow(rows);
			}else{
				this._loadBodyCardRow(rows)
			}
			this.$tableHeaderLeft.find('td[field="_checkbox"] input').prop('checked', false);
		},
		_loadBodyCardRow:function(rows){
			//不显示无记录
			  this._hideMessage();
			var mainHtml = []
				,trHead = ''
				,trEnd = '</tr>'
				,rowsLen = rows.length;
			for (var i = 0; i < rowsLen ; i++) {
				var rowData = rows[i]
					,trId = App.uuid();
				rowData.__rowId = trId;
				trHead = this._createRowTr(rowData, i);
				//leftHtml += trHead + this._initRowTrInnerHtml(this.frozenColumns, rowData) + trEnd;
				mainHtml.push(trHead+this._createViewRow(rowData, i)+trEnd);
				//rightHtml += trHead + this._initRowTrInnerHtml(this.frozenColumnsRight, rowData) + trEnd;
				this._rowData[trId] = rowData;
				this._rownumbers++;
			}
		   
		
			this.$cardRegion["center"].find('.grid-view>tbody').append(mainHtml.join(""));
			this._footerFollow();
			this._fixXProxyScroll();
			this._fixYProxyScrollHeight();

		},
		_createViewRow:function(rowData,index){
			var view=this.setting.view,	result="<td>";

			if ($.isFunction(view.rowRender)){
				result+=view.rowRender.call(this,rowData)

			}
			return result+"</td>";

		},
		/**
		 * 安装普通数据行输出网格展现
		 */
		_loadBodyHtmlSimpleRow: function(rows){
			var leftHtml = ''
				,mainHtml = ''
				,rightHtml = ''
				,trHead = ''
				,trEnd = '</tr>'
				,rowsLen = rows.length;
			for (var i = 0; i < rowsLen ; i++) {
				var rowData = rows[i]
					,trId = App.uuid();
				rowData.__rowId = trId;
				trHead = this._createRowTr(rowData, i);
				leftHtml += trHead + this._initRowTrInnerHtml(this.frozenColumns, rowData) + trEnd;
				mainHtml += trHead + this._initRowTrInnerHtml(this.columns, rowData) + trEnd;
				rightHtml += trHead + this._initRowTrInnerHtml(this.frozenColumnsRight, rowData) + trEnd;
				this._rowData[trId] = rowData;
				this._rownumbers++;
			}
			this.$tableBodyLeft.find('>div>table>tbody').append(leftHtml);
			this.$tableBodyRight.find('>div>table>tbody').append(rightHtml);
			this.$tableBodyMain.find('>div>table>tbody').append(mainHtml);
			this._footerFollow();
			this._fixXProxyScroll();
			this._fixYProxyScrollHeight();
		},
		_createRowTr: function(rowData, index){
			var result = ''
				,rowClass = '';
			/**
			 * 行是否可勾选
			 * @event grid-class#rowCheckable
			 * @returns {Boolean} boolean 返回值为false 则为不可勾选
			 */
			if($.isFunction(this.setting.rowCheckable)){
				if(this.setting.rowCheckable(rowData, this._rownumbers) === false){
					rowClass = 'row-uncheckable';
				}
			}
			var rowCusCls = '';
			/**
			 * 自定义行样式输出
			 * @event grid-class#rowCls
			 * @returns {String} string 返回值行样式
			 */
			if(this.hasBindEvent('rowCls')){
				rowCusCls = ' ' + this.__events.rowCls[0](rowData, index);
			}
			if(rowData._rowType  == 'subtotal'){
				rowClass += ' subtotal' + rowCusCls;
				result = '<tr id="' + rowData.__rowId + '" class="' + rowClass + '">';
			}else{
				rowClass += ' data-row ' + (index%2 == 0 ? 'even' : 'odd') + rowCusCls; 
				var idAttr = rowData[this.setting.idField] ? '_v="' + rowData[this.setting.idField] + '"' : '';
				result = '<tr id="' + rowData.__rowId + '" ' + idAttr + ' class="' + rowClass + '">';
			}
			return result;
		},
		/**
		 * 根据行号自适应调整行号列的宽度
		 */
		_fixRowNumberWidth: function(rows){
			if(this.setting.rownumbers != 'normal' && this.setting.rownumbers != 'repeat'){
				return;
			}
			var rownumber = 0;
			if(this.setting.rownumbers == 'normal'){
				rownumber += this._rownumbers + rows.length;
			}else{
				rownumber += rows.length;
			}
			var width = 30;
			if(rownumber > 99 && rownumber < 999){
				width = 38;
			}else if(rownumber > 999 && rownumber < 9999){
				width = 47;
			}else if(rownumber > 9999 && rownumber < 99999){
				width = 56;
			}else if(rownumber > 99999 && rownumber < 999999){
				width = 64;
			}else if(rownumber > 999999 && rownumber < 9999999){
				width = 73;
			}
			var hasOriScroll = this._hasXProxyScroll();
			if(Math.abs(this.$tableHeaderLeft.find('td[field="_rownumbers"]').outerWidth() - width) > 5){
				var $td = this.$tableHeader.find('td[field="_rownumbers"]')
					,cid = $td.attr('_cid')
					,viewWidth = this.$tableHeader.find('table').outerWidth()
					+ (width - this._column[cid].width);
				if(this.$xProxyScroll){
					this.$xProxyScroll.css('margin-left',viewWidth);
				}
				this._setFooterBorderTop();
				this.$table.find('td[_cid=' + cid + ']>div').css('width', width);
				this._column[cid].width = width;
				if(this.setting.fitColumns && !hasOriScroll){
					this.resize();
				}
			}
		},
		/**
		 * 数据渲染完成事件
		 */
		_afterDataRender: function(data){
			if(this.setting.mergeColumns){
				this.mergeColumns(this.setting.mergeColumns);
			}
			/**
			 * 数据渲染完成事件
			 * @event grid-class#afterDataRender
			 * @param {Object} data 渲染的数据
			 */
			this.trigger('afterDataRender', data);
		},
		/**
		 * 清除当前行的样式
		 */
		_clearCurrent: function(){
			this.$tableBodyLeft.find('>div>table tr.' + currentRowCls).removeClass(currentRowCls);
			this.$tableBodyRight.find('>div>table tr.' + currentRowCls).removeClass(currentRowCls);
			this.$tableBodyMain.find('>div>table tr.' + currentRowCls).removeClass(currentRowCls);
		},
		/**
		 * 生成数据行的内容html
		 */
		_initRowTrInnerHtml: function(cols, row){
			var result = '';
			for ( var i = 0; i < cols.length; i++) {
				result += this._initCellHtml(cols[i], row);
			}
			return result;
		},
		/**
		 * 生成数据单元格html
		 */
		_initCellHtml: function(col, row){
			if(col.hidden){
				return '';
			}
			var titleAttr = ''
				,divCss = ''
				,tdCss = ''
				,tdCls = ''
				,showTitle = this._getFormatText(col, row);
			if(col.showTitle){
				if (showTitle){
					titleAttr = 'title="'+ escapeHtml(showTitle) +'"';
				}
			}
			if(row._rowType  == 'subtotal' && col.subtotalText){
				tdCss = col.subtotalCss;
				tdCls = col.subtotalCls;
				row[col.field] = col.subtotalText;
			}
			if(row[col.field + '_style']){
				divCss += row[col.field + '_style'];
			}
			return '<td ' + this._getBodyTdExp(col, row, tdCss) + col.bodyTdAttrExp + this._getTdClassAttr(col, tdCls) + titleAttr + '>' +
				'<div style="width:' + col.width + 'px;' + divCss + '">' + this._initTdInnerHtml(col, row, showTitle) + '</div>' +
				'</td>';
		},
		/**
		 * 获取数据单元格的样式表达式
		 */
		_getBodyTdExp: function(col, row){
			var result = '';
			if($.isFunction(col.styler)){
				var css = col.styler(row[col.field], row);
				if(css){
					result += css;
				}
			}else if(col.styler){
				result += col.styler;
			}
			if(result){
				result = 'style="' + result + '" '
			}
			return result;
		},
		_getTdClassAttr: function(col, tdCls){
			var result = '';
			if(col.cls){
				result = col.cls;
			}
			if(tdCls){
				result += ' ' + tdCls ;
			}
			if(col.hidden){
				result += ' grid-cell-hidden';
			}
			if(result){
				result = ' class="' + result + '"';
			}
			return result;
		},
		/**
		 * 获取行内数据单元格div内的html
		 */
		_initTdInnerHtml: function(col, row, showTitle){
			var html = '';
			if(col.sysCol){
				if(col.field == '_rownumbers'){
					html = this._rownumbers+'';
				}else if(col._html){
					html = col._html;
				}else if(col.buttons){
					html = this._getBtnHtml(col, row);
				}
				return html;
			}else if(showTitle != IE8_TD_EMPTY){
				return showTitle;
			}else{
				return this._getFormatText(col, row)
			}
		},
		/**
		 * 获取行操作按钮的文本
		 * @param col 列信息
		 * @param row 行数据
		 */
		_getBtnHtml: function(col, row){
			var html = ''
				,btns = col.buttons;
			for(var i= 0; i < btns.length; i++){
				var btn = btns[i];
				html += this._createRowBtn(btn, row, this._rownumbers);
			}
			return html;
		},
		/**
		 * 获取列展现值
		 */
		_getFormatText: function(col, row){
			var text = row[col.field]
				,formatter = col.formatter;
			if(col.formatPattern){
				formatter = 'numberFormatter';
			}
			if(formatter){
				if($.isFunction(formatter)){
					text = formatter(text, row, this._rownumbers, col);
				}else if(typeof(formatter) == 'string'){
					if(!col.formatPattern){
						if(formatter.charAt(0) == '[' && formatter.charAt(formatter.length-1) == ']'){
							col.formatPattern = formatter.substr(1, formatter.length-2)
							formatter = 'numberFormatter';
						}
					}
					if(col.template){
						text = col.template.apply(row);
					}else{
						text = Formatter.formatter(formatter, text, row, this._rownumbers, col);
					}
				}
			}else if(this.dicts){
				var dict = this.dicts[col.field]; 
				if(dict){
					text = dict[text];
				}
			}
			return escapeScriptTag(text);
			function escapeScriptTag(str){
				if(str == undefined){
					str = IE8_TD_EMPTY;
				}else if(typeof(str) == 'string'){
					str = str.replace(/<script/g, '&lt;script');
					var blank = str.match(/^[ ]*/);
					if(blank && blank[0]){
						var htmlBlank = '&nbsp;'
							,len = blank[0].length;
						for(var i = 1; i < len; i++){
							htmlBlank += '&nbsp;';
						}
						str = str.replace(/^[ ]*/, htmlBlank);
					}
				}
				return str;
			}
		},
		/**
		 * 载入数据尾
		 * @todo 清除尾{@link grid#clearFooter}
		 * @todo 追加尾{@link grid#appendFooter}
		 * @param {Array} footer 尾数据数据
		 * @example $('#demo').grid('loadFooter',[{col1:1,col2:1,col3:1},{col1:2,col2:2,col3:2}]);
		 * @memberof grid-class
		 * @instance
		 */
		loadFooter: function(footer){
			this.clearFooter();
			this._appendSummary();
			this.appendFooter(footer);
		},
		/**
		 * 清除尾
		 * @example $('#demo').grid('clearFooter');
		 * @memberof grid-class
		 * @instance
		 */
		clearFooter: function(){
			this.$tableFooterLeft.find('>div>table>tbody').html('');
			this.$tableFooterRight.find('>div>table>tbody').html('');
			this.$tableFooterMain.find('>div>table>tbody').html('');
			this.$tableFooterCustom.html('');
			this._frowsnumber = 1;
			this._setFooterRows([]);
			this._footerFollow();
			this._fixHeight();
			this.$tableFooter.css('display', 'none');
		},
		/**
		 * 追加表尾
		 * @param {Array} footer 尾数据数据
		 * @example $('#demo').grid('appendFooter',[{col1:1,col2:1,col3:1},{col1:2,col2:2,col3:2}]);
		 * @memberof grid-class
		 * @instance
		 */
		appendFooter: function(footer){
			if(!footer){
				return;
			}
			this._appendFooter(footer);
			this._appendFooterData(footer);
		},
		/**
		 * 追加数据到网格输出
		 * @param footer
		 */
		_appendFooter: function(footer){
			if(!$.isArray(footer) && footer){
				footer = [footer];
			}
			if(footer.length == 0){
				return;
			}
			var leftHtml = ''
				,rightHtml = ''
				,mainHtml = '';
			for ( var i = 0; i < footer.length; i++) {
				leftHtml += this._initFootRowHtml(this.frozenColumns, footer[i]);
				rightHtml += this._initFootRowHtml(this.frozenColumnsRight, footer[i]);
				mainHtml += this._initFootRowHtml(this.columns, footer[i]);
				this._frowsnumber++;
			}
			this.$tableFooterLeft.find('>div>table>tbody').append(leftHtml);
			this.$tableFooterRight.find('>div>table>tbody').append(rightHtml);
			this.$tableFooterMain.find('>div>table>tbody').append(mainHtml);
			this.$tableFooter.css('display', 'block');
			this._fixHeight();
			this._footerFollow();
			this._fixXProxyScroll();
		},
		/**
		 * 追加结尾的数据
		 */
		_appendFooterData: function(footer){
			var oriFooter = this.getFooterRows();
			if(oriFooter){
				if($.isArray(footer)){
					$.merge(oriFooter, footer);
				}else{
					oriFooter.push(footer);
				}
			}else{
				this._setFooterRows(footer);
			}
		},
		/**
		 * 生成数据行html
		 */
		_initFootRowHtml: function(cols, row, index){
			var html = '<tr>';
			for ( var i = 0; i < cols.length; i++) {
				html += this._initFootCellHtml(cols[i], row, index);
			}
			return html + '</tr>';
		},
		/**
		 * 生成数据单元格html
		 */
		_initFootCellHtml: function(col, row, index){
			var titleAttr = ''
				,divCss = ''
				,tdCss = ''
				,tdCls = '';
			if(col.totalText){
				tdCss = col.totalCss;
				tdCls = col.totalCls;
				row[col.field] = col.totalText;
			}
			var showTitle = this._getFormatText(col, row);
			if(col.showTitle && showTitle){
					titleAttr = ' title="'+ escapeHtml(showTitle) +'"';
			}
			if(row[col.field + '_style']){
				divCss += row[col.field + '_style'];
			}
			return '<td style="' + this._getBodyTdExp(col, row, tdCss) + '" ' + col.footerTdAttrExp + this._getTdClassAttr(col, tdCls) + titleAttr +'>' +
				'<div style="width:' + col.width + 'px;' + divCss +'">' + this._initFooterTdInnerHtml(col, row, index, showTitle) + '</div>' +
				'</td>';
		},
		/**
		 * 获取尾行内数据单元格div内的html
		 */
		_initFooterTdInnerHtml: function(col, row, index, showTitle){
			var html = '';
			if(col.sysCol){
				if(col.field == '_rownumbers'){
					if(this.setting.footerRowNumber){
					   html =  this._frowsnumber + '';
					}else if(row._rownumbers){
					   html = this._getFormatText(col, row, index);         
					}else{
					   html =  '合计';           
					}
				}
			}else if(showTitle){
				return showTitle;
			}else{
				html = this._getFormatText(col, row, index);
			}
			return html;
		},
		/**
		 * 获取当前网格的数据
		 * @property {Object} [returns] 数据对象
		 * @property {Array} [returns.rows] 数据行
		 * @property {Array} [returns.footer] 尾数据行
		 * @property {Number} [returns.total] 行总数
		 * @returns {Object} data 数据对象
		 * @example $('#demo').grid('getData');
		 * @memberof grid-class
		 * @instance
		 */
		getData: function(){
			return this.data;
		},
		/**
		 * 网格上的数据是否为合法，当存在非法数据时返回false
		 * @returns {Boolean} valid true为合法
		 * @example $('#demo').grid('isValid');
		 * @memberof grid-class
		 * @instance
		 */
		isValid: function(){
			if(this.$tableBody.find('.invalid').length > 0){
				return false;
			}else{
				return true;
			}
		},
		/**
		 * 获取当前网格展现的数据
		 * @returns {Array} rows 数据行
		 * @example $('#demo').grid('getAllData');
		 * @memberof grid-class
		 * @instance
		 */
		getAllData: function(copy){
			var trs = this.$tableBodyMain.find('tr')
				,data = [];
			for(var i = 0; i< trs.length; i++){
				var rowData = this._getDataByRowId(trs[i].id);
				if(rowData){
					if(copy){
						rowData = $.extend(true, {}, rowData);
						delete rowData.__rowId;
					}
					data.push(rowData);
				}
			}
			return data;
		},
		/**
		 * 获取当前编辑行的数据
		 * @returns {Object} rowData 数据行
		 * @example $('#demo').grid('getCurrentEditRowData');
		 * @memberof grid-class
		 * @instance
		 */
		getCurrentEditRowData: function(){
			return this._getDataByRowId(this._currentEditRowId);
		},
		/**
		 * 获取当前编辑行的数据
		 * @returns {Object} rowData 数据行
		 * @example $('#demo').grid('getCurrentEditRowIndex');
		 * @memberof grid-class
		 * @instance
		 */
		getCurrentEditRowIndex: function(){
			if(this._currentEditRowId == null){
				return -1;
			}else{
				return this._convertRowIdToRowIndex(this._currentEditRowId);
			}
		},
		/**
		 * 根据行内置id获取数据，编辑的数据优先获取
		 */
		_getDataByRowId: function(rowId){
			var data = this._newData.deleted[rowId];
			if(data){
				return null;
			}
			data = this._newData.updated[rowId];
			if(data){
				var t = $.extend(true, {}, this._rowData[rowId], data);
				return $.extend(true, data, t);
			}
			data = this._newData.inserted[rowId];
			if(data){
				return data;
			}
			data = this._rowData[rowId];
			return data;
		},
		/**
		 * 获取当前网格的的数据行
		 * @returns {Array} rows 数据行
		 * @example $('#demo').grid('getRows');
		 * @memberof grid-class
		 * @instance
		 */
		getRows: function(){
			return this.data[this.setting.jsonReader.rows];
		},
		/**
		 * 设置当前网格的的数据行
		 */
		_setRows: function(rows){
			this.data[this.setting.jsonReader.rows] = rows;
		},
		/**
		 * 获取当前网格的的尾数据行
		 * @returns {Array} footer 数据行
		 * @example $('#demo').grid('getFooterRows');
		 * @memberof grid-class
		 * @instance
		 */
		getFooterRows: function(){
			return this.data[this.setting.jsonReader.footer];
		},
		/**
		 * 获取计算行数据
		 * @returns {Array} summaryRow 计算行数据
		 * @example $('#demo').grid('getSummaryRow');
		 * @memberof grid-class
		 * @instance
		 */
		getSummaryRow: function(){
			return this.summaryRow;
		},
		/**
		 * 设置当前网格的的尾数据行
		 */
		_setFooterRows: function(footer){
			this.data[this.setting.jsonReader.footer] = footer;
		},
		/**
		 * 根据行号获取行数据
		 * @param {Number} rowIndex 行号
		 * @returns {Object} row 数据
		 * @example $('#demo').grid('getDataByRowIndex', 0);
		 * @memberof grid-class
		 * @instance
		 */
		getDataByRowIndex: function(rowIndex){
			var rowId = this._convertRowIndexToRowId(rowIndex);
			return this._getDataByRowId(rowId);
		},
		/**
		 * 选中行，勾选行
		 * @todo 如果行不可选中，则不触发beforeSelect和onSelect事件
		 * @param {Number|String} rowIndex 尾数据数据
		 * @returns {Object} data 数据对象{rows,footer}
		 * @fires grid-class#beforeSelect
		 * @fires grid-class#onSelect
		 * @example $('#demo').grid('selectRow',1);
		 * @example $('#demo').grid('selectRow','表格主键值');
		 * @memberof grid-class
		 * @instance
		 */
		selectRow: function(rowIndex){
			var exp = this._getRowExpr(rowIndex)
				,selectable = this.$tableBodyMain.find(exp).is(':not(.row-uncheckable)')
				,rowData = this.getDataByRowIndex(rowIndex);
			if(selectable){
				/**
				 * 选择行前事件
				 * @event grid-class#beforeSelect
				 * @param {Object} rowData 行数据对象
				 * @param {Number} rowIndex 行号
				 * @returns {Boolean} boolean 返回值为false 取消选择
				 */
				if(this.trigger('beforeSelect', rowData, rowIndex) === false){
					return;
				}
			}
			this._renderRow(rowIndex, rowData);
			if(selectable){
				/**
				 * 选择行事件
				 * @event grid-class#onSelect
				 * @type {object}
				 * @param {Object} rowData 行数据
				 * @param {Number} rowIndex 行号
				 */
				this.trigger('onSelect', rowData, rowIndex);
			}
		},
		/**
		 * 行是否可以勾选
		 * @param {Number|String} rowIndex
		 * @return {boolean} true 为可以勾选
		 * @example $('#demo').grid('isCheckable',1);
		 * @example $('#demo').grid('isCheckable','表格主键值');
		 * @memberof grid-class
		 * @instance
		 */
		isCheckable: function(rowIndex){
			var exp = this._getRowExpr(rowIndex);
			return !this.$tableBodyMain.find(exp).hasClass('row-uncheckable');
		},
		/**
		 * 设置行为可勾选状态
		 * @param {Number|String} rowIndex
		 * @example $('#demo').grid('uncheckable',1);
		 * @example $('#demo').grid('uncheckable','表格主键值');
		 * @memberof grid-class
		 * @instance
		 */
		checkable: function(rowIndex){
			var exp = this._getRowExpr(rowIndex);
			this.$tableBodyLeft.find(exp).removeClass('row-uncheckable');
			this.$tableBodyMain.find(exp).removeClass('row-uncheckable');
			this.$tableBodyRight.find(exp).removeClass('row-uncheckable');
		},
		/**
		 * 设置行为不可勾选状态
		 * @param {Number|String} rowIndex
		 * @example $('#demo').grid('uncheckable',1);
		 * @example $('#demo').grid('uncheckable','表格主键值');
		 * @memberof grid-class
		 * @instance
		 */
		uncheckable: function(rowIndex){
			var exp = this._getRowExpr(rowIndex);
			this.$tableBodyLeft.find(exp).addClass('row-uncheckable');
			this.$tableBodyMain.find(exp).addClass('row-uncheckable');
			this.$tableBodyRight.find(exp).addClass('row-uncheckable');
		},
		/**
		 * 渲染行，如果行可以选中则选中，如果行可以勾选则勾选
		 * @param rowIndex 行号
		 */
		_renderRow: function(rowIndex){
			var exp = this._getRowExpr(rowIndex);
			if(!exp){
				return;
			}
			if(!this.setting.checkbox){
				this._renderUnselectRow('tr.' + selectedRowCls);
			}
			this._renderSelectRow(exp);
			this._renderBoxValue(exp, true);
		},
		/**
		 * 根据行数据的属性搜索，获取条件完全匹配的节点数据 JSON 对象
		 * @param {String} key 需要精确匹配的属性名称
		 * @param {?} value 需要精确匹配的属性值，可以是任何类型，只要保证与 key 指定的属性值保持一致即可
		 * @returns 匹配精确搜索的节点数据 1、如无结果，返回 null 2、如有多个节点满足查询条件，只返回第一个匹配到的节点
		 * @example $('#demo').grid('getRowByParam', 'field1', 'val1');
		 * @memberof grid-class
		 * @instance
		 */
		getRowByParam: function(key, val){
			var rows = this.getRows();
			for(var i = 0; i < rows.length; i++ ){
				var row = rows[i];
				if(row[key] == val){
					return row;
				}
			}
			return null;
		},
		/**
		 * 根据自定义规则搜索节点数据 JSON 对象集合 或 单个节点数据
		 * @param {Function} filter 自定义过滤器函数 function filter(node) {...} filter 参数：node (节点数据 JSON)filter 返回值：boolean (true 表示符合搜索条件；false 表示不符合搜索条件)
		 * @returns {JSON} 第一个找到的节点数据 JSON，无结果时返回 null
		 * @example $('#demo').grid('getRowByFilter', function(row){if(row.field1 == 'val1'){return true}else{return false}});
		 * @memberof grid-class
		 * @instance
		 */
		getRowByFilter: function(filter){
			if(!$.isFunction(filter)){
				throw new Error('类型错误：getRowByFilter方法要传入一个过滤函数');
			}
			var rows = this.getRows();
			for(var i = 0; i < rows.length; i++ ){
				var row = rows[i];
				if(filter(row) === true){
					return row;
				}
			}
			return null;
		},
		/**
		 * 根据内部行对象获取行号
		 * @param node
		 * @returns {Number} 行号 ，如果未找到返回-1
		 * @memberof grid-class
		 * @instance
		 */
		getRowIndex: function(row){
			if(!row){
				throw new Error('无法获取空值');
			}
			if(!row.__rowId){
				throw new Error('该对象不是内部对象，无法获取行号');
			}
			return this.$tableBodyMain.find('#'+ row.__rowId).index();
		},
		/**
		 * 获取行的jquery选择器表达式
		 * @param {Number|String|Object} exp 行选择器
		 * 		Number为行号选择
		 * 		String为行id选择（内部）
		 * 		object为主键值选择
		 * @param {String} exp.type 选择器类型 id|index
		 * @param {String} exp.value 选择器值 index值或表主键值
		 */
		_getRowExpr: function(exp){
			var type = typeof(exp)
				,result = '';
			if(!isNaN(exp)){
				result = 'tr:eq(' + exp + ')';
			}else if(type == 'string'){
				result = 'tr#' + exp;
			}else if(type == 'object'){
				if(!exp.type || exp.type == 'id'){
					result = 'tr[_v="' + exp.value + '"]';
				}
			}
			return result;
		},
		/**
		 * 取消选中行
		 * @todo 如果行不可选中，则不触发onUnselect事件
		 * @param {Number} rowIndex 行号
		 * @fires grid-class#onUnselect
		 * @example $('#demo').grid('unselectRow',1);
		 * @memberof grid-class
		 * @instance
		 */
		unselectRow: function(rowIndex){
			var exp = this._getRowExpr(rowIndex)
				,selectable = this.$tableBodyMain.find(exp).is(':not(.row-uncheckable)');
			if(!exp){
				return;
			}
			this._renderUnselectRow(exp);
			this._renderBoxValue(exp, false);
			if(selectable){
				var rowData = this.getDataByRowIndex(rowIndex);
				/**
				 * 取消选择行事件
				 * @event grid-class#onUnselect
				 * @type {object}
				 * @param {Object} rowData 行数据
				 * @param {Number} rowIndex 行号
				 */
				this.trigger('onUnselect', rowData, rowIndex);
			}
		},
		/**
		 * 反选中行，反勾选行
		 * @param {Number} rowIndex 行号
		 * @example $('#demo').grid('toggleSelectRow',1);
		 * @memberof grid-class
		 * @instance
		 */
		toggleSelectRow: function(rowIndex){
			var exp = this._getRowExpr(rowIndex);
			if(!exp){
				exp = 'tr';
			}
			this._renderToggleSelectRow(exp);
			this._renderToggleBoxValue(exp);
		},
		/**
		 * 选中全部
		 * @fires grid-class#onSelectAll
		 * @example $('#demo').grid('selectAll');
		 * @memberof grid-class
		 * @instance
		 */
		selectAll: function(){
			this._renderSelectRow('>div>table>tbody>tr');
			this._renderBoxValue('', true);
			/**
			 * 全选则事件
			 * @param {Array} rows 所有行数据
			 * @event grid-class#onSelectAll
			 * @type {object}
			 */
			this.trigger('onSelectAll');
		},
		/**
		 * 全部不选中
		 * @example $('#demo').grid('unselectAll');
		 * @fires grid-class#onUnselectAll
		 * @memberof grid-class
		 * @instance
		 */
		unselectAll: function(){
			this._renderUnselectRow('>div>table>tbody>tr');
			this._renderBoxValue('', false);
			/**
			 * 全取消选则事件
			 * @event grid-class#onUnselectAll
			 */
			this.trigger('onUnselectAll');
		},
		/**
		 * 根据选择器设置选中行，勾选行
		 * @param exp 选择器
		 */
		_renderSelectRow: function(exp){
			var checkable = this.setting.checkbox;
			rowRender(this.$tableBodyLeft.find(exp));
			rowRender(this.$tableBodyMain.find(exp));
			rowRender(this.$tableBodyRight.find(exp));
			function rowRender($trs){
				if(checkable){
					$trs.filter(':not(.row-uncheckable)').addClass(checkedRowCls);
				}else{
					$trs.addClass(selectedRowCls);
				}
			}
		},
		/**
		 * 根据选择器取消选中行、取消勾选行
		 * @param exp 选择器
		 */
		_renderUnselectRow: function(exp){
			var checkable = this.setting.checkbox;
			rowRender(this.$tableBodyLeft.find(exp));
			rowRender(this.$tableBodyMain.find(exp));
			rowRender(this.$tableBodyRight.find(exp));
			function rowRender($trs){
				if(checkable){
					$trs.filter(':not(.row-uncheckable)').removeClass(checkedRowCls);
				}else{
					$trs.removeClass(selectedRowCls);
				}
			}
		},
		/**
		 * 根据选择器反选中行，反勾选行
		 * @param exp 选择器
		 */
		_renderToggleSelectRow: function(exp){
			var checkable = this.setting.checkbox;
			if(!checkable){
				this.unselectAll();
			}
			rowRender(this.$tableBodyLeft.find(exp));
			rowRender(this.$tableBodyMain.find(exp));
			rowRender(this.$tableBodyRight.find(exp));
			function rowRender($trs){
				if(checkable){
					$trs.filter(':not(.row-uncheckable)').toggleClass(checkedRowCls);
				}
			}
		},
		/**
		 * 根据选择器设置复选框或单选框的勾选情况
		 * @param exp
		 * @param checked
		 */
		_renderBoxValue: function(exp, checked){
			if(this.setting.checkbox){
				var $trs = this.$tableBodyLeft.find(exp);
				this.$tableBodyLeft.find(exp + ':not(.row-uncheckable) td[field="_checkbox"] input').each(function() {
					this.checked = checked;
				});
			}else if(this.setting.radiobox){
				this.$tableBodyLeft.find(exp + ' td[field="_radiobox"] input').each(function() {
					this.checked = checked;
				});
			}
			this._renderTopCheckboxValue();
		},
		/**
		 * 根据选择器反选复选框或单选框
		 * @param exp
		 */
		_renderToggleBoxValue: function(exp){
			if(this.setting.checkbox){
				this.$tableBodyLeft.find(exp + ':not(.row-uncheckable) td[field="_checkbox"] input').each(function() {
					this.checked = !this.checked;
				});
			}else if(this.setting.radiobox){
				this.$tableBodyLeft.find(exp + ' td[field="_radiobox"] input').each(function() {
					this.checked = !this.checked;
				});
			}
			this._renderTopCheckboxValue();
		},
		_renderTopCheckboxValue: function(){
			var checkedLen = this.$tableBodyMain.find('tr.' + checkedRowCls).length
				,checkableLen = this.$tableBodyMain.find('tr:not(.row-uncheckable)').length;
			if(checkableLen == 0){
				return;
			}
			if(checkedLen == checkableLen){
				this.$tableHeaderLeft.find('td[field="_checkbox"] input').prop('checked', true);
			}else{
				this.$tableHeaderLeft.find('td[field="_checkbox"] input').prop('checked', false);
			}
		},
		/**
		 * 判断传入的行号是否已被选中
		 * @returns {Number} rowIndex 行号
		 * @example $('#demo').grid('isSelectedRow');
		 * @memberof grid-class
		 * @instance
		 */
		isSelectedRow: function(rowIndex){
			return this.$tableBodyMain.find('tr:eq(' + rowIndex + ')').hasClass(selectedRowCls)
				|| this.$tableBodyMain.find('tr:eq(' + rowIndex + ')').hasClass(checkedRowCls);
		},
		/**
		 * 获取选中的第一行行号
		 * @returns {Number} rowIndex 行号
		 * @example $('#demo').grid('getSelectedRowIndex');
		 * @memberof grid-class
		 * @instance
		 */
		getSelectedRowIndex: function(){
			var selecteds
				,result = null;
			if(this.setting.radiobox){
				selecteds = this.$tableBodyLeft.find('td[field="_radiobox"] input:checked').closest('tr');
			}else{
				selecteds = this.$tableBodyMain.find('tr.' + selectedRowCls + ':first');
			}
			result = selecteds.index();
			return result;
		},
		/**
		 * 获取选中的第一行
		 * @returns {object} rowData 行数据
		 * @example $('#demo').grid('getSelected');
		 * @memberof grid-class
		 * @instance
		 */
		getSelected: function(){
			var selecteds
				,result = null;
			if(this.setting.radiobox){
				selecteds = this.$tableBodyLeft.find('td[field="_radiobox"] input:checked').closest('tr');
			}else{
				selecteds = this.$tableBodyMain.find('tr.' + selectedRowCls + ':first');
			}
			result = this._converRowToData(selecteds)[0];
			if(result == undefined){
				return null;
			}
			return result;
		},
		/**
		 * 获取选中的行
		 * @returns {Array} rows 选中行的数据数组
		 * @example $('#demo').grid('getSelections');
		 * @memberof grid-class
		 * @instance
		 */
		getSelections: function(){
			var selecteds;
			if(this.setting.checkbox){
				selecteds = this.$tableBodyMain.find('tr.' + checkedRowCls);
			}else{
				selecteds = this.$tableBodyMain.find('tr.' + selectedRowCls);
			}
			return this._converRowToData(selecteds);
		},
		/**
		 * 根据传入的行获取对于的数据
		 * @param $selectedRows
		 * @return []
		 */
		_converRowToData: function($selectedRows){
			var result = []
				,that = this;
			$selectedRows.each(function(){
				var row = that._getDataByRowId(this.id);
				result.push(row);
			});
			return result;
		},
		/**
		 * 当前行移动到下一行
		 * @todo 如果当前行没有，则定位到第一行
		 * @example $('#demo').grid('nextRow');
		 * @memberof grid-class
		 * @instance
		 */
		nextRow: function(){
			var index = this.getCurrentRowIndex()
				,length = this.$tableBodyMain.find('tr').length;
			if(index == -1){
				index = 0;
			}else{
				index = (++index)%length;
			}
			this.setCurrentRow(index);
		},
		/**
		 * 当前行移动到上一行
		 * @todo 如果当前行没有，则定位到第一行
		 * @example $('#demo').grid('prevRow');
		 * @memberof grid-class
		 * @instance
		 */
		prevRow: function(){
			var index = this.getCurrentRowIndex()
				,length = this.$tableBodyMain.find('tr').length;
			if(index == -1){
				index = 0;
			}else{
				index = ( --index + length)%length;
			}
			this.setCurrentRow(index);
		},
		/**
		 * 获取当前行的行索引
		 * 如果没有当前行，则返回-1
		 * @example $('#demo').grid('getCurrentRowIndex');
		 * @memberof grid-class
		 * @instance
		 */
		getCurrentRowIndex: function(){
			var $curr = this.$tableBodyMain.find('tr.' + currentRowCls);
			if($curr.length == 1){
				return $curr.index();
			}
			return -1;
		},
		/**
		 * 根据传入的行号设置对应行为当前行
		 * @param {Number} rowIndex 行号
		 * @example $('#demo').grid('setCurrentRow', 2);
		 * @memberof grid-class
		 * @instance
		 */
		setCurrentRow: function(rowIndex){
			this._setRowClass(rowIndex, currentRowCls);
		},
		/**
		 * 设置行为表格的唯一行样式，如果先撤销该样式的行
		 * @param {Number} rowIndex 行号
		 * @param {Class} cls 类型
		 */
		_setRowClass: function(rowIndex, cls){
			var exp = this._getRowExpr(rowIndex);
			this._removeRowClass(cls);
			this.$tableBodyLeft.find(exp).addClass(cls);
			this.$tableBodyMain.find(exp).addClass(cls);
			this.$tableBodyRight.find(exp).addClass(cls);
		},
		/**
		 * 清除已选行的样式
		 */
		_onBodyTrMouseLeave: function(){
			this._removeRowClass(hoverRowCls);
		},
		/**
		 * 清除已选行的样式
		 */
		_removeRowClass: function(cls){
			var exp = 'tr.' + cls;
			this.$tableBodyLeft.find(exp).removeClass(cls);
			this.$tableBodyMain.find(exp).removeClass(cls);
			this.$tableBodyRight.find(exp).removeClass(cls);
		},
		/**
		 * 获取当前行的数据，如果没有当前行 则返回null
		 * @returns {object} RowData 当前行的数据
		 * @example $('#demo').grid('getCurrentRowData');
		 * @memberof grid-class
		 * @instance
		 */
		getCurrentRowData: function(){
			var index = this.getCurrentRowIndex();
			if(index > -1){
				return this.getRows()[index];
			}
			return null;
		},
		/**
		 * 选中当前行
		 * @see {@link grid#selectRow}
		 * @example $('#demo').grid('selectCurrent');
		 * @memberof grid-class
		 * @instance
		 */
		selectCurrent: function(){
			var index = this.getCurrentRowIndex();
			if(index != -1){
				this.selectRow(index);
			}
		},
		/**
		 * 取消当前行
		 * @see {@link grid#unselectRow}
		 * @example $('#demo').grid('unselectCurrent');
		 * @memberof grid-class
		 * @instance
		 */
		unselectCurrent: function(){
			var index = this.getCurrentRowIndex();
			if(index != -1){
				this.unselectRow(index);
			}
		},
		/**
		 * 反选当前行
		 * @see {@link grid#toggleSelectRow}
		 * @example $('#demo').grid('toggleSelectCurrent');
		 * @memberof grid-class
		 * @instance
		 */
		toggleSelectCurrent: function(){
			var index = this.getCurrentRowIndex();
			if(index != -1){
				this.toggleSelectRow(index);
			}
		},
		/**
		 * 定位当前行到可视区域
		 * @example $('#demo').grid('locateCurrent');
		 * @memberof grid-class
		 * @instance
		 */
		locateCurrent: function(){
			var rowIndex = this.getCurrentRowIndex();
			if(rowIndex == -1){
				return;
			}
			this.locateRow(rowIndex);
		},
		/**
		 * 根据行号将对应的数据行定位到可视区域
		 * @example $('#demo').grid('locateRow', 2);
		 * @memberof grid-class
		 * @instance
		 */
		locateRow: function(rowIndex){
			var $row = this.$tableBodyMain.find(this._getRowExpr(rowIndex));
			if($row.length == 0){
				return;
			}
			this._scroll_yProxyScroll($row);
		},
		/**
		 * 滚动纵向代理滚动条定位到传入的行
		 * @param $row 要定位的行
		 */
		_scroll_yProxyScroll: function($row){
			if(this.setting.height == 'push'){
				var viewHeight = this.$wrap.outerHeight() - this.$header.outerHeight()
					- this.$tableHeader.outerHeight() - this.$tableFooter.outerHeight()
					- this._getPagerDownHeight();
				var oriTop = 0
					,children = this.$wrap.children();
				for(var i = 0; i < children.length; i++){
					var $child = $(children[i]);
					if($child.is(this.$element)){
						break;
					}
					oriTop += $child.outerHeight();
				}
				this.$wrap.scrollTop($row.position().top + oriTop - viewHeight);
			}else if(this.$yProxyScroll){
				var containerHeight = this.$tableBodyMain.outerHeight()  + 3
					,scrollTop = this.$tableBodyMain.scrollTop()
					,top = $row.offset().top + $row.outerHeight() - this.$tableBodyMain.offset().top + scrollTop;
				if(top <= scrollTop){
					this.$yProxyScroll.scrollTop(top - $row.outerHeight());
				}else if(top >= scrollTop + containerHeight){
					this.$yProxyScroll.scrollTop(top - containerHeight);
				}
			}
		},
		/**
		 * 注册标题列拖拽事件
		 */
		_registResizeColumnProxy: function(){
			var g = this;
			this.$table.on('mousemove.grid-column.resizable.api','.grid-table-header td', function(e){
				var $td = $(this);
				if(g._preventColumnResize($td) !== true){
					return;
				}
				var cursor = g._getCursor($td, e);
				if(cursor){
					$td.css('cursor', cursor);
				}else{
					$td.css('cursor', 'default');
				}
			}).on('mousedown.grid-column.resizable.api','.grid-table-header td', function(e){
				if(!g._isLeftMouseKey(e)){
					return;
				}
				var $td = $(this);
				if(g._preventColumnResize($td) !== true){
					return;
				}
				if(g._getCursor($td, e)){
					g.$targetTd = $td;
					g._onStartResizeColumn(e);
				}
			});
			this.$columnResizeProxy = this.$element.find('.col-resize-proxy');
		},
		/**
		 * 左按键判断
		 */
		_isLeftMouseKey: function(e){
			var result = false;
			if($.browser.msie){
				if(document.documentMode == 8){
					if(e.button === 1){
						result = true;
					}
				}else{
					if(e.button === 0){
						result = true;
					}
				}
			}else if(e.button === 0){
				result = true ;
			}
			return result;
		},
		/**
		 * 获取当前td的鼠标样式
		 * @param $td
		 * @param e
		 * @returns {String}
		 */
		_getCursor: function($td, e){
			var left = $td.offset().left
				,width = $td.width()
				,scope = 5
				,pageX = e.pageX || e.screenX
				,colspan = $td.attr('colspan')
				,result = '';
			if (pageX <= left + width && pageX > left + width - scope
				&& (colspan == undefined || colspan == 1) && $td.attr('field'))
				result = 'e-resize';
			return result;
		},
		/**
		 * 是否独自列宽设置
		 */
		_preventColumnResize: function($td){
			if(!this.setting.columnResizable){
				return false;
			}
			var col = this._column[$td.attr('_cid')];
			return col.resizable;
		},
		/**
		 * 标题列开始拖拽状态
		 * @param e
		 */
		_onStartResizeColumn: function(e){
			var g = this
				,$target = g.$targetTd;
			$target.oriX = $target.position().left + $target.outerWidth() - 1;
			g.$columnResizeProxy.css({
				left: $target.oriX,
				display: 'block'
			});
			$(document).bind("selectstart.grid-column.resizable.api", function(){ return false; });
			$(document).bind('mouseup.grid-column.resizable.api', function(){
				g._onStopResizeColumn();
			});
			$(document).bind('mousemove.grid-column.resizable.api', function(e){
				g._onResizeColumn(e);
			});
		},
		/**
		 * 标题列正在拖拽
		 * @param e
		 */
		_onResizeColumn: function(e){
			var pageX = e.pageX || e.screenX
				,left = pageX - this.$tableHeader.offset().left;
			this.$columnResizeProxy.css({
				left: left,
				cursor: 'e-resize'
			});
			this.$targetTd.diffX = parseInt(this.$columnResizeProxy.css('left')) - this.$targetTd.oriX;
		},
		/**
		 * 标题列结束拖拽状态
		 * @param e
		 */
		_onStopResizeColumn: function(){
			this._applyResizeColumn();
			this.$columnResizeProxy.hide();
			$(document).unbind("selectstart.grid-column.resizable.api");
			$(document).unbind('mousemove.grid-column.resizable.api');
			$(document).unbind('mouseup.grid-column.resizable.api');
		},
		/**
		 * 应用列宽的设置
		 */
		_applyResizeColumn: function(){
			this.$targetTd.diffX = parseInt(this.$targetTd.diffX);
			if(isNaN(this.$targetTd.diffX)){
				this.$targetTd.diffX = 0;
			}
			var oriWidth = this.$targetTd.outerWidth()
				,newWidth = parseInt(oriWidth + this.$targetTd.diffX);
			if(newWidth < minWidth){
				this.$targetTd.diffX = minWidth - oriWidth;
			}
			this._setColumnWidth(this.$targetTd, this.$targetTd.diffX);
			this._fullAfterResizeColumn();
		},
		/**
		 * 拉伸最后一列的宽度以填充空白
		 */
		_fullAfterResizeColumn: function(){
			var firstFill = this._fullFreeWidth();
			if(firstFill){
				return;
			}
			var $lastTd = this._getLast$Td()
				,$targetTd = this.$targetTd;
			if($targetTd.attr('_cid') == $lastTd.attr('_cid')){
				return;
			}
			if($targetTd.diffX < 0){
				return;
			}
			this._shinkFreeWidth();
		},
		/**
		 * 收缩被拉伸的列以去除滚动
		 */
		_shinkFreeWidth: function(){
			if(this.setting.fitColumns != 'E' && this.setting.fitColumns != 'ES'){
				return ;
			}
			var coverWidth = this.$tableHeaderMain.find('>div>table').width() - this.$tableHeaderMain.width();
			if(coverWidth <= 0){
				return;
			}
			var cols = this.columns;
			for(var i = cols.length - 1; i >= 0; i--){
				var col = cols[i];
				if(col.hidden){
					continue;
				}
				var $td = this.$tableHeader.find('td[_cid="' + col._cid + '"]')
					,freeWidth = $td.data('freeWidth');
				if(freeWidth == undefined){
					continue;
				}
				if(freeWidth > coverWidth){
					$td.data('freeWidth', freeWidth - coverWidth);
					this._setColumnWidth($td, -coverWidth);
					return;
				}else{
					coverWidth = coverWidth - freeWidth;
					$td.removeData('freeWidth');
					this._setColumnWidth($td, -freeWidth);
				}
			}
		},
		/**
		 * 最后一列填充空白
		 */
		_fullFreeWidth: function(){
			if(this.setting.fitColumns != 'E' && this.setting.fitColumns != 'ES'){
				return ;
			}
			var freeWidth = this.$tableHeaderMain.width() - this.$tableHeaderMain.find('>div>table').width();
			if(freeWidth > 0){
				var $lastTd = this._getLast$Td();
				this._setColumnWidth($lastTd, freeWidth);
				var lastWidth = $lastTd.data('freeWidth');
				if(lastWidth != undefined){
					freeWidth = freeWidth + lastWidth
				}
				$lastTd.data('freeWidth', freeWidth);
				return true;
			}
		},
		/**
		 * 获取最后一个可视列
		 */
		_getLast$Td: function(){
			var lastVisible = this.columns.length - 1;
			while(this.columns[lastVisible].hidden
					&& lastVisible >= 0){
				lastVisible--;
			}
			var lastCol = this.columns[lastVisible]
				,lastTdCid = lastCol._cid;
			return this.$tableHeader.find('td[_cid="' + lastTdCid + '"]');
		},
		/**
		 * @param {Object} info 列信息
		 * @param {String} info.field 列名
		 * @param {Number} info.width 列宽
		 * @example $('#demo').grid('setColumnWidth', {field:'f1',width: 150});
		 * @memberof grid-class
		 * @instance
		 */
		setColumnWidth: function(info){
			var $td = this.$tableHeader.find('td[field="' + info.field + '"]')
				,oriWidth = $td.outerWidth()
				,diff = info.width - oriWidth;
			this._setColumnWidth($td, diff);
		},
		/**
		 * 设置标题列的宽度
		 * @param $td 标题列Td
		 * @param diffWidth 变更的宽度值
		 */
		_setColumnWidth: function($td, diffWidth){
			var cid = $td.attr('_cid');
			this._setFooterBorderTop();
			var tdWidth = $td.outerWidth() - cellBorderWidth + diffWidth;
			this.$table.find('td[_cid=' + cid + ']>div:not(.app-wrapper)').css('width', tdWidth);
			this._column[cid].width = tdWidth;
			this._setColumnPercent();
			this._refitColumnWidth();
		},
		/**
		 * 隐藏列
		 * @param {String} field 列名
		 * @example $('#demo').grid('hideColumn', 'f1');
		 * @memberof grid-class
		 * @instance
		 */
		hideColumn: function(field){
			var column = this._fieldColumns[field]
				,that = this;
			if(column.lockTree){
				return;
			}
			if(!this._fieldColumns[field].hidden){
				var $tds = this.$table.find('td[field="' + field + '"]:not(.grid-cell-merger)');
				$tds.hide();
				column.hidden = true;
				setParent(column);
				this._setViewSize($tds, function($headerView, tdWidth){
					if($headerView.hasClass('grid-header-left')){
						this.setting.viewMainWidth += tdWidth;
						this.setting.viewLeftWidth -= tdWidth;
					}else if($headerView.hasClass('grid-header-right')){
						this.setting.viewMainWidth += tdWidth;
						this.setting.viewRightWidth -= tdWidth;
					}
				});
				this._refitColumnWidth();
				this._fullFreeWidth();
			}
			function setParent(column){
				if(column.parentColumn){
					var $parent = that.$tableHeader.find('td[_cid="' + column.parentColumn._cid + '"]');
					if($parent.length > 0){
						var colspan = $parent.attr('colspan');
						if(colspan > 1){
							$parent.attr('colspan', colspan-1);
						}else{
							$parent.css('display', 'none');
						}
					}
					setParent(column.parentColumn);
				}
			}
		},
		/**
		 * 列是否可见
		 * @param {String} field 列名
		 * @example $('#demo').grid('columnIsVisible', 'f1');
		 * @memberof grid-class
		 * @instance
		 */
		columnIsVisible: function(field){
			var $td = this.$tableHeader.find('td[field="' + field + '"]')
				,display = $td.css('display');
			if(display != 'none'){
				return true;
			}else{
				return false;
			}
		},
		/**
		 * 如果视图可见则，不设置逻辑宽度
		 * @param $tds
		 */
		_setViewSize: function($tds, callback){
			if(this.$element.is(':visible')){
				return;
			}
			var td = $tds[0];
			if(!td){
				return;
			}
			var $td = $(td)
				,$headerView = $td.closest('div').parent()
				,tdWidth = parseInt($td.css('width'));
			callback.call(this, $headerView, tdWidth);
		},
		/**
		 * 显示列
		 * @param {String} field 列名
		 * @example $('#demo').grid('showColumn', 'f1');
		 * @memberof grid-class
		 * @instance
		 */
		showColumn: function(field){
			var column = this._fieldColumns[field]
				,that = this;
			if(column.lockTree){
				return;
			}
			if(column.hidden){
				column.hidden = false;
				initHiddenColumn.call(this, column);
				var $tds = this.$table.find('td[field="' + field + '"]:not(.grid-cell-merger)');
				$tds.show();
				setParent(column);
				this._setViewSize($tds, function($headerView, tdWidth){
					if($headerView.hasClass('grid-header-left')){
						this.setting.viewMainWidth -= tdWidth;
						this.setting.viewLeftWidth += tdWidth;
					}else if($headerView.hasClass('grid-header-right')){
						this.setting.viewMainWidth -= tdWidth;
						this.setting.viewRightWidth += tdWidth;
					}
				});
				this._refitColumnWidth();
				this._shinkFreeWidth();
			}
			function initHiddenColumn(column){
				if(this.$tableBody.find('td[_cid=' + column._cid + ']').length > 0){
					return;
				}
				var prevTdid = null
					,prevColumn = column.__prev;
				while(prevColumn){
					if(this.$tableBody.find('td[_cid=' + prevColumn._cid + ']').length > 0){
						break;
					}
					prevColumn = prevColumn.__prev;
				}
				var rows = this.getRows();
				if(rows.length > 0){
					initTableBody.call(this, rows, column, prevColumn);
				}
				this._setColumnPercent();
				function initTableBody(rows, column, prevColumn){
					var $viewPos = this.$tableBodyMain;
					if(column.viewPos == 'left'){
						$viewPos = this.$tableBodyLeft;
					}else if(column.viewPos == 'right'){
						$viewPos = this.$tableBodyRight;
					}
					for(var i = 0; i < rows.length; i++){
						var tdHtml = this._initCellHtml(column, rows[i]);
						if(prevColumn){
							$viewPos.find('tr:eq('+i+') td[_cid='+prevColumn._cid+']').after(tdHtml);
						}else{
							$viewPos.find('tr:eq('+i+')').prepend(tdHtml)
						}
					}
				}
			}
			function setParent(column){
				if(column.parentColumn){
					var $parent = that.$tableHeader.find('td[_cid="' + column.parentColumn._cid + '"]');
					if($parent.length > 0){
						var display = $parent.css('display');
						if(display == 'none'){
							$parent.css('display', 'table-cell');
						}else{
							var colspan = $parent.attr('colspan');
							if(!colspan){
								colspan = 1;
							}
							$parent.attr('colspan',  parseInt(colspan)+1);
						}
					}
					setParent(column.parentColumn);
				}
			}
		},
		/**
		 * 重新调整网格列的自适应宽度
		 */
		_refitColumnWidth: function(){
			this._resetViewWidth();
			this.resize();
		},
		/**
		 * 重新适应列大小
		 * <PRE>
		 * 如果网格没有设置填充和自适应列 则不自适应
		 * 如果该网格不可见，则根据逻辑宽度进行设置
		 * </PRE>
		 * @example $('#demo').grid('resize');
		 * @memberof grid-class
		 * @instance
		 */
		resize: function(){
			var that = this;
			if(this.hasTriggerResize){
				if(this.resizeTimeout){
					clearTimeout(this.resizeTimeout);
				}			
				this.resizeTimeout = setTimeout(function(){
					that.resize();
					delete that.resizeTimeout;
				}, 120);
				return;
			}
			this.hasTriggerResize = true;
			setTimeout(function(){
				delete that.hasTriggerResize;
			}, 110);
			if(this.setting.fitColumns == 'E' || this.setting.fitColumns == 'ES'){
				var cols = this.columns;
				if(cols == undefined){
					return;
				}
				this._fitMainViewWidth();
				for(var i = 0; i< cols.length; i++){
					var col = cols[i];
					if(col.field && !col.hidden){
						this.$table.find('td[_cid=' + cols[i]._cid + ']>div:not(.app-wrapper)').css('width', col.width);
					}
				}
			}
			this._resetViewWidth();
			this._fixHeight();
			this._footerFollow();
		},
		/**
		 * 设置视图的宽度
		 * 如果视图不可见，则根据逻辑宽度进行设置
		 */
		_resetViewWidth: function(){
			var leftViewWidth = 0
				,mainViewWidth = 0
				,rightViewWidth = 0;
			if(this.$element.is(':visible')){
				leftViewWidth = this.$tableHeaderLeft.find('>div>table').outerWidth();
				mainViewWidth = this.$tableHeaderMain.find('>div>table').outerWidth() - 2;
				rightViewWidth = this.$tableHeaderRight.find('>div>table').outerWidth();
			}else{
				leftViewWidth =  this.setting.viewLeftWidth;
				mainViewWidth = this.setting.viewLeftWidth - 2;
				rightViewWidth =  this.setting.viewRightWidth;
			}
			var css = {};
			css['margin-left'] = leftViewWidth;
			css['margin-right'] = rightViewWidth;
			if(this._hasXProxyScroll()){
				this.$xProxyScroll.css(css);
				this.$xProxyScroll.find('>div').css('width', mainViewWidth);
			}
			this._setFooterBorderTop();
			this._footerFollow();
		},
		/**
		 * 设置网格脚的上边框
		 */
		_setFooterBorderTop: function(){
			if(this._hasXProxyScroll()){
				this.$tableFooter.addClass('splitBorder');
			}else{
				this.$tableFooter.removeClass('splitBorder');
			}
		},
		/**
		 * 追加一行数据到第一行，并标记该行为新增的样式
		 * @param {Object} [rowData] 单行数据对象
		 * @example $('#demo').grid('prependRow');
		 * @example $('#demo').grid('prependRow',{col1:1,col2:1,col3:1});
		 * @memberof grid-class
		 * @instance
		 */
		prependRow: function(rowData){
			if(this.setting.editable == false){
				return;
			}
			if(rowData == undefined){
				rowData = {};
			}
			if($.isArray(rowData)){
				return;
			}
			this._prependOneRowToBody(rowData);
			this._reOrderNumber();
			this.locateCurrent();
			this._toggleMessage();
			this._pagerAddRow();
		},
		/**
		 * 追加一行数据到第一行，并选中该行
		 * @param {Object} [rowData] 单行数据对象
		 * @example $('#demo').grid('prependRowThenSelect');
		 * @example $('#demo').grid('prependRowThenSelect',{col1:1,col2:1,col3:1});
		 * @memberof grid-class
		 * @instance
		 */
		prependRowThenSelect: function(rowData){
			this.prependRow(rowData);
			this.selectRow(0);
		},
		/**
		 * 追加一行数据到网格尾，并标记该行为新增的样式
		 * @param {Object} [rowData] 单行数据对象
		 * @param {Integer} [rowIndex] 要插入的行号
		 * @example $('#demo').grid('appendRow');
		 * @example $('#demo').grid('appendRow',{col1:1,col2:1,col3:1});
		 * @memberof grid-class
		 * @instance
		 */
		appendRow: function(rowData, rowIndex){
			if(this.setting.editable == false){
				return;
			}
			if(rowData == undefined){
				rowData = {};
			}
			if($.isArray(rowData)){
				return;
			}
			this._appendOneRowToBody(rowData, rowIndex);
			this._reOrderNumber();
			this.locateCurrent();
			this._toggleMessage();
			this._pagerAddRow();
		},
		/**
		 * 追加一行数据到网格尾，并选中该行
		 * @param {Object} [rowData] 单行数据对象
		 * @example $('#demo').grid('appendRowThenSelect');
		 * @example $('#demo').grid('appendRowThenSelect',{col1:1,col2:1,col3:1});
		 * @memberof grid-class
		 * @instance
		 */
		appendRowThenSelect: function(rowData){
			this.appendRow(rowData);
			var lastRowIndex = this.$tableBodyMain.find('>div>table>tbody>tr').length;
			this.selectRow(lastRowIndex-1);
		},
		/**
		 * 隐藏显示信息
		 */
		_toggleMessage: function(){
			if(this.$tableBodyMain.find('tr').length > 0){
				this._hideMessage();
			}else{
				this._showMessage(empty);
			}
		},
		_prependOneRowToBody: function(rowData){
			var insertedCls = currentRowCls;
			this._clearCurrent();
			if(this.setting.markChange){
				insertedCls += ' inserted';
			}
			var trId = App.uuid()
				,idAttr = rowData[this.setting.idField] ? '_v="' + rowData[this.setting.idField] + '"' : ''
				,trHead = '<tr id="' + trId + '" ' + idAttr + ' class="data-row ' + (this._rownumbers%2 == 0 ? 'odd' : 'even') + ' ' + insertedCls + '">'
				,trEnd = '</tr>'
				,leftHtml = trHead + this._initRowTrInnerHtml(this.frozenColumns, rowData) + trEnd
				,mainHtml = trHead + this._initRowTrInnerHtml(this.columns, rowData) + trEnd
				,rightHtml = trHead + this._initRowTrInnerHtml(this.frozenColumnsRight, rowData) + trEnd;
			rowData.__rowId = trId;
			this.$tableBodyLeft.find('>div>table>tbody').prepend(leftHtml);
			this.$tableBodyRight.find('>div>table>tbody').prepend(rightHtml);
			this.$tableBodyMain.find('>div>table>tbody').prepend(mainHtml);
			this._insertRow(trId, rowData);
			this._rownumbers++;
			this._footerFollow();
			this._fixXProxyScroll();
			this._fixYProxyScrollHeight();
		},
		/**
		 * 输出一行数据到网格体
		 */
		_appendOneRowToBody: function(rowData, rowIndex){
			var insertedCls = currentRowCls;
			this._clearCurrent();
			if(this.setting.markChange){
				insertedCls += ' inserted';
			}
			var trId = App.uuid()
				,idAttr = rowData[this.setting.idField] ? '_v="' + rowData[this.setting.idField] + '"' : ''
				,trHead = '<tr id="' + trId + '" ' + idAttr + ' class="data-row ' + (this._rownumbers%2 == 0 ? 'odd' : 'even') + ' ' + insertedCls + '">'
				,trEnd = '</tr>'
				,leftHtml = trHead + this._initRowTrInnerHtml(this.frozenColumns, rowData) + trEnd
				,mainHtml = trHead + this._initRowTrInnerHtml(this.columns, rowData) + trEnd
				,rightHtml = trHead + this._initRowTrInnerHtml(this.frozenColumnsRight, rowData) + trEnd;
			rowData.__rowId = trId;
			if(!isNaN(rowIndex)){
				this.$tableBodyLeft.find('>div>table tr:eq(' + rowIndex + ')').after(leftHtml);
				this.$tableBodyRight.find('>div>table tr:eq(' + rowIndex + ')').after(rightHtml);
				this.$tableBodyMain.find('>div>table tr:eq(' + rowIndex + ')').after(mainHtml);
			}else{
				this.$tableBodyLeft.find('>div>table>tbody').append(leftHtml);
				this.$tableBodyRight.find('>div>table>tbody').append(rightHtml);
				this.$tableBodyMain.find('>div>table>tbody').append(mainHtml);
			}
			this._insertRow(trId, rowData);
			this._rownumbers++;
			this._footerFollow();
			this._fixXProxyScroll();
			this._fixYProxyScrollHeight();
		},
		/**
		 * 按顺序重新输出当前的序号
		 */
		_reOrderNumber: function(){
			if(this.$tableHeaderLeft.find('td[field=_rownumbers]').length == 0){
				return;
			}
			var $tdDivs = this.$tableBodyLeft.find('tr:visible>td[field=_rownumbers]>div');
			var starNum = this._getStarRowNumber();
			this._rownumbers = starNum + $tdDivs.length;
			$tdDivs.each(function(){
				$(this).text(starNum++);
			});
		},
		/**
		 * 显示自定义面板
		 * @example $('#grid').grid('showCustom');
		 * @memberof grid-class
		 * @instance
		 */
		showCustom: function(){
			this.$headerCustom.children().show();
			this._fixHeight();
			this._footerFollow();
		},
		/**
		 * 显示自定义面板
		 * @example $('#grid').grid('showCustom');
		 * @memberof grid-class
		 * @instance
		 */
		hideCustom: function(){
			this.$headerCustom.children().hide();
			this._fixHeight();
			this._footerFollow();
		},
		/**
		 * 切换显示自定义面板
		 * @example $('#grid').grid('toggleCustom');
		 * @memberof grid-class
		 * @instance
		 */
		toggleCustom: function(){
			if(this.$headerCustom.children().is(':visible')){
				this.hideCustom();
			}else{
				this.showCustom();
			}
		},
		/**
		 * 更新合计行，忽略公式合计和自定义合计
		 * @param {Object} footer 合计行数据
		 * @example $('#grid').grid('updateFooter', {id:'idVal',......}); 合计行的数据
		 * @memberof grid-class
		 * @instance
		 */
		updateFooter: function(footer){
			if(!footer){
				return;
			}
			if(!$.isArray(footer)){
				footer = [footer];
			}
			this.clearFooter();
			this.appendFooter(footer);
		},
		/**
		 * 绑定顶层容器的_resize事件
		 */
		_bindResize: function(){
			var g = this;
			this.$element.on('_resize.grid.api', function(){
				g.resize();
			});
		},
		/**
		 * 执行网格的的时间间隔器
		 */
		setGridInterval: function(callback, time){
			this.autoReflashTimer = setInterval(callback, time);
			return this.autoReflashTimer;
		},
		/**
		 * 清除网格的的时间间隔器
		 */
		clearGridInterval: function(timer){
			if(!timer){
				timer = this.autoReflashTimer;
			}
			clearInterval(timer);
		},
		/**
		 * 绑定鼠标对自动滚动的事件
		 */
		onMouseEvent: function(){
			if(!this.setting.autoScroll){
				return;
			}
			this.startScroll();
			var that = this;
			this.$tableBody.on('mouseenter', function(){
				that.stopScroll();
			}).on('mouseleave', function(){
				that.startScroll();
			});
		},
		/**
		 * 启动自动滚动数据
		 */
		startScroll: function(){
			if(this._scrollRunning){
				return;
			}
			var that = this
				,$scrollTable = that.$tableBodyMain
				,$leftTable = that.$tableBodyLeft
				,$rightTable = that.$tableBodyRight;
			if(this.setting.autoScroll == 'upward'){
				this.autoScrollTimer = setInterval(function(){
					if(!$scrollTable.is(':visible')){
						return;
					}
					if($scrollTable.scrollTop() + $scrollTable[0].clientHeight >= $scrollTable[0].scrollHeight){
						$scrollTable.scrollTop(0);
						$leftTable.scrollTop(0);
						$rightTable.scrollTop(0);
					}else{
						var mainTop = $scrollTable.scrollTop() + 5;
						$scrollTable.scrollTop(mainTop);
						$leftTable.scrollTop(mainTop);
						$rightTable.scrollTop(mainTop);
					}
				}, 200);
				this._scrollRunning = true;
			}else if(this.setting.autoScroll == 'downward'){
				this.autoScrollTimer = setInterval(function(){
					if(!$scrollTable.is(':visible')){
						return;
					}
					if($scrollTable.scrollTop() <= 0){
						$scrollTable.scrollTop($scrollTable[0].scrollHeight);
						$leftTable.scrollTop($scrollTable[0].scrollHeight);
						$rightTable.scrollTop($scrollTable[0].scrollHeight);
					}else{
						var mainTop = $scrollTable.scrollTop() - 5;
						$scrollTable.scrollTop(mainTop);
						$leftTable.scrollTop(mainTop);
						$rightTable.scrollTop(mainTop);
					}
				}, 200);
				this._scrollRunning = true;
			}
		},
		/**
		 * 关闭自动滚动数据
		 */
		stopScroll: function(){
			if(!this._scrollRunning){
				return;
			}
			clearInterval(this.autoScrollTimer);
			this._scrollRunning = false;
			delete this.autoScrollTimer;
		},
		/**
		 * 获取网格的列信息
		 * @property {Object} [returns] 数据对象
		 * @returns {Object} data 数据对象
		 * @example $('#demo').grid('getColumns');
		 * @memberof grid-class
		 * @instance
		 */
		getColumns: function(){
			var result = {};
			result.left = this.setting.frozenColumns;
			result.center = this.setting.columns;
			result.right = this.setting.frozenColumnsRight;
			return result;
		},
		/**
		 * 获取网格的列信息,以树形的方式展现
		 * @property {Object} [returns] 数据对象
		 * @returns {Object} data 数据对象
		 * @example $('#demo').grid('getColumns');
		 * @memberof grid-class
		 * @instance
		 */
		getColumnTree: function(){
			var result = [];
			jion(result, this.setting.frozenColumns);
			jion(result, this.setting.columns);
			jion(result, this.setting.frozenColumnsRight);
			return result;
			function jion(target, multiAttr){
				var level0 = multiAttr[0];
				if($.isArray(level0)){
					for(var i = 0 ; i < level0.length; i++){
						target.push(level0[i]);
					}
				}
			}
		},
		/**
		 * 销毁方法
		 */
		destroy: function(){
			this.clearGridInterval(this.autoReflashTimer);
			this.stopScroll();
			var editors = this.editor;
			for(var editorField in editors){
				if(editors[editorField].editor){
					editors[editorField].editor.destroy();
				}
			}
			if(this.$headerContextMenu){
				this.$headerContextMenu.remove();
				this.$headerContextMsg.remove();
			}
			this.$t.removeData('grid');
			this.$element.remove();
		}
	});

	$.fn.grid = function (option) {
		var methodReturn = undefined
			,args = arguments;
		this.each(function () {
			var $this = $(this)
				,component = $this.data('grid');
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					var id = $this.attr('id');
					if(!id){
						id = $this[0].outerHTML;
					}
					throw new Error('组件grid[' + id + ']调用' + option +'方法:' + e);
				}
			}else{
				if(!component){
					component = new Grid(this, option);
					$this.data('grid', component);
				}else{
					var id = $this.attr('id');
					if(!id){
						id = $this[0].outerHTML;
					}
					throw new Error('组件grid[' + id + ']无法重复初始化');
				}
			}
		});
		return methodReturn;
	};
	/**
	 * 表达式的函数支持
	 */
	window.formulaHelper = {
		/**
		 * 获取数值
		 */
		getNum: function(obj, field){
			var val = obj[field];
			if(val == undefined){
				val = 0;
			}
			return val;
		},
		/**
		 * 获取字符串
		 */
		getStr: function(obj, field){
			var val = obj[field];
			if(val == undefined){
				val = '';
			}
			return val;
		}
	};
	function atOnceMoment(e, sign, context){
		var ts = context._ts[sign];
		context._ts[sign] = e.timeStamp;
		if(ts){
			return e.timeStamp - ts < Options.appDefaults.Grid.dblOnce;
		}else{
			return false;
		}
	}
	function escapeHtml(str){
		return $('<div>' + str + '</div>').text();
	}
	return Grid;
	/**
	 * 更新列标题
	 */
	function updateColumnTitle(){
		var cols = this._titleVarColumns
			,params = this.getParameter();
		if(!cols || !params){
			return;
		}
		for(var _cid in cols){
			var col = cols[_cid]
				,title = resolveTitleVar(col.titleVar, params);
			if(title){
				col.title = title;
			}else{
				col.title = col.oriTitle;
			}
			this.$tableHeader.find('td[_cid=' + col._cid + ']>div:first').text(col.title);;
		}
	}
	/**
	 * 解析变量表达式
	 */
	function resolveTitleVar(exp, params){
		var result = ''
			,expReg = /\{([\w-]+)\}/g; 
		if(expReg.test(exp)){
			result = exp.replace(expReg, function(m, name){
				var val = params[name];
				if(val !== undefined ){
					val = params[name];
				}else{
					val = '{' + name + '}';
				}
				return val;
			});
			if(expReg.test(result)){
				result = '';
			}else{
				try{
					result = eval(result);
				}catch(e){
				}
			}
		}else{
			result = params[exp];
		}
		return result;
	}
	
	function setDataRowHeight(){
		if(this._rowHeight){
			return;
		}
		if(this.setting.rownumbers == 'normal' || this.setting.rownumbers == 'repeat'){
			this._rowHeight = this.$tableBodyLeft.find('tr:eq(0)').outerHeight();
		}else if(this.setting.mergeColumns && this.setting.mergeColumns.length > 0){
			var $tempTr = $('<tr><td><div></div></td></tr>');
			this.$tableBodyMain.find('table').prepend($tempTr);
			this._rowHeight = $tempTr.outerHeight();
			$tempTr.remove();
		}else{
			this._rowHeight = this.$tableBodyMain.find('tr:eq(0)').outerHeight();
		}
		if(!!!(window.ActiveXObject || 'ActiveXObject' in window)){
			this._rowHeight += 1;
		}
	}
	function headBtnTdClick(e){
		var $btns = $(this).find('a');
		if($btns.length == 1){
			$btns.trigger('click');
		}
	}
});
/**
 * 下拉表格控件--继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-combogrid',['app/core/app-jquery', 'app/core/app-core', 'app/data/app-ajax', 'app/widgets/form/app-combo',
        'app/core/app-options', 'app/widgets/grid/app-grid'],
        function($,App, AppAjax, Combo, Options, Grid, Suggest) {
	
	
	'use strict';
	/**
	 * @class 
	 * @classdesc 下拉表格
	 * <span class="type-signature static">extend</span>combo
	 * <span class="type-signature static">reference</span>grid
	 * @see {@link combo-class} 查看combo组件
	 * @see {@link grid-class} 查看grid组件
	 * @name comboGrid-class
	 * @desc 下拉表格的初始化方法，初始化grid时会优先使用combogrid的options属性
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-combogrid"
	 * &#9;_options="{
	 * &#9;&#9;url: 'platform/sample/base/ui/combogridData.do',
	 * &#9;&#9;columns: [[
	 * &#9;&#9;&#9;{title: 'id列',field: 'id',hidden:true},
	 * &#9;&#9;&#9;{title: '名称列',field: 'name',width: 100},
	 * &#9;&#9;&#9;{title: '主列标题3',field: 'c3',width: 150},
	 * &#9;&#9;&#9;{title: '主列标题4',field: 'c4',width: 200},
	 * &#9;&#9;&#9;{title: '主列标题5',field: 'c5',width: 250},
	 * &#9;&#9;&#9;{title: '主列标题6',field: 'c6',width: 500}
	 * &#9;&#9;]]
	 * &#9;}"
	 * />
	 * @example $('#demo').combogrid({
	 * &#9;url: 'platform/sample/base/ui/combogridData.do',
	 * &#9;columns: [[
	 * &#9;&#9;{title: 'id列',field: 'id',hidden:true},
	 * &#9;&#9;{title: '名称列',field: 'name',width: 100},
	 * &#9;&#9;{title: '主列标题3',field: 'c3',width: 150},
	 * &#9;&#9;{title: '主列标题4',field: 'c4',width: 200},
	 * &#9;&#9;{title: '主列标题5',field: 'c5',width: 250},
	 * &#9;&#9;{title: '主列标题6',field: 'c6',width: 500}
	 * &#9;]]
	 * });
	 */
	var Combogrid = Combo.extend({
		initialize: function(input, options) {
			if(!options){
				options = {};
			}
			options._ = $.extend({}, Options.appDefaults.Combogrid, options._); 
			Combogrid.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			this._initOptions();
			this._initPanelContent();
			this._registEvents();
			this._eventRegister();
			this.$input.data('context', this);
		},
		/**
		 * 初始化网格设置
		 */
		_initOptions: function(){
			var s = this.setting;
			s.multiple = s.checkbox || s.multiple;
			if(!s.suggestfield){
				s.suggestfield = this.setting.textfield;
			}
			if(this.setting.search || this.setting.usesuggest){
				this.setting.search = true;
			}
			this.$dropPanelMain.css('overflow','hidden');//由内部网格代理滚动
		},
		/**
		 * 初始化下拉面板的内容
		 */
		_initPanelContent: function(){
			this.$grid = $('<table></table>');;
			this.$grid.appendTo(this.$dropPanelMain);
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			this.$dropPanelMain.off('mousewheel.combo.api')
			this.$dropPanelMain.off('scroll.combo.api');
			if($.isFunction(s.afterSelected)){
				this.on('afterSelected', s.afterSelected);
			}
			if($.isFunction(s.beforeSelected)){
				this.on('beforeSelected', s.beforeSelected);
			}
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			if(this.setting.search){
				this._editable();
				this.$text.on('click.combogrid-local.api', $.proxy(this._textFocusEvent,this));
			}
		},
		/**
		 * 显示值文本框获得焦点事件
		 * 	并绑定一次焦点失去恢复文本事件
		 */
		_textFocusEvent: function(){
			var that = this;
			this.$text[0].select();
			this.$text.data('oriText',this.getText());
			this.$text.on('blur.combogrid-local.api', function(){
				if(!that._grid){
					return;
				}
				var nodes = that._grid.getSelections()
					,$this = $(this);
				if(nodes.length == 0){
					$this.val($this.data('oriText'));
				}
			});
		},
		/**
		 * 设置请求远程数据时的查询参数
		 * @param {object} param 查询参数
		 * @example $('#demo').combogrid('setParameter',{year:2014});
		 * @memberof comboGrid-class
		 * @instance
		 */
		setParameter: function(param){
			if(!param){
				param = {};
			}
			this.$input.data('_parameter', param);
			if(this._grid){
				this._grid.setParameter(this.getParameter());
			}
		},
		/**
		 * 根据传入的url进行远程加载数据并渲染
		 * @param {url} url 要载入的url
		 * @todo 请求时并加入parameter参数，获取到数据后调用loadData
		 * @example $('#demo').combogrid('reload','a.do');
		 * @memberof comboGrid-class
		 * @instance
		 */
		reload: function(url){
			var grid = this._grid;
			if(grid){
				grid.load(url);
			}else{
				this.setting.url = url;
			}
		},
		/**
		 * 载入数据，并根据数据渲染面板中的网格数据
		 * @param {Array.<Node>} data 载入的数据列表
		 * @todo 请求时并加入parameter参数，获取到数据后调用loadData
		 * @example $('#demo').combogrid('loadData',[]);
		 * @memberof comboGrid-class
		 * @instance
		 */
		loadData: function(data){
			this._grid.loadData(data);
			this._rendSelectedItems();
			//内容填充后，显示面板，重新定位
			if(this._mainDivIsVisiable()){
				this.place();
			}
		},
		/**
		 * 按键事件
		 */
		_keyManager: function(e){
			if(this._dealSysKey(e)){
				return;
			}
			if(this._mainDivIsVisiable()){
				this._keyForVisiblePanel(e);
			}else{
				this._keyForHiddenPanel(e);
			}
		},
		/**
		 * 面板可见状态下的按键事件处理
		 */
		_keyForVisiblePanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			e.stopPropagation();
			if(App.containKeyCode(e, s.keyNextNode)){
				this._keyNextNode(e);
			}else if(App.containKeyCode(e, s.keyPrevNode)){
				this._keyPrevNode(e);
			}else if(App.containKeyCode(e, s.keyPickNode)){
				this._keyPickNode(e);
			}else if(App.containKeyCode(e, s.keyNextPage)){
				this._keyNextPage(e);
			}else if(App.containKeyCode(e, s.keyPrevPage)){
				this._keyPrevPage(e);
			}else if(App.containKeyCode(e, s.keyHidePanel)){
				this._keyHidePanel(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 面板不可见状态下的按键事件处理
		 */
		_keyForHiddenPanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			if(App.containKeyCode(e, s.keyShowPanel)){
				this._keyShowPanel(e);
			}else if(this._isKeyCursorPos(keyCode)){
				this._keyCursorPos(e);
			}else if(this._keyFilterSuggest(e)){
				if(e.keyCode == App.keyCode.ENTER){
					return;
				}
				this.suggest();
			}
		},
		/**
		 * 选中一个节点
		 */
		_keyPickNode: function(e){
			e.preventDefault();
			var g = this._grid
				,cureentRowIndex = g.getCurrentRowIndex()
				,cureentRowData = g.getCurrentRowData()
				,isSelectedRow = g.isSelectedRow(cureentRowIndex);
			if(cureentRowIndex == -1){
				return;				
			}
			if(isSelectedRow){
				g.unselectRow(cureentRowIndex);
				this._setBySelections();
			}else{
				g.selectRow(cureentRowIndex);
				this._setBySelections();
			}
		},
		/**
		 * 定位上一个节点
		 */
		_keyPrevNode: function(e){
			e.preventDefault();
			this._grid.prevRow();
			this._grid.locateCurrent();
		},
		/**
		 * 定位下一个节点
		 */
		_keyNextNode: function(e){
			e.preventDefault();
			this._grid.nextRow();
			this._grid.locateCurrent();
		},
		/**
		 * 上一页
		 */
		_keyPrevPage: function(e){
			e.preventDefault();
			this._grid.prevPage();
		},
		/**
		 * 下一页
		 */
		_keyNextPage: function(e){
			e.preventDefault();
			this._grid.nextPage();
		},
		/**
		 * 根据输入内容进行延迟联想
		 */
		suggest: function(){
			if(!this.setting.search){
				return;
			}
			//如果联想面板不是打开状态，则打开渲染。否则只进行联想
			if(!this._mainDivIsVisiable()){
				this.showPanel();
			}
			//保持延迟时间内只触发一次联想操作
			clearTimeout(this.timeout);
			var that = this;
			this.timeout = 
				setTimeout(function(){
					that._suggestFunc();
				},this.setting.lazy);
		},
		/**
		 * 根据输入的值进行联想
		 * 	保持联想面板打开状态
		 */
		_suggestFunc: function(){
			if(this._preventSuggest()){
				return;
			}
			var key = this.getText();
			if(this._grid.$pagers && this._grid.$pagers.length > 0){
				this._suggestByRemote(key);
			}else{
				this._suggestByLocal(key);
			}
		},
		/**
		 * 还原数据
		 */
		_backDataSource: function(){
			if(!this.setting.search){
				return;
			}
			if(!this.isSuggestData){
				return;
			}
			if(this._grid.$pagers && this._grid.$pagers.length > 0){
				this._suggestByRemote('');
			}else{
				this._suggestByLocal('');
			}
			this.isSuggestData = false;
		},
		/**
		 * 阻止联想事件
		 * 1、当联想的关键字与上次联想的相同
		 * 2、当上次联想为空 且这次的关键字以上次的关键字开头
		 * @returns true 进行阻止
		 */
		_preventSuggest: function(){
			var key = this.getText()
				,items = this._grid.getData()[this._grid.setting.jsonReader.rows];
			if(this.prevKey == key){
				return true;
			}else if(this.prevKey && key.length >= this.prevKey.length
					&& key.indexOf(this.prevKey) == 0
					&& (items == undefined || items.length == 0)){
				return true;
			}
			this.prevKey = key;
			return false;
		},
		/**
		 * 根据远程设置地址进行联想
		 */
		_suggestByRemote: function(key){
			var url = this.setting.url;
			if(url){
				var parameter = this.getParameter();
				if(parameter){
					parameter._key = key;
				}else{
					parameter = {_key: key};
				}
				this.isSuggestData = true;
				parameter.suggestfield = this.setting.suggestfield;
				this._grid.setParameter(parameter);
				this._grid.load();
			}
		},
		/**
		 * 根据本地数据源进行匹配
		 * 1、如果存在本地数据源则直接进行匹配
		 * 2、如果不存在，本地数据源，则根据suggest资源地址初始化数据源后，再进行匹配
		 */
		_suggestByLocal: function(key){
			this._cachePageData();
			var data = this._filterByKey(key);
			this.isSuggestData = true;
			this._grid.loadData(data);
		},
		/**
		 * 将当前页面的数据当做数据源
		 */
		_cachePageData: function(){
			if(!this.dataSource){
				this.dataSource = this._grid.getData()[this._grid.setting.jsonReader.rows];
			}
		},
		/**
		 * 根据数据源按照key模糊匹配节点，并设置联想项
		 * @param data 节点数据源数组
		 * @param key 匹配关键字
		 * @returns {Array} 匹配的节点数组
		 */
		_filterByKey: function(key){
			var data = this.dataSource
				,upKey = key.toUpperCase()
				,field = this.setting.suggestfield
				,result = [];
			var fs = field.split(',');
			if(fs.length == 1){
				fs = fs[0];
				for(var i = 0; i < data.length; i++){
					var t = data[i][fs].toUpperCase();
					if(t.indexOf(upKey) != -1)
						result.push(data[i]);
				}
			}else{
				for(var i = 0; i < data.length; i++){
					for ( var j = 0; j < fs.length; j++) {
						var t = data[i][fs[j]].toUpperCase();													
						if(t.indexOf(upKey) != -1){
							result.push(data[i]);
							break;
						}
					}
				}
			}
			return result;
		},
		/**
		 * 显示下拉面板
		 * @todo 初始化一次网格
		 * @todo 根据隐藏值渲染选择项
		 * @todo 显示面板，根据面板内容进行面板位置的调整
		 * @example $('#demo').combogrid('showPanel');
		 * @memberof comboGrid-class
		 * @instance
		 */
		showPanel: function(){
			this._showPanel(function(){
				this._initGrid();
				this._rendSelectedItems();
				this._backDataSource();
			});
		},
		/**
		 * 初始化网格
		 */
		_initGrid: function(){
			if(!this._grid){
				var s = this.setting
					,that = this;
				if(!this.option){
					s.innerGrid = $.extend({}, Options.appDefaults.Grid, Options.appDefaults.Combogrid.Grid, s);
				}else{
					s.innerGrid = $.extend({}, Options.appDefaults.Grid, Options.appDefaults.Combogrid.Grid, s, this.option);
				}
				delete s.innerGrid.width;
				s.innerGrid.height = s.panelheight;
				if(!isNaN(s.customPanelHeight)){
					s.innerGrid.height -= s.customPanelHeight;
				}
				s.innerGrid.beforeSelect = function(rowData, rowIndex){
					/**
					 * 节点选择前事件，并返回一个值，当为false时取消选择操作
					 * @event comboGrid-class#beforeSelected
					 * @param {Object} rowData 被选择的行数据
					 * @param {Number} rowIndex 被选择的行号
					 * @returns {Boolean} boolean 返回值为false 取消选择
					 */
					return that._activeItemEvent('beforeSelected', rowData, rowIndex);
				};
				s.innerGrid.onSelect = function(rowData, rowIndex){
					that._setBySelections();
					/**
					 * 节点选择后事件
					 * @event comboGrid-class#afterSelected
					 * @param {Object} rowData 被选择的行数据
					 * @param {Number} rowIndex 被选择的行号
					 */
					that._activeItemEvent('afterSelected', rowData, rowIndex);
				};
				s.innerGrid.afterDataRender = function(){
					that._resetPanelWidth(this.$xProxyScroll);
					that.place();
					that._rendSelectedItems();
					that._locateRowAfterRender();
					that._afterDataRender();
				};
				s.innerGrid.queryParams = this.getParameter();
				s.innerGrid.columnManager = false;
				this.lastParam = s.innerGrid.queryParams;
				this.$grid.grid(s.innerGrid);
				this._grid = this.$grid.data('grid');
				this._grid._combogrid = this;
				this.onceRender = true;
				this._setMinSize();
			}else{
				this._initData();
			}
		},
		/**
		 * 设置下拉面板的最小宽度和高度
		 */
		_setMinSize: function(){
			var css = {}
				,s = this.setting
				,minWidth = 0
				,minHeight = 30;
			if(this._grid.setting.pager == 'down'){
				minWidth += 90;
				minWidth += this._grid.$pagerDown.find('.pager-infos').outerWidth();
				minWidth += this._grid.$pagerDown.find('.pager-tool').outerWidth();
				minHeight += this._grid.$pagerDown.outerHeight();
			}else if(this._grid.setting.pager == 'up'){
				minWidth += this._grid.$title.find('>span').outerWidth();
				minWidth += this._grid.$title.find('.grid-pager').outerWidth();
			}else{
				minWidth = this.$element.outerWidth();
			}
			if(!isNaN(s.customPanelHeight)){
				minHeight += s.customPanelHeight;
			}
			minHeight += this._grid.$title.outerHeight();
			minHeight += this._grid.$tableHeader.outerHeight();
			minHeight += this._grid.$tableFooter.outerHeight();
			css['min-width'] = minWidth;
			css['min-height'] = minHeight;
			this.$dropPanel.css(css);
		},
		/**
		 * 数据渲染完成后 对当前行的设置和定位
		 */
		_locateRowAfterRender: function(){
			var grid = this._grid
				,selectedRowIndex = grid.getSelectedRowIndex();
			if(selectedRowIndex >= 0){
				grid.setCurrentRow(selectedRowIndex);
				grid.locateRow(selectedRowIndex);
			}else{
				grid.setCurrentRow(0);
				grid.locateRow(0);
			}
		},
		/**
		 * 激活行点击事件 
		 * @param rowData 行数据
		 * @param rowIndex 行号
		 * @returns {Boolean} false 结束点击事件
		 */
		_activeItemEvent: function(eventName, rowData, rowIndex){
			return this.trigger(eventName, rowData, rowIndex);
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 * @todo 判断当前面板是否可见：
		 * @todo 1如果不可见，调用showPanel
		 * @todo 2如果可见，则关闭面板
		 * @see combo#togglePanel
		 * @example $('#demo').combogrid('togglePanel');
		 * @memberof comboGrid-class
		 * @instance
		 */
		togglePanel: function(){
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}else{
				this.showPanel();
			}
		},
		/**
		 * 获取下拉网格的中的网格元素
		 * @see combo#getTable
		 * @example $('#demo').combogrid('getTable');
		 * @memberof comboGrid-class
		 * @instance
		 */
		getTable: function(){
			return this.$grid;
		},
		/**
		 * 根据网格的选中项进行设置值
		 */
		_setBySelections: function(){
			var rows = this._grid.getSelections();
			if(this.setting.multiple){
				this._grid.nextRow();
				this._grid.locateCurrent();
			}else{
				rows = rows[0];
				if(rows){
					this.hidePanel();
				}
			}
			this.setSelectedNode(rows);
		},
		/**
		 * 根据id值 设置网格的选中项
		 */
		_rendSelectedItems: function(){
			this._grid.unselectAll();
			var valueStr = this.getValue();
			if(!valueStr){
				return;
			}
			var vs = valueStr.split(',')
				,filter = {type: 'id'};
			for ( var i = 0; i < vs.length; i++) {
				filter.value = vs[i];
				this._grid._renderRow(filter);
			}
		},
		/**
		 * 结束拖动进行表格的高度自适应
		 * 宽度自适应有don结构和css自动解决
		 */
		_endResize: function(){
			var s = this.setting;
			this._grid.setting.height = this.$dropPanel.outerHeight();
			if(!isNaN(s.customPanelHeight)){
				this._grid.setting.height -= s.customPanelHeight;
			}
			this._grid._fixHeight();
		}
	});

	$.fn.combogrid = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'combogrid';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Combogrid(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	return Combogrid;
});
/**
 * 下拉树控件---继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-comboztree',['app/core/app-jquery', 'app/core/app-core', 'app/data/app-ajax', 'app/widgets/form/app-combo',
        'app/core/app-options', 'jquery/jquery.ztree', 'app/widgets/form/app-suggest'],
        function($, App, AppAjax, Combo, Options, Ztree, Suggest) {
	'use strict';
	/**
	 * @class 
	 * @classdesc 下拉树
	 * <span class="type-signature static">extend</span>combo
	 * @see {@link combo-class} comboztree继承至combo
	 * @name comboztree-class
	 * @desc 下拉树的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-comboztree"
	 * &#9;_options="{
	 * &#9;&#9;action: 'html/example/app-input/data/data.valueAndText',
	 * &#9;&#9;
	 * &#9;}"
	 * />
	 * @example $('#demo').comboztree({
	 * &#9;action: 'html/example/app-input/data/data.valueAndText'
	 * });
	 */
	var Comboztree = Combo.extend({
		initialize: function(input, options) {
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Comboztree;
			Comboztree.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			this._initOptions();
			this._initPanelContent();
			this._eventRegister();
			if(this.setting.usesuggest){
				this._suggest = new Suggest(this.$input, this.options);
				this._suggest.context = this;
			}
			this.$input.data('context', this);
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterSelected)){
				this.on('afterSelected', s.afterSelected);
			}
			if($.isFunction(s.beforeSelected)){
				this.on('beforeSelected', s.beforeSelected);
			}
		},
		/**
		 * 初始化参数
		 */
		_initOptions: function(){
			var setting = this.setting;
			if(setting.autoparam == null){
				//异步提交时，默认跟上的参数为隐藏值属性名+隐藏值
				setting.autoparam = [setting.valuefield];
			}else{
				setting.autoparam = setting.autoparam.split(',');
			}
			if(!setting.idfield){
				setting.idfield = setting.valuefield;
			}
		},
		/**
		 * 初始化下拉内容
		 */
		_initPanelContent:function(){
			var $template = $('<div class="combo-ztree">' +
							  	'<ul id="' + App.uuid('app_ztree_') + '" class="ztree"></ul>' +		
							  '</div>');
			$template.appendTo(this.$dropPanelMain);
			this.$ztreeDiv = $template.find('.combo-ztree');
			this.$ztree = $template.find('ul');
		},
		/**
		 * 按键导航事件
		 */
		_keyManager: function(e){
			if(this._dealSysKey(e)){
				return;
			}
			var keyCode = e.keyCode
				,s = this.setting;
			if(this._isSuggestContext()){//联想框主控 则返回
				return;
			}
			if(this._mainDivIsVisiable()){
				this._keyForVisiblePanel(e);
			}else{
				this._keyForHiddenPanel(e);
			}
			this.focus();
		},
		/**
		 * 面板可见状态下的按键事件处理
		 */
		_keyForVisiblePanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			e.stopPropagation();
			if(App.containKeyCode(e, s.keyNextNode)){
				this._keyNextNode(e);
			}else if(App.containKeyCode(e, s.keyPrevNode)){
				this._keyPrevNode(e);
			}else if(App.containKeyCode(e, s.keyPickNode)){
				this._keyPickNode(e);
			}else if(App.containKeyCode(e, s.keyParentNode)){
				this._keyParentNode(e);
			}else if(App.containKeyCode(e, s.keyChildNode)){
				this._keyChildNode(e);
			}else if(App.containKeyCode(e, s.keyHidePanel)){
				this._keyHidePanel(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 面板不可见状态下的按键事件处理
		 */
		_keyForHiddenPanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;
			if(App.containKeyCode(e, s.keyShowPanel)){
				this._keyShowPanel(e);
			}else if(this._isKeyCursorPos(keyCode)){
				this._keyCursorPos(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 定位上一个节点
		 * 	1、当同级只有一个节点时，上按键定位到父节点
		 */
		_keyPrevNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var c = this._getCurrentNode();
			if(c){
				var len = this._z.getNodesByParam('level', c.level, c.getParentNode()).length;
				if(len <= 1){
					this._switchParentNode(c);
					return;
				}
			}
			this._switchPrevNode(c);
		},
		/**
		 * 定位到下一个节点
		 * 特例：当同级只有一个节点:
		 * 	1、本身为叶子节点时，下按键定位到父节点
		 * 	2、本身为父节点时，下按键定位到子节点
		 */
		_keyNextNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			if(!this._mainDivIsVisiable()){
				this.showPanel();
			}
			if(!this._z){
				return;
			}
			var c = this._getCurrentNode();
			if(c){
				var len = this._z.getNodesByParam('level', c.level, c.getParentNode()).length;
				if(len <= 1){
					if(c.isParent){
						this._switchChildNode(c);
					}else{
						this._switchParentNode(c);
					}
					return;
				}
			}
			this._switchNextNode(c);
		},
		/**
		 * 定位到父节点
		 *  特例：当前节点不存在父节点，则定位到上一个节点
		 */
		_keyParentNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var c = this._getCurrentNode();
			if(c && c.getParentNode()){
				this._switchParentNode(c);
			}else{
				this._switchPrevNode(c);
			}
		},
		/**
		 * 定位到第一个子节点
		 *  特例：当前节点节点不是父节点，则定位到下一个节点
		 */
		_keyChildNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var c = this._z.getSelectedNodes()[0];
			if(c && c.isParent){
				this._switchChildNode(c);
			}else{
				this._switchNextNode(c);
			}
		},
		/**
		 * 选中一个节点
		 */
		_keyPickNode: function(e){
			e.preventDefault();
			this._stopSuggest(true);
			var node = this._z.getSelectedNodes()[0];
			if(!node){
				return
			}
			this._onSelect(node);
		},
		/**
		 * 获取当前选中节点
		 */
		_getCurrentNode: function(){
			return this._z.getSelectedNodes()[0];
		},
		/**
		 * 选中前一个节点
		 * @param c 当前选中节点
		 */
		_switchPrevNode: function(c){
			var n = null;
			if(c){
				n = c.getPreNode();
				if(n == undefined){
					var ns = this._z.getNodesByParam('level', c.level, c.getParentNode());
					if(ns.length > 0){
						n = ns[ns.length-1];
					}
				}
			}else{
				var ns = this._z.getNodes();
				if(ns.length > 0){
					n = ns[ns.length-1];
				}
			}
			this._focusCurrentNode(c, n);
		},
		/**
		 * 选中后一个节点
		 * @param c 当前选中节点
		 */
		_switchNextNode: function(c){
			var n = null;
			if(c){
				n = c.getNextNode();
				if(n == undefined){
					var ns = this._z.getNodesByParam('level', c.level, c.getParentNode());
					if(ns.length > 0){
						n = ns[0];
					}
				}
			}else{
				var ns = this._z.getNodes();
				if(ns.length > 0){
					n = ns[0];
				}
			}
			this._focusCurrentNode(c, n);
		},
		/**
		 * 选中父节点
		 * @param c 当前选中节点
		 */
		_switchParentNode: function(c){
			var n = null;
			if(!c){
				var ns = this._z.getNodes();
				if(ns.length > 0){
					c = ns[0];
				}
			}
			if(c){
				n = c.getParentNode();
			}
			if(n){
				this._z.expandNode(n, false, false, false);
			}
			this._focusCurrentNode(c, n);
		},
		/**
		 * 选中子节点
		 * @param c 当前选中节点
		 */
		_switchChildNode: function(c){
			var n = null;
			if(!c){
				var ns = this._z.getNodes();
				if(ns.length > 0){
					c = ns[0];
				}
			}
			if(c && c.isParent){
				this._z.expandNode(c, true, false, false, true);
				var ns = this._z.getNodesByParam('level', c.level + 1, c);
				if(ns.length > 0){
					n = ns[0];
				}
			}
			this._focusCurrentNode(c, n);
		},
		/**
		 * 当下一个节点存在，切换到下一个节点
		 * @param c 当前选中节点
		 * @param n 下一个选中节点
		 */
		_focusCurrentNode: function(c,n){
			if(n){
				this._z.cancelSelectedNode(c);
				this._z.selectNode(n);
				this.focus();
			}
		},
		/**
		 * 其他按键按下
		 */
		_otherKeyDown: function(){
			var suggest = this.$element.data('suggest');
			if(suggest){
				suggest.stopKeyEvent = false;
			}
			this.hidePanel();
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 * @todo 判断当前面板是否可见
		 * @todo 1如果不可见，调用showPanel
		 * @todo 2如果可见，则关闭面板

		 * @example $('#demo').comboztree('togglePanel');
		 * @memberof comboztree-class
		 * @instance
		 */
		togglePanel: function(){
			if(this._mainDivIsVisiable()){
				this.hidePanel();
			}else{
				this.showPanel();
			}
		},
		/**
		 * 显示下拉面板
		 * @todo 填充下拉面板内容
		 * @todo 根据隐藏值渲染选择项
		 * @todo 显示面板，根据面板内容进行面板位置的调整
		 * @example $('#demo').comboztree('showPanel');
		 * @memberof comboztree-class
		 * @instance
		 */
		showPanel: function(){
			if(this._suggest){
				this.$dropPanel.append(this.$dropPanelCustom);
			}
			this._showPanel(function(){
				this._initData();
				this._rendSelectedItems();
				this.focus();
			});
		},
		/**
		 * 载入数据，并根据数据渲染下拉面板
		 * @param {Array.<Node>} data 载入的数据列表
		 * @todo 渲染下拉框中的ztree
		 * @todo 根据隐藏值渲染ztree节点选中状态
		 * @todo 如果下拉面板为打开状态，则重新打开面板（由于面板内容改变，可能导致面板高度改变，用于矫正位置）
		 * @example $('#demo').comboztree('loadData',[
		 * &#9;{value:1, text:"节点 1", open:true, noR:true,
		 * &#9;&#9;children:[
		 * &#9;&#9;&#9;{value:11, text:"节点 11", noR:true},
		 * &#9;&#9;&#9;{value:12, text:"节点 12", noR:true}
		 * &#9;&#9;]
		 * &#9;},
		 * &#9;{value:2, text:"节点 2", open:true,
		 * &#9;&#9;children:[
		 * &#9;&#9;&#9;{value:21, text:"节点 21"},
		 * &#9;&#9;&#9;{value:22, text:"节点 22"},
		 * &#9;&#9;&#9;{value:23, text:"节点 23"},
		 * &#9;&#9;&#9;{value:24, text:"节点 24"}
		 * &#9;&#9;]
		 * &#9;},
		 * &#9;{value:3, text:"节点 3", open:true,
		 * &#9;&#9;children:[
		 * &#9;&#9;&#9;{value:31, text:"节点 31"},
		 * &#9;&#9;&#9;{value:32, text:"节点 32"},
		 * &#9;&#9;&#9;{value:33, text:"节点 33"},
		 * &#9;&#9;&#9;{value:34, text:"节点 34"}
		 * &#9;&#9;]
		 * &#9;}
		 * ]);
		 * @memberof comboztree-class
		 * @instance
		 */
		loadData: function(data){
			this.setting.data = data;
			if(this._suggest){
				this._suggest.setting.data = data;
				if(this._suggest.isSuggesting()){
					this._suggest.refreshSuggest();
				}
			}
			this._renderData();
			//内容填充后，显示面板，重新定位
			if(this._mainDivIsVisiable()){
				this.place();
			}
		},
		/**
		 * 设置请求远程数据时的查询参数
		 * @param {object} param 查询参数
		 * @example $('#demo').comboztree('setParameter',{year:2014});
		 * @memberof comboztree-class
		 * @instance
		 */
		setParameter: function(param){
			if(!param){
				param = {};
			}
			this.$input.data('_parameter', param);
			this._injectParam();
		},
		/**
		 * 注入查询参数
		 */
		_injectParam: function(){
			var param = this.getParameter();
			if(this._z && param){
				if(this._z.setting.async.otherParam){
					$.extend(this._z.setting.async.otherParam, param);
				}else{
					this._z.setting.async.otherParam = param;
				}
			}
		},
		/**
		 * 渲染数据
		 */
		_renderData: function(){
			this._resetZtree();
			this._resetPanelWidth();
			this._rendSelectedItems();
			this._afterDataRender();
		},
		/**
		 * 渲染ztree
		 */
		_resetZtree: function(){
			var data = this.setting.data == undefined ? [] : this.setting.data;
			if(this._z){
				this._z.destroy();
			}
			if(data.length == 0){
				var root = {};
				root[this.setting.valuefield] = '__ROOTID__';
				root[this.setting.textfield] = '无对应结果';
				$.fn.zTree.init(this.$ztree, this._getZtreeSetting(), [root]);
			}else{
				$.fn.zTree.init(this.$ztree, this._getZtreeSetting(), data);
				storeData.call(this, data);
			}
			this._z = $.fn.zTree.getZTreeObj(this.$ztree.attr('id'));
			this._injectParam();
			if(data.length == 0){
				this._z.refresh();
				this.$dropPanelEmpty.show();
			}else{
				this.$dropPanelEmpty.hide();
			}
		},
		/**
		 * 生成ztree的设置
		 */
		_getZtreeSetting: function(){
			var s = this.setting;
			var setting = {
				view: {
					selectedMulti: false,
					dblClickExpand: false,
					showLine: false,
					showIcon: s.showIcon,
					fontCss: function(treeId, treeNode) {
						return (!!treeNode.highlight) ? {'color':'#A60000', 'font-weight':'bold'} : {'color':'#333', 'font-weight':'normal'};
					},
					addHoverDom: s.addHoverDom,
					removeHoverDom: s.removeHoverDom,
					addDiyDom: s.addDiyDom
				},
				data:{
					key:{
						name: s.textfield
					},
					simpleData: {
						enable: true,
						idKey: s.idfield,
						pIdKey: s.pidfield,
						rootPId: s.rootpidvalue
					}
				}
			};
			if(s.async){
				var url = s.url;
				if(s.asyncUrl) 
					url = s.asyncUrl;
				setting.async = {
					enable: true,
					url: url,
					autoParam: s.autoparam,
					otherParam: s.otherParam
				};
			}
			if(s.multiple){
				setting.check = {enable:true};
				if(s.onlyleaf){
					setting.check.chkboxType = {Y: '', N: ''};
				}
				if(s.checkBySelf){
					setting.check.chkboxType = {Y: '', N: ''};
				}
			}else{
				setting.selectedMulti = false;
			}
			setting['callback'] = this._getZtreeCallback();
			return setting;
		},
		/**
		 * 生成ztree树的回调方法
		 * @returns {} 
		 */
		_getZtreeCallback: function(){
			var result = {}
				,that = this;
			result.onClick = function(event, treeId, treeNode){
				that._onSelect(treeNode);
			};
			result.beforeCheck = function(treeId, treeNode){
				if(that.setting.onlyleaf && treeNode.isParent){
					return false;
				}
			};
			result.beforeClick = result.beforeCheck;
			result.onCheck = function(event, treeId, treeNode){
				that._onCheck(treeNode);
			};
			result.onAsyncSuccess = function(event, treeId, treeNode, msg){
				that._onAsyncSuccess(event, treeId, treeNode, msg);
				appendStoreData.call(that, msg);
			};
			result.onExpand = function(event, treeId, treeNode){
				that._onExpand(event, treeId, treeNode);
				that.place();
			};
			result.onCollapse = function(event, treeId, treeNode){
				that.place();
			};
			return result;
		},
		/**
		 * ztree节点的选择事件
		 * @param treeNode 
		 */
		_onSelect: function(treeNode){
			if(this.setting.multiple){
				if(treeNode.checked){
					this._z.checkNode(treeNode, false, true);
					this._setSelectedNodes();
				}else{
					/**
					 * 节点选择前事件，并返回一个值，当为false时取消选择操作
					 * @event comboztree-class#beforeSelected
					 * @param {Node} node 被选择的节点
					 * @returns {Boolean} boolean 返回值为false 取消选择
					 */
					if(this.trigger('beforeSelected', treeNode) === false){
						return;
					}
					this._z.checkNode(treeNode, true, true);
					this._setSelectedNodes();
					/**
					 * 节点选择后事件
					 * @event comboztree-class#afterSelected
					 * @param {Node} node 被选择的节点
					 */
					this.trigger('afterSelected', treeNode);
				}
			}else{
				if(this.trigger('beforeSelected', treeNode) === false){
					return;
				}
				this._z.selectNode(treeNode);
				this._setSelectedNodes();
				this.trigger('afterSelected', treeNode);
			}
		},
		/**
		 * 勾选事件
		 */
		_onCheck: function(treeNode){
			if(treeNode.checked){
				this._setSelectedNodes();
			}else{
				if(this.trigger('beforeSelected', treeNode) === false){
					return;
				}
				this._setSelectedNodes();
				this.trigger('afterSelected', treeNode);
			}
		},
		/**
		 * 根据树节点的checked状态的取值并设置下拉树的文本显示控件和值隐藏控件
		 */
		_setSelectedNodes: function(){
			if(this.setting.multiple){
				var nodes = this._z.getCheckedNodes(true);
				if(this.setting.shrinkValue){
					nodes = this._removeHalfCheckNode(nodes);
					nodes = this._removeRepeat(nodes);
				}else if(this.setting.ignoreHalfCheck){
					nodes = this._removeHalfCheckNode(nodes);
				}
				setSelectedNode.call(this, nodes);
			}else{
				var nodes = this._z.getSelectedNodes();
				if(nodes.length >= 1){
					setSelectedNode.call(this, nodes);
				}
				this.hidePanel();
			}
		},
		/**
		 * 去掉半勾选状态的父节点
		 * @param nodes
		 */
		_removeHalfCheckNode: function(nodes){
			var result = [];
			for(var i = 0; i < nodes.length; i ++){
				var node = nodes[i];
				if(node['check_Child_State'] != 1)
					result.push(node);
			}
			return result;
		},
		/**
		 * 去掉全选节点下的子节点
		 * @param nodes
		 */
		_removeRepeat: function(nodes){
			var result = $.extend([],nodes);
			for(var i = 0; i < nodes.length; i ++){
				var node = nodes[i];
				if(node['check_Child_State'] == 2){
					result = this._removeRepeatChildren(result, node);
				}
			}
			return result;
		},
		_removeRepeatChildren: function(nodes, pNode){
			var result = [];
			for(var i = 0; i < nodes.length; i ++){
				var flag = this._z.getNodeByParam('tId', nodes[i].tId , pNode);
				if(!flag)
					result.push(nodes[i]);
			}
			return result;
		},
		/**
		 * ztree树节点异步加载成功事件
		 * 如果本地搜索开启，则刷新本地搜索结果的值
		 * @param event
		 * @param treeId
		 * @param treeNode
		 * @param msg
		 */
		_onAsyncSuccess: function(event, treeId, treeNode, msg){
			this._rendSelectedItems();
		},
		/**
		 * （配合键盘导航事件）
		 * 展开节点后 选中第一个子节点，如果没有子节点
		 * 	则选中当前节点
		 * @param event
		 * @param treeId
		 * @param treeNode
		 */
		_onExpand: function(event, treeId, treeNode){
			var n = null;
			if(treeNode && treeNode.isParent){
				var ns = this._z.getNodesByParam('level', treeNode.level + 1, treeNode);
				if(ns.length > 0){
					n = ns[0];
				}
			}
			if(n){
				this._z.cancelSelectedNode(treeNode);
				this._z.selectNode(n);
			}else{
				this._z.selectNode(treeNode);
			}
			this.focus();
		},
		/**
		 * 根据传入的url进行远程加载数据并渲染
		 * @todo 请求时并加入parameter参数，获取到数据后调用loadData
		 * @param {url} url 要载入的url
		 * @param {callback} callback 加载完成后事件
		 * @example $('#demo').comboztree('reload','data.do');
		 * @memberof comboztree-class
		 * @instance
		 */
		reload: function(url,callback){
			if(!url){
				url = this.setting.url;
			}
			this._ajax(url, function(data){
				this.loadData(data);
				if($.isFunction(callback)){
					callback.call(this, data);
				}
			});
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 清除值
		 * @todo 清除隐藏值
		 * @todo 清除显示值
		 * @todo 清除下拉面板中ztree的选中状态
		 * @memberof comboztree-class
		 * @instance
		 */
		clearValue: function(){
			this.setText('');
			this.setValue('');
			if(this._z != null){
				this._rendSelectedItems();
			}
		},
		/**
		 * 根据当前下拉树的隐藏值查询出相关的节点，
		 * 渲染节点为选中状态，并根据值设置显示值
		 */
		_rendSelectedItems: function(){
			this._clearSelectedNodes();
			var valStr = this.getValue()
				,ztree = this._z;
			if(valStr && ztree){
				var nodes = this._getNodesByValue();
				if(this.setting.multiple){
					for( var i = 0; i < nodes.length; i++) {
						if(this.setting.shrinkValue || this.setting.ignoreHalfCheck)
							ztree.checkNode(nodes[i],true,true);
						else
							ztree.checkNode(nodes[i]);
					}
				}else if(nodes.length == 1){
					ztree.selectNode(nodes[0]);
				}
			}
		},
		/**
		 * 根据隐藏值的等值匹配出ztree的节点
		 */
		_getNodesByValue: function(){
			var result = []
				,ztree = this._z
				,valueField = this.setting.valuefield;
			var vs = this.getValue().split(',');
			for ( var i = 0; i < vs.length; i++) {
				var nodes = ztree.getNodesByParam(valueField,vs[i]);
				for( var j = 0; j < nodes.length; j++) {
					result.push(nodes[j]);
				}
			}
			return $(result);
		},
		/**
		 * 清除已选的节点状态
		 * @param comboztree 下拉树全局对象
		 */
		_clearSelectedNodes: function(){
			var ztree = this._z;
			if(ztree == null){
				//ztree 树还未初始化，无需清理
				return ;
			}
			if(this.setting.multiple){
				ztree.checkAllNodes(false);
			}else{
				var selectedNodes = ztree.getSelectedNodes();
				if(selectedNodes.length == 1){
					ztree.cancelSelectedNode(selectedNodes[0]);
				}
			}
		}
	});
	
	
	$.fn.comboztree = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'comboztree';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
					
					if(option == 'on' && component._suggest){
						component._suggest.on.apply(component._suggest, methodArgs);
					}
					if(option == 'bind' && component._suggest){
						component._suggest.bind.apply(component._suggest, methodArgs);
					}
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Comboztree(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	function storeData(data){
		this._mapData = {};
		if(!data){
			return;
		}
		var field = this.setting.idfield;
		for(var i = 0; i < data.length; i++){
			var node = $.extend(true, {}, data[i]);
			this._mapData[node[field]] = node;
		}
	};
	function appendStoreData(msg){
		var data = JSON.parse(msg);
		if(!data){
			return;
		}
		var field = this.setting.idfield;
		for(var i = 0; i < data.length; i++){
			var node = $.extend(true, {}, data[i]);
			this._mapData[node[field]] = node;
		}
	};
	function setSelectedNode(nodes){
		var result = null
			,idField = this.setting.idfield;
		if(this.setting.multiple){
			result = [];
			if(nodes){
				for(var i = 0; i < nodes.length; i++){
					var id = nodes[i][idField];
					if(this._mapData[id]){
						result.push(this._mapData[id]);
					}else{
						result.push(nodes[i]);
					}
				}
			}
		}else{
			if(nodes && nodes[0]){
				var id = nodes[0][idField];
				if(this._mapData[id]){
					result = this._mapData[id];
				}else{
					result = nodes[0];
				}
			}
		}
		this.setSelectedNode(result);
	};
	return Comboztree;
});
/**
 * 引用控件--继承Textbox
 * @author Mr.T
 */
define('app/widgets/form/app-reference',['app/core/app-jquery', 'app/core/app-core', 'app/widgets/window/app-dialog',
        'app/core/app-options', 'app/widgets/form/app-textbox', 'app/widgets/form/app-suggest', 'app/widgets/drag/app-droppanel'],
        function ($, App, Dialog, Options, Textbox, Suggest, Expandable) {
		
	'use strict';

	/**
	 * @class 
	 * @classdesc 引用框
	 * <span class="type-signature static">extend</span>textbox
	 * @see {@link textbox-class} reference继承至textbox
	 * @name reference-class
	 * @desc 引用框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-reference"
	 * &#9;_options="{
	 * &#9;&#9;action: 'html/example/app-input/ui/refDemo.html'
	 * &#9;}"
	 * />
	 * @example $('#demo').reference({
	 * &#9;action: 'html/example/app-input/ui/refDemo.html'
	 * });
	 */
	var Reference = Textbox.extend({
		Implements: Expandable,
		initialize: function(input, options) {
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Reference;
			Reference.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			this._initOptions();
			if(this.setting.usesuggest){
				new Suggest(this.$input, this.options);
			}else{
				if($.isFunction(this.setting.onClickOpen)){
					this.$text.on('click.reference.api', $.proxy(this._mousedown$openBtn, this));
				}
			}
			this._registEvents();
			this.$input.data('context', this);
		},
		/**
		 * 覆盖父类的绑定方法
		 */
		_textChangeEvent: function(){},
		/**
		 * 初始化属性
		 */
		_initOptions: function(){
			if(!this.setting.url){
				this.setting.url = _contextPath + '/ref.do?code=' + this.setting.code;
			}
			if(this.setting.readFields){
				this.setting.readFields = this.setting.readFields.split(',');
			}
			if(this.setting.writeFields){
				this.setting.writeFields = this.setting.writeFields.split(',');
			}
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			if(!this.setting.usesuggest){
				this._editable(false);
				this.$text.on('click.reference.api',$.proxy(this.openReference, this));
			}
			this.$openBtn.on('click.reference.api',$.proxy(this.openReference, this));
			if($.isFunction(this.setting.afterClose)){
				this.on('afterClose', this.setting.afterClose);
			}
			if($.isFunction(this.setting.beforeOpenReference)){
				this.on('beforeOpenReference', this.setting.beforeOpenReference);
			}
		},
		/**
		 * 打开参照对话框，该方法已绑定在组件的右边按钮中
		 * @todo 关闭其他显示的下拉框
		 * @example $('#demo').reference('openReference');
		 * @memberof reference-class
		 * @instance
		 */
		openReference: function(){
			if(this.trigger('beforeOpenReference') === false){
				return;
			}
			var that = this
				,s = this.setting;
			var dialogCode = 'reference' + $A.nextId();
			var options = {
				hasheader: s.hasheader,
				width: s.digWidth,
				height: s.digHeight,
				title: s.title,
				src: this.$button,
				url: s.url,
				params: this.getParameter(),
				'data-target': '#' + dialogCode,
				dialogId: dialogCode,
				closeCallback: function(ref){
					var referenceData = ref.data('referenceData');
					if(referenceData){
						that.setReferenceData(referenceData);
						ref.removeData('referenceData');
					}
					that.trigger('afterClose');
				},
				callback: function(ref){
					ref.delegate('[data-dismiss="refClear"]', 'click.reference',function(){
						ref.data('referenceData',{text:'',value:''});
						ref.closeDialog();
					});
					ref.delegate('[data-dismiss="refCancel"]', 'click.reference',function(){
						ref.removeData('referenceData');
						ref.closeDialog();
					});
					ref.data('referenceData', that.getReferenceData());
				}
			};
			this._closeVisiblePanel();
			$.openModalDialog(options);
		},
		/**
		 * 设置参照url
		 * @param {url} url 参照页面url
		 * @example $('#demo').reference('setAction','a.do');
		 * @memberof reference-class
		 * @instance
		 */
		setAction: function(url){
			this.setting.url = url;
		},
		/**
		 * 获取当前引用框的数据对象
		 * @returns {object} result 参照页面的数据对象
		 * @example $('#demo').reference('getReferenceData');
		 * @memberof reference-class
		 * @instance
		 */
		getReferenceData: function(){
			return this.$input.data('referenceData');
		},
		/**
		 * 设置当前引用框的数据对象
		 * @param {object} referenceData 参照页面的数据对象
		 * @todo 根据数据对象设置显示值和隐藏值
		 * @example $('#demo').reference('setReferenceData',{object});
		 * @memberof reference-class
		 * @instance
		 */
		setReferenceData: function (referenceData) {
			if(!referenceData){
				referenceData = {
					text:'',
					value:''
				};
			}
			this.setText(referenceData.text);
			this.setValue(referenceData.value);
			this.$input.data('referenceData', referenceData);
		},
		/**
		 * <span class="type-signature static">override</span>combo
		 * 清除数据对象、显示值、隐藏值
		 * @todo 清除数据对象
		 * @todo 清除显示值
		 * @todo 清除隐藏值
		 * @example $('#demo').reference('clearValue');
		 * @memberof reference-class
		 * @instance
		 */
		clearValue: function(){
			this.$input.removeData('referenceData');
			this.setText('');
			this.setValue('');
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 设置隐藏值
		 * @param {String} val 隐藏值
		 * @param {boolean} [noTrigger] 是否触发change
		 * @see textbox#setValue
		 * @todo 如果隐藏值为空，则设置显示值为空
		 * @example $('#demo').reference('setValue','val');
		 * @memberof reference-class
		 * @instance
		 */
		setValue: function(val, noTrigger){
			this._setValue(val, noTrigger);
			var obj = this.getReferenceData();
			if(obj){
				obj.value = val;
			}else{
				obj = {
					value: val
				};
				this.$input.data('referenceData', obj);
			}
			if(!val){
				this.setText('');
			}
		},
		/**
		 * 设置显示值
		 * @todo 设置值后
		 * @example $('#demo').textbox('setText','text');
		 * @memberof reference-class
		 * @instance
		 */
		setText: function(text, noTrigger){
			Reference.superclass.setText.call(this, text);
			var obj = this.getReferenceData();
			if(obj){
				obj.text = text;
			}else{
				obj = {
					text: text
				};
				this.$input.data('referenceData', obj);
			}
		},
		/**
		 * 设置Reference弹出的对话框的标题
		 * @param title
		 */
		setDialogTitle:function(title){
			this.setting.title = title;
		}
	});
	
	$.fn.reference = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'reference';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Reference(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};

	
	
	$.fn.reference.Constructor = Reference;
	/**
	 * 关闭顶层的对话框，该方法已注册到jquery对象中
	 * @param {object} data 数据
	 * @todo 关闭顶层对话框
	 * @todo 将数据缓存到对话框中
	 * @example $('#demo').closeReference({object});
	 * @memberof jquery
	 * @function closeReference
	 */
	$.closeReference = function(data){
		var ref = Dialog.getCurrent();
		ref.data('referenceData',data);
		ref.closeDialog();
	};
	return Reference;
});
/**
 * 表格扩展
 */
define(	'app/widgets/app-jqgrid',["app/core/app-jquery", "app/core/app-core", "app/core/app-options",
				"app/widgets/window/app-messager", "app/data/app-ajax", localeFile,
				"jquery/jquery.jqgrid","app/widgets/button/app-button","app/widgets/form/app-number","app/widgets/form/app-money","app/widgets/form/app-combobox","app/widgets/form/app-datetime","app/widgets/form/app-combogrid","app/widgets/form/app-comboztree","app/widgets/form/app-reference", 'jquery/jquery.upload'], function($, $A, $options, $messager,
				$ajax) {
			/**
			 * 通过模板进行数据格式化
			 * 
			 * @param cellvalue
			 *            单元格值
			 * @param options
			 *            选项
			 * @param rowObject
			 *            行数据
			 * @returns 格式化后串
			 */
			function templateFormat(cellvalue, options, rowObject) {
				return $template(options.template, rowObject);
			};
			/**
			 * 扩展网格绑定的组件
			 */
			function extendCompent($table) {
				return {
					"PASSWORD" : { // 密码框
						// 参数说明:pnlObj 组件父容器对象,colVal 列值,rowIndex 行号,colIndex
						// 列号,colModel列属性对象集合,colTxt列文本,attachHiddens附加值隐藏域数组集合
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							var html = '<input type="password" id="' + id
									+ '" name="' + name + '" ';
							html += ' value="' + colVal + '" ' + validations
									+ events + required + requiredMsg
									+ gearRules
									+ ' class="editable" width="100%"/>';
							$obj.html(html);
							require(["app/core/app-jquery"], function(jq) {
										$obj.initPageUI();
										
									});
						},
						getEditor:function(){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("textbox");
						},
						xtype:'textbox'
					},
					"RADIOBOX" : {// 单选
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							var editOption = colModel[colIndex].editOptions;// json格式：[{value:'',text:''},{value:'',text:''}]
							editOption = editOption ? editOption : '[]';
							editOption = new Function("return " + 

									+ ";")();
							var html = new Array();
							for (var i = 0; i < editOption.length; i++) {
								var rs = editOption[i];
								var chk = colVal == rs.value
										? "checked='true'"
										: "";
								html.push('<label><input type="radio" id="'
										+ id + i + '" name="' + name + '" '
										+ chk);
								html
										.push(' value="'
												+ rs.value
												+ '" '
												+ validations
												+ events
												+ required
												+ requiredMsg
												+ gearRules
												+ ' class="editable" style="width:auto;"/>'
												+ rs.text + '</label>');
							}
							$obj.html(html.join(''));
							require(["app/core/app-jquery"], function(jq) {
										$obj.initPageUI();
									});
						},
						getVal : function(pnlObj) {
							var chk = $(pnlObj).find(':radio:checked');
							var val = chk.size() > 0 ? chk.val() : ($(pnlObj)
									.attr("val") || $(pnlObj).attr("txt"));
							return val;
						},
						getTxt : function(pnlObj) {
							var chk = $(pnlObj).find(':radio:checked');
							var val = chk.size() > 0 ? chk.val() : ($(pnlObj)
									.attr("val") || $(pnlObj).attr("txt"));
							return val;
						}
					},
					"TEXTAREA" : {// 文本域
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							var html = '<textarea id="' + id + '" name="'
									+ name + '" ';
							html += validations
									+ events
									+ required
									+ requiredMsg
									+ gearRules
									+ ' class="editable" style="resize: none;" width="100%">'
									+ colVal + '</textarea>';
							$obj.html(html);
							require(["app/core/app-jquery"], function(jq) {
										$obj.initPageUI();
									});
						},
						xtype:'textbox'
					},
					"MONEY" : {
						// 参数说明:pnlObj 组件父容器对象,colVal 列值,rowIndex 行号,colIndex
						// 列号,colModel列属性对象集合,colTxt列文本,attachHiddens附加值隐藏域数组集合
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							var html = '<input type="text" id="' + id
									+ '" name="' + name + '" ';
							html += ' value="' + colVal + '" ' + validations
									+ events + required + requiredMsg
									+ gearRules
									+ ' class="app-money" width="100%"/>';
							var options = colModel[colIndex].editOptions;
							var $el = $(html);
							$el.attr("_options",options);
							$obj.html($el);
							$el.money();
							/*require(["app/core/app-jquery"], function(jq) {
										$obj.initPageUI();
									});*/
						},getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.money('getValue');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("money");
						} ,
						xtype:'money'
					},
					"COMBOGRID" : {// 下拉表
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID
							var options = colModel[colIndex].editOptions;

							var name = colModel[colIndex].name, validations = colModel[colIndex].validations
							// ,events = colModel[colIndex].events
							, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;

							var suggest = false;
							if (options.suggest != null) {
								suggest = true;
							}

							var $html = $("<input id=\""
									+ id
									+ "\" name=\""
									+ name
									+ "\" class=\"app-combogrid\" value=\""+ colVal+"\" width=\"100%\" />");
							$html.attr("value", colVal);
							$html.attr("text", colTxt);
							$html.attr("suggest", suggest);
							$html.attr("validations", validations);
							$html.attr("required", required);
							$html.attr("requiredMsg", requiredMsg);
							if (gearRules) {
								$html.attr("gearRules", gearRules);
							}
							$html.attr("_options", options);
							$obj.empty().append($html);
							$html.combogrid();
						},
						getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.combogrid('getValue');
						},
						getTxt : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.combogrid('getText');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("combogrid");
						},
						xtype:'combogrid'
					},
					"COMBOZTREE" : {// 下拉树
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID
							var options = colModel[colIndex].editOptions;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations
							// ,events = colModel[colIndex].events
							, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;

							var $html = $("<input id=\""
									+ id
									+ "\" name=\""
									+ name
									+ "\" class=\"app-comboztree\" width=\"100%\">");
							if (validations) {
								$html.attr("validations", validations);
							}
							if (required) {
								$html.attr("required", true);
							}
							if (requiredMsg) {
								$html.attr("requiredMsg", requiredMsg);
							}
							if (gearRules) {
								$html.attr("gearRules", gearRules);
							}
							if (options){
									options=options.replace(/{/,'{keyShowPanel:[220], ');
							}
							if(options){
								$html.attr("_options", options);
							}

							if (colModel[colIndex].showField) {
								var fopt = colModel[colIndex]["formatoptions"];
								var rowdata = $(this).jqGrid('getRowData',
										this.p.selrow);
								colTxt = colModel[colIndex].formatter(colVal,
										fopt, rowdata);
							}
							$html.attr("value", colVal);
							$html.attr("text", colTxt);
							// p.text=colTxt;
							// p.value=colVal;

							$obj.empty().append($html);
							
							$html.comboztree()
						
						},
						getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.comboztree('getValue');
						},
						getTxt : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.comboztree('getText');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("comboztree");
						},
						xtype:'comboztree'
					},
					"COMBOBOX" : {// 下拉列表
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID
							var options = colModel[colIndex].editOptions||{};
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							var suggest = false;
							if (options.suggest != null) {
								suggest = true;
							}
						/*	if (options){
									options=options.replace(/{/,'{keyShowPanel:[220], ');
							}*/
							var $html = $("<input id=\""
									+ id
									+ "\" name=\""
									+ name
									+ "\" class=\"app-combobox\"  width=\"100%\"  />");
							$html.attr("suggest", suggest);
							if (validations) {
								$html.attr("validations", validations);
							}
							if (required) {
								$html.attr("required", true);
							}
							if (requiredMsg) {
								$html.attr("requiredMsg", requiredMsg);
							}
							if (gearRules) {
								$html.attr("gearRules", gearRules);
							}
							if(options){
								$html.attr("_options", options);
							}

							if (colModel[colIndex].showField) {
								var fopt = colModel[colIndex]["formatoptions"];
								var rowdata = $(this).jqGrid('getRowData',
										this.p.selrow);
										if ( colModel[colIndex].formatter){
								colTxt = colModel[colIndex].formatter(colVal,
										fopt, rowdata);
										}
							}

							$html.attr("value", colVal);
							$html.attr("text", colTxt);

							$obj.empty().append($html);
							
							$html.combobox()
							
						},
						getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.combobox('getValue');
						},
						getTxt : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.combobox('getText');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("combobox");
						},
						xtype:'combobox'

					},
					"REFERENCE" : {// 下拉引用
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID
							var name = colModel[colIndex].name, url = colModel[colIndex].url, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							url = (url ? ' action="' + url + '" ' : '');
							var html = '<input id="' + id + '"  name="' + name
									+ '"  value="' + colVal + '" text="'
									+ colTxt + '" ';
							html += ' class="app-reference" width="98%"';
							html += validations + events + required
									+ requiredMsg + gearRules + url + ' />';
							var options = colModel[colIndex].editOptions;
							var $el = $(html);
							if(options){
								$el.attr("_options",options);
							}
							$obj.html($el);
							
							$el.reference()
						
						},
						getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.reference('getValue');
						},
						getTxt : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.reference('getText');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("reference");
						} ,
						xtype:'reference'
					},
					"DATETIME" : {
						init : function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens) {// 组件创建
							var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID
							var name = colModel[colIndex].name;
							var width = $obj.width() - 30;
							var options = colModel[colIndex].editOptions;

							var validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');

							var html = '';
							html += '<input class="app-datetime" id="' + id
									+ '" name="' + name + '" ';
							html += ' value="' + colVal + '" width="98%"';
							html +=  validations + events + required
									+ requiredMsg + gearRules + '/>';
							var $el = $(html);
							$el.attr("_options",options);
							$obj.html($el);
							$el.datetime();
						},
						getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.datetime('getValue');
						},
						getTxt : function(pnlObj) {
							return this.getVal(pnlObj);
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("datetimepicker");
						} ,
						xtype:'datetimepicker'
					}
					 ,"NUMBER":{
						 init:function(pnlObj, colVal, rowIndex, colIndex,
								colModel, colTxt, attachHiddens){
						 	var $obj = $(pnlObj), id = $obj.attr("id")
									+ "-comp";// 生成ID;
							var name = colModel[colIndex].name, validations = colModel[colIndex].validations, events = colModel[colIndex].events, required = colModel[colIndex].required, requiredMsg = colModel[colIndex].requiredMsg, gearRules = colModel[colIndex].gearRules;
							validations = (validations ? ' validations="'
									+ validations + '"' : '');
							events = (events ? ' events="' + events + '"' : '');
							required = (required ? ' required="true"' : '');
							requiredMsg = (requiredMsg ? ' requiredMsg="'
									+ requiredMsg + '"' : '');
							gearRules = (gearRules ? ' gearRules="' + gearRules
									+ '"' : '');
							var options = colModel[colIndex].editOptions;

							var html = '<input type="text" id="' + id
									+ '" name="' + name + '" ';
							html += ' value="' + colVal + '" ' + validations
									+ events + required + requiredMsg
									+ gearRules
									+ ' class="app-number" width="100%"/>';
							var $el = $(html);
							if(options){
								$el.attr("_options",options);
							};
							$obj.html($el);
							$el.number();
						 },getVal : function(pnlObj) {
							var comp = $(pnlObj).attr("id") + "-comp";
							return $(pnlObj).find('#' + comp)
									.number('getValue');
						},
						getEditor:function(pnlObj){
								var comp = $(pnlObj).attr("id") + "-comp";
								return $(pnlObj).find('#' + comp).data("number");
						} 
					 	,
						xtype:'number'
					 }
				};
			}
			var getDefaultCompent=$.jgrid.getDefaultCompent;
			$.extend($.jgrid,{getDefaultCompent:function(){
					return $.extend(true,getDefaultCompent(),extendCompent());
			}});
			
			/**
			 * 取得jqGrid的jquery对象
			 */
			$.fn.getJqGrid = function() {
				var $this = $(this);
				if (!$this.isGrid())
					return null;
				
				if ($this.attr("jqgrid") == "true")
					return $this;
				if ($this.length>1){
					var ids=[];
					$this.each(function(){
						var tem=$(this);
						ids.push("#" + tem.attr("jqgridid"));
						
					})
					return  $(ids.join(","))
				}else{
					return $("#" + $this.attr("jqgridid"));
				}
			};
			/**
			 * 判断当前对象是否是jqgrid对象
			 */
			$.fn.isGrid = function() {
				return $(this).attr("jqgrid") == "true"
						|| $(this).attr("jqgridid");
			};
			/**
			 * 初始化jqgrid方法
			 */
			$.fn.initJqGrid = function() {
				this.each(function() {
					var $this = $(this)
						,$container = $this.parent(".grid-container")
						,id = $this.attr("id")|| ("jqgrid" + $A.nextId())
						,url = $this.attr("url")
						,dataType = $this.attr("dataType")|| "json"
						,autoLoad = !($this.attr("autoLoad") == "false") 
						,usePage = !($this.attr("usePage") == "false")
						,pageId = $this.attr("pageId")
						,pageList = $this.attr("pageList")? $this.attr("pageList").split(","): $options.jqgrid.pageList
						,rowNum = ($this.attr("pageSize") || pageList[0])* 1
						,sortname = $this.attr("sortname")
						,sortorder = $this.attr("sortorder")|| "asc"
						,height = $this.attr("height")
						,width = $container.width()
						,showFooter = $this.attr("showFooter") == "true"
						,manualFooter = $this.attr("manualFooter") == "true"
						,page = ($this.attr("page") || 1)* 1
						,method = $this.attr("method") || "POST"
						,multiselect = $this.attr("checkboxable") == "true"
						,loadOnce = $this.attr("loadOnce") == "true"
						,striped = $this.attr("striped") != "false"
						,treeGrid = $this.attr("treeGrid") == "true"
						,multiboxonly = ($this.attr("checkboxOnly") != "false")
						,autoHeight = ($this.attr("autoHeight") != "false")
						,shrinkToFit = ($this.attr("shrinkToFit") != "false")
						,repeatitems = ($this.attr("repeatitems") != "false")
						,events = $this.attr("events")
						,params = $this.attr("params")
						,transor = $this.attr("transor")
						,jsonReader = $this.attr("jsonReader")
						,editRow = $this.attr("editRow") == "true" // 是否可以编辑行
						,editUrl = $this.attr("editUrl")// 编辑提交地址
						,editSuccesfunc = $this.attr("editSuccesfunc")// 编辑保存成功执行的函数名
						,rownumbers = true
						,fit =  $this.attr("fit")=="true"
						,gridheaders=$this.attr("gridheaders")
						,fillNum=$this.attr("fillNum")
						,gridExport=$this.attr("export")== "true",
						fileName=$this.attr("fileName"),
						extOptions=$this.attr("extOptions");

					if (typeof($this.attr("rownumbers")) != "undefined") {
						rownumbers = ($this.attr("rownumbers") == "true");
					}
					if (height && height.indexOf("px")) {
						height = height.replace("px", "");
					}
				//	if (!usePage) {
						//$this.attr("pageHeight", "0");
					//} else {
						//$this.attr("pageHeight", "33");
						//height = height - 33;
					//}
					if (autoHeight) {
						height = "100%";
					}

					var cols = [], colNames = [], $colTds = $("thead>tr>th",
							$this), colFuncs = [];
					$colTds.each(function() {
						var $o = $(this), label = $o.html() || ""
								, name = $o.attr("name")|| $o.attr("id") || $o.attr("field") || label
								, field = $o.attr("field")|| name
								, valueField = $o.attr("valueField")
								, w = $o.attr("width"), sortable = $o.attr("sortable") == "true"? true: false
								, align = ($o.attr("align") || "left").toLowerCase()
								, columnType = $o.attr("columnType")
								, columnContent = $o.attr("columnContent")
								, columnHeadFunc = $o.attr("columnHeadFunc")
								, hidden = $o.attr("chidden") == "true"
								, formatterType = $o.attr("formatterType")
								, formatter = $o.attr("formatter")
								, foptions = $o.attr("formatterOptions")
								, editable = $o.attr("editable") != "false"
								, edittype = $o.attr("edittype")? $o.attr("edittype"): "TEXTBOX"
								, editOptions = $o.attr("editOptions")
								, footerType = $o.attr("footerType")
								, footerDef = $o.attr("footerDef")
								, footerFormatter = $o.attr("footerFormatter")
								, required = $o.attr("required") && true
								, requiredMsg = $o.attr("requiredMsg")
								, gearRules = $o.attr("gearRules")
								, events = $o.attr("events")
								, url = $o.attr("url")
								, frozen = $o.attr("frozen")
								, showField = $o.attr("showField")
								, validations = $o.attr("validations")// "校验选项"
								, colTransor = $o.attr("transor")// "校验选项"
								,autoencode = true;//是否自动encode
							
						if (required && edittype != "RADIOBOX") {
							label = '<span class=\"required\">*</span>' + label;
							autoencode = false;
						}
						if (footerDef) {
							footerDef = footerDef.toLowerCase();
							if (footerType == "TEXT") {
								footerDef =footerDef;
							} else if (footerType == "FORMULA") {
								footerDef = $o.getJsFunction(footerDef);
							}
						}
						var isTransor=false;
						if (colTransor){
							isTransor=true;
						}
						var c = {
							name : name,
							index : field,
							sortable : sortable,
							align : align,
							hidden : hidden,
							required : required,
							requiredMsg : requiredMsg,
							summaryType : footerDef,
							summaryTpl : footerFormatter,
							validations : validations,
							events : events,
							footerType:footerType,
							editable : editable,
							edittype : edittype,
							editOptions : editOptions,
							url : url,
							isTransor:colTransor,
							columnHeadFunc : columnHeadFunc,// 20140925
															// sjq新增表头内容替换允许字符串或Js
															// Function
							valueField : valueField,
							
							"attachField" : $o.attr("attachField"),
							"validations" : validations,
							"gearRules" : gearRules,
							frozen : frozen,
							//add by tw
							//新增参数，设置该列是否自动encode
							"autoencode":autoencode
						};
						if (formatter) {
							if (foptions) {
								foptions = $A.jsonEval(foptions);
							}
							if (formatterType == "FUNC") {
								formatter = $o.getJsFunction("return "
										+ formatter)();
							} else if (formatterType == "TEMPLATE") {
								if (!foptions) {
									foptions = {};
								}
								foptions.template = formatter;
								formatter = templateFormat;
							}
							c["formatter"] = formatter;
							c["formatoptions"] = foptions;
							c["autoencode"] = false;
						}

						if (showField) {
							c["showField"] = showField;
							c["formatter"] = function(cellvalue, options,
									rowdata) {
								var txt = "";
								var v = rowdata[showField];
								if (v) {
									txt = v;
								}
								return txt;
							};
						}

						if (w)
							c["width"] = w;
						if (columnType == "FUNC" || columnType == "TEMPLATE"
								|| columnType == "OP") {
							colFuncs.push({
										name : name,
										content : columnContent,
										type : columnType
									});
							//add by tw
							//如果是OP，FUNC或者是TEMPLATE则不自动encode
							c["autoencode"] = false;
						}
						c["columnType"]=columnType;
						colNames.push(label);
						// if(c.)
						cols.push(c);
					});

					// console.log(cols);
					$this.removeAttr("height");
					$this.removeAttr("width");
					$this.empty();
					if ($container.length > 0) {
						/* 无数据提示层 */
						$container.find(".grid-info")
								.html($.jgrid.defaults.emptyrecords);
						/* 调整id,将jqgrid id改为全局唯一id */
						$container.attr("jqgridid", id);
						$this.attr("id", id);
						var conid = $container.attr("id");
						$this.attr("origionId", conid || id);

						// $("#"+conid+"_gridinfo",$container).attr(id,id+"_gridinfo");
					} else {
						var newid = "jqgrid" + $A.nextId();
						$this.attr("id", newid);
						$this.attr("origionId", id);
						// var $refDiv = $("<div id=\""+id+"\"
						// jqgridid=\""+newid+"\"
						// style='display:none;'></div>");
						// $this.after($refDiv);
						// console.log("add");
						id = newid;
					}
					if (usePage) {
						var $page = $A("#" + pageId);
						if ($page.size() > 0) {
							pageId = id + "_pageTool";
							$page.attr("id", pageId);
						}
					}
					
					$this.attr("cwidth", $container.width());
					$container.bind('_resize', function(e,isresize,w,h) {
						
						var p=$container.parent(".layout-body,.panel-body");
						if (p.length>0){
						 if (fit == true) {
								
							p.css("overflow","hidden");
								$container.innerWidth(w);
								$container.innerHeight(h);
								$this.jqGrid('setGridHeight', $container.height());
								$this.jqGrid('setGridWidth', $container.width());
								//p.css("overflow","");
						}else{

							if (p[0].offsetHeight<p[0].scrollHeight){
								w=w-18;
							}
							$container.innerWidth(w);
							$this.jqGrid('setGridWidth', $container.width());
						}
						}

						return false;
					});
					/**
					 * 表格结束处理方法
					 */
					var gridComplete = ($container.length == 0 && colFuncs.length == 0)? null: function() {
								var ids = $this.jqGrid('getDataIDs');	
							
								if ($container.length > 0) {
									var $gridInfo = $container.find(".grid-info");
									if (ids.length == 0) {
										$gridInfo.css("display", "");
									} else {
										$gridInfo.css("display", "none");
									}
								}
								
								var rc = $this.jqGrid('getGridParam','reccount');
								if (rc == 0){
									
									if (fillNum) {

										fillNum = parseInt(fillNum, 10);
										var rowid, rowDatas = [];
										if (ids <= 0) {

											for (var i = 0; i < fillNum; i++) {
												rowid = $.jgrid.randId();
												rowData = {};
												// rowData[reader.id] = rowid;
												rowDatas.push(rowData);
											}
											$this.jqGrid("addRowData", null,
													rowDatas);
											window.setTimeout(function() {
														fillNum = 0;
													});
										}
									}
								}

								if (colFuncs.length == 0)
									return;
								for (var i = 0; i < ids.length; i++) {
									var cl = ids[i];
									for (var j = 0; j < colFuncs.length; j++) {
										var cf = colFuncs[j];
										var cc;
										if (cf.type == "FUNC") {
											cc = $this.getJsFunction("return "
													+ cf.content
													+ ".apply(this,arguments)")(
													$this, cl);
										} else {
											var rowd = $this.jqGrid('getRowData', cl);
											if (!rowd.id) {
												rowd.id = cl;
											}
											cc = $template(cf.content, rowd);
										}
										var celld = {};
										celld[cf.name] = cc;
										$this.jqGrid('setRowData', cl, celld);
									}
								};
								$("[handle][handleType=JS]", $this).each(
										function() {
											var $a = $(this);
											var handle = $a.attr("handle");
											if (!handle)
												return;
											var func = null;
											try {
												func = $this
														.getJsFunction(handle);
											} catch (e) {
												return;
											}
											$a.removeAttr("handle");
											$a.click(function(e) {
														if ($a.isTag("a"))
															e.preventDefault();
															if($a.attr("disabled")||$a.hasClass("disabled"))
															return;
														func.call(this);
													});
										});
										
								
							};

					if (jsonReader == null) {
						if (repeatitems) {
							jsonReader = {
								root : "data",
								page : "page",
								total : "totalPage",
								cell : "cell",
								records : "totalRecords",
								id : "id"
							};
						} else {
							jsonReader = {
								root : "data",
								page : "page",
								total : "totalPage",
								records : "totalRecords",
								repeatitems : false,
								id : "id"
							};
						}
					}
					var dt = autoLoad ? dataType : "local";

					// 组件扩展
					var myCompent = extendCompent($(this));
					/**
					 * 网格默认合计
					 */
					var gridTotal=function(){
						var ids = $this.jqGrid('getDataIDs');
							var summerObj = {};
							summary = [];
							for (var i = 0; i < cols.length; i++) {
								if (cols[i].summaryType) {
									summary.push({
												nm : cols[i].name,
												st : cols[i].summaryType,
												formatter : cols[i].formatter,
												v : cols[i].footerType == "TEXT"
														? cols[i].summaryType
														: "",
												footerType : cols[i].footerType
											});
								}
							}
							for (var i = 0; i < ids.length; i++) {
								var cl = ids[i];
								var record = $this.jqGrid('getRowData', cl);
								$.each(summary, function() {
											if ($.isFunction(this.st)) {
												this.v = this.st.call($this,
														this.v, this.nm, record);
											} else {
												if (this.footerType != "TEXT")
													this.v = $this
															.jqGrid(
																	'groupingCalculations.handler',
																	this.st,
																	this.v,
																	this.nm, null,
																	null, record);
												/*
												 * if(this.st.toLowerCase() ===
												 * 'avg' && this.sd) { this.vd =
												 * $this.jqGrid('groupingCalculations.handler',this.st,
												 * this.vd, this.sd, this.sr,
												 * this.srt, record); }
												 */
											}
										});
							}
							$.each(summary, function() {
										if ($.isFunction(this.formatter)) {
											this.v = this.formatter.call(this,
													this.v);
										}
										summerObj[this.nm] = this.v;
									});
							$this.footerData("set", summerObj);
					};

					var op = {
						url : url, /* 请求地址 */
						editurl : editUrl,// 编辑保存URL
						datatype : dt,/* 数据类型 */
						mtype : method, /* 请求方法 */
						colNames : colNames,
						colModel : cols,
						// /caption:title,/*使用自己的title*/
						altRows : striped,
						height : height,
						shrinkToFit : shrinkToFit,
						width : width,
						loadonce : loadOnce,
						multiselect : multiselect,
						multiboxonly : multiboxonly,
						viewrecords : true,
						recordpos : "left",
						pagerpos : "right",
						loadui : false,
						treeGrid : treeGrid,
						ExpandColumn : 'name',
						gridComplete : gridComplete,
						jsonReader : jsonReader,
						component : myCompent,
						editSuccesfunc : editSuccesfunc,
						rownumbers : rownumbers,
						editRow : editRow,
						footerrow : showFooter,
						userDataOnFooter : manualFooter,
						isExport:gridExport,
						fileName:fileName,
						gridTotal:gridTotal
					/*	grouping:true,
						groupingView : {
					   		groupField : ['fchgAgenCode'],
					   		groupColumnShow : [true],
					   		groupText : ['<b>{0}</b>'],
					   		groupCollapse : false,
							groupOrder: ['asc'],
							groupSummary : [true],
							groupDataSorted : true
					   	},*/
					};
					
					if (extOptions){
						var extCfg = new Function("return " + extOptions

								+ ";")();
					if (extCfg){
								op=$.extend(op,extCfg);
					}
						
					}
					if (usePage) {
						op["pager"] = "#" + pageId;
						op["rowNum"] = rowNum == 0 ? (pageList[0] * 1) : rowNum;
						op["rowList"] = pageList;
						op["page"] = page;
					} else {
						op["rowNum"] = -1;
					}
					if (sortname) {
						op["sortname"] = sortname;
						op["sortorder"] = sortorder;
					}

					if (treeGrid) {
						op["treeGridModel"] = 'adjacency';
						var treeColumn = $this.attr("treeColumn");
						if (treeColumn) {
							op["ExpandColumn"] = treeColumn;
						}
						var treeReader = {
							level_field : $this.attr("levelField") || "level",
							parent_id_field : $this.attr("parentField")
									|| "parent",
							leaf_field : $this.attr("leafField") || "leaf",
							expanded_field : $this.attr("expandedField")
									|| "expanded",
							loaded : $this.attr("loadedField") || "loaded",
							icon_field : $this.attr("iconField") || "icon"
						};
						op["treeReader"] = treeReader;
					}
					if (events) {
						var es = $this.getJsEvent(events);
						/* 对gridcomplete事件进行处理防止内置处理和外部事件处理冲突 */
						var completHandler = es["gridComplete"];
						if (completHandler) {
							var gridHandle = op.gridComplete;
							es["gridComplete"] = function() {
								gridHandle.apply(this, arguments);
								completHandler.apply(this, arguments);
							};
						}
						$.extend(op, es);
					}
					/**
					 * 外部参数
					 */
					params = params ? $A.jsonEval(params) : {};
					if (transor) {
						params["__transor"] = transor;
					}
					op["postData"] = params;
				
					if (multiselect&&editRow){
						if (!op["beforeSelectRow"]){
						op["beforeSelectRow"]= function (rowid, e) {
						    var $myGrid = $(this),
						        i = $.jgrid.getCellIndex($(e.target).closest('td')[0]),
						        cm = $myGrid.jqGrid('getGridParam', 'colModel');
						    return (cm[i].name === 'cb');
						}
						}
						
					}
					
				/*	if (fit == true) {
							var p = $container.parent();
										var w = p.outerWidth();
										var h = p.outerHeight();
										op.width=w;
										op.height=h;
					}*/
				$this.jqGrid(op);
				/**
				 * 多表头
				 */
				if (gridheaders){
					var gridheadersCfg=$.parseJSON(gridheaders);
					var inColumnHeaders = function(colHeader) {
						var length = colHeader.groupHeaders.length, i;
						$this.jqGrid('setGroupHeaders', colHeader);
						for (i = 0; i < length; i++) {
						if (colHeader.groupHeaders[i].groupHeaders) {
							colHeader.groupHeaders[i]["useColSpanStyle"]=colHeader["useColSpanStyle"];
							inColumnHeaders(colHeader.groupHeaders[i]);
						}
					}
					}
					inColumnHeaders(gridheadersCfg);
					$this[0].p.gridheadersCfg=gridheadersCfg;

				}
					
					
					//$this.jqGrid('setGroupHeaders', gridheadersCfg);
					
					
					//$this.jqGrid('bindKeys', {});
					/*sjq新增自动合计*/
					if (showFooter) {
						$this.bind("jqGridAfterGridComplete", function() {
							gridTotal();

						});
					};
					$container.bind('_resize', function(e,isresize,w,h) {
							
								var p=$container.parent(".layout-body");
								if (p.length>0){
								if (fit == true) {
										
									p.css("overflow","hidden");
										$container.innerWidth(w);
										$container.innerHeight(h);
										$this.jqGrid('setGridHeight', $container.height());
										$this.jqGrid('setGridWidth', $container.width());
										//p.css("overflow","");
								}else{
									
									if (p[0].offsetHeight<p[0].scrollHeight){
										w=w-18;
									}
									$container.innerWidth(w);
									$this.jqGrid('setGridWidth', $container.width());
								}
								}

								return false;
							});
					// $this.jqGrid("setFrozenColumns");

					if (editRow) {// 需要编辑行时
						var editOp = {
							keys : true
						};
						if (editSuccesfunc) {// 保存服务器上,成功后回调函数
							editOp.succesfunc = eval(editSuccesfunc);
						}
						var editTag = true;
						// 由单击产生编辑行
						$this.jqGrid('setGridParam', {
									onClickRow : function(rowid,rowid,colIndex) {
										var editOp = {
													keys: true,
													focus:colIndex
											};
										window.setTimeout(function() {
													if (editTag) {
														editTag = false;
														$this.jqGrid('editRow',
																rowid, editOp);
														editTag = true;
													}
												}, 0);
									}
								});
					}

					$this.attr("jqgrid", "true");
					$this.attr("init", "true");
					$this.attr("datatype", dataType);
				});

				// $("#test").addClass("appgrid jqgrid");
				// $("#test").jqGrid({});
				// alert($("#test").jqGrid("getGridId"));
				// alert($("#jqgrid3")[0].p.component.text.init());
				// alert($("#test")[0].p.component.text.init());
				// $("#mainGrid")[0].p.component.text.init =
				// function(pnlObj,colVal,rowIndex,colIndex,colModel){
				// $(pnlObj).html('改变了组件绑定！');
				// };
			};
			/**
			 * 重新加载表格
			 */
			$.fn.reloadJqGrid = function(params) {
				$(this).each(function() {
							var $this = $(this);
							var $grid = $this.getJqGrid();
							if ($grid && $grid.attr("init") == "true") {
								var dt = $grid.attr("datatype") || "json";
								params = params ? params : {};
								var transor = $this.attr("transor");
								if (transor) {
									params["__transor"] = transor;
								}
								
								if (params["baseParams"]){
										$this.data("baseParams",params["baseParams"]);
										delete params["baseParams"];
									}
								var baseParams=$this.data("baseParams");
								params=$.extend(true,params,baseParams);
								
								$grid.jqGrid('setGridParam', {
											datatype : dt,
											treedatatype : dt,
											postData : params
										}).trigger("reloadGrid");
							} else if (params) {
								if ($this.hasClass(".jqgrid")) {
									$grid = $this;
								} else {
									$grid = $(".jqgrid[init!=true]", $this);
								}
								$grid.attr("autoLoad", "true");
								$grid.attr("params", $A.toJsonString(params));
							}
						});
			};
			/**
			 * @class
			 * @name bsgriD
			 * @description <jquery methods class> 网格控件jquery方法
			 *              @example
			 *              向id为mainGrid的网格追加新行|
			 * 	$("#mainGrid").bsgrid("appendRow","first");|
			 *              @example
			 *              例2：取id为mainGrid的网格编辑完成后数据对象|
			 *              $("#mainGrid").bsgrid("getEditData");//返回json对象|
			 */
			$.fn.bsgrid = function(pin) {
				if (typeof pin === 'string') {
					var methods = {
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getGridId
						 * @desc 取得表格id
						 * @return {String} 表格id
						 */
						getGridId : function() {
							return this.attr("origionId");
						},
						/**
						 * 取网格属性 参数说明 pName 属性名
						 */
						getGridParam : function(pName) {
							return this.jqGrid("getGridParam", pName);
						},
						/**
						 * 设置网格属性 参数 newParams 网格属性对象
						 */
						setGridParam : function(newParams) {
							this.jqGrid("setGridParam", newParams);
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name appendRow
						 * @desc 追加一行数据到网格
						 * @param {string|int}
						 *            [rowPos=last] -
						 *            新行插入位置，可空。值说明："first"为追加在首行，"last"为追加在未行，"after"为目标行之后，"before"目标行前。默认为“last”
						 * @param {object}
						 *            [rowData=null] - 新增行的预置数据,可为空
						 * @param {string}
						 *            srcRowId -
						 *            新行插入位置的目标行ID,当rowindex参数值为after或是before时，必须指定该参数值，否则值应为空
						 * @param {boolean}
						 *            [isEdit=true] - 是否编辑行，可空,默认为true
						 */
						appendRow : function(rowData, rowPos, srcRowId, isEdit) {
							rowPos = rowPos ? rowPos : "last";
							rowData = rowData ? rowData : {};
							isEdit = (isEdit != "false" && isEdit != false);

							return this.each(function() {
								if (!this.grid) {
									return;
								}// 网格未创建时，结束
								var obj = $(this), reader = obj.jqGrid(
										"getGridParam", "jsonReader"), rowid = rowData[reader.id]
										|| $.jgrid.randId();

								rowData[reader.id] = rowid;
								var b = obj.jqGrid('addRowData', rowid,
										rowData, rowPos, srcRowId);

								if (b) {
									obj.jqGrid("setSelection", rowid);// add
																		// by tw
																		// 先选中该行
									if (isEdit) {
										obj.jqGrid('editRow', rowid, {
													keys : true
												}); // 设置grid单元格可编辑
									}
									// 滚动条滚动到新增行
									var ri = obj
											.jqGrid('getGridRowById', rowid).rowIndex;// 行下标
									var ch = $(this.grid.bDiv).outerHeight(), st = this.grid.bDiv.scrollTop, rpos = $(this.rows[ri])
											.position().top, rh = $(this.rows[ri])
											.outerHeight();
									if (rpos + rh >= ch + st) {
										this.grid.bDiv.scrollTop = rpos
												- (ch + st) + rh + st;
									} else if (rpos < ch + st) {
										if (rpos < st) {
											this.grid.bDiv.scrollTop = rpos;
										}
									}
								}
								return rowid;
							});
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name deleteRow
						 * @desc 删除网格一个已选中的行，或删除指定行号
						 * @param {string|array}
						 *            [rowid=当前选中行] - 行ID,可为id数组,默认为当前选中行
						 */
						deleteRow : function(rowid) {
							return this.each(function() {
								var rowids;
								if (rowid) {// 有指定行号时
									rowids = $.isArray(rowid) ? rowid : [rowid];
								} else {
									if (this.p.multiselect
											&& this.p.selarrrow.length > 0) {
										rowids = this.p.selarrrow;
									} else {
										rowids = [this.p.selrow];
									}
								}
								for (var i = 0; i < rowids.length; i++) {
									var id = rowids[i];
									if (!id)
										return;
									$(this).jqGrid('delRowData', id);
								}
							});
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name submitData
						 * @desc 提交网格数据到服务器
						 * @param {string}
						 *            url - 提交的地址，可空，为空时提交的地址为网格editUrl属性值
						 * @param {function}
						 *            success - 成功时执行的回调函数，参数为服务端返回的数据对象
						 * @param {function}
						 *            error - 错误时执行的回调函数
						 * @param {function}
						 *            exception - 异常时执行的回调函数
						 * @param {function}
						 *            before - 提交数据之前执行的函数
						 */
						submitData : function(url, success, error, exception,
								before) {
							return this.each(function() {
										$(this).jqGrid('submitData', success,
												url, error, exception, before);
									});
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getSubmitData
						 * @desc 获取网格编辑后的需要提交服务的数据
						 * @return {object}
						 *         数据对象,数据对象格式：{"add":[{},{}],"update":[{},{}],"del":[{},{}]}
						 */
						getSubmitData : function() {
							return $(this).jqGrid("getSubmitData");
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getComponent
						 * @desc 获取某个网格的组件对象,取到该对象后，根据实际业务进行改写组件
						 * @param {string}
						 *            editType - 组件类型
						 * @return {component} 组件对象
						 */
						getComponent : function(editType) {
							if (!editType || this.length == 0)
								return null;
							return this[0].p.component[editType];
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name hideCol
						 * @desc 隐藏指定列
						 * @param {string|array}
						 *            colName - 列名字符串，或者是列名数组对象
						 */
						hideCol : function(colName) {
							if (colName) {
								var arys = $.isArray(colName)
										? colName
										: [colName];
								$(this).jqGrid("hideCol", arys, "none");
							};
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name showCol
						 * @desc 显示指定列
						 * @param {string|array}
						 *            colName - 列名字符串，或者是列名数组对象
						 */
						showCol : function(colName) {
							if (colName) {
								var arys = $.isArray(colName)
										? colName
										: [colName];
								$(this).jqGrid("showCol", arys, 'display');
							}
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setCell
						 * @desc 设置指定单元格的值
						 * @param {string}
						 *            rowid - 行id
						 * @param {string}
						 *            colName - 列名
						 * @param {string}
						 *            data - 指定的单元格值
						 * @param {string||object}
						 *            css - 指定单元格样式名
						 * @param {string}
						 *            properties - 单元格属性
						 * @param {boolean}
						 *            forceupd - 指定单元格为空时需要此表示设置为true
						 */
						setCell : function(rowid, colName, data, css,
								properties, forceupd) {
							$(this).jqGrid("setCell",rowid, colName, data, css,
									properties);
						},

						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getCell
						 * @desc 取得指定单元格的值
						 * @param {string}
						 *            rowid - 行id
						 * @param {string}
						 *            colName - 列名
						 * @return 指定单元格的显示值
						 */
						getCell : function(rowid, colName) {
							return $(this).jqGrid("getCell", rowid, colName);
						},
						getCellEditor : function(colName) {

							var rowid = this.bsgrid("getSelectRowId");
							if (!rowid)
								return null;
						

									
				var $t = $(this).jqGrid("getJqGridObj"), pos =-1;
					if(!$t.grid) {return;}
					if(isNaN(colName)) {
						$($t.p.colModel).each(function(i){
							if (this.name === colName) {
								pos = i;return false;
							}
						});
					}
						if(pos>=0) {
							var ind = $($t).jqGrid('getGridRowById', rowid); 
							var cellDom = $("td:eq("+pos+")",ind);
						
							if (!cellDom)
								return null;
							var $cellDom= $(cellDom);
							var $input = $cellDom.find("input:first-child");
							if ($input.length > 0) {
								return $("#" + $input[0].id);
							}else{
								if ($cellDom.length>0){
									return $("#" + $cellDom[0].id);
								}else{
									return null;
								}
							}
						}
							return null;
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setEditEnabled
						 * @desc 动态设置网格是否可编辑
						 * @param {boolean}
						 *            enabled - 是否可编辑
						 */
						setEditEnabled : function(enabled) {
							return this.each(function() {
										if (!this.grid) {
											return;
										}// 网格未创建时，结束
										if (!enabled) {// 失效
											var rs = $(this).jqGrid("saveRows",
													this);
											if (rs) {
												this.p.editRow = false;
											}
											return rs;
										} else {
											this.p.editRow = true;
											return true;
										}
									});
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getEditRow
						 * @desc 取得当前编辑的行
						 * @param {json}
						 *            编辑行
						 */
						getEditRow : function() {
							var rows = this.getGridParam("savedRow");
							if (rows == null || rows.length == 0)
								return null;
							return rows[0];
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getDataIDs
						 * @desc 取得所有行id
						 * @return {array} 所有id集合
						 */
						getDataIDs : function() {
							return this.jqGrid('getDataIDs');
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name getRowData
						 * @desc 选择或者反选行数据，有复选框时也支持
						 * @param {string}
						 *            rowid - 行ID
						 * @return 指定行数据
						 */
						getRowData : function(rowid) {
							return this.jqGrid('getRowData', rowid);
						}
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setRowData
						 * @desc 选择或者反选行数据，有复选框时也支持
						 * @param {string}
						 *            rowid - 行ID
						 * @param {object}
						 *            data - 数据集
						 * @param {string}
						 *            [css=null] -
						 *            设置行样式,可空。值说明：可以是类名或者css配置对象，如:
						 *            "nev"或{"background":"red",border:"solid"}
						 */
						,
						setRowData : function(rowid, data, css) {
							this.jqGrid('setRowData', rowid, data, css);
						}
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setSelection
						 * @desc 选择或者反选行数据，有复选框时也支持
						 * @param {string}
						 *            rowid - 行ID
						 * @param {boolean}
						 *            [onsr=true] - 选中行后是否触发行选中事件,默认为true
						 * @param {event}
						 *            e - 事件对象，可空
						 */
						,
						setSelection : function(rowid, onsr, e) {
							this.jqGrid('setSelection', rowid, onsr, e);
						}
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name resetSelection
						 * @desc 选择或者反选行数据，有复选框时也支持
						 * @param {string}
						 *            [rowid=全部行] - 行id,可空。不指定行id时，为所有行
						 */
						,
						resetSelection : function(rowid) {
							this.jqGrid('resetSelection', rowid);
						},

						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name resetEditData
						 * @desc 去除'由原网格编辑而生成要提交服务器上的数据'
						 */
						resetEditData : function() {
							$(this).jqGrid("resetEditData");
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name resetEditData
						 * @desc 去除'由原网格编辑而生成要提交服务器上的数据'
						 */
						refreshEditData : function(datas, isEdit) {
							var local = this.bsgrid("getSubmitData"), adds = local.add
									|| [], count = 0;
							$.each(data, function(i, row) {
										if (row.internalStatus == "ADD") {
											if (adds.length > count) {
												var posId = adds[count].id;
												this.bsgrid("appendRow", row,
														"after", pos, false);
												this.bsgrid("deleteRow", posId);
												count++;
											} else {
												this.bsgrid("appendRow", row,
														null, null, false);
											};
										} else if (row.internalStatus == UPDATE) {
											this.bsgrid("setRowData", row.id,
													row);
										};
									});
							this.bsgrid("resetEditData");
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name refreshAllData
						 * @desc 刷新表格所有数据,用新的数据数组替换原有的
						 * @param {array} datas - 数据数组
						 */
						refreshAllData : function(datas) {
							var o = this;
							o.bsgrid("clearData");
							$(datas).each(function(index, element) {
								o.bsgrid("appendRow", element, null, null,
										false);
							});
							o.bsgrid("resetEditData");
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name editRow
						 * @desc 编辑指定行
						 * @param {string} rowid - 行id
						 */
						editRow : function(rowid) {
							this.jqGrid('editRow', rowid);
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name restoreRow
						 * @desc 行恢复到非编辑状态,原编辑行还原到非编辑状态，且当前行正在编辑的值改动不保存
						 * @param {string} rowid - 行id
						 */
						restoreRow : function(rowid) {
							this.jqGrid('restoreRow', rowid);
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setWidth
						 * @desc 动态设置网格宽，默认以px为单位
						 * @param {int|string} width - 宽度值
						 * @param {boolean} shrink - 表格列宽是否自适应
						 */
						setWidth : function(width, shrink) {
							this.jqGrid('setGridWidth', width, shrink);
						}
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name setHeight
						 * @desc 动态设置网格高度，默认以px为单位
						 * @param {int|string} height - 高度值
						 */
						,
						setHeight : function(height) {
							this.jqGrid('setGridHeight', height);
						},
					/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name reload
						 * @desc 设置基本参数，
						 * @param {object} params - 加载参数
						 */
						setBaseParams:function(params){
							$(this).each(function() {
								var $this = $(this);
								$this.data("baseParams",params);
							});
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name reload
						 * @desc 获取基本参数，
						 * @param {object} params - 加载参数
						 */
						getBaseParams:function(){
							var baseParams=null;
							$(this).each(function() {
								var $this = $(this);
								baseParams=$this.data("baseParams");
							});
							return baseParams;
						},
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name reload
						 * @desc 重新加载数据
						 * @param {object} params - 加载参数
						 */

						reload : function(params) {
							$(this).each(function() {
								var $this = $(this);
								var $grid = $this.getJqGrid();
								if ($grid && $grid.attr("init") == "true") {
									var dt = $grid.attr("datatype") || "json";
									params = params ? params : {};
									var transor = $this.attr("transor");
									if (transor) {
										params["__transor"] = transor;
									}
									if (params["baseParams"]){
										$this.data("baseParams",params["baseParams"]);
										delete params["baseParams"];
									}
									var baseParams=$this.data("baseParams");
									params=$.extend(true,params,baseParams);
									$grid.jqGrid('setGridParam', {
												datatype : dt,
												treedatatype : dt,
												postData : params
											}).trigger("reloadGrid");
								} else if (params) {
									if ($this.hasClass(".jqgrid")) {
										$grid = $this;
									} else {
										$grid = $(".jqgrid[init!=true]", $this);
									}
									$grid.attr("autoLoad", "true");
									$grid.attr("params", $A.toJsonString(params));
								}
							});
						},
						load : function(params) {
							$(this).each(function() {
								var $this = $(this);
								var $grid = $this.getJqGrid();
								if ($grid && $grid.attr("init") == "true") {
									var dt = $grid.attr("datatype") || "json";
									params = params ? params : {};
									var param = {
										page : 1
									};
									if (params.parma
											&& $.isPlainObject(params.parma)) {
										$.extend(param, params.parma);
									}
									if (params["baseParams"]){
										$this.data("baseParams",params["baseParams"]);
										delete params["baseParams"];
									}
									var transor = $this.attr("transor");
									if (transor) {
										params["__transor"] = transor;
									}
									var baseParams=$this.data("baseParams");
									params=$.extend(true,params,baseParams);
									$grid.jqGrid('setGridParam', {
												datatype : dt,
												treedatatype : dt,
												postData : params,
												isLoad:true
											}).trigger("reloadGrid", param);
								} else if (params) {
									if ($this.hasClass(".jqgrid")) {
										$grid = $this;
									} else {
										$grid = $(".jqgrid[init!=true]", $this);
									}
									$grid.attr("autoLoad", "true");
									$grid.attr("params", $A.toJsonString(params));
								}
							});
						},
						/**
						 * 网格下一页方法
						 */
						nextPage:function(){
							$(this).each(function() {
										var $this = $(this);
										var $grid = $this.getJqGrid();
										if ($grid&& $grid.attr("init") == "true") {
											var id=$this.attr("id");
											var nextBtnId="#next_"+id+"_pageTool";
											$(nextBtnId).click();
										}
									});
						},
						/**
						 * 网格上一页
						 */
						prvePage:function(){
						
								$(this).each(function() {
										var $this = $(this);
										var $grid = $this.getJqGrid();
										if ($grid&& $grid.attr("init") == "true") {
											var id=$this.attr("id");
											var nextBtnId="#prev_"+id+"_pageTool";
											$(nextBtnId).click();
										}
									});
					
						}
							
						/**
						 * @memberof bsgriD
						 * @function
						 * @instance
						 * @name clearData
						 * @desc 清除表格数据
						 */
						,
						clearData : function() {
							$(this).jqGrid("clearGridData", false);
						}
						/**
						 * @memberof bsgriD 
						 * @function
						 * @instance
						 * @name getSelectRowId
						 * @desc 取得最后选中行id
						 * @return {string}选中行id
						 */
						,
						getSelectRowId : function() {
							return this.jqGrid("getGridParam", "selrow");
						}
						/**
						 * @memberof bsgriD 
						 * @function
						 * @instance
						 * @name getSelectRow
						 * @desc 取得最后选中行数据
						 * @return {string}选中行id
						 */
						,
						getSelectRow : function() {
							var id = this.bsgrid("getSelectRowId");
							if (id)
								return this.bsgrid("getRowData", id);
						},
						/**
						 * @memberof bsgriD 
						 * @function
						 * @instance
						 * @name getSelectIds
						 * @desc 取得多个选中行id
						 * @return {array}选中行id
						 */
						getSelectIds : function() {
							return this.bsgrid("getGridParam", "selarrrow");
						},
						/**
						 * @memberof bsgriD 
						 * @function
						 * @instance
						 * @name loadData
						 * @desc 加载数据
						 * @return {json} data - json数据
						 */
						loadData : function(data) {
							$(this).each(function() {
								this.addJSONData(data);
							});
							//this[0].addJSONData(data);
						}
					};
					var fn = methods[pin];
					if (!fn) {
						throw ("该方法未定义: " + pin);
					}
					var args = $.makeArray(arguments).slice(1);
					return fn.apply(this, args);
				}
				return this;
			};
		});

define('app/widgets/app-lang_zh_CN',["app/core/app-jquery","app/core/app-core","app/util/app-utils"],function($,App,AppUtils){
	var that ={
		locale:"zh_CN",
		msg:function(code,args){
			return AppUtils.format(this._messages[code], args);
		},
		/**
		 * 基于编码的信息，可以带有{0}…{n}的变量
		 */
		_messages:{
			validateFormError:"提交数据不完整，{0}个字段有错误，请改正后再提交! ",
			alertSelectMsg:"请选择信息!"
		},
		messager:{
			OK:"确定",
			CANCEL:"取消",
			CONFIRM:"确认",
			ERROR:"错误",
			WARN:"警告",
			INFO:"信息",
			CORRECT:"成功",
			PROMPT:"提示"
		},
		/**
		 * 表格多语
		 */
		dataTable:{
			oLanguage:{
				oPaginate:{
					sFirst: "首页",
					sLast: "末页",
					sPrevious:"上一页",
					sNext:"下一页"
				},
				sLengthMenu: "每页显示 _MENU_ 条",
				sSearch:"查找:_INPUT_",
				sEmptyTable: "无符合条件的数据",
				sInfo: "当显示&nbsp;从 _START_ 到 _END_ 条记录&nbsp;&nbsp;&nbsp;总共 _TOTAL_ 记录",
				sInfoEmpty: "无显示记录",
				sLoadingRecords: "加载中...",
				sProcessing: "处理中...",
				sZeroRecords: "无符合条件的数据"
			}
		},
		pagination:{
			previous:"上一页",
			next:"下一页",
			pageInfo:"总共{0}记录,共{2}页,&nbsp;&nbsp;&nbsp;当显示第{3}页&nbsp;从{4}到{5}条记录",
			pageSizeInfo:"<ul class='ulnostyle uloneline'><li class='controltxt' >每页</li><li>{0}</li><li class='controltxt'>条记录</li></ul>"
		},
		validator:{
			
		},
		datetimepicker:{
			days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"],
			daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
			daysMin:  ["日", "一", "二", "三", "四", "五", "六", "日"],
			months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
			today: "今日",
			suffix: [],
			meridiem: []
		},
		magicsuggest:{
			noSuggestionText:"无相关数据"
		},
		flexigrid:{
			errormsg:"加载数据错误",
			pagestat:"当前显示从 {from}到{to}条记录&nbsp;&nbsp;&nbsp;总共{total}记录 ",
			pagetext:"",
			outof:"/",
			procmsg:"数据加载中……",
			nomsg:"无符合条件的数据"
		}
	};
	App.lang = that;
	
	$.jgrid = $.jgrid || {};
	$.extend($.jgrid,{
	    defaults : {
	        recordtext: "{0} - {1}\u3000共 {2} 条", // 共字前是全角空格
	        emptyrecords: "无符合条件的记录。",
	        loadtext: "读取中...",
	        pgtext : " {0} 共 {1} 页"
	    },
	    search : {
	        caption: "搜索...",
	        Find: "查找",
	        Reset: "重置",
	        odata: [{ oper:'eq', text:'等于\u3000\u3000'},{ oper:'ne', text:'不等\u3000\u3000'},{ oper:'lt', text:'小于\u3000\u3000'},{ oper:'le', text:'小于等于'},{ oper:'gt', text:'大于\u3000\u3000'},{ oper:'ge', text:'大于等于'},{ oper:'bw', text:'开始于'},{ oper:'bn', text:'不开始于'},{ oper:'in', text:'属于\u3000\u3000'},{ oper:'ni', text:'不属于'},{ oper:'ew', text:'结束于'},{ oper:'en', text:'不结束于'},{ oper:'cn', text:'包含\u3000\u3000'},{ oper:'nc', text:'不包含'}],
	        groupOps: [ { op: "AND", text: "所有" },    { op: "OR",  text: "任一" } ]
	    },
	    edit : {
	        addCaption: "添加记录",
	        editCaption: "编辑记录",
	        bSubmit: "提交",
	        bCancel: "取消",
	        bClose: "关闭",
	        saveData: "数据已改变，是否保存？",
	        bYes : "是",
	        bNo : "否",
	        bExit : "取消",
	        msg: {
	            required:"此字段必需",
	            number:"请输入有效数字",
	            minValue:"输值必须大于等于 ",
	            maxValue:"输值必须小于等于 ",
	            email: "这不是有效的e-mail地址",
	            integer: "请输入有效整数",
	            date: "请输入有效时间",
	            url: "无效网址。前缀必须为 ('http://' 或 'https://')",
	            nodefined : " 未定义！",
	            novalue : " 需要返回值！",
	            customarray : "自定义函数需要返回数组！",
	            customfcheck : "Custom function should be present in case of custom checking!"
	        }
	    },
	    view : {
	        caption: "查看记录",
	        bClose: "关闭"
	    },
	    del : {
	        caption: "删除",
	        msg: "删除所选记录？",
	        bSubmit: "删除",
	        bCancel: "取消"
	    },
	    nav : {
	        edittext: "",
	        edittitle: "编辑所选记录",
	        addtext:"",
	        addtitle: "添加新记录",
	        deltext: "",
	        deltitle: "删除所选记录",
	        searchtext: "",
	        searchtitle: "查找",
	        refreshtext: "",
	        refreshtitle: "刷新表格",
	        alertcap: "注意",
	        alerttext: "请选择记录",
	        viewtext: "",
	        viewtitle: "查看所选记录"
	    },
	    col : {
	        caption: "选择列",
	        bSubmit: "确定",
	        bCancel: "取消"
	    },
	    errors : {
	        errcap : "错误",
	        nourl : "没有设置url",
	        norecords: "没有要处理的记录",
	        model : "colNames 和 colModel 长度不等！"
	    },
	    formatter : {
	        integer : {thousandsSeparator: ",", defaultValue: '0'},
	        number : {decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, defaultValue: '0.00'},
	        currency : {decimalSeparator:".", thousandsSeparator: ",", decimalPlaces: 2, prefix: "", suffix:"", defaultValue: '0.00'},
	        date : {
	            dayNames:   [
	                "日", "一", "二", "三", "四", "五", "六",
	                "星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六",
	            ],
	            monthNames: [
	                "一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二",
	                "一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"
	            ],
	            AmPm : ["am","pm","上午","下午"],
	            S: function (j) {return j < 11 || j > 13 ? ['st', 'nd', 'rd', 'th'][Math.min((j - 1) % 10, 3)] : 'th';},
	            srcformat: 'Y-m-d',
	            newformat: 'Y-m-d',
	            parseRe : /[Tt\\\/:_;.,\t\s-]/,
	            masks : {
	                // see http://php.net/manual/en/function.date.php for PHP format used in jqGrid
	                // and see http://docs.jquery.com/UI/Datepicker/formatDate
	                // and https://github.com/jquery/globalize#dates for alternative formats used frequently
	                // one can find on https://github.com/jquery/globalize/tree/master/lib/cultures many
	                // information about date, time, numbers and currency formats used in different countries
	                // one should just convert the information in PHP format
	                ISO8601Long:"Y-m-d H:i:s",
	                ISO8601Short:"Y-m-d",
	                // short date:
	                //    n - Numeric representation of a month, without leading zeros
	                //    j - Day of the month without leading zeros
	                //    Y - A full numeric representation of a year, 4 digits
	                // example: 3/1/2012 which means 1 March 2012
	                ShortDate: "n/j/Y", // in jQuery UI Datepicker: "M/d/yyyy"
	                // long date:
	                //    l - A full textual representation of the day of the week
	                //    F - A full textual representation of a month
	                //    d - Day of the month, 2 digits with leading zeros
	                //    Y - A full numeric representation of a year, 4 digits
	                LongDate: "l, F d, Y", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy"
	                // long date with long time:
	                //    l - A full textual representation of the day of the week
	                //    F - A full textual representation of a month
	                //    d - Day of the month, 2 digits with leading zeros
	                //    Y - A full numeric representation of a year, 4 digits
	                //    g - 12-hour format of an hour without leading zeros
	                //    i - Minutes with leading zeros
	                //    s - Seconds, with leading zeros
	                //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
	                FullDateTime: "l, F d, Y g:i:s A", // in jQuery UI Datepicker: "dddd, MMMM dd, yyyy h:mm:ss tt"
	                // month day:
	                //    F - A full textual representation of a month
	                //    d - Day of the month, 2 digits with leading zeros
	                MonthDay: "F d", // in jQuery UI Datepicker: "MMMM dd"
	                // short time (without seconds)
	                //    g - 12-hour format of an hour without leading zeros
	                //    i - Minutes with leading zeros
	                //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
	                ShortTime: "g:i A", // in jQuery UI Datepicker: "h:mm tt"
	                // long time (with seconds)
	                //    g - 12-hour format of an hour without leading zeros
	                //    i - Minutes with leading zeros
	                //    s - Seconds, with leading zeros
	                //    A - Uppercase Ante meridiem and Post meridiem (AM or PM)
	                LongTime: "g:i:s A", // in jQuery UI Datepicker: "h:mm:ss tt"
	                SortableDateTime: "Y-m-d\\TH:i:s",
	                UniversalSortableDateTime: "Y-m-d H:i:sO",
	                // month with year
	                //    Y - A full numeric representation of a year, 4 digits
	                //    F - A full textual representation of a month
	                YearMonth: "F, Y" // in jQuery UI Datepicker: "MMMM, yyyy"
	            },
	            reformatAfterEdit : false
	        },
	        baseLinkUrl: '',
	        showAction: '',
	        target: '',
	        checkbox : {disabled:true},
	        idName : 'id'
	    }
	});
	return that;
});
/**
 * 进度条控件
 * @author Mr.T
 */
define('app/widgets/app-progressbar',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options'], function($, App, Options) {
	
	'use strict';
	/**
	 * @class 
	 * @classdesc 进度条
	 * @name progressbar
	 * @desc 进度条的初始化方法
	 * @param {input} input 要渲染的input组件
	 * @param {object} options 组件的选项设置 
	 * @author Mr.T
	 */
	var ProgressBar = function (input, options) {
		this.$input = $(input).css('display','none');
		this.options = options;
		this._init();
		
	};
	ProgressBar.prototype = {
		constructor: ProgressBar,
		/**
		 * 初始化
		 */
		_init: function(){
			this._initOptions();
			this._wrapper();
		},
		_wrapper: function(){
			var s = this.setting
				,percent = this.getPercent()
				,perExp = '';
			if(parseInt(s.height) > 16){
				perExp = '<span style="color:' + s.color + ';">' + percent + '%</span>';
			}
			this.$element = $('<div style="width:' + s.width + ';height:' + s.height + ';" class="app-progressbar ' 
										+ (s.striped ? 'activebar stripedbar' : '') + '">' +
								'<div style="width: ' + percent + '%;background-color:' + s['background-color'] 
									+ ';"></div>' +	perExp +
				 			'</div>').insertAfter(this.$input);
		},
		/**
		 * 初始化配置
		 */
		_initOptions: function(){
			var attrs = {}
				,ia = this.$input[0].attributes;
			if(ia){
				// 继承html的原有属性
				$.each(ia, function(i, att){
					if(att.value == 'true'){
						attrs[att.name] = true;
					}else if(att.value == 'false'){
						attrs[att.name] = false;
					}else{
						attrs[att.name] = att.value;
					}
				});
			}
			var s = this.setting = $.extend({}, Options.appDefaults.progressbar, attrs, this.options);
			s.value = parseInt(s.value);
			s.max = parseInt(s.max);
		},
		/**
		 * 获取进度百分比保留两位小数=当前值/最大值 * 100
		 * @return {Number} number 组件的进度
		 * @example $('#demo').progressbar('getPercent');
		 * @memberof progressbar
		 * @instance
		 */
		getPercent: function(){
			return (this.setting.value / this.setting.max * 100).toFixed(2);
		},
		/**
		 * 设置值
		 * @param val
		 */
		_setValue: function(val){
			this.setting.value = val;
			var percent = this.getPercent()+'%';
			this.$element.find('>div').css('width',percent);
			this.$element.find('>span').html(percent);
		},
		/**
		 * 设置进度值
		 * @param {Number} val 组件的进度
		 * @example $('#demo').progressbar('setValue', 15);
		 * @memberof progressbar
		 * @instance
		 */
		setValue: function(val){
			var s = this.setting;
			if(isNaN(val)){
				return;
			}
			if(val < 0){
				val = 0;
			}
			if(val > s.max){
				val = s.max;
			}
			this._setValue(val);
		},
		/**
		 * 开始动画
		 * @example $('#demo').progressbar('active');
		 * @memberof progressbar
		 * @instance
		 */
		active: function(){
			this.$element.addClass('activebar');
		},
		/**
		 * 停止动画
		 * @example $('#demo').progressbar('unactive');
		 * @memberof progressbar
		 * @instance
		 */
		unactive: function(){
			this.$element.removeClass('activebar');
		},
		/**
		 * 获取当前进度
		 * @returns {Number} number 当前进度值
		 * @example $('#demo').progressbar('getValue');
		 * @memberof progressbar
		 * @instance
		 */
		getValue: function(){
			return this.setting.value;
		},
		/**
		 * 设置最大的进度值
		 * @param {Number} max 最大的进度值
		 * @example $('#demo').progressbar('setMax', 200);
		 * @memberof progressbar
		 * @instance
		 */
		setMax: function(max){
			if(!isNaN(max) && max > 0){
				this.setting.max = max;
				this.setValue(this.setting.value);
			}
		},
		/**
		 * 获取最大的进度值
		 * @return {Number} max 最大的进度值
		 * @example $('#demo').progressbar('getMax');
		 * @memberof progressbar
		 * @instance
		 */
		getMax: function(){
			return this.setting.max;
		},
		destroy: function(){
			
		}
	};
	$.fn.progressbar = function (option, value) {
		var methodReturn = undefined;
		this.each(function () {
			var $this = $(this)
				,data = $this.data('progressbar')
				,options = typeof option === 'object' && option;
			if (!data) $this.data('progressbar', (data = new ProgressBar(this, options)));
			if (typeof option === 'string') methodReturn = data[option](value);
		});
		return methodReturn;
	};

	$.fn.progressbar.Constructor = ProgressBar;
	return ProgressBar;
});

define('app/widgets/app-resizable',["app/core/app-jquery"], function($){

	$.fn.resizable = function(options){
		function resize(e){
			var resizeData = e.data;
			var options = $.data(resizeData.target, 'resizable').options;
			if (resizeData.dir.indexOf('e') != -1) {
				var width = resizeData.startWidth + e.pageX - resizeData.startX;
				width = Math.min(
							Math.max(width, options.minWidth),
							options.maxWidth
						);
				resizeData.width = width;
			}
			if (resizeData.dir.indexOf('s') != -1) {
				var height = resizeData.startHeight + e.pageY - resizeData.startY;
				height = Math.min(
						Math.max(height, options.minHeight),
						options.maxHeight
				);
				resizeData.height = height;
			}
			if (resizeData.dir.indexOf('w') != -1) {
				resizeData.width = resizeData.startWidth - e.pageX + resizeData.startX;
				if (resizeData.width >= options.minWidth && resizeData.width <= options.maxWidth) {
					resizeData.left = resizeData.startLeft + e.pageX - resizeData.startX;
				}
			}
			if (resizeData.dir.indexOf('n') != -1) {
				resizeData.height = resizeData.startHeight - e.pageY + resizeData.startY;
				if (resizeData.height >= options.minHeight && resizeData.height <= options.maxHeight) {
					resizeData.top = resizeData.startTop + e.pageY - resizeData.startY;
				}
			}
		}
		
		function applySize(e){
			var resizeData = e.data;
			var target = resizeData.target;
			if ($.boxModel == true){
				$(target).css({
					width: resizeData.width - resizeData.deltaWidth,
					height: resizeData.height - resizeData.deltaHeight,
					left: resizeData.left,
					top: resizeData.top
				});
			} else {
				$(target).css({
					width: resizeData.width,
					height: resizeData.height,
					left: resizeData.left,
					top: resizeData.top
				});
			}
		}
		
		function doDown(e){
			$.data(e.data.target, 'resizable').options.onStartResize.call(e.data.target, e);
			return false;
		}
		
		function doMove(e){
			resize(e);
			if ($.data(e.data.target, 'resizable').options.onResize.call(e.data.target, e) != false){
				applySize(e)
			}
			return false;
		}
		
		function doUp(e){
			resize(e, true);
			applySize(e);
			$(document).unbind('.resizable');
			$.data(e.data.target, 'resizable').options.onStopResize.call(e.data.target, e);
			return false;
		}
		
		return this.each(function(){
			var opts = null;
			var state = $.data(this, 'resizable');
			if (state) {
				$(this).unbind('.resizable');
				opts = $.extend(state.options, options || {});
			} else {
				opts = $.extend({}, $.fn.resizable.defaults, options || {});
			}
			
			if (opts.disabled == true) {
				return;
			}
			
			$.data(this, 'resizable', {
				options: opts
			});
			
			var target = this;
			
			// bind mouse event using namespace resizable
			$(this).bind('mousemove.resizable', onMouseMove)
				   .bind('mousedown.resizable', onMouseDown);
			
			function onMouseMove(e) {
				var dir = getDirection(e);
				if (dir == '') {
					$(target).css('cursor', 'default');
				} else {
					$(target).css('cursor', dir + '-resize');
				}
			}
			
			function onMouseDown(e) {
				var dir = getDirection(e);
				if (dir == '') return;
				
				var data = {
					target: this,
					dir: dir,
					startLeft: getCssValue('left'),
					startTop: getCssValue('top'),
					left: getCssValue('left'),
					top: getCssValue('top'),
					startX: e.pageX,
					startY: e.pageY,
					startWidth: $(target).outerWidth(),
					startHeight: $(target).outerHeight(),
					width: $(target).outerWidth(),
					height: $(target).outerHeight(),
					deltaWidth: $(target).outerWidth() - $(target).width(),
					deltaHeight: $(target).outerHeight() - $(target).height()
				};
				$(document).bind('mousedown.resizable', data, doDown);
				$(document).bind('mousemove.resizable', data, doMove);
				$(document).bind('mouseup.resizable', data, doUp);
			}
			
			// get the resize direction
			function getDirection(e) {
				var dir = '';
				var offset = $(target).offset();
				var width = $(target).outerWidth();
				var height = $(target).outerHeight();
				var edge = opts.edge;
				if (e.pageY > offset.top && e.pageY < offset.top + edge) {
					dir += 'n';
				} else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
					dir += 's';
				}
				if (e.pageX > offset.left && e.pageX < offset.left + edge) {
					dir += 'w';
				} else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
					dir += 'e';
				}
				
				var handles = opts.handles.split(',');
				for(var i=0; i<handles.length; i++) {
					var handle = handles[i].replace(/(^\s*)|(\s*$)/g, '');
					if (handle == 'all' || handle == dir) {
						return dir;
					}
				}
				return '';
			}
			
			function getCssValue(css) {
				var val = parseInt($(target).css(css));
				if (isNaN(val)) {
					return 0;
				} else {
					return val;
				}
			}
			
		});
	};
	
	$.fn.resizable.defaults = {
			disabled:false,
			handles:'n, e, s, w, ne, se, sw, nw, all',
			minWidth: 10,
			minHeight: 10,
			maxWidth: 10000,//$(document).width(),
			maxHeight: 10000,//$(document).height(),
			edge:5,
			onStartResize: function(e){},
			onResize: function(e){},
			onStopResize: function(e){}
	};
	
});
// JavaScript Document
define('app/widgets/app-scroll',["app/core/app-jquery","app/core/app-core"],function($,$A) {

	 /* SCROLLSPY CLASS DEFINITION
	  * ========================== */

	  function ScrollSpy(element) {
		  var $element=$(element)
		  	,target = $element.attr("target")
		  	,$target = $A(target);
		  this.$element = $element;
		  if($target.length == 0){
			  $target=$A();
		  };
		  if($target.is(document)){
			  $target=$(window);
		  };
		  this.options = $.extend({}, $.fn.scrollspy.defaults, $A.options.scrollspy);
		  var process = $.proxy(this.process, this);
		  this.$scrollElement = $target.on('scroll.scroll-spy.data-api', process);
		  this.selector = 'ul>li> a';
		  this.$body = $('body');
		  this.refresh();
		  this.process();
	  }

	  ScrollSpy.prototype = {

	      constructor: ScrollSpy

	    , refresh: function () {
	        var self = this;
	        this.offsets = $([]);
	        this.targets = $([]);
	        $targets = this.$element.find(this.selector)
	        	.map(function () {
	        		var $el = $(this)
	        		,href = $el.data('target') || $el.attr('href')
	        		,$href = /^#\w/.test(href) && $(href);
	        		return ( $href && $href.length
	        				&& [[ $href.position().top + (!$.isWindow(self.$scrollElement.get(0)) && (self.$scrollElement.scrollTop())-self.$scrollElement.position().top), href ]] ) || null;
	        	})
	        	.sort(function (a, b) { return a[0] - b[0];})
	        	.each(function () {
	        		self.offsets.push(this[0]);
	        		self.targets.push(this[1]);
	        	});
	      }

	    , process: function () {
	        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
	          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
	          , maxScroll = scrollHeight - this.$scrollElement.height()
	          , offsets = this.offsets
	          , targets = this.targets
	          , activeTarget = this.activeTarget
	          , i;

	        if (scrollTop >= maxScroll) {
	          return activeTarget != (i = targets.last()[0])
	            && this.activate ( i );
	        }
	        if (scrollTop <= this.offsets[0]) {
	          return activeTarget != (i = targets.first()[0])
	            && this.activate ( i );
	        }
	        for (i = offsets.length; i--;) {
	          activeTarget != targets[i]
	            && scrollTop >= offsets[i]-50
	            && (!offsets[i + 1] || scrollTop <= offsets[i + 1]-50)
	            && this.activate( targets[i] );
	        }
	      }

	    , activate: function (target) {
	        this.activeTarget = target;
	        var $items = this.$element.find(this.selector);
	        $items.parent('.active').removeClass('active');

	        var $active = $items.filter('[data-target="' + target + '"],[href="' + target + '"]');
	        $active.parent('li').addClass('active');
	        $active.trigger('activate');
	      }

	  };


	 /* SCROLLSPY PLUGIN DEFINITION
	  * =========================== */
	  $.fn.scrollspy = function (option) {
	    return this.each(function () {
	      var $this = $(this)
	        , data = $this.data('scrollspy')
	        , options = typeof option == 'object' && option;
	      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)));
	      if (typeof option == 'string') data[option]();
	    });
	  };

	  $.fn.scrollspy.Constructor = ScrollSpy;
	  $.fn.scrollspy.defaults = {offset: 30};
	
});

define('app/widgets/app-scrolltable',[], function() {
	function ScrollTable($div,options){
		var DefaultSetting = {
			"scrollHeight":170,//滚动内容的高度
			"timer":1000*3,//每过10秒滚动一次
			"startRowIndex":0,//从第多少条记录开始滚动
			"columns":[]//数据列定义
		};
		
		this.$div = $div;
		this.data = [];
		this.loading = false;
		this.running = false;
		this.status = 0;//0
		
		if(!options){
			options = {};
		}
		this.setting = $.extend(DefaultSetting,options);
		this.pageIndex = 0;
		this.threadId = new Date().getTime();
		this._init();
	};
	
	ScrollTable.prototype._init = function(){
		this.$div.data("scrollTable",this);
		this.$div.data("scrollTable_threadId",this.threadId);
		this.$div.find(".scrollTable_body").height(this.setting.scrollHeight);
		this.$div.find(".scrollTable_body").hover(function(){
			$(this).addClass("pause");
		},function(){
			$(this).removeClass("pause");
		});
		this.$div.find(".scrollTable_header table tbody").append(this._createTitle());
	};
	
	ScrollTable.prototype.stop = function(){
		this.running = false;
	};
	
	ScrollTable.prototype.start = function(){
		this.running = true;
		var scrollTable = this;
		(function(){
			//检查元素是否还在
			var $scrollTable = $(".scrollTable").filter(function(){
				return $(this).data("scrollTable_threadId")==scrollTable.threadId;
			});
			if($scrollTable.length==0){
				return;
			}
			
			var $div = scrollTable.$div;
			var setting = scrollTable.setting;
			var running = scrollTable.running;
			var pause = scrollTable.$div.find(".scrollTable_body").hasClass("pause");
			
			if(!running){
				return;
			}
			if(scrollTable.loading){
				scrollTable.reset();
				scrollTable.loading = false;
			}
			if(!pause){
				var rowCount = $div.find(".scrollTable_scrollContent table tr").length;
//				var scrollHeight = setting.rowHeight*setting.scrollRowCount;
				//一共多少页
				var maxPage = (function(rowCount,pageRowCount){
					var tmp = rowCount%pageRowCount;
					var result = (rowCount-tmp)/pageRowCount;
					if(tmp>0){
						result ++;
					}
					return result;
				})(rowCount,setting.scrollRowCount);
				if(scrollTable.pageIndex>=maxPage){
					scrollTable.pageIndex = 0;
					$div.find(".scrollTable_scrollContent").css("top","0px");
				}else{
					if(maxPage>0){
						var $tr = $div.find(".scrollTable_scrollContent table tr:eq("+(scrollTable.pageIndex*setting.scrollRowCount)+")");
//						var scrollTop =scrollTable.pageIndex*scrollHeight;
						var scrollTop = $tr.position().top;
						$div.find(".scrollTable_scrollContent").animate({
							"top":"-"+scrollTop+"px"
						},500);
					}
				}
				scrollTable.pageIndex++;
			}
			setTimeout(arguments.callee, setting.timer);
		})();
	};
	
	ScrollTable.prototype.loadData = function(data){
		this.data = data;
		this.loading = true;
	};
	
	ScrollTable.prototype.reset = function(){
		this.pageIndex = 0;
		var $tbody = this.$div.find(".scrollTable_scrollContent table tbody");
		$tbody.empty();
		for(var i=0,n=this.data.length;i<n;i++){
			$tbody.append(this._createRow(this.data[i]));
		}
		this.$div.find(".scrollTable_scrollContent").css("top","0px");
	};
	
//	ScrollTable.prototype._createCell = function(){
//		var $td = $("<td><div></div></td>");
//		$td.find("div").text(value);
//		return $td;
//	};
	ScrollTable.prototype._createRow = function(rowData){
		var $tr = $("<tr></tr>");
		for(var i=0;i<this.setting.columns.length;i++){
			var $td = $("<td><div></div></td>");
			$td.css("width",this.setting.columns[i].width);
			if(rowData[this.setting.columns[i].name]){
				var format = this.setting.columns[i].format;
				if(!format){
					format = function(val,rowData){
						return val;
					};
				}
				var val = format(rowData[this.setting.columns[i].name],rowData);
				if(val===undefined || val===null){
					val = "";
				}
				if(this.setting.columns[i].style){
					$td.find(">div").attr("style",this.setting.columns[i].style);
				}
				$td.find("div").text(val);
			}
			$tr.append($td);
		}
		return $tr;
	};
	
	ScrollTable.prototype._createTitle = function(){
		var $tr = $("<tr></tr>");
		for(var i=0;i<this.setting.columns.length;i++){
			var $th = $("<th></th>");
			$th.text(this.setting.columns[i].title);
			$th.css("width",this.setting.columns[i].width);
			$tr.append($th);
		}
		return $tr;
	};
	

	$.fn.ScrollTable = function(option,value){
		var result = undefined;
		this.each(function () {
			var $this = $(this);
			var scrollTable = $this.data('scrollTable');
			
			var options = typeof option === 'object' && option;
			if(!scrollTable){
				scrollTable = new ScrollTable($this,options);
			}
			if (typeof option === 'string') {
				result = scrollTable[option](value);
			}
		});
		return result;
	};
	
	return ScrollTable;
});
/**
 * 下拉面板控件--继承Textbox
 * @author Mr.T
 */
define('app/widgets/form/app-checkbox',['app/core/app-base', 'app/core/app-jquery', 'app/core/app-core', 'app/core/app-options',
        'app/data/app-ajax'], function(Base, $, App, Options, AppAjax) {

	'use strict';
	
	/**
	 * @abstract
	 * @class 
	 * @classdesc 复选框
	 * @name checkbox-class
	 * @desc 复选框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 */
	var Checkbox = Base.extend({
		initialize: function(input, options) {
			this.$input = $(input);
			if(!options){
				options = {};
			}
			this.options = options; 
			this.setting = $.extend({}, Options.appDefaults.Checkbox, App.getAttrFromElement(this.$input), this.options);
			this._init();
		},
		_init: function(){
			this._initOptions();
			this._wrapDiv();
			this._initData();
			this._registEvent();
			if($.isFunction(this.setting.onClick)){
				this.on('onClick', this.setting.onClick);
			}
			if(this.setting.disabled){
				this.disable();
			}
		},
		_initOptions: function(){
			if(this.setting.id == undefined){
				this.setting.id = App.uuid();
			}
			if(this.setting.name == undefined){
				this.setting.name = App.uuid();
			}
		},
		_initData: function(){
			if(this.setting.data){
				this._render$Node(this.setting.data);
			}else{
				this.reload();
			}
		},
		_registEvent: function(){
			var that = this;
			this.$element.on('click.checkbox.api', 'input[type=checkbox]', function(e){
				var checkedLen = parseInt(that.setting.checkedLen);
				if(checkedLen == 1){
					that.$element.find('input[type=checkbox]').prop('checked', false);
					$(this).prop('checked', true);
				}else if(checkedLen > 1){
					/**
					 * 点击复选框时触发
					 * @event checkbox-class#onClick
					 * @param {e} e 点击事件
					 */
					var checked = this.checked;
					if(checked && $.isNumeric(that.setting.checkedLen)){//控制最多可选中项数量
						var val = that.getValue();
						if(val && val.split(',').length > that.setting.checkedLen){//超过数据,不选中且不触发onClick
							$(this).prop("checked", false);
							return;
						}
					}
				}
				that.trigger('onClick', e);
			});
		},
		/**
		 * 获取被勾选的项的隐藏值
		 * @returns {Array} result 数组
		 * @example $('#demo').checkbox('getValue');
		 * @memberof checkbox-class
		 * @instance
		 */
		getValue: function(){
			var $node =  this.$element.find('input:checked')
				,vs = [];
			$node.each(function(){
				vs.push(this.value);				
			});
			return vs.join(',');
		},
		/**
		 * 设置勾选的项
		 * @example $('#demo').checkbox('setValue', 1,2);
		 * @example $('#demo').checkbox('setValue', [1,2]);
		 * @memberof checkbox-class
		 * @instance
		 */
		setValue: function(vals){
			if(!$.isArray(vals)){
				if(typeof(vals) == 'string'){
					vals = vals.split(',');
				}else{
					vals = '' + vals;
				}
			}
			this.clearValue();
			for(var i = 0; i < vals.length; i++){
				this.$element.find('input[value="' + vals[i] + '"]').prop('checked', true);
			}
		},
		setText: function(){
		},
		focus: function(){
		},
		/**
		 * 获取被勾选项的显示值
		 * @returns {Array} result 数组
		 * @example $('#demo').checkbox('getValue');
		 * @memberof checkbox-class
		 * @instance
		 */
		getText: function(){
			if($.isFunction(this.setting.textFormatter)){
				var value = this.getValue();
				return this.setting.textFormatter(value);
			}else{
				var $node =  this.$element.find('input:checked')
					,vs = [];
				$node.each(function(){
					vs.push($(this).attr('title'));				
				});
				return vs.join(',');
			}
		},
		/**
		 * 重新载入选择项数据
		 * @example $('#demo').checkbox('reload');
		 * @example $('#demo').checkbox('reload', 'a.do');
		 * @example $('#demo').checkbox('reload', [{id:'1',name:'石山水'},{id:'12',name:'凤飞飞'}]);
		 * @memberof checkbox-class
		 * @instance
		 */
		reload: function(option){
			if($.isArray(option)){
				this.loadData(option);
				return;
			}
			if(option){
				this.setting.url = option;
			}else if(!this.setting.url){
				return;
			}
			var that = this;
			AppAjax.ajaxCall({
				url: this.setting.url,
				dataType: 'json',
				type: 'POST',
				success: function(data){
					that.setting.data = data;
					that.$element.find('.checkboxDiv').remove();
					that._render$Node(data);
				}
			});	
		},
		/**
		 * 载入选择项数据
		 * @example $('#demo').checkbox('loadData', [{id:'1',name:'石山水'},{id:'12',name:'凤飞飞'}]);
		 * @memberof checkbox-class
		 * @instance
		 */
		loadData: function(data){
			this.$element.find('.checkboxDiv').remove();
			this._render$Node(data);
		},
		/**
		 * 禁用组件
		 * @todo 使用一个遮罩将组件屏蔽住
		 * @example $('#demo').checkbox('disable');
		 * @memberof checkbox-class
		 * @instance
		 */
		disable: function(){
			if(this.$disabledMask == undefined){
				this.$disabledMask = $('<div class="wrapper-disabled-mask"></div>');
				this.$element.append(this.$disabledMask);
			}else{
				this.$disabledMask.show();
			}
			this.$element.addClass('wrapper-disabled');
		},
		/**
		 * 启用组件
		 * @todo 将遮罩移除
		 * @example $('#demo').checkbox('enable');
		 * @memberof checkbox-class
		 * @instance
		 */
		enable: function(){
			if(this.$disabledMask){
				this.$disabledMask.hide();
			}
			this.$element.removeClass('wrapper-disabled');
		},
		/**
		 * 切换可用状态
		 * @memberof checkbox-class
		 * @instance
		 */
		toggleEnable: function(){
			if(this.$disabledMask && this.$disabledMask.is(':visible')){
				this.enable();
			}else{
				this.disable();
			}
		},
		/**
		 * 清除值
		 * @todo 清除显示值
		 * @todo 清除隐藏值
		 * @example $('#demo').checkbox('clearValue');
		 * @memberof checkbox-class
		 * @instance
		 */
		clearValue: function(){
			this.$element.find('input:checked').prop('checked', false);
		},
		_wrapDiv: function(){
			this.$input.css('display', 'none');
			this.$input.wrap('<div class="multipleboxDiv ' + this.setting.orient + '" style="' + this.setting.style + '"></div>');
			this.$element = this.$input.parent();
		},
		_render$Node: function(data){
			var nodesHtml = ''
				,id = this.setting.id
				,name = this.setting.name
				,vf = this.setting.valuefield
				,tf = this.setting.textfield;
			for (var i = 0; i < data.length; i++) {
				var node = data[i];
				nodesHtml += '<div class="checkboxDiv">' +
								'<input type="checkbox"' +
									'id="' + id + i + '"' +
									'name="' + id + '"' +
									'value="' + node[vf] + '"' + 
									'title="' + node[tf] + '"' +
									(node.checked ? 'checked="true"' : '') + 
								'/>' + 
								'<label for="' + id + i + '">' + node[tf] + '</label>' +
							'</div>';
			}
			this.$element.append($(nodesHtml));
		}
	});
	$.fn.checkbox = function(option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'checkbox';
		this.each(function() {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Checkbox(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};

	$.fn.checkbox.Constructor = Checkbox;
	return Checkbox;
});
/**
 * 下拉面板控件
 */
define('app/widgets/form/app-comp',['app/core/app-jquery','app/core/app-core','app/widgets/form/app-combobox'],function($,$A) {
	
	function setSimpleValue(v){
		$(this).val(v);
	};
	function getSimpleValue(){
		return $(this).val();
	};
	function setBoxValue(v){
		var $this = $(this);
		if($this.attr("type")=="radio"){
			$this.each(function(){
				var $t = $(this);
				if($t.val()==v){
					$t.attr('checked', 'true');
					return false;
				}
			});
		}else{
			v = ","+v+",";
			$this.each(function(){
				var $t = $(this),val=$t.val();
				if(v.indexOf(","+val+",")>-1){
					$t.attr('checked', 'true');
				}else{
					$t.removeAttr('checked');
				}
			});
		}
	};
	function getBoxValue(){
		var rs = new Array;
		$(this).filter(":checked").each(function(){
			rs.push($(this).val());
		});
		if(rs.length == 0)
			return null;
		return rs.join(",");
	};
	function setWrapperValue(v,type){
		$(this)[type]("setValue",v);
	};
	function getWrapperValue(type){
		return $(this)[type]("getValue");
	};
	function setWrapperText(t,type){
		$(this)[type]("setText",t);
	};
	function getWrapperText(type){
		return $(this)[type]("getText");
	};
	function setParameter(t,type){
		$(this)[type]("setParameter",t);
	};
	function clearSimpleValue(){
		$(this).val('');
	};
	function clearValue(v,type){
		$(this)[type]("clearValue");
	};
	var getValues = {
		hidden:getSimpleValue,
		textfield:getSimpleValue,
		textbox:getWrapperValue,
		textarea:getSimpleValue,
		datetime:getWrapperValue,
		money:getWrapperValue,
		number:getWrapperValue,
		combobox:getWrapperValue,
		comboztree:getWrapperValue,
		combogrid:getWrapperValue,
		reference:getWrapperValue,
		suggest:getWrapperValue,
		typeahead:getSimpleValue,
		radio:getBoxValue,
		checkbox:getBoxValue
	};
	var setValues = {
		hidden:setSimpleValue,
		textfield:setSimpleValue,
		textarea:setSimpleValue,
		textbox:setWrapperValue,
		datetime:setWrapperValue,
		money:setWrapperValue,
		number:setWrapperValue,
		combobox:setWrapperValue,
		comboztree:setWrapperValue,
		combogrid:setWrapperValue,
		reference:setWrapperValue,
		suggest:setWrapperValue,
		typeahead:setSimpleValue,
		radio:setBoxValue,
		checkbox:setBoxValue
	};
	var getTexts = {
		hidden:getSimpleValue,
		textfield:getSimpleValue,
		textarea:getSimpleValue,
		textbox:getSimpleValue,
		money:getWrapperText,
		number:getWrapperText,
		datetime:getWrapperText,
		combobox:getWrapperText,
		comboztree:getWrapperText,
		combogrid:getWrapperText,
		reference:getWrapperText,
		suggest:getWrapperText,
		typeahead:getWrapperText
	};
	var setTexts = {
		datetime:setWrapperText,
		combobox:setWrapperText,
		comboztree:setWrapperText,
		combogrid:setWrapperText,
		reference:setWrapperText,
		suggest:setWrapperText,
		typeahead:setSimpleValue
	};

	var setParams = {
		textbox:setParameter,
		combobox:setParameter,
		comboztree:setParameter,
		combogrid:setParameter,
		reference:setParameter,
		suggest:setParameter
	};
	var clearValues = {
		hidden:clearSimpleValue,
		textfield:clearSimpleValue,
		textbox:clearValue,
		textarea:clearSimpleValue,
		money:clearValue,
		number:clearValue,
		datetime:clearValue,
		combobox:clearValue,
		comboztree:clearValue,
		combogrid:clearValue,
		reference:clearValue,
		suggest:clearValue,
		typeahead:clearSimpleValue
	};
	function filterComponents($elements){
		var filterType = null;
		return $elements.filter(function(){
			var $this = $(this)
			,type = $this.attr("type");
			if($this.parent().hasClass("app-number")){
				return !filterType;
			}
			if($this.parent().hasClass("app-money")){
				return !filterType;
			}
			if($this.parent().hasClass("app-datetime")){
				return !filterType;
			}
			if($this.parent().hasClass("app-textbox")){
				return !filterType;
			}
			if($this.parent().hasClass("app-combobox")){
				return !filterType;
			}
			if($this.parent().hasClass("app-reference")){
				return !filterType;
			}
			if($this.parent().hasClass("app-comboztree")){
				return !filterType;
			}
			if($this.parent().hasClass("app-combogrid")){
				return !filterType;
			}
			if($this.parent().hasClass("app-suggest")){
				returnType="suggest";
				return !filterType;
			}
			if($this.parent().hasClass("app-typeahead")){
				return !filterType;
			}
			if(type == "textfield" || type == "textarea" || type=="hidden"){
				return !filterType;
			}
			if($this.is("textarea")){
				return !filterType;
			}
			if(type=="radio"||type=="checkbox"){
				if(filterType == null)
					filterType = type;
				if(filterType == type)
					return true;
			}
			return false;
		});
	}
	function setCompAttr($element,methods,v){
		var eles = filterComponents($element);
		if(eles.length == 0)
			return;
		var type = $(eles[0]).getCompType();
		if(type == null)
			return;
		var m = methods[type];
		if(m == null)
			return;
		m.call(eles,v,type);
	}
	function getCompAttr($element,methods){
		var eles = filterComponents($element);
		if(eles.length == 0)
			return;
		var type = $(eles[0]).getCompType();
		if(type == null)
			return;
		var m = methods[type];
		if(m == null)
			return;
		return m.call(eles,type);
	}
	$.extend($.fn,{
		/**
		 * 取得组件类型
		 * @return {string} 组件类型
		 */
		getCompType:function(){
			var returnType = null;
			$(this).each(function(){
				var $this = $(this)
				,type = $this.attr("type");
				if($this.parent().hasClass("app-datetime")){
					returnType="datetime";
					return false;
				}
				if($this.parent().hasClass("app-number")){
					returnType="number";
					return false;
				}
				if($this.parent().hasClass("app-money")){
					returnType="money";
					return false;
				}
				if($this.parent().hasClass("app-textbox")){
					returnType="textbox";
					return false;
				}
				if($this.parent().hasClass("app-combobox")){
					returnType="combobox";
					return false;
				}
				if($this.parent().hasClass("app-reference")){
					returnType="reference";
					return false;
				}
				if($this.parent().hasClass("app-comboztree")){
					returnType="comboztree";
					return false;
				}
				if($this.parent().hasClass("app-combogrid")){
					returnType="combogrid";
					return false;
				}
				if($this.parent().hasClass("app-suggest")){
					returnType="suggest";
					return false;
				}
				if($this.parent().hasClass("app-typeahead")){
					returnType="typeahead";
					return false;
				}
				if(type == "textfield" || type == "textarea" || type=="hidden"||type=="radio"||type=="checkbox"){
					returnType=type;
					return false;
				}
				if($this.is("textarea")){
					returnType="textarea";
					return false;
				}
			});
			return returnType;
		},
		
		/**
		 * 取得组件类型
		 */
		isTriggerChange:function(){
			$(this).attr("type") != "wrapper";
		},
		/**
		 * 取得组件显示值
		 */
		getCompText:function(){
			return getCompAttr(this,getTexts);
		},
		/**
		 * 设置组件显示值
		 */
		setCompText:function(v){
			setCompAttr(this,setTexts,v);
		},
		/**
		 * 取得组件值
		 */
		getCompValue:function(){
			return getCompAttr(this,getValues);
		},
		/**
		 * 设置组件值
		 */
		setCompValue:function(v){
			setCompAttr(this,setValues,v);
		},
		/**
		 * 取得组件值
		 */
		getCompData:function(){
			var eles = filterComponents($(this));
			if(eles.length == 0)
				return;
			var type = $(eles[0]).getCompType();
			if(type == null)
				return;
			var m = getValues[type];
			if(m == null)
				return;
			var v= m.call(eles,type);
		
			m = getTexts[type];
			if(m == null)
				return {value:v};
			var txt= m.call(eles,type);
			return {value:v,showValue:txt};
		},
		/**
		 * 设置组件值
		 */
		setCompData:function(value,showValue){
			var eles = filterComponents($(this));
			if(eles.length == 0)
				return;
			var type = $(eles[0]).getCompType();
			if(type == null)
				return;
			var m = setValues[type];
			if(m == null)
				return;
			if(value!= null && typeof value == "object" && value.value){
				showValue = value.showValue;
				value = value.value;
			}
			if (value!=null){
				value=value.toString();
			}
			//modify by tw
			m.call(eles,value,type);
			if(showValue !=null ||(value==null && showValue==null)){
				var setTextMethod = setTexts[type];
				if(setTextMethod != null)
					setTextMethod.call(eles,showValue,type);
			}
			//else{
			//	m.call(eles,value,type);
			//}
		},
		/**
		 * 设置参数值
		 */
		setCompParameter:function(v){
			setCompAttr(this,setParams,v);
		},
		/**
		 * 设置参数值
		 */
		clearCompValue:function(){
			setCompAttr(this,clearValues);
		}
	});
	return $;
});
	
/**
 * 表单验证
 * @author Mr.T
 */
define('app/widgets/form/app-validate',["jquery",localeFile,"jquery/jquery.validate","jquery/jquery.metadata"],function($,$lang){
	$.validator.addMethod("alphanumeric", function(value, element) {
		return this.optional(element) || /^\w+$/i.test(value);
	}, "Letters, numbers or underscores only please");
	
	$.validator.addMethod("lettersonly", function(value, element) {
		return this.optional(element) || /^[a-z]+$/i.test(value);
	}, "Letters only please"); 
	
	$.validator.addMethod("phone", function(v, element) {
	    v = v.replace(/\s+/g, ""); 
		return this.optional(element) || v.match(/^[0-9 \(\)]{7,30}$/);
	}, "Please specify a valid phone number");
	
	$.validator.addMethod("postcode", function(v, element) {
	    v = v.replace(/\s+/g, ""); 
		return this.optional(element) || v.match(/^[0-9 A-Za-z]{5,20}$/);
	}, "Please specify a valid postcode");
	
	$.validator.addMethod("date", function(v, element) {
	    v = v.replace(/\s+/g, ""); 
		return this.optional(element) || v.match(/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/);
	});
	// http://docs.jquery.com/Plugins/Validation/Methods/equalTo
	$.validator.addMethod("equalTo",function(value, element, param) {
		// bind to the blur event of the target in order to revalidate whenever the target field is updated
		// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
		var target = $(param);
		if (this.settings.onfocusout) {
			target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
				$(element).valid();
			});
		}
		if($(element).parent().hasClass('app-wrapper')){
			target.unbind(".validate-equalTo").bind("change.validate-equalTo", function() {
				$(element).valid();
			});
		}
		return value === target.val();
	});
	
	$.validator.addMethod("laterThan",function(value, element, param) {
		var target = $(param);
		if (this.settings.onfocusout) {
			target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
				$(element).valid();
			});
		}
		if($(element).parent().hasClass('app-wrapper')){
			target.unbind(".validate-equalTo").bind("change.validate-equalTo", function() {
				$(element).valid();
			});
		}
		return value >= target.val();
	});
	
	// http://docs.jquery.com/Plugins/Validation/Methods/remote
	$.validator.addMethod('remote',function(value, element, param) {
		if ( this.optional(element) ) {
			return "dependency-mismatch";
		}
		var previous = this.previousValue(element);
		if (!this.settings.messages[element.name] ) {
			this.settings.messages[element.name] = {};
		}
		previous.originalMessage = this.settings.messages[element.name].remote;
		this.settings.messages[element.name].remote = previous.message;

		param = typeof param === "string" && {url:param} || param;

		if ( this.pending[element.name] ) {
			return "pending";
		}
		if ( previous.old === value ) {
			return previous.valid;
		}

		previous.old = value;
		var validator = this;
		this.startRequest(element);
		var data = {};
		data[element.name] = value;
		appendParams(data,this,param);
		$.ajax($.extend(true, {
			url: param,
			mode: "abort",
			port: "validate" + element.name,
			dataType: "json",
			data: data,
			success: function(response) {
				validator.settings.messages[element.name].remote = previous.originalMessage;
				var valid = response === true || response === "true";
				if ( valid ) {
					var submitted = validator.formSubmitted;
					validator.prepareElement(element);
					validator.formSubmitted = submitted;
					validator.successList.push(element);
					delete validator.invalid[element.name];
					validator.showErrors();
				} else {
					var errors = {};
					var message = response || validator.defaultMessage( element, "remote" );
					errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
					validator.invalid[element.name] = true;
					validator.showErrors(errors);
				}
				previous.valid = valid;
				validator.stopRequest(element, valid);
			}
		}, param));
		return "pending";
		/**
		 * 扩展方法 追加其他的参数
		 * @param data 原请求参数
		 * @param validator 表单校验器
		 * @param params 参数
		 */
		function appendParams(data,validator,params){
			if(params.withHidden){
				var hidden = $(validator.currentForm).find('input:hidden');
				for(var i = 0; i<hidden.length; i++){
					var h = $(hidden[i]);
					data[h.attr('name')] = h.val();
				}
			}
			var t = $.extend({},params);
			delete t.url;
			$.extend(data,t);
		}
	});
	
	$.validator.addClassRules({
		date: {date: false},
		alphanumeric: { alphanumeric: true },
		lettersonly: { lettersonly: true },
		phone: { phone: true },
		postcode: {postcode: true}
	});
	$.validator.setDefaults({
		highlight:function(element,errorClass,validClass){
			$(element).parents('.form-group:first').addClass(errorClass).removeClass(validClass);
		},
		unhighlight:function(element,errorClass,validClass){
			$grp = $(element).parents('.form-group:first');
			$grp.removeClass(errorClass).removeClass(validClass);
			this.showHelps(element);
		},
		success:function(label,element){
			$grp = $(element).parents('.form-group:first');
			$grp.removeClass("error");
			$grp.addClass("success");
			this.hideHelps(element);
			label.html("<i class='icon icon-green icon-check'></i>");
		},
		/**
		 * 扩展出值改变事件
		 */
		onchange:function(element, event){
			this.element(element);
		},
		invalidHandler:function(form, validator) {
			var list = validator.errorList;
			for(var i=0;i<list.length;i++){
				var el = $(list[i].element);
				var p = el.parent();
				if(p.is('.app-wrapper')){
					p.addClass('errorTarger');
				}else{
					el.addClass('errorTarger');
				}
			}
		},
		errorClass:"error",
		validClass:"success",
		errorElement:"span",
		focusInvalid: false,
		focusCleanup: true,
		ignore: '.ignore',
		onkeyup:$.emptyFunction
	});
	$.validator.autoCreateRanges=true;
	$.extend($.validator.prototype,{
		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {});
			$.each(this.settings.groups, function(key, value) {
				$.each(value.split(/\s/), function(index, name) {
					groups[name] = key;
				});
			});
			var rules = this.settings.rules;
			$.each(rules, function(key, value) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, "");
				if (validator.settings[eventType]) {
					validator.settings[eventType].call(validator, this[0], event);
				}
			}
			$(this.currentForm)
				.validateDelegate(":text, [type='text'], [type='password'], " +
					"[type='showValue'], [type='file'], [type='number'], [type='tel'], " +
					"[type='url'], [type='email'], select, textarea ",
					"focusin focusout keyup", delegate)
				.validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);
			//扩展出App控件
			wrapperDelegate($(this.currentForm));

			/**
			 * 自定义控件进行验证事件的委托
			 * @param $form
			 */
			function wrapperDelegate($form){
				//隐藏值改变触发一次验证
				$form.validateDelegate(".app-wrapper input:first-child", "change", delegate);
				//下拉展开面板触发一次验证
//				var dropBtn = $form.find(".app-wrapper").find('a.wrapper-open');
//				dropBtn.on('click.validate.api',function(){
//					var $value = $(this).parent().children(':first-child')[0];
//					var validator = $.data($value.form, 'validator');
//					validator.settings.onchange.call(validator, $value, event);
//				});
			}
			
			if (this.settings.invalidHandler) {
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
			}
		},
		elementValue: function( element ) {
			var $element = $(element)
				,type = $element.attr('type'),
				val = $element.val();

			if ( type === 'radio' || type === 'checkbox' ) {
				return $('input[name="' + $element.attr('name') + '"]:checked').val();
			}
			var $parent = $element.parent(); 
			//扩展app控件的值获取
			if( $parent.hasClass('app-wrapper') 
					&& $parent.find('input:first-child').data('context').setting.multiple){
				return val.split(',');
			}

			if ( typeof val === 'string' ) {
				return val.replace(/\r/g, "");
			}
			return val;
		},
		showHelps:function(element){
			$(element).parents('.form-group:first').find('.help-inline:not([for]),.help-block:not([for])').show();
		},
		hideHelps:function(element){
			$(element).parents('.form-group:first').find('.help-inline:not([for]),.help-block:not([for])').hide();
		},
		showLabel:function(element, message) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// check if we have a generated label, replace the message then
				if ( label.attr("generated") ) {
					label.html(message);
				}
			} else {
				var cls =$(element).parents('.form-group:first').attr('helpType')=='block'?'help-block':'help-inline';
				// create label
				label = $("<" + this.settings.errorElement + "/>")
					.attr({"for":  this.idOrName(element), generated: true})
					.addClass(cls)
					.html(message || "");
				if ( !this.labelContainer.append(label).length ) {
					if ( this.settings.errorPlacement ) {
						this.settings.errorPlacement(label, $(element) );
					} else {
						defaultPosition(label, $(element));
					}
				}
			}
			if ( !message && this.settings.success ) {
				label.text("");
				if ( typeof this.settings.success === "string" ) {
					label.addClass( this.settings.success );
				} else {
					this.settings.success.call(this,label, element );
				}
			}
			this.toShow = this.toShow.add(label);
			this.hideHelps(element);
			/**
			 * 默认的错误标签显示位置
			 * @param label 错误描述标签
			 * @param $element 出现错误元素
			 */
			function defaultPosition(label, $element){
				var $targer = $element; 
				var $p = $element.parent();
				if($p.hasClass('app-wrapper')){
					$targer = $p;
				}else if($p.parent().hasClass('multipleboxDiv')){
					$targer = $p.parent();
				}
				var wrap = $targer.data('errorWrapper');
				if(!wrap){
					var $wrapper = $('<div class=\"errorWrapper\"><div><div></div></div></div>');
					$wrapper.css('width',$targer.outerWidth());
					$wrapper.appendTo($.$appPanelContainer);
					$targer.data('errorWrapper', $wrapper);
					label.insertBefore($wrapper.find('div div'));
					hoverShowErrors($targer);
				}else{
					wrap.find('div>span').text(label.text());
				}
				/**
				 * 绑定浮动显示错误事件
				 * @param $targer
				 */
				function hoverShowErrors($targer){
					$targer.hover(function(){
						var $this = $(this);
						var $wrapper = $this.data('errorWrapper');
						if($wrapper.text()){
							$this.addClass('errorTarger');
							var css = $this.offset()
								,$thisTop = $this.offset().top;
							css.display = 'block';
							if($thisTop < $wrapper.outerHeight()){
								css.top = css.top + $this.outerHeight();
								$wrapper.addClass('up');
							}else{
								css.top = css.top -  $wrapper.outerHeight();
								$wrapper.removeClass('up');
							}
							$wrapper.css(css);
						}
					},function(){
						var $this = $(this);
						$this.removeClass('errorTarger');
						var $wrapper = $this.data('errorWrapper');
						var css = {display:'none'};
						$wrapper.css(css);
					});
				}
			}
		},
		hideErrors: function() {
			this.showHelps(this.toHide);
			this.addWrapper( this.toHide ).hide();
		},
		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input[type!=showValue], select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this);
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) ) {
					return false;
				}

				rulesCache[this.name] = true;
				return true;
			});
		},
		errors: function() {
			return $( '.errorWrapper', this.errorContext );
		},
		validElements: function() {
			return this.currentElements.not(this.invalidElements()).not(this.successList);
		},
		form: function() {
			//校验前 去除之前错误的样式 Mr.T 2014年11月19日10:59:25
			$(this.currentForm).find('.errorTarger').removeClass('errorTarger');
			$(this.currentForm).find('.errorWrapper').remove();

			this.checkForm();
			
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if (!this.valid()) {
				$(this.currentForm).triggerHandler("invalid-form", [this]);
			}
			this.showErrors();
			if (this.errorList&& this.errorList.length>0){
			
				var firstEl=this.errorList[0];
				
					$(firstEl.element).parent().find("input:visible,textarea:visible,select:visible").focus()
			
			}
			return this.valid();
		}


	});
	return $;
});

/**
 * 表单方法扩展
 */
define('app/widgets/form/app-form',["app/core/app-jquery","app/data/app-ajax","app/widgets/form/app-validate","app/widgets/form/app-comp"],function($,$ajax) {
	
	/**
	 * @class 
	 * @name appform
	 * @desc  jquery methods set表单对象的jquery方法集
	 */
	$.fn.extend({
		/*
		 * 初始化表单
		 */
		initForm:function(){
			return $(this).each(function () {
				var $el = $(this),$form=$el.isTag('form')?$el:$($el.attr("app-form"))
				,state=$form.attr("opstate")||"EDIT";
				var $items=$form.find(".formitem");
				$form.bind($A.eventType.pageLoad, function() {
					state=$form.attr("opstate") || "EDIT";
					//切换状态时 先清除旧状态  以免被返回 by sjq 2014/11/06
					$form.attr("opstate","");
					$form.switchFormState(state);
				});
				var initFormUI=false;
				$items.each(function(){
					var $o=$(this)
					,$r=$o.find("div.render")
					,editor = $o.attr("editor");
					if($o.find(".editor").length==0){
					if (editor){
						$e=$("<div class=\"editor\">"+editor+"</div>");
						//改表单状态切换时，复选及单选的展示方式 by sjq 2014/09/26
						var $edior=$e.getFormEditor(),type=$edior.getCompType();
						$e.appendTo($o);
						initFormUI=true;
						}
					}
				
				});
				if (initFormUI){
					
					$form.initPageUI();
				}
				//$form.attr("init","true");
				//改表单状态切换时，复选及单选的展示方式 by sjq 2014/09/26
				//$form.attr("opstate","");
				//控制初始化后表单切状态 sjq 2014/10/30
				//
				$form.attr("initedit","true");
				
			});
			
		},
		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name loadFormData
		 * @desc 通过ajax加载表单数据
		 * @param {object} [params] - 新参数
		 * @param {function} [callback] - 加载完成后的回调函数
		 */
		loadFormData:function(params,callback){
			$(this).each(function(){
				var $el = $(this),
				$form=$el.isTag('form')?$el:$($el.attr("app-form")),
				loadurl = (params?(params["loadurl"]?params["loadurl"]:$el.attr('loadUrl')):$el.attr('loadUrl'));
				if(!loadurl)
					return;
				var formParams=$form.attr("loadParams");
				if(formParams){
					formParams=$.extend(formParams,params);
				}else{
					formParams = params;
				}
				var transor = $form.attr("transor");
				if(transor){
					formParams["__transor"]=transor;
				}
				$form.attr("loadParams",formParams);
				op = {
					type:$form.attr("method") || 'POST',
					url:loadurl,
					data:formParams,
					dataType:"json",
					cache: false,
					toggle:$form,
					success: function(json){
						$form.refreshFormData(json);
						if(callback){
							callback(json);
						}
					},
					error: $ajax.ajaxError
				};
				$ajax.ajaxCall(op);
			});
			
			
		},
		
		/*
		 * 清空表单Editor的值(暂不提供取消checkbox选中的方法)
		 * add by tw
		 */
		clearFormEditorValue : function(){
			var $e = $(this);
			var field=$e.parent().attr("item-field");
			$e.find("input[id="+field+"],textarea[id="+field+"]").clearCompValue();
		},
		
		/*
		 * 设置表单项目编辑器的值
		 * @param value 值对象
		 * @param showValue 显示值
		 */
		setFormEditorValue:function(value,showValue){
			var $e = $(this);
			var field=$e.parent().attr("item-field");
			$e.find("input[id="+field+"],textarea[id="+field+"]").setCompData(value,showValue);
		},
		
		addFieldRequired : function(field){
			var $label =  $A("#label_"+field);
			if($label.find("span.required").length>0){
				$label.find("span.required").text("*");
			}else{
				$label.prepend("<span class=\"required\">*</span>");
			}
			$A("#"+field).attr('required',true);
		},
		//隐藏某个字段
		hideField : function(field){
			$A("."+field).hide();
		},
		removeFieldRequired : function(field){
			var $label =  $A("#label_"+field);
			$label.find("span.required").remove();
			$A("#"+field).attr('required',false);
		},
		/*
		 * 取得表单项目的编辑器值
		 * @return 
		 */
		getFormEditorValue:function(){
			var $e=$(this);
			var field=$e.parent().attr("item-field");
			return $e.find("input[id="+field+"],textarea[id="+field+"]").getCompData();
		},
		
		getFormEditor:function(){
			var $e=$(this);
			var field=$e.parent().attr("item-field");
			return $e.find("input[id="+field+"],textarea[id="+field+"]");
		},
		/*
		 * 设置表单项目的显示值
		 * @param value 值
		 * @param showValue 显示值
		 */
		setFormRenderValue:function(value,showValue){
			var $o=$(this),$r=$o.find("div.render");;
			if($r.length == 0)
				return;
			var rendertype=$o.attr("rendertype")
			
			,render = $o.attr("render");
			var $edior=$o.getFormEditor(),type=$edior.getCompType();
			if(type=="radio"||type=="checkbox"){
					if (value==$edior.val()){
						$edior[0].checked=true;
					}else{
						$edior[0].checked=false;

					}
					return;
			}
			
			if(rendertype=="TEMPLATE"){
				$r.html($template(render,{value:value,showValue:showValue}));
			}else if(rendertype=="FUNC"){
				/*先取缓存*/
				var cach = $r.data("render");
				if(cach){
					render = cach;
				}else{
					render= $o.getJsFunction("return "+render)();
					$r.data("render",render);
				}
				var rhtml = render(value,showValue,$r);
				if(rhtml !==false){
					$r.html(rhtml);
					$r.attr("title",rhtml);
				}
			}else{
				if(showValue == null)
					showValue = value;
				$r.html(showValue);
				$r.attr("title",showValue);
			}
		},
		/*
		 * 设置表单项目的值
		 * @param value {string} 表单值
		 * @param showValue {string} 表单显示值
		 */
		setFormItemValue:function(value,showValue,md){
			var $o=$(this)
			,$e=$o.find("div.editor");
			$o.attr("fieldvalue",value);
			if(showValue){
				$o.attr("fieldshowvalue",showValue);
			}
			if($e.size()>0){
				if (value===undefined||value===null){
					value="";
				}
				$e.setFormEditorValue(value,showValue);
				
				if (!showValue){
					var objVal=$e.getFormEditorValue();
					if (objVal){
						showValue=objVal["showValue"];
					}
				}
			}
			$o.setFormRenderValue(value,showValue);
		},
		
		/*
		 *清空表单项的值 
		 */
		clearFormItemValue : function(){
			var $o=$(this)
			,$e=$o.find("div.editor");
			$o.attr("fieldvalue","");
			$o.attr("fieldshowvalue","");
			if($e.size()>0){
				$e.clearFormEditorValue();
			}
			//TODO
			$o.setFormRenderValue("","");
		},
		
		clearFormData : function(){
			return this.each(function () {
				var $el = $(this),$form=$el.isTag('form')?$el:$($el.attr("app-form"))
				,$items=$form.find(".formitem"),$hitems =$form.find("[hiddencomp=true]");
				
				$hitems.each(function(){
					var $o=$(this);
					$o.val("");
				});
				$items.each(function(){
					var $o=$(this);
					$o.clearFormItemValue();
				});
				if($form.attr("init")!="true"){
					$form.attr("refresh","true");
				}
			});
		},
		
		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name loadFormData
		 * @desc 刷新整个表单数据
		 * @param {json} [data]
		 */
		refreshFormData:function(data){
			return this.each(function () {
				var $el = $(this),$form=$el.isTag('form')?$el:$($el.attr("app-form"))
				,$items=$form.find(".formitem"),model=$form.attr("model"),$hitems =$form.find("[hiddencomp=true]");
				var md = data;
				if(model){
					if(model.indexOf(".")>1){
						$.each(model.split("."),function(i){
							md = md[this];
							if(md==null)
								return false;
						});
					}else{
						md = md[model];
					}
					if(md == null)
						md=data;
				}
				$hitems.each(function(){
					var $o=$(this),itemmodel=$o.attr("model"),field=$o.attr("field");
					var imd = md;
					if(itemmodel!=model){
						if(itemmodel.indexOf(".")>1){
							$.each(itemmodel.split("."),function(i){
								imd = imd[this];
								if(imd==null)
									return false;
							});
						}else{
							imd = imd[itemmodel];
						}
						if(imd == null)
							imd=md;
					}
					var v=imd[field];
					$o.val(v);
				});
				$items.each(function(){
					var $o=$(this),itemmodel=$o.attr("item-model"),field=$o.attr("item-field"),showField=$o.attr("item-showfield");
					var imd = md;
					if(itemmodel!=model){
						if(itemmodel.indexOf(".")>1){
							$.each(itemmodel.split("."),function(i){
								imd = imd[this];
								if(imd==null)
									return false;
							});
						}else{
							imd = imd[itemmodel];
						}
						if(imd == null)
							imd=md;
					}
					var v=imd[field];
					var sv=null;
					if(showField){
						sv=imd[showField];
					}
					
					$o.setFormItemValue(v,sv,md);
				});
				if($form.attr("init")!="true"){
					$form.attr("refresh","true");
				}
			});
		},
		/*
		 * 触发状态切换
		 */
		toggleFormState:function(){
			var $el = $(this),$form=$el.isTag('form')?$el:$($el.attr("app-form"))
			,state=$form.attr("opstate")||"EDIT";
			if(state == "VIEW")
				$form.switchFormState("EDIT");
			else
				$form.switchFormState("VIEW");
		},
		toggleFormState2:function(state){
			if(state == "VIEW")
				$form.switchFormState("VIEW");
			else
				$form.switchFormState("EDIT");
		},
		/*
		 * 切换表单状态
		 * @param state 新的表单状态
		 */
		switchFormState:function(state){
			this.each(function () {
				var $el = $(this),$form=$el.isTag('form')?$el:$($el.attr("app-form"))
				,$items=$form.find(".formitem"),oldstate=$form.attr("opstate")||"EDIT";
				if(state == oldstate||(state!="EDIT"&&state!="VIEW"))
					return;
				$form.attr("opstate",state);
				$form.addClass("formview");
				$items.each(function(index,element){
					var customwidth=$(element).attr("customwidth");
					
					var $o=$(this)
					,$r=$o.find("div.render")
					,$e=$o.find("div.editor")
					,$edior=$e.getFormEditor()
					, type=$edior.getCompType();
					if(state=="VIEW"){
						
						if($e.size()>0){
							//console.log($e.getFormEditor());
							
							var v = $e.getFormEditorValue();
							if(v){
								if(typeof v =="string"){
									$o.attr("fieldvalue",v);
								}else if(typeof v=="object"){
									$o.attr("fieldvalue",v.value);
									$o.attr("fieldshowvalue",v.showValue);
								}
							}
							$e.hide();
						}
						
						if($r.size()==0){
							if(customwidth!=undefined){
								$r=$("<div class=\"render "+type+"-render\" style=\"width:"+customwidth+";\"></div>");
							}else{
								$r=$("<div class=\"render "+type+"-render\"  ></div>");
							}
							
							$r.appendTo($o);
						}else{
							
							$r.show();
						}
						var value =$o.attr("fieldvalue")
						,showValue=$o.attr("fieldshowvalue")
						,rendertype=$o.attr("rendertype")
						,render = $o.attr("render")
						;
						if(type=="radio"||type=="checkbox"){//控制表单切换成查看 时 复选框及单选框 显示方式  by sjq   2014-09-26
							$e.show();
							$edior.attr("disabled",true);
							$r.html("");
							$r.attr("title","")
							//$r.hide();
							return;
						}
						if(rendertype=="TEMPLATE"){
							$r.html($template(render,{value:value,showValue:showValue}));
						}else if(rendertype=="FUNC"){
							render= $o.getJsFunction("return "+render)();
							if (render){
								$r.html(render(value,showValue,$r));
							}
						}else{
							if(!showValue)
								showValue = value;
							
							var htmlEncode = function (value){
								return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
							};
							$r.attr("title",showValue)
							$r.html(htmlEncode(showValue));
						}
						$form.find("div.formmore").show();
					}else if(state=="EDIT"){
						
						if($r.size()>0){
							$r.hide();
						}
						if($e.size()>0){
							$e.show();
							//控制表单切换成查看 时 复选框及单选框 显示方式  by sjq 2014-09-26
							var $edior=$e.getFormEditor()
							,type=$edior.getCompType();
							if(type=="radio"||type=="checkbox"){
								$edior.attr("disabled",false);
								$r.html("");
								return;
							}
						}else{
							var value =$o.attr("fieldvalue")
							,showValue=$o.attr("fieldshowvalue")
							,field=$o.attr("item-field")
							,showField=$o.attr("item-showfield")
							,editor = $o.attr("editor");
							if (editor){
								$e=$("<div class=\"editor\">"+editor+"</div>");
								$e.appendTo($o);
							}
							var ev = $e.find("[field="+field+"]");
							if(ev.isTag("input")||ev.isTag("select")){
								ev.val(value);
							}else{
								ev.html(value);
							}
							if(showField){
								var sev = $e.find("[field="+showField+"]");
								if(sev.length>0){
									if(sev.isTag("input")||sev.isTag("select")){
										sev.val(showValue);
									}else{
										ev.html(sev);
									}
								}
							}
							
							var $edior=$e.getFormEditor(),type=$edior.getCompType();
							if(type=="radio"||type=="checkbox"){
								$edior.attr("disabled",false);
								$r.html("");
								return;
							}
						}
						$form.find("div.formmore").hide();
						$form.openFormDetail(null,"all");
					}
				});
				if(state == "EDIT" && $form.attr("initedit")!="true"){
					$form.initPageUI();
					$form.attr("initedit","true");
				}
			});
			
		},
		/*
		 * 打开表单详细内容
		 * @param {string} [target] - jquery filter指定的表单对象
		 */
		openFormDetail:function(target,sstate){
			var $e =$(this),$form = target?$(target):($e.isTag("form")?$e:($e.attr("app-form")?$($e.attr("app-form")):$e.parents("form:first")));
			var exSum=$form.attr("summary")=="true"
				,durl=$form.attr("detailurl")
				,dparam=$form.attr("detailparameter")
				,sumCount=$form.attr("sumcount")*1
				,sumstate=$form.attr("sumstate")||"simple";
			if(sstate==sumstate)
				return;
			if(exSum && sumCount>0){
				var $trs=$form.find("table>tbody>tr:gt("+(sumCount-1)+")");
				if(sumstate == "simple"){
					$trs.show();
					$form.attr("sumstate","all");
					$form.find("div.formmore>a").html("收起");
				}else{
					$trs.hide();
					$form.attr("sumstate","simple");
					$form.find("div.formmore>a").html("更多信息");
				}
			}else if(durl){
				if(!dparam){
					dparam="id:${id}";
				}
				var params={};
				$form.find("[field]").each(function(){
					var $o =$(this),fd=$o.attr("field"),v=$o.val()||$o.attr("fieldvalue")||$o.html();
					param[fd]=v;
				});
				var pa=$template(dparam,param);
				params=eval("{"+pa+"}");
				var options = {
					href:_contextPath+durl,
					param:params,
					isWrapper:true,
					isReload:true
				};
				require(["app/widgets/window/app-dialog"],function(){
					$.openModalDialog(options);
				});
			}
		},
		isForm:function(){
			$form = $(this).getForm();
			return $form.length>0;
		},
		getForm:function(){
			var $t = $(this)
			,$form = $t.isTag('form')?$t:$($t.attr("app-form"));
			return $form;	
		},

		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name getSumbitData
		 * @desc 取得所有组件的数据
		 * @param {object} [options] - 提交选项如{url:"",model:false,params:{gridId:gridParamName}}
		 */
		getSumbitData:function(options){
			if(!options){
				options={};
			}
			var submitData={}
			,url = options.url
			,$toggle = null
			,valid = true
			,transorObj = {}
			,hasTrans = false;
			$(this).each(function () {
				var $el = $(this);
				if($el.isForm()){
					var $form = $el.getForm();
					if(!$toggle)
						$toggle=$form;
					if($form.attr("validate")!="false" && !$form.valid()){
						valid = false;
						return;
					}
					if(!url){
						url = $form.attr("action");
					}
					if(options["model"] == true){
						var $fields = $form.find("input[model][field],select[model][field]");
						if($fields.length == 0){
							return;
						}
						var data = {};
						$fields.each(function(){
							var $t = $(this);
							data[$t.attr("field")]=$.fn.unescapeHtml($t.val());
						});
						$.extend(submitData,data);
					}else{
						$.each($form.serializeArray(),function(i,obj){
							submitData[obj.name]=$.fn.unescapeHtml(obj.value);
						});
					}
					var transor = $form.attr("transor");
					if(transor){
						transor = $A.jsonEval(transor);
						transorObj[$form.attr("id")] = transor;
						hasTrans = true;
					}
				}else if($el.data("grid")){
					$el.data("grid").endEdit();
					if($el.grid('isValid') == false){
						valid = false;
						return;
					}
					var data = $el.grid("getAllData");
					var id = $el.attr('id');
					data = JSON.stringify(data);
					var target = options.params?(options.params[id]||id):id;
					submitData[target] = data;
					
					var fixeddata = $el.grid("getFixedParameter");
					if(fixeddata && fixeddata.__transor){
						//data["__transor"] = fixeddata["__transor"];
						var transor = fixeddata.__transor;
						if(transor){
							transorObj[$el.attr("id")] = transor;
							hasTrans = true;
						}
					}
				
				}else if($el.isGrid()){
					$el=$A($el);
					
					var id = $el.bsgrid("getGridId");
					var target = options.params?(options.params[id]||id):id;
					var data;
					if(options.submitMode=="all"){
						if(!$el.bsgrid("setEditEnabled",false)){
							valid = false;
							return;
						}
						data = $el.bsgrid("getRowData");
						$el.bsgrid("setEditEnabled",true);
					}else{
						data = $el.bsgrid("getSubmitData");
						if(data == null){
							valid = false;
							return;
						}
					}
					submitData[target]=JSON.stringify(data);
					var transor = $el.attr("transor");
					if(transor){
						transor = $A.jsonEval(transor);
						transorObj[$el.attr("id")] = transor;
						hasTrans = true;
					}
				}
			});
			if(!valid)
				return valid;
			if(hasTrans)
				submitData.__transor = JSON.stringify(transorObj);
			return {url:url,toggle:$toggle,data:submitData};
		},
		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name sumbitData
		 * @desc 提交指定的数据
		 * @param {object} [options] - 提交选项如{url:"",type:'POST',dataType:'json',cache:false}
		 * @param {json} [data] - 提交的json数据
		 */
		sumbitData:function(options,data){
			var op = $.extend({
				type:'POST',
				dataType:"json",
				cache: false
				},options,data);
			$ajax.ajaxCall(op);
		},
		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name sumbitAllComp
		 * @desc 提交所有组件数据
		 * @param {object} [options] - 提交选项如{url:"",type:'POST',dataType:'json',cache:false,model:false,params:{gridId:gridParamName}}
		 */
		sumbitAllComp:function(options){
			var data = this.getSumbitData(options);
			if(data)
				this.sumbitData(options,data);
		},
		serializeFieldArray:function(){
			return this.map(function(){
				var elements = $.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			}).filter(function(){
				var type = this.type;
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.field && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !manipulation_rcheckableType.test( type ) );
			}).map(function( i, elem ){
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ){
							return { name: elem.field, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.field, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		},
		/**
		 * @memberof appform
		 * @function
		 * @instance
		 * @name submitForm
		 * @desc 表单提交方法
		 * @param {object} [options] - 提交选项如{url:"",type:'POST',dataType:'json',cache:false,model:false}
		 */
		submitForm:function(options){
			//add by tw
			options = options||{};
			return this.each(function () {
				var el = $(this),$form=el.isTag('form')?el:$(el.attr("app-form"));
				if($form.attr("validate")!="false"){
					if (!$form.valid()) {
						return;
					}
				}
				//add by tw如果参数中带了url，使用参数中的url
				var url = options.url || $form.attr("action");
				if (!url) {
					return false;
				}
				url =url.evalTemplate(el);
				var op = null,data=null;
				var $div = $("<div style=\"display:hidden;\"></div>");
				//add by tw 添加附加值
				if(options.attachData){
					for(var key in options.attachData){
						var val = options.attachData[key];
						if($.isArray(val)){
							for(var i=0;i<val.length;i++){
								var $input = $("<input type=\"hidden\" name=\""+key+"\" />").appendTo($div);
								$input.val(val[i]);
							}
						}else{
							var $input = $("<input type=\"hidden\" name=\""+key+"\" />").appendTo($div);
							$input.val(options.attachData[key]);
						}
						
					}
				}
				$form.append($div);
				
				if(options["model"]==true){
					data = $form.serializeFieldArray();
				}else{
					data=$form.serializeArray();
				}
				//移除附加值
				$div.remove();
				op = $.extend({
					"type":$form.attr("method") || 'POST',
					"url":url,
					"data":data,
					"dataType":"json",
					"cache": false,
					"toggle":$form
					},options);
				
				$ajax.ajaxCall(op);
			});
		}
	});
	$("body").on("click.data-api","[app-form]",function ( e ) {
		if(e)e.preventDefault();
		$(this).submitForm();
	});
});
/**
 * 
 * 
 * 
 */
define(	'app/widgets/form/app-formgroup',["app/core/app-jquery", "app/data/app-ajax", "app/widgets/form/app-form", "app/widgets/form/app-validate",
				"app/widgets/form/app-comp","app/widgets/app-jqgrid"], function($, $ajax) {
			var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i;
			var AppFormGroup = function() {
				return {

					/**
					 * 加载分组表单数据
					 */
					loadGroupFromData : function(id, url, params, callback) {
						var op = {
							type : 'POST',
							url : url,
							data : params,
							dataType : "json",
							cache : false,
							// toggle : $form,
							success : function(json) {
								$.fn.refreshGroupFormData(id, json);
								if (callback) {
									callback(json);
								}
							},
							error : $ajax.ajaxError
						};
						$ajax.ajaxCall(op);

					},
					/**
					 * @memberof appform
					 * @function
					 * @instance
					 * @name sumbitGroupAllComp
					 * @desc 提交所有组件数据及分组数据
					 * @param {object}
					 *            [options] -
					 *            提交选项如{id:'groupId',url:"",type:'POST',dataType:'json',cache:false,model:false,params:{gridId:gridParamName}}
					 */
					sumbitGroupAllComp : function(options) {
						var data = this.getSubmitGroupFormData(options);
						if (data)
							$.fn.sumbitData(options, {data:data});
					},

					submitGroupForm : function(options) {
						options = options || {};
						// return this.each(function() {
						if (!options.id) {
							return null;
						}
						/*
						 * if (!this.validGroupForm(options.id)){ return ; }
						 */
						// add by tw如果参数中带了url，使用参数中的url
						var url = options.url;
						if (!url) {
							return false;
						}
						// url = url.evalTemplate($el);
						var op = null, data = null;
						var $div = $("<div style=\"display:hidden;\"></div>");
						// add by tw 添加附加值
						if (options.attachData) {
							for (var key in options.attachData) {
								var val = options.attachData[key];
								if (typeof(val) == "array") {
									for (var i = 0; i < val.length; i++) {
										var $input = $("<input hiddencomp=true forForm=\""
												+ options.id
												+ "\" type=\"hidden\" name=\""
												+ key + "\" />").appendTo($div);
										$input.val(val[i]);
									}
								} else {
									var $input = $("<input type=\"hidden\" hiddencomp=true forForm=\""
											+ options.id
											+ "\" name=\""
											+ key
											+ "\" />").appendTo($div);
									$input.val(options.attachData[key]);
								}

							}
						}
						$A.getContainer().append($div);
						var data = this.getSubmitGroupFormData(options);

						// 移除附加值
						$div.remove();
						op = $.extend({
									"type" : 'POST',
									//"url" : url,
									"data" : data,
									"dataType" : "json",

									"cache" : false
								}, options);
						$ajax.ajaxCall(op);
					},
					findGroupForms : function(id) {

						var $items = $A(".formitem[forform='" + id + "']"), $hitems = $A("[forform='"
								+ id + "'][hiddencomp=true]");
						var fromMap = {};
						var fromList = [];
						var elments = $items
								.find("input[type!=showValue], select, textarea");
						elments.each(function() {
									if (this.form) {
										var id = $(this.form).attr("id");
										if (!fromMap[id]) {
											fromMap[id] = this.form;
											fromList.push(this.form);
										}
									}

								});
						return fromList;
					},
					hideFormItem:function(id,parentHide){
						var item=$A("."+id);
						item.hide();
						var panelId= item.attr("forpanel");
				
						  if (parentHide&&panelId){
						  	$A("#"+panelId).panel("hide");
						  }else{
							  if ($A("."+id).parents("div.form").length>0){
								  var formObj=$A("."+id).parents("div.form").children("form").children("div");
								  
								  if (formObj.children(":visible").length==0){
									  $A("."+id).parents("div.form").hide();
								  }
							  }
							}
							 
					   
					},
					showFormItem:function(id,parentHide){
						
						var item=$A("."+id);
						item.show();
						var panelId= item.attr("forpanel");
						  if (parentHide&&panelId){
						  	$A("#"+panelId).panel("show");
						  }else{
							  if ($A("."+id).parents("div.form").length>0){
								  var formObj=$A("."+id).parents("div.form").children("form").children("div");
								  
								  if (formObj.children(":visible").length==0){
									  $A("."+id).parents("div.form").show();
								  }
							  }
						  }
					},
					validGroupForm : function(id) {

						var valid = true;
						var fromList = this.findGroupForms(id)
						for (var i = 0; i < fromList.length; i++) {
							valid = valid && $(fromList[i]).valid();
						}
						return valid;
					},
					/**
					 * @memberof appformgroup
					 * @function
					 * @instance
					 * @name getSubmitGroupFormData
					 * @desc 获取分组数据
					 * @param {object}
					 *            [options] -
					 *            提交选项如{id:'groupId',url:"",type:'POST',dataType:'json',cache:false,model:false,params:{gridId:gridParamName}}
					 */
					getSubmitGroupFormData : function(options) {
						var submitData = {}, fromData = null, valid = true, transorObj = {}, hasTrans = false;
						if (options.id) {
							var ids = options.id.split(",");
							for (var i=0;i<ids.length;i++) {
								var id=ids[i];
								var $el = $A("#" + id);
								if ($el.data("grid")) {
									$el.data("grid").endEdit();
									if ($el.grid('isValid') == false) {
										valid = false;
										return;
									}
									var data = $el.grid("getAllData");
									var id = $el.attr('id');
									data = JSON.stringify(data);
									var target = options.params
											? (options.params[id] || id)
											: id;
									submitData[target] = data;

									var fixeddata = $el
											.grid("getFixedParameter");
									if (fixeddata && fixeddata.__transor) {
										// data["__transor"] =
										// fixeddata["__transor"];
										var transor = fixeddata.__transor;
										if (transor) {
											transorObj[$el.attr("id")] = transor;
											hasTrans = true;
										}
									}

								} else if ($el.isGrid()) {
									

									var id = $el.bsgrid("getGridId");
									var target = options.params
											? (options.params[id] || id)
											: id;
									var data;
									if (options.submitMode == "all") {
										if (!$el
												.bsgrid("setEditEnabled", false)) {
											valid = false;
											return;
										}
										data = $el.bsgrid("getRowData");
										$el.bsgrid("setEditEnabled", true);
									} else {
										data = $el.bsgrid("getSubmitData");
										if (data == null) {
											valid = false;
											return;
										}
									}
									submitData[target] = JSON.stringify(data);
									var transor = $el.attr("transor");
									if (transor) {
										transor = $A.jsonEval(transor);
										transorObj[$el.attr("id")] = transor;
										hasTrans = true;
									}
								} else {

									var $items = $A(".formitem[forform='" + id
											+ "']"), $hitems = $A("[forform='"
											+ id + "'][hiddencomp=true]");

									if (!$.fn.validGroupForm(id)) {
										return null;
									}
									var fromData = $items.getGroupFormData(id,
											options["model"]);

									$.each(fromData, function(i, obj) {

												submitData[obj.name] = obj.value;

											});
								}
							}

						}

						if (!valid)
							return valid;
						if (hasTrans)
							submitData.__transor = JSON.stringify(transorObj);
							
						 return submitData;

					},
					findGroupFormItem : function(id) {
						var $items = $A("[forform='" + id + "']");
						var formItem = $items.map(function() {
							var elements = $.attr(this, "hiddencomp");
							if (elements=="true"){
								return this;
							}else{
								var inputs=[];
								$A("input,select, textarea",this).each(function(){
									
									inputs.push(this);
								})
								return inputs
							}
							
						});
						return formItem;
					},
					/**
					 * @memberof appformgroup
					 * @function
					 * @instance
					 * @name getGroupFormData
					 * @desc 获取分组数据
					 * @param {String}
					 *            [id] -分组id
					 * @param {Boolean}
					 *            [isField] -是否以字名为key键
					 */

					getGroupFormData : function(id, isField) {

						return this.findGroupFormItem(id).filter(function() {
							var type = this.type;
							// Use .is(":disabled") so that fieldset[disabled]
							// works
							var hasField = true;
							if (isField) {
								hasField = this.field;
							}
							return hasField
									&& !jQuery(this).is(":disabled")
									&& rsubmittable.test(this.nodeName)
									&& !rsubmitterTypes.test(type)
									&& (this.checked || !manipulation_rcheckableType
											.test(type));
						}).map(function(i, elem) {
							var val = jQuery(this).val();
						
							if (val==null){
								return null;
							}else if ( jQuery.isArray(val)){
								
								return jQuery.map(val, function(val) {
									return {
										name : isField
												? elem.field
												: elem.name
														|| elem.id,
										value : $.fn
												.unescapeHtml(val
														.replace(
																rCRLF,
																"\r\n"))
									};
								});
							}else{
								return {
									name : isField ? elem.field : elem.name
											|| elem.id,
									value : $.fn.unescapeHtml(val.replace(
											rCRLF, "\r\n"))
								};
							}
							
						}).get();
					},
					refreshGroupFormData : function(id, data) {

						var $items = $A(".formitem[forform='" + id + "']"), $hitems = $A("[forform='"
								+ id + "'][hiddencomp=true]");
						var md = data, model;
						/*
						 * if (model) { if (model.indexOf(".") > 1) {
						 * $.each(model.split("."), function(i) { md = md[this];
						 * if (md == null) return false; }); } else { md =
						 * md[model]; } if (md == null) md = data; }
						 */
						$hitems.each(function() {
							var $o = $(this), itemmodel = $o.attr("model"), field = $o
									.attr("field");
							var imd = md;
							if (itemmodel != model) {
								if (itemmodel.indexOf(".") > 1) {
									$.each(itemmodel.split("."), function(i) {
												imd = imd[this];
												if (imd == null)
													return false;
											});
								} else {
									imd = imd[itemmodel];
								}
								if (imd == null)
									imd = md;
							}
							var v = imd[field];
							$o.val(v);
						});
						$items.each(function() {
							var $o = $(this), itemmodel = $o.attr("item-model"), field = $o
									.attr("item-field"), showField = $o
									.attr("item-showfield");
							var imd = md;
							if (itemmodel != model) {
								if (itemmodel.indexOf(".") > 1) {
									$.each(itemmodel.split("."), function(i) {
												imd = imd[this];
												if (imd == null)
													return false;
											});
								} else {
									imd = imd[itemmodel];
								}
								if (imd == null)
									imd = md;
							}
							var v = imd[field];
							var sv = null;
							if (showField) {
								sv = imd[showField];
							}
							$o.setFormItemValue(v, sv, md);
						});
						/*if ($form.attr("init") != "true") {
							$form.attr("refresh", "true");
						}*/
					}
				}
			}();

			$.fn.extend(AppFormGroup)

			return AppFormGroup;
		});
/**
 * 表单验证
 */
define('app/widgets/form/app-rule',["jquery","app/core/app-core","app/widgets/form/app-comp"],function($,$A){
	$A.gearRules={
		rules:{
			mnemonic:{
				name:"mnemonic",
				trigger:"change",
				handle:function($s,$t,c){
					var t = $s.getCompText();
					if(t){
						var pinyin = t.toUpperInitials();
						$t.setCompValue(pinyin);
						$t.setCompText(pinyin);
					}
				}
			},
			gear:{
				name:"gear",
				trigger:"change",
				init:true,
				handle:function($s,$t,c){
					var map = c.map||{}
					,clear=c.clear!==false;
					var param={};
					$s.each(function(){
						var $o = $(this)
						,v=$o.getCompValue()
						,t =$o.getCompText()
						,n=$o.attr("name")
						,sn=$o.attr("showName");
						n=map[n]||n;
						param[n]=v;
						if(sn){
							sn=map[sn]||sn;
							param[sn]=t;
						}
					})
					$t.setCompParameter(param);
					$t.clearCompValue();
				}
			}
		},
		addRule:function(name,rule){
			if(typeof name == "object"){
				rule = name;
			}else{
				rule.name=name;
			}
			rules[rule.name]=rule;
		}
	};
	
	/**
	 * 创建规则对象
	 * @param rules{object}额外规则
	 */
	$.fn.gearRule = function(rules){
		rules = $.extend({},$A.gearRules.rules,rules);
		$(this).each(function(){
			var $target = $(this)
			,elRules=$target.attr("gearRules");
			if(!elRules)
				return;
			elRules=$A.jsonEval(elRules);
			$.each(elRules, function(prop, val) {
				if(!val)
					return;
				var rule = rules[prop];
				if(rule == null)
					return;
				var trigger = rule.trigger||"change";
				var config = val;
				var init = rule.init;
				if(typeof val!="string"){
					val=config.depend;
					if(config.init !== undefined){
						init = config.init;
					}
				}
				var $source = $target;
				if(val){
					$source = $A(val);
					if($source.size() == 0)
						return;
				}
				if(init){
					if(typeof init == "function"){
						init($source,$target,config);
					}else{
						rule.handle($source,$target,config);
					}
				}
				$source.on(trigger,function(){
					rule.handle($(this),$target,config);
				});
			});
		});
	};
	return $;
});

/**
 * 预输入控件--继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-typeahead',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/data/app-ajax',
        'app/widgets/form/app-combo'], function($, App, Options, AppAjax, Combo) {
	
	'use strict';
	/**
	 * @class 
	 * @classdesc 预输入框
	 * <span class="type-signature static">extend</span>combo
	 * @see {@link combo-class} typeahead继承至combo
	 * @name typeahead-class
	 * @desc 预输入框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-typeahead"
	 * &#9;_options="{
	 * &#9;&#9;suggest: 'html/example/app-input/data/typeahead.do'
	 * &#9;}"
	 * />
	 * @example $('#demo').typeahead({
	 * &#9;suggest: 'html/example/app-input/data/typeahead.do'
	 * });
	 */
	var Typeahead = Combo.extend({
		initialize: function (input, options) {
			if(!options){
				options = {};
			}
			options._ = Options.appDefaults.Typeahead;
			Typeahead.superclass.initialize.call(this, input, options);
			this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
			this._editable();
			this._initOptions();
			this._initPanelContent();
			this._registEvents();
			if(this.setting.value){
				this.setText(this.setting.value);
			}
		},
		/**
		 * 初始化设置
		 */
		_initOptions: function(){
			var s = this.setting;
			//如果没有设置suggest地址，则使用url
			if((s.suggest == '' || s.suggest == true)
					&& s.url){
				s.suggest = s.url;
			}
			if(s.suggest == false){
				s.suggest = '';
			}
			//远程加载，可以是remote 或 async
			if(!s.remote && s.async){
				s.remote = true; 
			}
		},
		/**
		 * 初始化下拉面板的内容
		 */
		_initPanelContent: function(){
			var $list = $('<ul class="combo-list"></ul>');
			$list.appendTo(this.$dropPanelMain);
			this.$list = $list;
		},
		/**
		 * 注册事件
		 */
		_registEvents: function(){
			var typeahead = this;
			this.$openBtn.on('click.typeahead.api',function(e){
				typeahead.$text.focus();
			});
			this.$text.on('change.typeahead.api',function(){
				typeahead.setValue(this.value);
			});
			this._liveItemClickEvent();
		},
		/**
		 * 绑定点击事件
		 */
		_liveItemClickEvent: function(){
			var typeahead = this;
			/**
			 * Li选择项点击事件
			 * 1、如果存在自定义点击前事件，先执行该事件，如果不返回true则结束选择，否则执行2
			 * 2、单选则设值当前选择项为值，并关闭下拉框；多选则追加当前选择项为值
			 * 3、如果存在自定义点击后事件，则执行该事件
			 */
			this.$list.on('click.typeahead.api', 'li', function(){
				var $this = $(this);
				typeahead.setValue($this.text());
				typeahead.hidePanel();
				typeahead.$text.focus();
			});
		},
		/**
		 * 按键事件
		 * 1、联想
		 * 2、导航
		 */
		_keyManager: function(e){
			if(this._dealSysKey(e)){
				return;
			}
			if(this._mainDivIsVisiable()){
				keyForVisiblePanel.call(this, e);
			}else{
				keyForHiddenPanel.call(this, e);
			}
		},
		/**
		 * 根据输入内容进行延迟联想
		 */
		suggest: function(){
			var typeahead = this;
			//保持延迟时间内只触发一次联想操作
			clearTimeout(typeahead.timeout);
			typeahead.timeout = 
				setTimeout(function(){
					typeahead._suggestFunc();
				},typeahead.setting.lazy);
		},
		/**
		 * 根据输入框的文本进行联想
		 * 1、保持联想面板打开状态
		 */
		_suggestFunc: function(){
			//如果联想面板不是打开状态，则打开渲染。否则只进行联想
			if(!this._mainDivIsVisiable()){
				this.showPanel();
			}
			if(this._preventSuggest()){
				return;
			}
			if(this.setting.remote){
				this._suggestByRemote();
			}else{
				this._suggestByLocal();
			}
		},
		/**
		 * 阻止联想事件
		 * 1、当联想的关键字为空
		 * 2、当联想的关键字与上次联想的相同
		 * 3、当上次联想为空 且这次的关键字以上次的关键字开头
		 * @returns true 进行阻止
		 */
		_preventSuggest: function(){
			var key = this.getText();
			if(!$.trim(key)){
				return true;
			}
			if(!this.prevKey){
				
			}else if(this.prevKey == key){
				return true;
			}else if((this.suggestItems == undefined || this.suggestItems.length == 0)
					&& key.length >= this.prevKey.length
					&& key.indexOf(this.prevKey) == 0){
				return true;
			}
			this.prevKey = key;
			return false;
		},
		/**
		 * 根据本地数据源进行匹配
		 */
		_suggestByLocal: function(){
			this._initDataByParameter();
			if(this.setting.data != undefined){
				this._setSuggestItemsByNameLazy();
				this._renderSuggestItem();
				this.showPanel();
			}else{
				var url = this.setting.suggest
					,typeahead = this;
				if(url){
					AppAjax.ajaxCall({
						url: url,
						data: this.getParameter(),
						dataType: 'json',
						type: 'POST',
						success: function(data){
							typeahead.setting.data = data;
							typeahead._suggestByLocal();
						}
					});	
				}
			}
		},
		/**
		 * 根据查询参数重置预输入的数据源
		 */
		_initDataByParameter: function(){
			var currParam = this.getParameter();
			if(currParam){
				if(this.lastParam != currParam){
					this.setting.data = undefined;
				}
				this.lastParam = currParam;
			}
		},
		/**
		 * 根据远程设置地址进行联想
		 */
		_suggestByRemote: function(){
			var url = this.setting.suggest
				,typeahead = this;
			if(url){
				if(url.indexOf('?') != -1){
					url += '&_key=' + this.getText();
				}else{
					url += '?_key=' + this.getText();
				}
				AppAjax.ajaxCall({
					url: url,
					data: this.getParameter(),
					dataType: 'json',
					type: 'POST',
					success: function(data){
						typeahead.suggestItems = data;
						typeahead._renderSuggestItem();
					}
				});	
			}
		},
		/**
		 * 根据数据源按照key模糊匹配节点，并设置联想项
		 * @param data 节点数据源数组
		 * @param key 匹配关键字
		 */
		_setSuggestItemsByNameLazy: function(){
			var data = this.setting.data
				,key = this.getText()
				,result = [];
			for(var i = 0; i<data.length; i++){
				var text = data[i];
				if(text.indexOf(key) != -1)
					result.push(text);
			}
			this.suggestItems = result;
		},
		/**
		 * 渲染联想项列表
		 */
		_renderSuggestItem: function(){
			var data = this.suggestItems
				,key = this.getText()
				,items = [];
			this.$list.html('');
			if(!data) return;
			for ( var i = 0; i < data.length; i++) {
				items.push(this._createSuggestItems(i, data[i], key));
			}
			this.$list.append(items);
			
		},
		/**
		 * 追加联想项
		 * @param index 当前联想项的index
		 * @param item 联想数据
		 */
		_createSuggestItems: function(i, text, key){
			var $suggestItem = $('<li ' + (i%2 == 1 ? 'class="li-odd"' : '') +
					'><i class="icon-ok"></i>' + 
					this._getName(text, key) + '</li>');
			return $suggestItem;
		},
		/**
		 * 获取显示名称
		 * @param name
		 * @param key
		 * @returns {String}
		 */
		_getName: function(name, key){
			if(key == ''){
				return name;
			}
			var index = name.indexOf(key);
			if(index == -1){
				return name;
			}
			var keyLen = key.length;
			return name.substring(0,index) +
				'<em>'+key+'</em>' +
				name.substring(keyLen + index);
		},
		/**
		 * 显示当前对象的联想面板
		 * 1、关闭其他可见的联想面板
		 * 2、根据隐藏值进行渲染选择项
		 * 3、开启点击html关闭该面板的操作
		 */
		showPanel: function(){
			this._showPanel();
		},
		/**
		 * 载入联想数据源
		 * @param {Array} data 联想的数据源
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').typeahead('loadData',['选项1','选项2','选项3']);
		 * @memberof typeahead-class
		 * @instance
		 */
		loadData: function(data){
			this.setting.data = data;
			this.setting.remote = false; 
		},
		/**
		 * 根据url载入数据源作为联想的数据源
		 * @param {url} url 要加载的url
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').typeahead('reload','a.do');
		 * @memberof typeahead-class
		 * @instance
		 */
		reload: function(url){
			if(url){
				var suggest = this;
				AppAjax.ajaxCall({
					url: url,
					data: this.getParameter(),
					dataType: 'json',
					type: 'POST',
					success: function(data){
						suggest.data = data;
					}
				});	
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 设置隐藏值，尝试设置显示值
		 * @param {String} val 隐藏值
		 * @see typeahead#setValue
		 * @todo 当隐藏值为空时，显示值也为空
		 * @example $('#demo').typeahead('setValue','val');
		 * @memberof typeahead-class
		 * @instance
		 */
		setValue: function(val, noTrigger){
			this.setText(val);
			this._setValue(val, noTrigger);
		}
	});
	$.fn.typeahead = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'typeahead';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = App.getComponent($this, componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new Typeahead(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};
	/**
	 * 面板可见状态下的按键事件处理
	 */
	function keyForVisiblePanel(e){
		var keyCode = e.keyCode
			,s = this.setting;
		e.stopPropagation();
		if(App.containKeyCode(e, s.keyNextNode)){
			keyNextNode.call(this, e);
		}else if(App.containKeyCode(e, s.keyPrevNode)){
			keyPrevNode.call(this, e);
		}else if(App.containKeyCode(e, s.keyPickNode)){
			keyPickNode.call(this, e);
		}else if(App.containKeyCode(e, s.keyHidePanel)){
			this._keyHidePanel(e);
		}else if(this._keyFilterSuggest(e)){
			this.suggest();
		}
	}
	/**
	 * 面板不可见状态下的按键事件处理
	 */
	function keyForHiddenPanel(e){
		var keyCode = e.keyCode;
		if(this._isKeyCursorPos(keyCode)){
			this._keyCursorPos(e);
		}else if(this._keyFilterSuggest(e)){
			this.suggest();
		}
	}
	/**
	 * 上一个节点
	 */
	function keyPrevNode(e){
		var $l = this.$list;
		if($l.find('>li').length == 0){
			return;
		}
		var $c = $l.find('.current')
			,$n = $c.prev();
		if($n.length == 0){
			$n = $l.find('li:last-child');
		}
		this.setValue($n.text());
		$c.removeClass('current');
		$n.addClass('current');
	}
	/**
	 * 下一个节点
	 */
	function keyNextNode(e){
		var $l = this.$list;
		if($l.find('>li').length == 0){
			return;
		}
		var $c = $l.find('.current')
			,$n = $c.next();
		if($n.length == 0){
			$n = $l.find('li:first-child');
		}
		this.setValue($n.text());
		$c.removeClass('current');
		$n.addClass('current');
	}
	/**
	 * 选中节点
	 */
	function keyPickNode(e){
		var $c = this.$dropPanel.find('.current');
		if($c.length == 0){
			return;
		}
		this.setValue($c.text());
		this.hidePanel();
		e.stopPropagation();
	}
	return Typeahead;
});
/**
 * 上传控件
 * @author Mr.T
 */
define('app/widgets/form/app-upload',['app/core/app-base', 'app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/widgets/app-progressbar',
        'app/data/app-ajax', 'app/util/app-utils', 'jquery/jquery.upload'],
        function(Base, $, App, Options, ProgressBar, AppAjax, Utils) {
	
	'use strict';
	/**
	 * @class 
	 * @classdesc 上传组件，该组件上传的文件会加入一个groupId，代表该文件所属的组
	 * 		文件上传完成会返回fileId，前台可以通过fileId删除该文件
	 * @name upload-class
	 * @desc 上传组件的初始化方法
	 * @param {input} input 要渲染的input组件
	 * @param {object} options 组件的选项设置 
	 * @author Mr.T
	 * @example $('#demo').upload({
	 * &#9;groupId: 'testGroupId2',
	 * &#9;progress: true,
	 * &#9;toolbarPosition: 'bottom',
	 * &#9;style: 'border:1px solid green;border-radius: 4px;top:260px;left: 0px;',
	 * &#9;css: 'uploadDemoClass',
	 * &#9;fileWidth:'200px',
	 * &#9;requestFile: true
	 * });
	 */
	var Upload = Base.extend({
		initialize: function (input, options) {
			this.$input = $(input);
			this.options = options;
			this._init();
			this._eventRegister();
		},
		/**
		 * 初始化
		 * @param options
		 */
		_init: function(){
			this._initOptions();
			this.$input.css('display','none');
			this._initHTML();
			if(this.setting.requestFile){
				this.initLoadedFile(this.setting.fileUrl);
			}
			var upload = this;
			this.$element.on('click', '.file-item .file-icon', function(e){
				if(upload.setting.selectable){
					$(this).parent().toggleClass('selected');
				}
			});
			if($.isFunction(upload.setting.createDownloadUrl)){
				this.$element.on('click', '.file-name', function(e){
					var fileId = $(this).closest('.file-item').attr('fileId');
					var url = upload.setting.createDownloadUrl(fileId);
					download(url, {});
				});
			}else{
				this.$element.addClass('un-download');
			}
			function download(url,params,_blank){
				var $form = $("<form style=\"display:none;\"></form>").attr("action",url).attr("method","post");
				if(_blank){
					$form.attr("target","_blank");
				}
				for(var key in params){
					$("<input type=\"hidden\" />").attr("name",key).val(params[key]).appendTo($form);
				}
				$("body").append($form);
				$form.submit();
				$form.remove();
			}
		},
		/**
		 * 初始化配置
		 */
		_initOptions: function(){
			var customSetting = $.extend(App.getAttrFromElement(this.$input), this.options);
			if($.isFunction(customSetting.beforeRender)){
				customSetting.beforeRender.call(this, customSetting);
			}
			this.setting = $.extend({}, Options.appDefaults.upload, customSetting);
			if(this.setting.exts){
				var exts = this.setting.exts.toLowerCase();
				this._exts = exts.split(',');
			}
			//初始化回调事件
			var callback = {}; 
			var events = this.setting.events;
			if(events){
				if(typeof(events) == 'string'){
					callback = this.$input.getJsEvent(events);
				}else{
					callback = events;
				}
			}
			this.callback = callback;
			if(this.setting.groupId){
				this.groupId = this.setting.groupId; 
			}else{
				this.groupId = 'g-'+ new Date().getTime(); 
			}
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterDelete)){
				this.on('afterDelete', s.afterDelete);
			}
			if($.isFunction(s.startUpload)){
				this.on('startUpload', s.startUpload);
			}
			if($.isFunction(s.uploadError)){
				this.on('uploadError', s.uploadError);
			}
			if($.isFunction(s.uploadSuccess)){
				this.on('uploadSuccess', s.uploadSuccess);
			}
		},
		/**
		 * 初始化HTML
		 */
		_initHTML: function(){
			var s = this.setting;
			this.$element = 
			$('<div class="app-upload empty ' +s.css + '" ' + ( s.style ? 'style="' + s.style + '"' : '' ) + '>' +
				'<div class="content">' +
					'<div class="upload-btn">' +
						'<div class="file-icon icon-upload"></div>' +
					'</div>' +
				'</div>' +
				'<input class="upload-progress"></input>' +
				'<div class="upload-mask"></div>' +
			'</div>').insertAfter(this.$input);
			this.$uploadItem = this.$element.find('.upload-btn');
			this.$uploadBtn = this.$element.find('.upload-btn .icon-upload');
			this.$fileList = this.$element.find('.content');
			this.progressbar = new ProgressBar(this.$element.find('.upload-progress'), {width: '70%', height:'20px'});
			this.$mask = this.$element.find('.upload-mask');
			this.$input.appendTo(this.$element);
			this.$input.removeClass('app-upload');
			this.$element.data('upload', this);
			this._new$File();
		},
		/**
		 * 初始化已上传文件的列表，请求文件列表时会传入groupId
		 * @param {Url} url 根据url进行加载文件
		 * @example $('#demo').upload('initLoadedFile', 'fileList.do');
		 * @memberof upload-class
		 * @instance
		 */
		initLoadedFile: function(url){
			if(url){
				var upload = this;
				AppAjax.ajaxCall({
					url: url,
					dataType: 'json',
					data: {groupId: upload.groupId},
					type: 'POST',
					success: function(files){
						upload.appendHasLoadFile(files);
					}
				});
			}
		},
		/**
		 * 清除删除前台展现的文件列表，不清除文件
		 * @example $('#demo').upload('resetFileList');
		 * @memberof upload-class
		 * @instance
		 */
		resetFileList: function(){
			this.$fileList.html('');
		},
		/**
		 * 载入新的已上传完成的文件
		 * @param {Object|Array} files 文件列表
		 * @param {String} files.name 文件名
		 * @param {Number} [files.size] 字节数
		 * @example $('#demo').upload('appendHasLoadFile', [{name:'file1',size:100},{name:'file2'}]);
		 * @memberof upload-class
		 * @instance
		 */
		appendHasLoadFile: function(files){
			if(!$.isArray(files)){
				files = [files];
			}
			for ( var i = files.length-1; i >= 0; i--) {
				var file = files[i];
				file.ext = getFileExt(file.name);
				this._initFileElement(file).show();
			}
			this.$element.scrollTop(this.$element[0].scrollHeight);
		},
		/**
		 * 在选择文件按钮上加入一个新的文件选择组件
		 */
		_new$File: function(){
			var $fileInput = this.$fileInput = $('<input id="' + App.uuid('upload-') 
					+ '" type="file" name="file"/>')
				,upload = this;
			if(this.setting.extsApply){
				$fileInput.attr('accept', this.setting.exts);
			}
			this.$uploadBtn.empty().append($fileInput);
			$fileInput.on('change.upload-append.api',function(){
				var fileName = $(this).val().replace(/.*(\/|\\)/, '')
					,ext = getFileExt(fileName);
				if(includeExt(ext, upload._exts)){
					var $file = upload._initFileElement({name: fileName, ext: ext});
					upload._ajaxUpload($file);
				}else{
					$messager.warn('请上传扩展名为[' + upload.setting.exts + ']的文件');
				}
				upload._new$File();
			});
			$fileInput.on('click.upload-append.api',function(e){
				if(!upload.setting.promptMessage){
					return;
				}
				if(!upload.$fileInput.parent().hasClass('.upload-btn')){
					return;
				}
				e.stopPropagation();
				e.preventDefault();
				$messager.confirm(upload.setting.promptMessage);
				$($('#_alertMsgBox .btn')[0]).css('position','relative').append(upload.$fileInput);
				$('#_alertMsgBox .btn').on('click', function(){
					upload.$uploadBtn.append(upload.$fileInput);
				});
			});
		},
		/**
		 * 设置提示信息
		 * @example $('#demo').upload('setPromptMessage', '是否继续上传？');
		 * @memberof upload-class
		 * @instance
		 */
		setPromptMessage: function(msg){
			this.setting.promptMessage = msg;
		},
		/**
		 * 获取提示信息
		 * @return {String} msg 
		 * @example $('#demo').upload('getPromptMessage');
		 * @memberof upload-class
		 * @instance
		 */
		getPromptMessage: function(){
			return this.setting.promptMessage;
		},
		/**
		 * 生成界面的文件
		 */
		_initFileElement: function(fileInfos){
			var download = '';
			if(this.setting.createDownloadUrl){
				download = this.setting.createDownloadUrl(fileInfos);
			}else{
				download = 'javascript:void(0);';
			}
			var $file = $('<div class="file-item" title="' + fileInfos.name + '">' +
							'<div ' + getFileIconCls(fileInfos.ext) + '></div>' +
							nameHtml(fileInfos.name) + 
							'<div class="file-selected"><i></i></div>' +
							'<div class="file-delete"><i></i></div>' +
						'</div>');
			if(fileInfos.id){
				$file.attr('fileId', fileInfos.id);
			}
			$file.hide();
			this.$uploadItem.after($file);
			this._liveDelete($file);
			afterFileListChange.call(this);
			return $file;
		},
		/**
		 * 文件绑定删除事件
		 */
		_liveDelete: function($file){
			if(this.setting.canDelete){
				var upload = this;
				$file.find('.file-delete').on('click.upload.api',function(){
					$messager.confirm('是否确认删除？', {
						okCall: function(ok){
							upload._deleteFile($file);
						}
					});
				});
			}else{
				$file.addClass('un-delete');
			}
		},
		/**
		 * 设置该组件上传的组文件id
		 * @param {String} groupId 组文件id
		 * @example $('#demo').upload('setGroupId','String');
		 * @memberof upload-class
		 * @instance
		 */
		setGroupId: function(groupId){
			if(groupId){
				this.groupId = groupId;
			}
		},
		/**
		 * 获取该组件上传的一组文件id
		 * @return {String} groupId 组文件id
		 * @example $('#demo').upload('getGroupId');
		 * @memberof upload-class
		 * @instance
		 */
		getGroupId: function(){
			return this.groupId;
		},
		/**
		 * 上传文件
		 * @param $file
		 */
		_ajaxUpload: function($file){
			var upload = this
				,fileId = this.$fileInput.attr('id');
			this.progressbar.setValue(0);
			this.progressbar.active();
			this.progressbar.$element.show();
			localProgress(this.progressbar);
			this.$mask.show();
			/**
			 * 开始上传事件
			 * @event upload-class#startUpload
			 */
			this.trigger('startUpload');
			$.ajaxFileUpload({
				url: this.setting.uploadUrl,
				secureuri: false,
				dataType: 'json',
				data: {groupId: upload.groupId},
				fileElementId: fileId,
				success: function(infos) {
					if(infos.errorMsg){
						upload._fileUploadError(infos, $file);
						return;
					}
					upload._onFileFinish(infos, $file);
				},
				error: function(obj) {
					upload._fileUploadError(obj, $file);
				}
			});
		},
		/**
		 * 上传完成时触发的事件
		 * @param $file
		 * @param progressbar
		 * @param infos
		 */
		_onFileFinish: function(infos, $file){
			$file.attr('fileId', infos.id);
			clearInterval(this.progressbar.interval);
			this.progressbar.setValue(100);
			this.progressbar.unactive();
			var upload = this;
			setTimeout(function(){
				upload.progressbar.$element.hide(200);
			}, 300);
			this.$mask.hide();
			$file.show(500, function(){
				upload.$element.scrollTop(upload.$element[0].scrollHeight);
			});
			/**
			 * 上传完成事件
			 * @param {Object} fileInfos 文件信息
			 * @event upload-class#uploadSuccess
			 */
			this.trigger('uploadSuccess', infos);
		},
		/**
		 * 上传失败
		 */
		_fileUploadError: function(obj, $file){
			$file.remove();
			afterFileListChange.call(this);
			clearInterval(this.progressbar.interval);
			this.progressbar.unactive();
			if(!this.setting.ignorUploadError){
				var msg = '上传失败';
				if(obj.errorMsg){
					msg += ':' + obj.errorMsg;
				}else if(obj.responseText){
					msg += ':' + $(obj.responseText).find('h1').text();
				}
				$messager.warn(msg);
			}
			this.progressbar.$element.hide();
			this.$mask.hide();
			/**
			 * 上传失败事件
			 * @event upload-class#uploadError
			 */
			this.trigger('uploadError', obj);
		},
		/**
		 * 删除文件
		 * @param $file
		 */
		_deleteFile: function($file){
			var fileId = $file.attr('fileId')
				,upload = this;
			if(this.setting.deleteUrl && fileId){
				AppAjax.ajaxCall({
					url: this.setting.deleteUrl,
					dataType: 'json',
					type: 'POST',
					data: {fileId: fileId},
					success: function(flag){
						if(flag){
							$file.remove();
							afterFileListChange.call(upload);
							upload.trigger('afterDelete');
						}else{
							$messager.warn('文件无法完成删除！');
						}
					}
				});
			}else{
				$file.remove();
				afterFileListChange.call(this);
				this.trigger('afterDelete');
			}
		},
		/**
		 * 获取已上传文件列表
		 * @return {Array} files 上传文件的列表
		 * @example $('#demo').upload('getFileList');
		 * @memberof upload-class
		 * @instance
		 */
		getFileList: function(){
			var $file = this.$fileList.find('.file-item')
				,files = [];
			$file.each(function(){
				var file = {}
					,$file = $(this);
				file.name = $file.attr('title');
				file.id = $file.attr('fileid');
				files.push(file);
			});
			return files;
		},
		/**
		 * 获取勾选的文件列表
		 * @return {Array} files 上传文件的列表
		 * @example $('#demo').upload('getSelectedFiles');
		 * @memberof upload-class
		 * @instance
		 */
		getSelectedFiles: function(){
			var $file = this.$fileList.find('.file-item.selected')
				,files = [];
			$file.each(function(){
				var file = {}
					,$file = $(this);
				file.name = $file.attr('title');
				file.id = $file.attr('fileid');
				files.push(file);
			});
			return files;
		},
		/**
		 * 禁用上传组件
		 * @example $('#demo').upload('disableUpload');
		 * @memberof upload-class
		 * @instance
		 */
		disableUpload: function(){
			this.readonly(true);
		},
		/**
		 * 启用上传组件
		 * @example $('#demo').upload('enableUpload');
		 * @memberof upload-class
		 * @instance
		 */
		enableUpload: function(){
			this.readonly(false);
		},
		/**
		 * 切换只读状态
		 * @example $('#demo').upload('readonly', false);
		 * @memberof upload-class
		 * @instance
		 */
		readonly: function(readonly){
			if(readonly === false){
				this.$element.removeClass('readonly');
			}else{
				this.$element.addClass('readonly');
			}
		},
		/**
		 * 销毁删除组件
		 */
		destroy: function(){
			
		}
	});
	
	$.fn.upload = function (option, value) {
		var methodReturn = undefined;
		var args = arguments;
		this.each(function () {
			var $this = $(this)
				,component = $this.data('upload');
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					var id = $this.attr('id');
					if(!id){
						id = $this[0].outerHTML;
					}
					throw new Error('组件upload[' + id + ']调用' + option +'方法:' + e);
				}
			}else{
				if(!component){
					component = new Upload(this, option);
					$this.data('upload', component);
				}else{
					var id = $this.attr('id');
					if(!id){
						id = $this[0].outerHTML;
					}
					throw new Error('组件upload[' + id + ']无法重复初始化');
				}
			}
		});
		return methodReturn;
	};

	$.fn.upload.Constructor = Upload;
	/**
	 * 上传文件列表数量变化后
	 */
	function afterFileListChange(){
		var listLen = this.getFileList().length;
		if(listLen > 0){
			this.$element.removeClass('empty');
		}else{
			this.$element.addClass('empty');
		}
		if(!this.setting.multiple){
			if(listLen > 0){
				this.$element.addClass('un-upload');
			}else{
				this.$element.removeClass('un-upload');
			}
		}
	}
	/**
	 * 对文件类型进行检查
	 */
	function getFileExt(fileName){
		return fileName.substring(fileName.lastIndexOf('.')+1,fileName.length);
	}
	/**
	 * 根据文件扩展名获取文件类型图标样式
	 * @param ext
	 */
	function getFileIconCls(ext){
		var result = 'file-icon'
			,ext = ext.toLowerCase()
			,icon = '';
		switch (ext) {
		case 'txt':
			icon = 'icon-txt';
			break;
		case 'rar':
			icon = 'icon-rar';
			break;
		case 'zip':
			icon = 'icon-zip';
			break;
		case 'doc':
		case 'docx':
			icon = 'icon-word';
			break;
		case 'ppt':
		case 'pptx':
			icon = 'icon-ppt';
			break;
		case 'xls':
		case 'xlsx':
			icon = 'icon-excel';
			break;
		case 'pdf':
			icon = 'icon-pdf';
			break;
		case 'gif':
		case 'png':
		case 'jpg':
		case 'jpeg':
		case 'bmp':
			icon = 'icon-image';
			break;
		case 'avi':
		case 'rmvb':
		case 'qmv':
		case 'mkv':
		case 'rm':
			icon = 'icon-video';
			break;
		default:
			break;
		}
		return 'class="' + result + ' '+ icon +'"';
	}
	/**
	 * 名称分割
	 */
	function nameHtml(fileName){
		var namegbLen = fileName.gblen()
			,firstLen = 12;
		if(namegbLen <= firstLen){
			return '<div class="file-name" title="' + fileName + '">' + fileName + '</div>'; 
		}
		var name1 = ''
			,name2 = ''
		if(namegbLen <= 20){
			name1 = cutstr(fileName, namegbLen - 12);
			name2 = fileName.replace(name1, '');
		}else{
			name1 = cutstr(fileName, firstLen);
			if(name1.gblen() == name1.length){
				name1 = name1.substr(0,11);
			}
			name2 = fileName.replace(name1, '');
		}
		return ('<div class="file-name" title="' + fileName + '">' + name1 + '</div>'
				+ '<div class="file-name" title="' + fileName + '">' + name2 + '</div>'); 
	}
	/**
	 * 本地进度（假进度）
	 * @param progressbar
	 */
	function localProgress(progressbar){
		progressbar.interval = setInterval(function(){
			if(progressbar.getPercent() < 50){
				progressbar.setValue(progressbar.getValue() + Math.random()*2);
			}else if(progressbar.getPercent() < 80){
				progressbar.setValue(progressbar.getValue() + Math.random());
			}else if(progressbar.getPercent() < 95){
				progressbar.setValue(progressbar.getValue() + Math.random()*0.5);
			}else if(progressbar.getPercent() < 99){
				progressbar.setValue(progressbar.getValue() + Math.random()*0.1);
			}else if(progressbar.getPercent() < 99.9){
				progressbar.unactive();
				clearInterval(progressbar.interval);
			}
		},500);
	}
	/**
	 * 对文件类型进行检查
	 */
	function includeExt(ext, exts){
		var result = false;
		ext = '.' + ext;
		if(exts){
			for (var i = 0; i < exts.length; i++) {
				if(exts[i].toLowerCase() == ext.toLowerCase()){
					result = true;
					break;
				}
			}
		}else{
			result = true;
		}
		return result;
	}
	/**
	 * 获取文字的字符串长度
	 */
	function cutstr(str, len) {
        var str_length = 0;
        var str_len = str.length;
        var result = new String();
        for (var i = 0; i < str_len; i++) {
            var a = str.charAt(i);
            str_length++;
            if (escape(a).length > 4) {
                //中文字符的长度经编码之后大于4  
                str_length++;
            }
            result = result.concat(a);
            if (str_length >= len) {
                return result;
            }
        }
        //如果给定字符串小于指定长度，则返回源字符串；  
        if (str_length < len) {
            return str;
        }
    }
	return Upload;
});
/**
 * 查询对象
 */
define('app/widgets/form/app-xquery',["app/core/app-jquery","app/widgets/window/app-dialog","app/widgets/form/app-comp"],function($) {
	"use strict";
	/**
	 * 构造方法
	 */
	var QueryComp= function (element, options) {
		var o = this
		,$el = o.$element = $A(element)
		,target = $el.attr("query-target")
		,manual = $el.attr("manual")=="true";
		this.init=false;
		this.displaymode=$el.attr("displaymode");
		o.$element.bind("_resize",function(){
			if (o.oldElHeight){
				var p=o.$element.parent();
				if (p&&p.attr("region")){
				if (o.oldElHeight!=o.$element.height()){
					o.oldElHeight=o.$element.height();
					p.panel("resize",{height:o.oldHeight+o.$element.outerHeight()});
					p.parents("div.app-layout").layout("resize");
				};
			}
			}
		});
		var $target = $(target);
		if($target.length>0){
			o.$target=$target;
		}else{
			$target = $A("#"+target);
			if($target.length>0){
				o.$target=$target;
			}else{
				var dialogid=$A("[query-target]").parents(".dialog").attr("id");
				var queryDom=$("[dialogid="+dialogid+"]");
				var obj=queryDom.data("xquery");
				if (obj){
					o.$target=obj.$target;
				}
			}
		};
		o.manual =manual;
		o.hiddenCon={};
		
	};
	/**
	 * 条件参数收集
	 * @param ${object} options 查询组件范围
	 * @return {object} 参数对象
	 */
	function collectionCondition(o){
		var params = [],$e=o.$element,con=o.hiddenCon;
		var reqparams = {};
		if(con != null){
			$.each(con,function(key){
				if(con[key]){
					params.push(param);
				};
			});
		}
		$("[field]",$e).each(function(){
			var $t = $(this), checkFields={}
			,v=$t.val();
			var type=$t.attr("type");

			if(v!=null && v!=""){
				if( $t.attr("manual")!="true"){
					var m=$t.attr("model")
					,f=$t.attr("field")
					,op=$t.attr("operator")
					,p = m==null?f:m+"."+f
					,param={};
					param["prop"]=p;
					if(op)
						param["op"]=op;
					if (f){
					if (type=="checkbox"||type=="radio"){
						if (!checkFields[p]){
							checkFields[p]=p;
						$("[field="+f+"]:checkbox",$e).each(function () {
		                   if (this.checked){
		                	   if (!param["val"]){
		                		   param["val"]=[];
		                	   }
		                	    param["val"].push(v);
		                   }
		                	});
								param["val"]=param["val"].join(",");
								params.push(param);

						}
					}else{
						param["val"]=v;
						params.push(param);

					}
					}
				}else{
					var f=$t.attr("field");
					if (f){
					if (type=="checkbox"||type=="radio"){
						if (!checkFields[f]){
							checkFields[f]=f;
							reqparams[f]=[];
							$("[field="+f+"]:checkbox",$e).each(function () {
				                   if (this.checked){
				                	   reqparams[f].push(v)
				                   }
			                });
							reqparams[f]=reqparams[f].join(",");
						}
						}else{
						reqparams[f] = v;
					}
					}
				}
			}
	
		});
		reqparams["__xquery"] = JSON.stringify(params);
		return reqparams;
	};
	/**
	 * 条件参数收集
	 * @param ${object} 查询组件范围
	 * @return {object} 参数对象
	 */
	function collectionParams(o){
		var $e=o.$element,params = $.extend({},o.hiddenCon);
		var checkFields={};
		$("[field]",$e).each(function(){
			var $t = $(this)
			,v=$t.val();
			if(v!=null && v!=""){
				var f=$t.attr("field");
				var type=$t.attr("type");
				if (f){
					if (type=="checkbox"||type=="radio"){
						if (!checkFields[f]){
							checkFields[f]=f;
							params[f]=[];
						}
						if ($t[0].checked){
							params[f].push(v);
						}
					}else{
						params[f]=v;
					}
				}
				
			}
		});
		for(var key in checkFields){
			if (params[key]){
				params[key]=params[key].join(",")
			}
		}
		return params;
	};
	/**
	 * 原型定义
	 */
	QueryComp.prototype = {
		/**
		 * 快速查询
		 */
		quickQuery:function(){
			var b = true;
			var validator = this.$element.getJsonAttr("quick_validator");
			if($.isFunction(validator)){
				b = validator(this.$element);
			}
			if(!b){
				return b;
			}
			var param;
			if(this.manual){
				param = collectionParams(this);
			}else{
				param = collectionCondition(this);
			}
			if(this.$target.isGrid && this.$target.isGrid()){
				this.$target.bsgrid("load",param);
			}else if(this.$target.data("grid")){
				this.$target.grid("setParameter",param);
				this.$target.grid("load");
			}
			return b;
		},
		clearQuery:function(){
			
			
			this.$element.find("input,textarea").each(function(){
				if ($(this).attr("id")!=null){					
					$(this).clearCompValue()
				}
			})
			
		},
		close:function(){
			
			if (this.displaymode=="float"){
				this.$element.hide();
			}else{
				funcs.closeDialog();
			}
		},
		/**
		 * 高级查询
		 */
		advQuery:function(){
			var b = true;
			var validator = this.$element.getJsonAttr("adv_validator");
			if(validator){
				b = validator(this.$element);
			}
			if(!b){
				return b;
			}
			var param;
			if(this.manual){
				param = collectionParams(this);
			}else{
				param = collectionCondition(this);
			}
			if(this.$target.isGrid && this.$target.isGrid()){
				this.$target.bsgrid("load",param);
			}else if(this.$target.data("grid")){
				this.$target.grid("setParameter",param);
				this.$target.grid("load");
			}
			return b;
		},
		clear:function(){
			$("[field]",$e).each(function(){
				var $t = $(this);
				$t.val("");
			});
		},
		addParameter:function(key,val,op){
			var con = this.hiddenCon;
			if(val==null||val==""){
				con[key] = null;
				delete con[key];
				return;
			}
			if(this.manual){
				con[key]=v;
			}else{
				var param = con[key];
				if(param == null){
					param = {prop:key};
					con[key]=param;
				}
				if(op)
					param["op"]=op;
				param["val"]=v;
			}
		},
		openQuery:function(){
			var content = this.$element.attr("advance");
			
			if (!content){
				var id="#"+this.$element.attr("id")+"_advance_content";
				content=this.$element.find(id).val();
	
			}
		    var dlgId = this.$element.attr("dialogId");
		    if(!dlgId){
		    	dlgId = "advquery"+$A.nextId();
		    	this.$element.attr("dialogId",dlgId);
		    }
		    var $dlg=$("#"+dlgId);
		    if ($dlg.length>0){
		    	
		    	var pagejsobj=$dlg.data("jsObject");
	    	    if (pagejsobj){
	    	    	$($dlg[0]).setAppJsObject(pagejsobj.param.split(","),pagejsobj.objs);
	    	    }

				$A.dialog.setCurrent($dlg);
				$dlg.show();
				if(pagejsobj){
                    var pageobj=pagejsobj.objs[0];
                    if(pageobj.listeners&&pageobj.listeners.onQueryPageLoad){
                        pageobj.listeners.onQueryPageLoad();
                    }
                }
				$("#_dialogMask").show();
				return;

		    }
		    var showFn=function(dlg){
		    	var pagejsobj;
		    	if ($A.getWorkSpace()){
		    		
		    		var actionPage= $A.getWorkSpace().getActionPage()
		    		pagejsobj=$(actionPage).getAppJsObject();
		    	}

			    if (pagejsobj){
			    	  dlg.data("jsObject",pagejsobj);
			   		 $(dlg[0]).setAppJsObject(pagejsobj.param.split(","),pagejsobj.objs);
			    }
		    };
		    
		    var $content = $(content);
		   //.css("display","block");
		   $content.children().css("visibility", "hidden");

		    var $dlg=$.openModalDialog({beforShow:showFn,afterShow:showFn,afterClose:function(dlg){
		    	 $(dlg[0]).clearAppJsObject();
		    } ,url:$content,title:"高级查询",dialogId:dlgId,reload:false,mode:"node",onPageLoad:function(){
		    	var pagejsobj;
		   	$content.children().css("visibility", "");
		    	if ($A.getWorkSpace()){
		    		var actionPage= $A.getWorkSpace().getActionPage()
		    		pagejsobj=$(actionPage).getAppJsObject();
		    	}
		    	
		    	   if (pagejsobj&&pagejsobj.objs){
		    	   		var pageobj=pagejsobj.objs[0];
		    	   		if (pageobj.bindEvents){
		    	   			pageobj.bindEvents();
		    	   		}
                       if(pageobj.listeners&&pageobj.listeners.onQueryPageLoad){
                           pageobj.listeners.onQueryPageLoad();
                       }
		    	   }
		    	  
		    }});

		    
		    return $dlg;
		},hide : function() {
			if (this.displaymode=="float"){
				this.$element.hide();
			}else{
			if (this.$element){
				this.$element[0].style.display='none';
				var p=this.$element.parent();
				
				if (p){
					var options=p.panel("options")
					if (options.region){
						p.panel("resize",{height:this.oldHeight});
						p.parents("div.app-layout").layout("resize");
					}
					//p.parent().layout("resize");
				};
			}
			}
		},show : function(e) {
			
			if (this.displaymode=="float"){
				if (e){
				if (this.init==false){
					$A.getContainer().append(this.$element);
					var quicksContentId="#"+this.$element.attr("id")+"_quicks_content"
					,advancesContentId="#"+this.$element.attr("id")+"_advances_content"
					,quicksContent=this.$element.find(quicksContentId).val()
					,advancesContent=this.$element.find(advancesContentId).val()
					,$quicksItems=this.$element.find(".xquery-quicks-items .xquery-content")
					,$advanceItems=this.$element.find(".xquery-advance-items .xquery-content");
					//$quicksItems.html(quicksContent);
					//$advanceItems.html(advancesContent);
					var $xquerybox=$(e.currentTarget).parents(".app-xquerybox");
					var pos=$xquerybox.offset();
					pos.top=pos.top+$xquerybox.outerHeight()+1;
					this.$element.css({top:pos.top+"px"});
					this.$element.find(".arrow").on("click",function(){
					  var $this=$A(this);
					  var $advanceItems= $this.parents(".xquery-advance-items");
					   var $quicksItems= $this.parents(".xquery-quicks-items");
					   var indexDom=$advanceItems.length>0?$advanceItems:$quicksItems;
					  if ($this.hasClass("arrow-up")){
						  $this.removeClass("arrow-up").addClass("arrow-down");
						  indexDom.find(".xquery-content").hide()
					  }else{
						  $this.removeClass("arrow-down").addClass("arrow-up")
						   indexDom.find(".xquery-content").show()
					  }
					  
					});
					var _self=this;
					
				$(document).on('click',function (e) {
					var $target=$(e.target);
			        if (!($target.parents(".xquery").length>0||$target.hasClass(".xquery")))
			        	_self.close();
						
		
						});
					this.init=true;
					//this.$element.initPageUI();
				}
				this.$element.show();
				}
			}else{
				if (this.$element){
				var p=this.$element.parent();
				if (!this.oldHeight){
					this.oldHeight=p.outerHeight();
				}
				if (!this.oldElHeight){
					this.oldElHeight=this.$element.outerHeight();
				}
				this.$element[0].style.display='inline-block';
				if (p){
					var opt=p.panel("options");
					if (opt&&opt.region){
					p.panel("resize",{height:p.height()+this.$element.outerHeight()});
					p.parents("div.app-layout").layout("resize");
					}
				};
			}
			}
		},toggle:function(e){
		
			if (this.$element.is(":hidden")){
				this.show(e);
			}else{
				this.hide();	
			}
		},destroy:function(){
			 var dlgId = this.$element.attr("dialogId");
			 if(dlgId){
				 var $dlg=$("#"+dlgId);
				 if ($dlg.length>0){
					 $A.destroyDom($dlg);
					 $dlg.trigger($A.eventType.pageDestroy).remove();
				 }
			 }			
		}
	};
	/**
	 * jquery方法扩展xquery
	 */
	$.fn.xquery=function(option){
		var methodReturn = undefined
		,options = typeof option === 'object'? $.extend({},option):null;
		var methodName = null;
		var args = [];
		if(typeof option === 'string' ){
			methodName = option;
			 args = $.makeArray(arguments).slice(1);
		}
		
		var $set = this.each(function () {
			var $this = $(this);
			var data = $this.data('xquery');
			if (!data) $this.data('xquery', (data = new QueryComp(this, options)));
			if (methodName){
				var method =  data[methodName];
				if(method){
					methodReturn = method.apply(data,args);
				}
				//methodReturn = data[option]();
			}
		});
		return (methodReturn === undefined) ? $set : methodReturn;
	};
	
	$.fn.initXquery=function(option__){
		return $(this).each(function(){
			var $el = $(this);
			$el.find(".queryitem[visible=false]").hide();
		});
	};
	
	$.fn.xquery.Constructor = QueryComp;
	$(document).on('click.xquery.data-api', 'div.xquery .xquery-quick-button', function (e) {
		var $this = $(this);
		e.preventDefault();
		$this.parents(".xquery").xquery('quickQuery');
	});
	$(document).on('click.xquery.data-api', 'div.xquery .xquery-adv-button', function (e) {
		var $this = $(this);
	    e.preventDefault();
	    var $query = $this.parents("div.xquery:first");
	    $query.xquery("openQuery");
	});
	$(document).on('click.xquery.data-api', 'a.advancequery.ok', function (e) {
		e.preventDefault();
		if($A("[query-target]").xquery('advQuery')){
		
			$A("[query-target]").xquery('close');

			
		}
		
	});
	
	$(document).on('click.xquery.data-api', 'a.advancequery.rest', function (e) {
		$A("[query-target]").xquery('clearQuery');
	});
	
	$(document).on('click.xquery.data-api', 'a.advancequery.cancel', function (e) {
		e.preventDefault();
		$A("[query-target]").xquery('close');
	});
	
 	return $;
});
/**
 * 联想框控件--继承Combo
 * @author Mr.T
 */
define('app/widgets/form/app-xquerybox',['app/core/app-jquery', 'app/core/app-core', 'app/core/app-options', 'app/data/app-ajax',
        'app/widgets/form/app-suggest'], function($, App, Options, AppAjax, Suggest) {
	
	'use strict';

	/**
	 * @class 
	 * @classdesc 联想框
	 * <span class="type-signature static">extend</span>combo
	 * @see {@link combo-class} suggest继承至combo
	 * @name suggest-class
	 * @desc 联想框的初始化方法
	 * @param {DOMElement} input 要渲染的input组件
	 * @param {Object} options 组件的选项设置 
	 * @author Mr.T
	 * @example &lt;input &#9;class="app-suggest"
	 * &#9;_options="{
	 * &#9;&#9;suggest: 'html/example/app-input/data/data.idAndName'
	 * &#9;}"
	 * />
	 * @example $('#demo').suggest({
	 * &#9;suggest: 'html/example/app-input/data/data.idAndName'
	 * });
	 */
	var XqueryBox = Suggest.extend({
		initialize: function (input, options) {
			if(!options){
				options = {};
			}
			options.className = 'app-xquerybox';
			options._ = Options.appDefaults.Suggest;
			XqueryBox.superclass.initialize.call(this, input, options);
			XqueryBox.superclass._init.call(this);
			
			//this._init();
		},
		/**
		 * 初始化
		 */
		_init: function(){
		
			this.setting.valuefield='field';
			this.setting.textfield='textValue';
			this.setting.fieldname='name';
			this.setting.multiple=false;
			var queryId=this.setting["queryid"];
			this.on("afterSelected",this.queryTargetLoad);
			this.$searchBtn=$('<a class="wrapper-btn wrapper-search"><i></i></a>');
			this.$searchBtn.insertBefore(this.$openBtn);
			this.$element.on('mousedown.textbox.api', '.wrapper-btn.wrapper-open', function(e){
				if (queryId){
					$A("#"+queryId).xquery("toggle",e);
				}
			});
			this.$element.on('mousedown.textbox.api', 'input', function(e){
				if (queryId){
					$A("#"+queryId).xquery("close");
				}
			});
			var _self=this;
			this.$element.on('mousedown.textbox.api', '.wrapper-btn.wrapper-search',function(){
				var node=_self.getSelectedNode();
				
				_self.queryTargetLoad(node);
			})
			this.$element.addClass("app-xquerybox");
			this.$element.removeClass("app-suggest")
		},
		queryTargetLoad:function(node,all){
			var queryTarget=this.setting["querytarget"];
			var params=[],reqparams={};
			if (queryTarget){
				 if (node){
					params.push({op:'like',prop:node["field"],val:node["value"]})
					reqparams["__xquery"] = JSON.stringify(params);
				}else{
					if (all){
						var data=this.setting.data,len=data.length;
						
						for (var i=0;i<len;i++){
							params.push({op:'like',prop:data[i]["field"],val:data[i]["value"]})
							reqparams["__xquery"] = JSON.stringify(params);
						}
					}else{
						reqparams["__xquery"]=null;
					}
					
				}
				$A("#"+queryTarget).grid("setParameter",reqparams);

				 $A("#"+queryTarget).grid("load");
			}
			
		},
		/**
		 * 初始化设置
		 */
		_initOptions: function(){
			var s = this.setting;
			//如果没有设置suggest地址，则使用url
			if((s.suggest == '' || s.suggest == true)
					&& s.url){
				s.suggest = s.url;
			}
			if(s.suggest == false){
				s.suggest = '';
			}
			//远程加载，可以是remote 或 async
			if(!s.remote && s.async){
				s.remote = true; 
			}
			if(s.textfield == s.valuefield){
				this.setText(s.value);
			}
			if(!s.suggestfield){
				s.suggestfield = s.textfield;
			}
			if(s.suggestClear && !s.multiple){
				s.suggestClear = true;
			}else{
				s.suggestClear = false;
			}
		},
		/**
		 * 初始化下拉面板的内容
		 */
		_initPanelContent: function(){
			this._fixSuggestPanel();
			this.$dropPanelMain.append('<div class="suggest-list">' +
				      				'<ul></ul>' +		
				      			'</div>');
			this.$dropPanelCustom.append('<div class="selected-list"></div>');
			this.$dropPanelCustom.css('overflow', 'auto');
			this.$suggest = this.$dropPanel.find('.suggest-list');
			this.$suggestList = this.$suggest.find('>ul');
			this.$selectedList = this.$dropPanelCustom.find('.selected-list');
		},
		/**
		 * 修复下拉面板的占比高度
		 */
		_fixSuggestPanel: function(){
			var slt_height = 0
				,setting = this.setting;
			if(setting.acceptText){
				slt_height = 0;
			}else if(setting.slt_area){
				slt_height = Number(setting.slt_area);
			}
			if(isNaN(slt_height)){
				return;
			}
			this.$dropPanelCustom.css('height', slt_height);
			this.$dropPanel.css('padding-bottom', slt_height);
		},
		/**
		 * 事件注册器
		 */
		_eventRegister: function(){
			var s = this.setting;
			if($.isFunction(s.afterSelected)){
				this.on('afterSelected', s.afterSelected);
			}
			if($.isFunction(s.beforeSelected)){
				this.on('beforeSelected', s.beforeSelected);
			}
		},
		/**
		 * 注册控件事件
		 */
		_registEvents: function(){
			this.$text.on('focus.suggest.api', $.proxy(this._textFocusEvent, this));
			var that = this;
			//当联想框作为单独的主体控件
			if(this.$element.hasClass('app-suggest')){
				this.$openBtn.off('click.textbox.api');
				this.$openBtn.on('click.suggest.api', function(e){
					that.$text.focus();
				});
			}else{
				this.$element.data('suggest', this);
			}
			this.$suggestList.on('click.suggest.api', 'li', function(){
				that._suggestItemActive($(this));
			});
			this._onSelectedNodeDeleteEvent();
			this._bindShowHistory();
		},
		/**
		 * 覆盖父类的绑定方法
		 */
		_textChangeEvent: function(){
			if(this.setting.acceptText){
				var that = this;
				this.$text.on('change.textbox.api',function(){
					var selectedNode = that.getSelectedNode()
						,nodeText = that._getSelectedNodeText(selectedNode)
						,text = that.getText();
					if(nodeText != text){
						selectedNode = that._createSelectedNode(text);
					}
					that.setSelectedNode(selectedNode);
				});
			}
		},
		/**
		 * 显示值文本框获得焦点事件
		 */
		_textFocusEvent: function(){
			var $text = this.$text;
			$text.data('oriText', $text.val());
		},
		_bindShowHistory: function(){
			if(!this._localStorage){
				return;
			}
			var that = this;
			this.$text.on('fucus.suggest.api click.suggest.api', function(){
				if($.trim(that.getText())){
					return;
				}
				that._showHistory();
			}).on('keyup.suggest.api', function(e){
				if(that._mainDivIsVisiable()){
					return;
				}
				if(e.keyCode == App.keyCode.DOWN){
					that._showHistory();
					return;
				}
				if($.trim(that.getText())){
					return;
				}
				that._showHistory();
			});
		},
		_showHistory: function(){
			var nodes = this._localStorage.get();
			if(!nodes){
				return;
			}
			this._render$SuggestNode(nodes);
			this.$dropPanel.show();
			this.place();
		},
		/**
		 * 设置已选项的删除按钮事件
		 */
		_onSelectedNodeDeleteEvent: function(){
			var that = this;
			this.$selectedList.on('click.suggest.api', '.sd-close-btn', function(){
				var $selectedNode = $(this).parent()
					,node = that._getNode($selectedNode);
				that.$suggestList.find('.selected[_v="' + node[that.setting.valuefield] + '"]').removeClass('selected');
				$selectedNode.remove();
				that._setSelectedNodeBySltArea();
			});
		},
		/**
		 * 按键事件
		 * 1、联想
		 * 2、导航
		 */
		_keyManager: function(e){
			
			if(this.stopKeyEvent){
				return;
			}
			if(this._dealSysKey(e)){
				
				return;
			}
			if(this._mainDivIsVisiable()){
			
				this._keyForVisiblePanel(e);
			}else{
			
				this._keyForHiddenPanel(e);
			}
		},
		/**
		 * 面板可见状态下的按键事件处理
		 */
		_keyForVisiblePanel: function(e){
			var keyCode = e.keyCode
				,s = this.setting;

			e.stopPropagation();
			if(App.containKeyCode(e, s.keyNextNode)){
				this._keyNextNode(e);
			}else if(App.containKeyCode(e, s.keyPrevNode)){
				this._keyPrevNode(e);
			}else if(App.containKeyCode(e, s.keyPickNode)){
				this._keyPickNode(e);
			}else if(App.containKeyCode(e, s.keyNextSltNode)){
				this._keyNextSltNode(e);
			}else if(App.containKeyCode(e, s.keyPrevSltNode)){
				this._keyPrevSltNode(e);
			}else if(App.containKeyCode(e, s.keyHidePanel)){
				this._keyHidePanel(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 面板不可见状态下的按键事件处理
		 */
		_keyForHiddenPanel: function(e){
			var keyCode = e.keyCode;
			if(this._isKeyCursorPos(keyCode)){
				this._keyCursorPos(e);
			}else if(this._keyFilterSuggest(e)){
				this.suggest();
			}
		},
		/**
		 * 切换到联想项区域
		 *    并从当前滚动到的可视选项中开始导航
		 */
		_switchSuggest: function(){
			var $c = this.$selectedList.find('.selected-item.current');
			if($c.length > 0){
				$c.removeClass('current');
				var top = this.$suggest.scrollTop()
					,$nodes = this.$suggestList.find('>li')
					,h = $($nodes[0]).outerHeight()
					,index =  Math.floor(top/h);
				$($nodes[index]).addClass('current');
			}
		},
		/**
		 * 切换到联想区域，定位上一个节点
		 */
		_keyPrevNode: function(e){
			e.preventDefault();
			var $l = this.$suggestList;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.prev();
			if($n.length == 0){
				$n = $l.find('li:last-child');
			}
			this._switchSuggest();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSuggest();
		},
		/**
		 * 切换到联想区域，并定位下一个节点
		 */
		_keyNextNode: function(e){
			e.preventDefault();
			this._locateNextNode();
		},
		/**
		 * 定位下一个节点
		 */
		_locateNextNode: function(){
			var $l = this.$suggestList;
			if($l.find('>li').length == 0){
				return;
			}
			var $c = $l.find('.current')
				,$n = $c.next();
			if($n.length == 0){
				$n = $l.find('li:first-child');
			}
			this._switchSuggest();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSuggest();
		},
		/**
		 * 选中一个节点
		 */
		_keyPickNode: function(e){
			e.preventDefault();
			var $c = this.$dropPanel.find('.current');
			if($c.length == 0){
				this.queryTargetLoad(null,true)
			}
			if($c.hasClass('selected-item')){
				$c.find('.sd-close-btn').click();
				this._keyNextSltNode(e);
			}else{
				this._suggestItemActive($c);
				this._locateNextNode();
			}
		},
		/**
		 * 联想项的定位到当前项
		 */
		_locateSuggest: function(){
			var $c = this.$suggestList.find('li.current');
			if($c.length != 1){
				return;
			}
			var top = $c.offset().top + $c.outerHeight() - this.$suggestList.offset().top
				,containerHeight = this.$suggest.outerHeight() -2
				,scrollTop = this.$suggest.scrollTop();
			if(top <= scrollTop){
				this.$suggest.scrollTop(top - $c.outerHeight());
			}else if(top >= scrollTop + containerHeight){
				this.$suggest.scrollTop(top - containerHeight);
			}
		},
		/**
		 * 切换到已选项区域
		 */
		_switchSelected: function(){
			this.$suggestList.find('li.current').removeClass('current');
		},
		/**
		 * 切换到已选区域，定位上一个已选择节点
		 */
		_keyPrevSltNode: function(e){
			e.preventDefault();
			var $slts = this.$selectedList.find('>div');
			if($slts.length == 0){
				return;
			}
			var $c = this.$selectedList.find('>div.current')
				,$n = $c.prev();
			if($n.length == 0){
				$n = $($slts[$slts.length-1]);
			}
			this._switchSelected();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSelected();
		},
		/**
		 * 切换到已选区域，定位下一个已选择节点
		 */
		_keyNextSltNode: function(e){
			var $slts = this.$selectedList.find('>div');
			if($slts.length == 0){
				return;
			}
			var $c = this.$selectedList.find('>div.current')
				,$n = $c.next();
			if($n.length == 0){
				$n = $($slts[0]);
			}
			this._switchSelected();
			$c.removeClass('current');
			$n.addClass('current');
			this._locateSelected();
		},
		/**
		 * 选择项的定位
		 */
		_locateSelected: function(){
			var $c = this.$selectedList.find('>div.current');
			if($c.length != 1){
				return;
			}
			var t = $c.offset().top - $c.parent().offset().top;
			this.$selectedList.scrollTop(t);
		},
		/**
		 * 根据输入内容进行延迟联想
		 */
		suggest: function(){
			var that = this;
			//保持延迟时间内只触发一次联想操作
			clearTimeout(this.timeout);
			this.timeout = 
				setTimeout(function(){
					that._suggestFunc();
				}, this.setting.lazy);
		},
		/**
		 * 根据输入的值进行联想
		 * 	保持联想面板打开状态
		 */
		_suggestFunc: function(){
			if(this.stopKeyEvent){
				return;
			}
		
			if(this.setting.suggestClear){
				this.setSelectedNode(null, true);
				this._setValue('');
			}
			if(!this.isActive()){
				return;
			}
		
			//如果联想面板不是打开状态，则打开渲染。否则只进行联想
 			if(!this._mainDivIsVisiable() && !this.setting.acceptText){
 				this.showPanel();
 			}
			if(this._preventSuggest()){
				this.$input.data('selectNode',null);
				this.hidePanel();
				this.queryTargetLoad(null,false);
				//this._selected$SuggestNode();
				return;
			}
			
			if(this.setting.acceptText){
				this.$selectedList.html('');
			}
			if(this._onBeforeLoad() === false){
				return;
			}
			if(this.setting.remote){
				this._suggestByRemote();
			}else{
				this._suggestByLocal();
			}
		},
		/**
		 * 阻止联想事件
		 * 1、当联想的关键字为空
		 * 2、当联想的关键字与上次联想的相同
		 * 3、当上次联想为空 且这次的关键字以上次的关键字开头
		 * @returns true 进行阻止
		 */
		_preventSuggest: function(){
			var key = this.getText()
				,stop = false;
			if(!$.trim(key)){
				stop = true;
			}else if(!this.prevKey){
				
			}else if(this.prevKey == key && !this.setting.acceptText){
				stop = true;
			}
			this.prevKey = key;
			return stop;
		},
		/**
		 * 根据远程设置地址进行联想
		 * @param sugest 联想框全局对象
		 */
		_suggestByRemote: function(){
			var url = this.setting.suggest
				,onlyleaf = this.setting.onlyleaf
				,that = this;
			if(url){
				var queryParams = $.extend({}, this.getParameter());
				queryParams._key = this.getText();
				queryParams.suggestfield = this.setting.suggestfield;
				this.$dropPanelLoading.show();
				AppAjax.ajaxCall({
					url: url,
					data: queryParams,
					dataType: 'json',
					type: 'POST',
					success: function(data){
						that.$dropPanelLoading.hide();
						var result = [];
						if(onlyleaf){
							for(var i = 0; i < data.length; i ++){
								if(that._isLeaf(data, data[i]))
									result.push(data[i]);
							}
						}else
							result = data;
						that._render$SuggestNode(result);
					}
				});	
			}
		},
		/**
		 * 根据本地数据源进行匹配
		 * 1、如果存在本地数据源则直接进行匹配
		 * 2、如果不存在，本地数据源，则根据suggest资源地址初始化数据源后，再进行匹配
		 */
		_suggestByLocal: function(){
			this._initDataByParameter();
			if(this.setting.data != undefined){
				var suggestData = this._filterByKey();
				this._render$SuggestNode(suggestData);
			}else{
				var url = this.setting.suggest
					,that = this;
				if(url){
					this.$dropPanelLoading.show();
					AppAjax.ajaxCall({
						url: url,
						data: this.getParameter(),
						dataType: 'json',
						type: 'POST',
						success: function(data){
							that.$dropPanelLoading.hide();
							that.setting.data = data;
							that._suggestByLocal();
						}
					});	
				}
			}
		},
		
		/**
		 * 根据查询参数重置联想框的数据源
		 */
		_initDataByParameter: function(){
			var currParam = this.getParameter();
			if(currParam){
				if(JSON.stringify(this.lastParam) != JSON.stringify(currParam)){
					this.setting.data = undefined;
				}
				this.lastParam = currParam;
			}
		},
		/**
		 * 根据数据源按照key模糊匹配节点，并设置联想项
		 * @param data 节点数据源数组
		 * @param key 匹配关键字
		 * @returns {Array} 匹配的节点数组
		 */
		_filterByKey: function(){
			var data = this.setting.data,
			key = this.getText(),result = [];
			
				/*	,,field = this.setting.suggestfield
				,onlyleaf = this.setting.onlyleaf
				
			if(!field){
				field = this.setting.textfield;
			}
			var fs = field.split(',');*/
			for(var i = 0; i < data.length; i++){
				key=key.replace(data[i][this.setting.fieldname],"");
				key=key.replace(":","");
				
			}
			for(var i = 0; i < data.length; i++){
				data[i]["textValue"]=data[i][this.setting.fieldname]+":"+key;
				data[i]["value"]=key;
				result.push(data[i]);
				/*for ( var j = 0; j < fs.length; j++) {
					var val = data[i][fs[j]];
					if(val){
						val = val.toUpperCase();													
						if(val.indexOf(key) != -1){
							if(onlyleaf && !this._isLeaf(data, data[i])){
								break;
							}
							
							break;
						}
					}
				}*/
			}
			return result;
		},
		/**
		 * 当只能选择叶子节点时，判断传入的该节点是否为叶子节点，否则返回true
		 * @param id
		 */
		_isLeaf: function(data, node){
			var pidfield = this.setting.pidfield
				,valuefield = this.setting.valuefield;
			if(node['isParent'] == 'true' || node['isParent'] == true)
				return false;
			for(var i = 0; i < data.length; i++){
				if(data[i][pidfield] == node[valuefield])
					return false;
			}
			return true;
		},
		/**
		 * 渲染联想项列表
		 */
		_render$SuggestNode: function(data){
			this.$suggestList.html('');
			var vf = this.setting.valuefield
				,tf = this.setting.textfield
				,key = this.getText();
			if(data.length == 0){
				this.$dropPanelEmpty.show();
			}else{
				this.$dropPanelEmpty.hide();
			}
			for ( var i = 0; i < data.length; i++) {
				var node = data[i]
					,$suggestItem = $('<li _v="' + node[vf] + '"><i class="icon-ok"></i>' + 
									this._getSuggestText(node[tf], key) + '</li>');
				this.$suggestList.append($suggestItem);
				this._setNode($suggestItem, node);
			}
			this._selected$SuggestNode();
			if(data.length == 1){
				this._locateNextNode();
			}
			if(this.setting.acceptText){
				if(data.length == 0){
					this.hidePanel();
				}else{
					this.showPanel();
				}
			}
		},
		/**
		 * 获取显示名称
		 * @param text
		 * @param key
		 * @returns {String}
		 */
		_getSuggestText: function(text, key){
			if(this.setting.suggestfield 
					&& this.setting.suggestfield != this.setting.textfield){
				return text;
			}
			if(key == ''){
				return text;
			}
			var index = text.indexOf(key);
			if(index == -1){
				index = text.toUpperCase().indexOf(key.toUpperCase());
				if(index == -1){
					return text;
				}
			}
			var keyLen = key.length;
			return text.substring(0,index) +
				'<em>' + text.substring(index, index+keyLen) +'</em>' +
				text.substring(keyLen + index);
		},
		/**
		 * 按照已选节点进行渲染联想项
		 */
		_selected$SuggestNode: function(){
			var selectedNode = this.getSelectedNode()
				,vf = this.setting.valuefield
				,that = this;
			if(!selectedNode){
				selectedNode = [];
			}else{
				if(!$.isArray(selectedNode)){
					selectedNode = [selectedNode];
				}
			}
			for(var i = 0; i < selectedNode.length; i++){
				var $select = this.$suggestList.find('li[_v="' + selectedNode[i][vf] + '"]');
				$select.addClass('selected');
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 显示或隐藏下拉面板，该方法已绑定在组件的右边按钮中
		 */
		togglePanel: function(){
			
		},
		/**
		 * 显示当前对象的联想面板
		 * 1、关闭其他可见的联想面板
		 * 2、根据隐藏值进行渲染选择项
		 * 3、开启点击html关闭该面板的操作
		 */
		showPanel: function(){
			this._render$SelectedNode();
			this._showPanel();
		},
		/**
		 * 根据隐藏值进行渲染选择项
		 * 1、如果已设置显示值，则根据显示值结合隐藏值进行匹配设置，
		 * 		如果显示值和隐藏值不匹配，则无法完成渲染
		 * 2、如果没有设置显示值，而使用本地数据源，则根据隐藏值匹配出显示值，并渲染选择项
		 */
		_render$SelectedNode: function(){
			this._resetRender();
			this._reset$SelectedNode();
			var selectedNode = this.getSelectedNode();
			if(!selectedNode){
				return;
			}
			if($.isArray(selectedNode)){
				for (var i = 0; i < selectedNode.length; i++) {
					this._appendSelectedItem(selectedNode[i]);
				}
			}else{
				this._appendSelectedItem(selectedNode);
			}
		},
		/**
		 * 设置选中节点
		 */
		_reset$SelectedNode: function(){
			var node = this.getSelectedNode();
			if(node){
				return;
			}
			var value = this.getValue();
			if(!value){
				return;
			}
			var vs = value.split(',')
				,text = this.$text.data('oriText')
				,vf = this.setting.valuefield
				,tf = this.setting.textfield
				,multiple = this.setting.multiple
				,selectedNode = [];
			if(text){
				var ts = text.split(',');
				for ( var i = 0; i < vs.length; i++) {
					var node = {};
					node[vf] = vs[i];
					node[tf] = ts[i];
					selectedNode.push(node);
				}
			}else if(this._isLocalSuggest()){
				selectedNode = this._getSelectedNodeByValue(vs);
			}
			if(multiple){
				this.setSelectedNode(selectedNode, true);
			}else{
				this.setSelectedNode(selectedNode[0], true);
			}
		},
		/**
		 * 根据隐藏值匹配数据源，并生成选择项数据
		 * @param vs 隐藏值数组
		 */
		_getSelectedNodeByValue: function(vs){
			var result = []
				,data = this.setting.data
				,valueField = this.setting.valuefield;
			for ( var i = 0; i < vs.length; i++) {
				for(var j =0; j < data.length; j++){
					if(vs[i] == data[j][valueField]){
						result.push(data[j]);
						continue;
					}
				}
			}
			return result;
		},
		/**
		 * 判断是否为本地数据源联想
		 * @returns true
		 */
		_isLocalSuggest: function(suggest){
			if(this.setting.data != undefined 
					&& !this.setting.async){
				return true;
			}
			return false;
		},
		/**
		 * 隐藏联想框
		 * 1、关闭html的click.suggest.api事件代理
		 * 2、根据当前选择项设置联想框的显示值和隐藏值
		 */
		hidePanel: function(){
			if(this._mainDivIsVisiable()){
				this.$dropPanel.hide();
				$(document).off('click.combo.api');
				if(!this.setting.acceptText){
					this.setSelectedNode(this.getSelectedNode());
				}
			}
		},
		/**
		 * 根据文本生成一个固定节点
		 */
		_createSelectedNode: function(text){
			var selectedNode = {};
			selectedNode[this.setting.textfield] = text;
			selectedNode[this.setting.valuefield] = text;
			return selectedNode;
		},
		/**
		 * 获取以选中节点的文本
		 */
		_getSelectedNodeText: function(nodes){
			if(!nodes){
				return '';
			}
			var text = ''
				,tf = this.setting.textfield;
			if($.isArray(nodes)){
				for(var i = 0; i < nodes.length; i++){
					text += nodes[i][tf] + ',';
				}
				if (text.length > 0 ) text = text.substring(0, text.length-1);
			}else{
				text = nodes[tf] ? nodes[tf] : '';
			}
			return text;
		},
		/**
		 * 载入数据，并根据数据渲染下拉面板
		 * @param {Array.<Node>} data 载入的数据列表
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').suggest('loadData',[{id:1,name:'是'},{id:0,name:'否'}]);
		 * @memberof suggest-class
		 * @instance
		 */
		loadData: function(data){
			this.setting.data = data;
			this.setting.remote = false; 
		},
		/**
		 * 根据url载入数据源作为联想的数据源
		 * @param {url} url 要加载的url
		 * @todo 根据数据渲染下拉面板的内容
		 * @todo 设置联想为本地联想
		 * @example $('#demo').combobox('reload','a.do');
		 * @memberof suggest-class
		 * @instance
		 */
		reload: function(url){
			if(url){
				var that = this;
				this.$dropPanelLoading.show();
				AppAjax.ajaxCall({
					url: url,
					data: this.getParameter(),
					dataType: 'json',
					type: 'POST',
					success: function(data){
						that.$dropPanelLoading.hide();
						that.loadData(data);
					}
				});	
			}
		},
		/**
		 * <span class="type-signature static">override</span>
		 * 清除值
		 * @todo 清除隐藏值
		 * @todo 清除显示值
		 * @todo 清除面板的选择项
		 * @memberof suggest-class
		 * @instance
		 */
		clearValue: function(){
			this.setText('');
			this.setValue('');
			this._resetRender();
			this.setSelectedNode(null);
		},
		/**
		 * 重置当前联想项列表的选中状态和已选项项节点
		 */
		_resetRender: function(){
			this.$suggestList.find('li.selected').removeClass('selected');
			this.$selectedList.html('');
		},
		/**
		 * 根据已选框的选项设置组件的已选节点
		 */
		_setSelectedNodeBySltArea: function(){
			var $selectedNodes = this.$selectedList.children()
				,selectedNode = [];
			for(var i = 0; i< $selectedNodes.length; i++){
				selectedNode.push(this._getNode($($selectedNodes[i])));
			}
			if(!this.setting.multiple){
				selectedNode = selectedNode[0];
				if(selectedNode == undefined){
					selectedNode = null;
				}
			}
			this.setSelectedNode(selectedNode, !this.setting.acceptText);
		},
		/**
		 * 联想被激发
		 * 1、如果存在自定义选择前事件，先执行该事件，如果返回false 则结束选择，否则执行2
		 * 2、单选则设值当前选择项为值，并关闭下拉框；多选则追加当前选择项为值
		 * 3、如果存在自定义选择后事件，则执行该事件
		 * @param $node 被激发的联想项
		 */
		_suggestItemActive: function($node){
			if(this._isSelected($node)){
				this._unselect$SuggestNode($node);
				this._setSelectedNodeBySltArea();
			}else{
				this._select$SuggestNode($node);
			}
		},
		/**
		 * 判断该节点是否已经被选中
		 */
		_isSelected: function($node){
			return $node.hasClass('selected');
		},
		/**
		 * 将节点设置为选中的样式
		 */
		_select$SuggestNode: function($node){
			/**
			 * 节点被选择前事件，并返回一个值，当为false时取消选择操作
			 * @event suggest-class#beforeSelected
			 * @param {Node} node 被选择的节点
			 * @returns {Boolean} boolean 返回值为false 取消选择
			 */
			if(this._active$NodeEvent('beforeSelected', $node) === false){
				return;
			}
			var node = this._getNode($node);
			if(this.setting.multiple){
				$node.addClass('selected');
				this._appendSelectedItem(node);
				this._setSelectedNodeBySltArea();
			}else{
				this.$suggestList.find('li.selected').removeClass('selected');
				this.$selectedList.html('');
				$node.addClass('selected');
				this._appendSelectedItem(node);
				this._setSelectedNodeBySltArea();
				this.hidePanel();
			}
			/**
			 * 节点选择后事件
			 * @event suggest-class#afterSelected
			 * @param {Node} node 被选择的节点
			 */
			this._active$NodeEvent('afterSelected', $node);
		},
		/**
		 * 将节点设置为未选中的样式
		 */
		_unselect$SuggestNode: function($node){
			$node.removeClass('selected');
			var node = this._getNode($node);
			this.$selectedList.find('.selected-item[_v="' + node[this.setting.valuefield] + '"]').remove();
		},
		/**
		 * 执行自定义选择前事件
		 * @param $node 当前被点击的选择项
		 * @returns {Boolean} false 结束点击事件
		 */
		_active$NodeEvent: function(eventName, $node){
			if(this.hasBindEvent(eventName)){
				return this.trigger(eventName, this._getNode($node));
			}
		},
		/**
		 * 根据Li选择项获取当前节点
		 * @param li Li选择项
		 * @returns {}
		 */
		_getNode: function ($node){
			return $node.data('node');
		},
		/**
		 * 设置Li选择项获取当前节点
		 * @param li Li选择项
		 * @returns {}
		 */
		_setNode: function ($node, node){
			$node.data('node', node);
		},
		/**
		 * 追加选择项到已选面板
		 * @param node 节点数据
		 */
		_appendSelectedItem: function(node){
			if(this.$selectedList.find('.selected-item[_v="' + node[this.setting.valuefield] + '"]').length == 0){
				var $selectedNode = $('<div class="selected-item" _v="' + node[this.setting.valuefield] + '">' + 
						node[this.setting.textfield] + '<span class="sd-close-btn"></span></div>');
				this._setNode($selectedNode, node);
				this.$selectedList.append($selectedNode);
			}
		}
	});
	
	$.fn.xquerybox = function (option, value) {
		var methodReturn = undefined
			,args = arguments
			,componentName = 'xquerybox';
		this.each(function () {
			var $this = $(this);
			if(!$this.is('input')){
				return true;
			}
			var component = $this.data(componentName);
			if(typeof option === 'string'){
				try{
					var methodArgs = Array.prototype.slice.call(args, 1);
					methodReturn = App.componentMethodApply(component, option, methodArgs);
				}catch(e){
					App.throwCompMethodError($this, componentName, option, e);
				}
			}else{
				if(!component){
					component = new XqueryBox(this, option);
					$this.data(componentName, component);
				}else{
					App.throwCompInitError($this, componentName);
				}
			}
		});
		return methodReturn;
	};

	return XqueryBox;
});
define(	'app/widgets/panel/app-panel',["app/core/app-jquery", "app/core/app-core", "app/core/app-options",
				"jquery/jquery-ui", "app/widgets/app-widget"], function($, $A, Opts,
				resizable, Widget) {
			var timeout = null;
			$(window).unbind('.panel').bind('resize.panel', function() {
				// console.log('sdfsdf');
				if (timeout) {
					clearTimeout(timeout);
				}
				timeout = setTimeout(function() {
							var layout = $A('body.layout');
							// var layout = $('body.layout');
							if (layout.length) {
								layout.layout('resize');
							} else {
								var layouts = $A('.app-layout');
								var boxLayout = $A('.app-vboxLayout,.app-hboxLayout');
								if (layouts.length) {
									$A(layouts[0]).layout('resize');
								} else if (boxLayout.length) {
									boxLayout.triggerHandler('_resize');

								} else {
									$A('body>div.panel')
											.triggerHandler('_resize');
								}
							}
						}, 100);
			});

			var Panel = Widget.extend({
				initialize : function(el, options) {
					if (!options) {
						options = {};
					}
					Panel.superclass.initialize.call(this, options);

					var t = $(el);
					this.element=el;
					var opts = $.extend({}, Opts.appDefaults.Panel, Panel
									.parseOptions(el), options);
					$.data(el, "panel", {
								options : opts,
								panel : this.wrapPanel(el),
								isLoaded : false
							});

				},
				_init : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;

					if (opts.content) {
						$(this).html(opts.content);
						if ($.parser) {
							$.parser.parse(this);
						}
					}

					this.addEvents("onBeforeLoad","onLoad","onLoadError","onBeforeOpen","onOpen","onBeforeClose","onClose","onBeforeDestroy","onDestroy","BeforeCollapse","onCollapse","onBeforeExpand","onExpand","onResize","onMove","onMove","onMaximize","onRestore","onMinimize");
					this.addHeader(target);
					this.setBorder(target);
					// loadData(this);

					if (opts.doSize == true) {
						// panel.css('display', 'block');
						this._setSize(target);
					}
					if (opts.closed == true || opts.minimized == true) {
						panel.hide();
					} else {
						this._openPanel(target);
					}
				},
				panel : function(target) {
					
					var panel = $.data(target, 'panel').panel;
					return panel;
				},
				removeNode : function(node) {
					node.each(function() {
								$(this).remove();
								if ($.browser.msie) {
									this.outerHTML = '';
								}
							});
				},

				_setSize : function(target, param) {

					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var pheader = panel.find('>div.panel-header');
					var pbody = panel.find('>div.panel-body');

					if (param) {
						if (param.width)
							opts.width = param.width;
						if (param.height)
							opts.height = param.height;
						if (param.left != null)
							opts.left = param.left;
						if (param.top != null)
							opts.top = param.top;
					}

					if (opts.fit == true) {
						var p = panel.parent();
						opts.width = p.width();
						opts.height = p.height();
					}

					panel.css({
								left : opts.left,
								top : opts.top
							});
					panel.css(opts.style);
					panel.addClass(opts.cls);
					pheader.addClass(opts.headerCls);
					pbody.addClass(opts.bodyCls);
					if (!isNaN(opts.width)) {
						panel.outerWidth(opts.width);
						/*
						 * if ($.boxModel == true){ panel.width(opts.width -
						 * (panel.outerWidth() - panel.width()));
						 * console.log(panel.width())
						 * pheader.width(panel.width() - (pheader.outerWidth() -
						 * pheader.width())); pbody.width(panel.width() -
						 * (pbody.outerWidth() - pbody.width())); } else {
						 * panel.width(opts.width);
						 * pheader.width(panel.width());
						 * pbody.width(panel.width()); }
						 */
					} else {
						panel.width('auto');
						pbody.width('auto');
					}
					// console.log(panel.width())
					pheader.add(pbody)._outerWidth(panel.width());

					if (!isNaN(opts.height)) {
						// var height = opts.height -
						// (panel.outerHeight()-panel.height()) -
						// pheader.outerHeight();
						// if ($.boxModel == true){
						// height -= pbody.outerHeight() - pbody.height();
						// }
						// pbody.height(height);

						panel.outerHeight(opts.height);
						pbody.outerHeight(panel.outerHeight()
								- pheader.outerHeight());
						/*
						 * if ($.boxModel == true){ panel.height(opts.height -
						 * (panel.outerHeight() - panel.height()));
						 * pbody.height(panel.height() - pheader.outerHeight() -
						 * (pbody.outerHeight() - pbody.height())); } else {
						 * panel.height(opts.height);
						 * pbody.height(panel.height() - pheader.outerHeight()); }
						 */
					} else {
						pbody.height('auto');

					}
					panel.css('height', "");
					this.trigger("onResize",opts.width, opts.height)
					//opts..apply(target, [opts.width, opts.height]);
					// panel.find('>div.panel-body>div').triggerHandler('_resize');
					$(target).panel("doLayout");
				},

				_movePanel : function(target, param) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					if (param) {
						if (param.left != null)
							opts.left = param.left;
						if (param.top != null)
							opts.top = param.top;
					}
					panel.css({
								left : opts.left,
								top : opts.top
							});
					opts.onMove.apply(target, [opts.left, opts.top]);
				},

				wrapPanel : function(target) {
					var panel = $(target).addClass('panel-body').css({
								margin : 0
							}).wrap('<div class="panel"></div>').parent();
					var _self = this;
					panel.bind('_resize', function() {
								var opts = $.data(target, 'panel').options;
								if (opts.fit == true) {
									_self._setSize(target);
								}
								return false;
							});

					return panel;
				},

				addHeader : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var _self = this;
					this.removeNode(panel.find('>div.panel-header'));

					if (opts.title && !opts.noheader) {
						var header = $('<div class="panel-header"><div class="panel-title">'
								+ opts.title + '</div></div>').prependTo(panel);
						if (opts.iconCls) {
							header.find('.panel-title')
									.addClass('panel-with-icon');
							$('<div class="panel-icon"></div>')
									.addClass(opts.iconCls).appendTo(header);
						}
						var tool = $('<div class="panel-tool"></div>')
								.appendTo(header);
						if (opts.closable) {
							$('<a class="panel-tool-close"></a>')
									.appendTo(tool).bind('click', function(){
										
										_self.trigger("onClose",target)
									});
						}
						if (opts.maximizable) {
							$('<a class="panel-tool-max"></a>')
									.appendTo(tool).bind('click', function(){
										
										_self.trigger("onMax",target)
									} );
						}
						if (opts.minimizable) {
							$('<a class="panel-tool-min"></a>')
									.appendTo(tool).bind('click',  function(){
										
										_self.trigger("onMin",target)
									} );
						}
						if (opts.collapsible) {
							$('<a class="panel-tool-collapse"></a>')
									.appendTo(tool).bind('click', function(){
										
										onToggle($(this));
										_self.trigger("onToggle",target)
									} );
						}
						if (opts.tools) {
							if (typeof opts.tools == "string") {
								$(opts.tools).children().each(function() {
									$(this).addClass($(this).attr("iconCls"))
											.addClass("panel-tool-a")
											.appendTo(tool);
								});
							} else {
								for (var i = 0; i < opts.tools.length; i++) {
									var t = $("<a href=\"javascript:void(0)\"></a>")
											.addClass(opts.tools[i].iconCls)
											.appendTo(tool);
									if (opts.tools[i].handler) {
										t.bind("click",
												eval(opts.tools[i].handler));
									}
								}
							}

							/*
							 * for(var i=opts.tools.length-1; i>=0; i--){ var t =
							 * $('<div></div>').addClass(opts.tools[i].iconCls).appendTo(tool);
							 * if (opts.tools[i].handler){ t.bind('click',
							 * eval(opts.tools[i].handler)); } }
							 */
						}
						tool.find('div').hover(function() {
									$(this).addClass('panel-tool-over');
								}, function() {
									$(this).removeClass('panel-tool-over');
								});
						panel.find('>div.panel-body')
								.removeClass('panel-body-noheader');
					} else {
						panel.find('>div.panel-body')
								.addClass('panel-body-noheader');
					};

					function onToggle(toggleTarget) {
						if (toggleTarget.hasClass('panel-tool-expand')) {
							_self._expandPanel(target, false);
						} else {
							_self._collapsePanel(target, false);
						}
						return false;
					};

					function onMin() {
						_self._minimizePanel(target);
						return false;
					};

					function onMax() {
						if ($(this).hasClass('panel-tool-restore')) {
							_self._restorePanel(target);
						} else {
							_self._maximizePanel(target);
						}
						return false;
					};

					function onClose() {
						_self._closePanel(target);
						return false;
					};
				},

				/**
				 * load content from remote site if the href attribute is
				 * defined
				 */
				loadData : function(target) {

					var panel = $.data(target, "panel");
					var opts = panel.options;
					var me=this;
					if (opts.href) {
						if (!panel.isLoaded || !opts.cache) {
							
						
							if (this.trigger("onBeforeLoad",target) == false) {
								return;
							}
							panel.isLoaded = false;
							destroyContent(target);
							if (opts.loadingMessage) {
								$(target)
										.html($("<div class=\"panel-loading\"></div>")
												.html(opts.loadingMessage));
							}
							$.ajax({
										url : opts.href,
										cache : false,
										dataType : "html",
										success : function(data, textStatus) {
											setHtml(opts.extractor.call(target,
													data));
											me.trigger("onLoad",target,arguments) 
											
											panel.isLoaded = true;
										}
									});
						}
					} else {
						if (opts.content) {
							if (!panel.isLoaded) {
								destroyContent(target);
								setHtml(opts.content);
								panel.isLoaded = true;
							}
						}
					}
					function setHtml(html) {
						$(target).html(html);
						if ($.parser) {
							$.parser.parse($(target));
						}
					};
					/*
					 * var state = $.data(target, 'panel'); if
					 * (state.options.href && (!state.isLoaded ||
					 * !state.options.cache)){ state.isLoaded = false; var pbody =
					 * state.panel.find('>div.panel-body'); pbody.html($('<div
					 * class="panel-loading"></div>').html(state.options.loadingMessage));
					 * pbody.load(state.options.href, null, function(){ if
					 * ($.parser){ $.parser.parse(pbody); }
					 * state.options.onLoad.apply(target, arguments);
					 * state.isLoaded = true; }); }
					 */
				},

				destroyContent : function(target) {
					var t = $(target);
					t.find(".combo-f").each(function() {
								$(this).combo("destroy");
							});
					t.find(".m-btn").each(function() {
								$(this).menubutton("destroy");
							});
					t.find(".s-btn").each(function() {
								$(this).splitbutton("destroy");
							});
					// t.find(".tooltip-f").tooltip("destroy");
				},
				destroy : function(target, forceOpen) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;

					if (forceDestroy != true) {
						if (this.trigger("onBeforeDestroy",target) == false)
							return;
					}
					this.removeNode(panel);
				
					this.trigger("onDestroy",target)
				},
				_openPanel : function(target, forceOpen) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;

					if (forceOpen != true) {
						if (this.trigger("onBeforeOpen",target) == false)
							return;
					}

					panel.show();
					opts.closed = false;
					opts.minimized = false;
					var restore = panel.children("div.panel-header")
							.find("a.panel-tool-restore");
					if (restore.length) {
						opts.maximized = true;
					}
				
					this.trigger("onOpen",target)
					if (opts.maximized == true) {
						_maximizePanel(target);
						opts.maximized = false;
					}
					// if (opts.minimized == true) _minimizePanel(target);
					if (opts.collapsed == true) {
						opts.collapsed = false;
						this._collapsePanel(target);
					}
					if (!opts.collapsed) {
						this.loadData(target);
						this.doLayout(target);
					}
				},

				_closePanel : function(target, forceClose) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;

					if (forceClose != true) {
						if (this.trigger("onBeforeClose",target) == false)
							return;
					}
					panel.hide();
					opts.closed = true;
					//opts.onClose.call(target);

					this.trigger("onClose",target) 

				},

				_destroyPanel : function(target, forceDestroy) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;

					if (forceDestroy != true) {
						if (this.trigger("onBeforeDestroy",target)  == false)
							return;
					}
					this.removeNode(panel);
					this.trigger("onDestroy",target);
				},

				_collapsePanel : function(target, animate) {
					var _self=this;
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var body = panel.find('>div.panel-body');
					var tool = panel
							.find('>div.panel-header .panel-tool-collapse');

					/*
					 * if (tool.hasClass('panel-tool-expand')) return;
					 */
					
					body.stop(true, true); // stop animation
					if (this.trigger("onBeforeCollapse",target) == false)
						return;

					tool.addClass('panel-tool-expand');
					if (animate == true) {
						body.slideUp('normal', function() {
						
									opts.collapsed = true;
									_self.trigger("onCollapse",target) 

								});
					} else {
						body.hide();
						opts.collapsed = true;
						_self.trigger("onCollapse",target) 

					}
				

				},

				_expandPanel : function(target, animate) {
					var _self=this;
					var opts = $.data(target, "panel").options;
					var panel = $.data(target, "panel").panel;
					var body = panel.children("div.panel-body");
					var _self = this;
					var header = panel.children("div.panel-header")
							.find("a.panel-tool-collapse");
					if (opts.collapsed == false) {
						return;
					}
					body.stop(true, true);
					if (this.trigger("onBeforeExpand",target) == false) {
						return;
					}
					header.removeClass("panel-tool-expand");
					if (animate == true) {
						body.slideDown("normal", function() {
									opts.collapsed = false;
								
									_self.trigger("onExpand",target)
								
									_self.loadData(target);
									_self.doLayout(target);

								});
					} else {
						body.show();
						
						opts.collapsed = false;
						_self.trigger("onExpand",target)
						_self.loadData(target);
						_self.doLayout(target);

					}

				
					/*
					 * var opts = $.data(target, 'panel').options; var panel =
					 * $.data(target, 'panel').panel; var body =
					 * panel.find('>div.panel-body'); var tool =
					 * panel.find('>div.panel-header .panel-tool-collapse');
					 * 
					 * if (!tool.hasClass('panel-tool-expand')) return;
					 * 
					 * body.stop(true, true); // stop animation if
					 * (opts.onBeforeExpand.call(target) == false) return;
					 * 
					 * tool.removeClass('panel-tool-expand'); if (animate ==
					 * true){ body.slideDown('normal', function(){
					 * opts.collapsed = false; opts.onExpand.call(target);
					 * loadData(target); }); } else { body.show();
					 * opts.collapsed = false; opts.onExpand.call(target);
					 * loadData(target); }
					 */
				},

				doLayout : function(target) {
					var $body = $(target).panel("body");
					var h = $body.height();
					var w = $body.width();

					if ($body.data("layoutObj")) {
						$body.layout("resize");
					}
					if ($body.data("HBoxLayout") || $body.data("VBoxLayout")) {
						$body.triggerHandler('_resize');

					} else {
						$body
								.children("div.panel:visible,div.app-grid:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible,div.xquery:visible,div.grid-container:visible,div.ztree-container:visible,div.app-vboxLayout:visible,div.app-hboxLayout:visible,div.datagrid:visible,div.tab-container:visible")
								.each(function() {
							
									$(this).triggerHandler("_resize",
											[true, w, h, $(target)]);
									
								});
					}
				},
				_maximizePanel : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var tool = panel.find('>div.panel-header .panel-tool-max');

					if (tool.hasClass('panel-tool-restore'))
						return;

					tool.addClass('panel-tool-restore');

					$.data(target, 'panel').original = {
						width : opts.width,
						height : opts.height,
						left : opts.left,
						top : opts.top,
						fit : opts.fit
					};
					opts.left = 0;
					opts.top = 0;
					opts.fit = true;
					this._setSize(target);
					opts.minimized = false;
					opts.maximized = true;
					this.trigger("onMaximize",target,target)

				},

				_minimizePanel : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					panel.hide();
					opts.minimized = true;
					opts.maximized = false;
					//opts.onMinimize.call(target);
					this.trigger("onMinimize",target,target)
				},

				_restorePanel : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var tool = panel.find('>div.panel-header .panel-tool-max');

					if (!tool.hasClass('panel-tool-restore'))
						return;

					panel.show();
					tool.removeClass('panel-tool-restore');
					var original = $.data(target, 'panel').original;
					opts.width = original.width;
					opts.height = original.height;
					opts.left = original.left;
					opts.top = original.top;
					opts.fit = original.fit;
					this._setSize(target);
					opts.minimized = false;
					opts.maximized = false;
					//opts.onRestore.call(target);
					this.trigger("onResize",target)
				},

				setBorder : function(target) {
					var opts = $.data(target, 'panel').options;
					var panel = $.data(target, 'panel').panel;
					var header = $(target).panel("header");
					var body = $(target).panel("body");
					panel.css(opts.style);
					panel.addClass(opts.cls);

					if (opts.border == true) {
						panel.find('>div.panel-header')
								.removeClass('panel-header-noborder');
						panel.find('>div.panel-body')
								.removeClass('panel-body-noborder');
					} else {
						panel.find('>div.panel-header')
								.addClass('panel-header-noborder');
						panel.find('>div.panel-body')
								.addClass('panel-body-noborder');
					}
					header.addClass(opts.headerCls);
					body.addClass(opts.bodyCls);
					if (opts.id) {
						$(target).attr("id", opts.id);
					} else {
						$(target).attr("id", "");
					}
				},
				setTitle : function(target, title) {
					$.data(target, 'panel').options.title = title;
					$(target).panel('header').find('div.panel-title')
							.html(title);
				},
				options : function(target) {
					return $.data(target, 'panel').options;
				},
				panel : function(target) {
					return $.data(target, 'panel').panel;
				},
				header : function(target) {
					return $.data(target, 'panel').panel
							.find('>div.panel-header');
				},
				body : function(target) {
					return $.data(target, 'panel').panel
							.find('>div.panel-body');
				},
				open : function(target, param) {
					var opts = this.options(target);
					this._openPanel(target, param);
					if (opts["layout"]) {
						opts["layout"].layout("resize");
					}
					$(".xquery",target).show();
				},
				close : function(target, param) {
					var opts = this.options(target);

					this._closePanel(target, param);
					if (opts["layout"]) {
						opts["layout"].layout("resize");
					}
					$(".xquery",target).hide();
				},
				destroy : function(target, param) {
					this._destroyPanel(target, param);
				},
				refresh : function(target, param) {
					$.data(target, 'panel').isLoaded = false;
					this.loadData(this);
				},
				resize : function(target, param) {
					this._setSize(target, param);
				},
				move : function(target, param) {
					this._movePanel(target, param);
				},
				hide : function(target, param) {
					this.close(target, param);

				},
				show : function(target, param) {
					this.open(target, param);

				},

				maximize : function(target, param) {
					this._maximizePanel(target, param);
				},
				minimize : function(target, param) {
					this._minimizePanel(target, param);
				},
				restore : function(target) {
					this._restorePanel(target);
				},
				collapse : function(target, param) {
					this._collapsePanel(target, param);
				},
				expand : function(target, param) {
					this._expandPanel(target, param);
				}
			});
			Panel.parseOptions = function(target) {
				var t = $(target);
				var padding = [];
				var margins = [];
				var options=t.parseOptions(target, ["id",
										"width", "height", "left", "top",
										"title", "iconCls", "cls", "headerCls",
										"bodyCls", "tools", "region", "href", {
											cache : "boolean",
											fit : "boolean",
											border : "boolean",
											noheader : "boolean"
										}, {
											collapsible : "boolean",
											minimizable : "boolean",
											maximizable : "boolean",
											width : "number",
											height : "number"
										}, {
											closable : "boolean",
											collapsed : "boolean",
											minimized : "boolean",
											maximized : "boolean",
											closed : "boolean"
										}])
				 options= $.extend(options,  {
							loadingMessage : (t.attr("loadingMessage") != undefined
									? t.attr("loadingMessage")
									: undefined)
						});

				if (options["width"] && options["width"] != "auto") {
					options["width"] = parseInt(options["width"]);
				}
				if (options["height"] && options["height"] != "auto") {
					options["height"] = parseInt(options["height"]);
				}
				return options;

			};
			$.fn.panel = function(options, param) {
			// console.log(arguments)
				var methodReturn;

				options = options || {};
				$set = this.each(function() {
							var $this = $(this);
							var state = $.data(this, 'panel');
							var data = $this.data('panelObj');
							if (state) {
								if (typeof options === 'object') {
									opts = $.extend(state.options, options);
								}
							} else {
								data = new Panel(this, options);
								$this.data('panelObj', data);
								data._init(this);
							}
							if (typeof options === 'string')
								methodReturn = data[options](this, param);
						});
				return (methodReturn === undefined) ? $set : methodReturn;
			};

			return Panel;
		});

define('app/widgets/layout/app-containerLayout',["app/core/app-jquery", "app/core/app-core", "app/widgets/app-widget"], function($, $A,
				Widget) {
			ContainerLayout = Widget.extend({
						parseMargins : function(v) {
							if ($.isNumeric(v)) {
								v = v.toString();
							}
							var ms = v.split(' '), len = ms.length;

							if (len == 1) {
								ms[1] = ms[2] = ms[3] = ms[0];
							} else if (len == 2) {
								ms[2] = ms[0];
								ms[3] = ms[1];
							} else if (len == 3) {
								ms[3] = ms[1];
							}

							return {
								top : parseInt(ms[0], 10) || 0,
								right : parseInt(ms[1], 10) || 0,
								bottom : parseInt(ms[2], 10) || 0,
								left : parseInt(ms[3], 10) || 0
							};
						},
						getPadding : function(target) {
							var padding = [];
							$.map(	["padding-top", "padding-right",
											"padding-bottom", "padding-left"],
									function(p) {
										var pv = $.trim(target.style[p] || '0');
										if (pv) {
											if (pv.indexOf('%') == -1) {
												pv = parseInt(pv) || 0;
											}
											padding.push(pv);
										}
									});
							return this.parseMargins(padding.join(" "));
						},
						getMargins : function(target) {
							var margins = [];
							$.map(	["margin-top", "margin-right",
											"margin-bottom", "margin-left"],
									function(p) {
										var pv = $.trim(target.style[p] || '0');
										if (pv) {
											if (pv.indexOf('%') == -1) {
												pv = parseInt(pv) || 0;
											}
											margins.push(pv);
										}

									});
							return this.parseMargins(margins.join(" "));
						}
					});
			return ContainerLayout;

		});
define(
		'app/widgets/layout/app-boxlayout',["app/core/app-jquery", "app/core/app-core", "app/core/app-options",
				"app/widgets/app-resizable", "app/widgets/panel/app-panel", "app/widgets/layout/app-containerLayout"],
		function($, $A, Options, resizable, Panel, ContainerLayout) {

			var BoxLayout = ContainerLayout.extend({
				attrs : {
					type : null,
					items : [],
					fit : null,
					width : null,
					height : null,
					padding : null,
					margins : null
				},
				initialize : function(options) {
					if (!options) {
						options = {};
					};
					BoxLayout.superclass.initialize.call(this, options);
					options = $.extend({}, this.parseOptions(), options);
					this.initAttrs(options);
					this.padding = this.padding
							|| this.getPadding(this.element);
					this.margins = this.margins
							|| this.getMargins(this.element);
					this.init();

					if (!this.get("width")) {
						if ($(this.element).width()){
							this.set("width", $(this.element).width());
						}
					}
					if (!this.get("height")) {
						if ($(this.element).width()){
						this.set("height", $(this.element).height());
						}
					}
					this.setSize({
								width : this.get("width"),
								height : this.get("height")
							});
					var _self = this;
					$(this.element).bind('_resize', function() {
								//if (_self.get("fit") == true) {
									_self.setSize();
								//}
								return false;
							});
				},
				parseOptions : function() {
					var t = $(this.element);
					return $.extend({}, t.parseOptions(this.element, ["fit",
											"id"]));
				},
				setSize : function(param) {
					var opts = this.attrs;
					var container = this.element;
					var cc = $(container);
					if (param) {
						$.extend(opts, {
									width : param.width||1,
									height : param.height||1
								});
						cc.width(opts.width).height(opts.height);
					}

					if (this.get("fit") == true) {
						var p = cc.parent();
						var width=p.innerWidth()?p.innerWidth():1;
						var height=p.innerHeight()?p.innerHeight():1;
						cc.outerWidth(width).outerHeight(height);
					}
					this.doLayout();
				},
				resize : function() {
				},
				//需要反复用到的
				initProps : function() {
					this.items = this.get('items');
					this.padding = this.get('padding');
					this.padding = this.get('margins');
				},

				init : function() {
					var _self = this;

					$(this.element).addClass('layout').children("div").each(
							function() {
								var panelOptions = _self
										.parsePanelOptions(this);
								panelOptions["padding"] = _self
										.getPadding(this);
								panelOptions["margins"] = _self
										.getMargins(this);

								$(this).removeClass("app-panel");
								_self.items.push(_self.createPanel(this,
										panelOptions));
							});
				},
				parsePanelOptions : function(panel) {
					var t = $(panel);
					return $.extend({}, Panel.parseOptions(panel), t
									.parseOptions(panel, [{"fit":"boolean", "flex":"number", "height":"number", "width":"number"}]));
				},
				createPanel : function(panel, options) {
					var pp = $(panel, this.element).addClass('layout-body');
					var config={};
					var _self=this;
					var onExpand=function(target){
						bodyHeight=$(target).data("_panelBodyHeight")||0;
						var opts = $.data(target, 'panel').options;
						opts.height=opts.height+bodyHeight;
						_self.doLayout();
					};
					var onCollapse=function(target){
						bodyHeight=$(target).panel("body").height();
						var opts = $.data(target, 'panel').options;
						opts.height=opts.height-bodyHeight;
						$(target).data("_panelBodyHeight",bodyHeight);
						_self.doLayout();

					}
					if (options.onExpand){
						options.onExpand=function(target){
							options.onExpand.call(target);
							onCollapse(target);
						}
					}else{
						options.onExpand=onExpand;
					}
					if (options.onCollapse){
						options.onCollapse=function(target){
							options.onCollapse.call(target);
							onCollapse(target);
						}
					}else{
						options.onCollapse=onCollapse
					}
					if (this.get("type")=="vbox"){
						
						config={
								width : (pp.length
										? parseInt(pp[0].style.width)
												|| pp.outerWidth()
										: "auto"),
								height : (options["flex"] ? "auto" : pp.length
										? parseInt(pp[0].style.height)
												|| pp.outerHeight()
										: "auto"),
								doSize : false,
								//tools : [toolItem],
								
								bodyCls : "layout-body",
								cls : 'x-box-item'
							}
					}else{
						
						config={
								height : $(this.element).height(),
								width : (options["flex"] ? "auto" : pp.length
										? parseInt(pp[0].style.width)
												|| pp.outerWidth()
										: "auto"),
								doSize : false,
								bodyCls : "layout-body",
								cls : 'x-box-item'
							}
					}
					var opt = $.extend({},config , options);
					/*if (this.get("type")=="vbox"&&options["flex"]){
						delete opt["height"];
					}
					if (this.get("type")=="hbox"&&options["flex"]){
						delete opt["height"];
					}*/
					return $(pp).panel(opt);
				},
				updateInnerCtSize : function() {

				},
				getVisibleItems : function() {
					var items = [], panels = this.items, len = panels.length, i, p;
					for (i = 0; i < len; i++) {
						p = panels[i];
						var opts = p.panel("options");
						var panel = p.panel("panel");
						// && opts.collapsed !== true
						if (opts.closed !== true&& panel.css("display")!="none") {
							items.push(p);
						}
					}

					return items;
				},
				getLayoutTargetSize : function() {
					var target = $(this.element), ret = null;;
					if (target) {
						ret = {};
						ret.height = target.innerHeight();
						ret.width = target.innerWidth();
					}
					return ret;
				},
				doLayout : function() {
					var items = this.getVisibleItems(this.element), tSize = this
							.getLayoutTargetSize();
					/**
					 * @private
					 * @property layoutTargetLastSize
					 * @type Object Private cache of the last measured size of
					 *       the layout target. This should never be used except
					 *       by BoxLayout subclasses during their onLayout run.
					 */
					this.layoutTargetLastSize = tSize;

					/**
					 * @private
					 * @property childBoxCache
					 * @type Array Array of the last calculated height, width,
					 *       top and left positions of each visible rendered
					 *       component within the Box layout.
					 */
					this.childBoxCache = this.calculateChildBoxes(items, tSize);
					//this.updateInnerCtSize(tSize, this.childBoxCache);
					this.updateChildBoxes(this.childBoxCache.boxes);
					// Putting a box layout into an overflowed container is NOT
					// correct and will make a second layout pass necessary.
					//this.handleTargetOverflow(tSize, container, target);
				},
				updateChildBoxes : function(boxes) {
					for (var i = 0, length = boxes.length; i < length; i++) {
						var box = boxes[i], comp = box.component;

						if (box.dirtySize) {
							comp.panel("resize", box)
						}
						// Don't set positions to NaN
						if (isNaN(box.left) || isNaN(box.top)) {
							continue;
						}
						//comp.setPosition(box.left, box.top);
					}
				}
			});

			var VBoxLayout = BoxLayout.extend({
				attrs : {
					type : 'vbox'
				},
				calculateChildBoxes : function(visibleItems, targetSize) {
					var visibleCount = visibleItems.length, padding = this.padding, topOffset = padding.top, leftOffset = padding.left, paddingHoriz = leftOffset
							+ padding.right,

					paddingVert = topOffset + padding.bottom, paddingHoriz = leftOffset
							+ padding.right, width = targetSize.width, height = targetSize.height, availWidth = Math
							.max(0, width - paddingHoriz),

					nonFlexHeight = 0, maxWidth = 0, totalFlex = 0, childMargins,

					//used to cache the calculated size and position values for each child item
					boxes = [],

					//used in the for loops below, just declared here for brevity
					child, childWidth, childHeight, i, calcs, flexedHeight, opts;
					for (i = 0; i < visibleCount; i++) {
						child = visibleItems[i], opts = child.panel("options");
						childHeight = opts.height;
						childWidth = opts.width;
						// Static height (numeric) requires no calcs
						//if (!$.isNumeric(childHeight)) {
						// flex and not 'auto' height
						if (opts.flex) {
							totalFlex += opts.flex;
							childHeight = 0;
						}
						//}
						childMargins = opts.margins;
						nonFlexHeight += (childHeight || 0) + childMargins.top
								+ childMargins.bottom;
						// Max width for align - force layout of non-layed out subcontainers without a numeric width
						if (!$.isNumeric(childWidth)) {
							childWidth = child._outerWidth();
						}
						maxWidth = Math.max(maxWidth, childWidth);

						//cache the size of each child component
						boxes.push({
									component : child,
									height : childHeight || undefined,
									width : availWidth || undefined
								});
					}

					//the height available to the flexed items
					var availableHeight = Math.max(0,
							(height - nonFlexHeight - paddingVert));

					//temporary variables used in the flex height calculations below
					var remainingHeight = availableHeight, remainingFlex = totalFlex;

					//calculate the height of each flexed item, and the left + top positions of every item
					for (i = 0; i < visibleCount; i++) {
						child = visibleItems[i], opts = child.panel("options");
						childHeight = opts.height;
						childWidth = opts.width;
						calcs = boxes[i];
						childMargins = opts.margins;

						topOffset += childMargins.top;
						if (opts.flex) {
							flexedHeight = Math
									.ceil((opts.flex / remainingFlex)
											* remainingHeight);
							remainingHeight -= flexedHeight;
							remainingFlex -= opts.flex;

							calcs.height = flexedHeight;

						}
						calcs.dirtySize = true;
						calcs.left = leftOffset;
						calcs.top = topOffset;
						topOffset += calcs.height;
					}
					return {
						boxes : boxes,
						meta : {
							maxWidth : maxWidth
						}
					};
				}
			});
			$.fn.VBoxLayout = function(options, param) {
				var methodReturn = null;
				var $set = this.each(function() {
					var $this = $(this);

					var data = $.data(this, 'VBoxLayout');
					if (!data) {
						var opts = $.extend({}, {
									element : this
								});
						$this.data('VBoxLayout', (data = new VBoxLayout(opts)));
					}
					if (typeof options == 'string') {
						methodReturn = data[options](this, param);

					}
				});
				return (methodReturn === undefined) ? $set : methodReturn;
			};

			var HBoxLayout = BoxLayout.extend({
				attrs : {
					type : 'hbox'
				},
				calculateChildBoxes : function(visibleItems, targetSize) {
					var visibleCount = visibleItems.length, padding = this.padding, topOffset = padding.top, leftOffset = padding.left, paddingHoriz = leftOffset
							+ padding.right,

					paddingVert = topOffset + padding.bottom, paddingHoriz = leftOffset
							+ padding.right, width = targetSize.width, height = targetSize.height, availHeight = Math
							.max(0, height - paddingVert),

					nonFlexWidth = 0, maxHeight = 0, totalFlex = 0, childMargins,

					//used to cache the calculated size and position values for each child item
					boxes = [],

					//used in the for loops below, just declared here for brevity
					child, childWidth, childHeight, i, calcs, flexedWidth, opts;
					for (i = 0; i < visibleCount; i++) {
						child = visibleItems[i], opts = child.panel("options");
						childHeight = opts.height;
						childWidth = opts.width;
						// Static height (numeric) requires no calcs
						//if (!$.isNumeric(childWidth)) {
						// flex and not 'auto' height
						if (opts.flex) {
							totalFlex += opts.flex;
							childWidth = 0;
						}
						//}
						childMargins = opts.margins||this.getMargins(child);
						nonFlexWidth += (childWidth || 0) + childMargins.left
								+ childMargins.right;
						// Max width for align - force layout of non-layed out subcontainers without a numeric width
						if (!$.isNumeric(childHeight)||childHeight==0) {
							childHeight = child._outerHeight();
						}
						maxHeight = Math.max(maxHeight, childHeight);

						//cache the size of each child component
						boxes.push({
									component : child,
									height : availHeight || undefined,
									width :  childWidth|| undefined
								});
					}

					//the height available to the flexed items
					var availableWidth = Math.max(0,
							(width - nonFlexWidth - paddingVert));

					//temporary variables used in the flex height calculations below
					var remainingWidth = availableWidth, remainingFlex = totalFlex;

					//calculate the height of each flexed item, and the left + top positions of every item
					for (i = 0; i < visibleCount; i++) {
						child = visibleItems[i], opts = child.panel("options");
						childHeight = opts.height;
						childWidth = opts.width;
						calcs = boxes[i];
						childMargins = opts.margins;
						topOffset += childMargins.top;
						topOffset += childMargins.bottom;
					
						if (opts.flex) {
							flexedWidth = Math.ceil((opts.flex / remainingFlex)
									* remainingWidth);
							remainingWidth -= flexedWidth;
							remainingFlex -= opts.flex;
							calcs.width = flexedWidth;
						}
						calcs.dirtySize = true;
						calcs.left = leftOffset;
						calcs.top = topOffset;
						leftOffset+=childMargins.left;
						leftOffset+=childMargins.right;
						leftOffset += calcs.width;
					}
					return {
						boxes : boxes,
						meta : {
							maxHeight : maxHeight
						}
					};
				}
			});
			$.fn.HBoxLayout = function(options, param) {
				var methodReturn = null;
				var $set = this.each(function() {
					var $this = $(this);

					var data = $.data(this, 'HBoxLayout');
					if (!data) {
						var opts = $.extend({}, {
									element : this
								});
						$this.data('HBoxLayout', (data = new HBoxLayout(opts)));
					}
					if (typeof options == 'string') {
						methodReturn = data[options](this, param);

					}
				});
				return (methodReturn === undefined) ? $set : methodReturn;
			}

		});

/**
 * 应用框架布局
 */
define('app/widgets/layout/app-layout',["app/core/app-jquery","app/core/app-core"],function($,$A){
	$.fn.extend({
		/**
		 * 取得窗口大小
		 */
		getWindowSize: function(){
			if ($.browser.opera) { return { width: window.innerWidth, height: window.innerHeight }; }
			return { width: $(window).width(), height: $(window).height() };
		},
		/**
		 * 滚动到屏幕中间
		 * @param options 选项
		 */		
		scrollCenter: function(options){
			// 扩展参数
			var op = $.extend({ z: 1000000, mode:"WH"}, options);
			
			// 追加到 document.body 并设置其样式
			var windowSize = this.getWindowSize();
	
			return this.each(function(){
				var $this = $(this).css({
					'position': 'absolute',
					'z-index': op.z
				});
				
				// 当前位置参数
				var bodyScrollTop = $(document).scrollTop();
				var bodyScrollLeft = $(document).scrollLeft();
				var movedivTop = (windowSize.height - $this.height()) / 2 + bodyScrollTop;
				var movedivLeft = (windowSize.width - $this.width()) / 2 + bodyScrollLeft;
				
				if (op.mode == "W") {
					$this.appendTo(document.body).css({
						'left': movedivLeft + 'px'
					});
				} else if (op.model == "H"){
					$this.appendTo(document.body).css({
						'top': movedivTop + 'px'
					});	
				} else {
					$this.appendTo(document.body).css({
						'top': (windowSize.height - $this.height()) / 2 + $(window).scrollTop() + 'px',
						'left': movedivLeft + 'px'
					});
				}
				
				// 滚动事件
				$(window).scroll(function(e){
					var windowSize = $this.getWindowSize();
					var tmpBodyScrollTop = $(document).scrollTop();
					var tmpBodyScrollLeft = $(document).scrollLeft();
					
					movedivTop += tmpBodyScrollTop - bodyScrollTop;
					movedivLeft += tmpBodyScrollLeft - bodyScrollLeft;
					bodyScrollTop = tmpBodyScrollTop;
					bodyScrollLeft = tmpBodyScrollLeft;
	
					// 以动画方式进行移动
					if (op.mode == "W") {
						$this.stop().animate({
							'left': movedivLeft + 'px'
						});
					} else if (op.mode == "H") {
						$this.stop().animate({
							'top': movedivTop + 'px'
						});
					} else {
						$this.stop().animate({
							'top': movedivTop + 'px',
							'left': movedivLeft + 'px'
						});
					}
					
				});
				
				// 窗口大小重设事件
				$(window).resize(function(){
					var windowSize = $this.getWindowSize();
					movedivTop = (windowSize.height - $this.height()) / 2 + $(document).scrollTop();
					movedivLeft = (windowSize.width - $this.width()) / 2 + $(document).scrollLeft();
					
					if (op.mode == "W") {
						$this.stop().animate({
							'left': movedivLeft + 'px'
						});
					} else if (op.mode == "H") {
						$this.stop().animate({
							'top': movedivTop + 'px'
						});
					} else {
						$this.stop().animate({
							'top': movedivTop + 'px',
							'left': movedivLeft + 'px'
						});
					}
					
				});
			});
			
		},
		/**
		 * 自动调节相对高度
		 * @param $refBox{$DOM} 需要调节的范围
		 */
		layoutHeight: function($refBox){
			return this.each(function(){
				var $this = $(this);
				
				if (! $refBox) $refBox = $this.parents("div.layoutBox:first");
				var iRefH = $refBox.height();
				var ilayoutHeight = parseInt($this.attr("layoutHeight"));
				if(isNaN(ilayoutHeight))
					return;
				var iH = iRefH - ilayoutHeight > 50 ? iRefH - ilayoutHeight : 50;
				
				if ($this.isTag("table")) {
			
					if($this.hasClass("flexigrid")){
						if($this.grid)
							$this.grid.fixHeight(iH);
						else
							$this.attr("height",iH);
					}else if($this.hasClass("jqgrid")){
						if($this.attr("init")=="true"){
							var h = $this.attr("pageHeight")*1;
							if(!h){
								h = 0;
							}
							$this.jqGrid('setGridHeight',iH-h);
						}else{
							$this.attr("height",iH);
						}
					}else{
						$this.removeAttr("layoutHeight").wrap('<div layoutHeight="'+ilayoutHeight+'" style="overflow:auto;height:'+iH+'px"></div>');
					}
				} else {
					$this.height(iH).css("overflow","auto");
				}
			});
		},
		/**
		 * 自动填充
		 */
		fillSpace:function(){
			var $this = $(this)
			,padd = $this.attr("fillpadd")
			,$fillEl = $this.find($this.attr("fillSpace"));
			padd= parseInt(padd,10);
			padd = isNaN(padd)?0:padd;
			
			var parent = $this.parent();
			var height = parent.height() - padd;
	
			var os = parent.children().not($this);
			$.each(os, function(i){
				height -= $(os[i]).outerHeight();
			});
			if($fillEl.length==0){
				$fillEl = $this;
			}
			$fillEl.height(height/$fillEl.length);
			if($this.attr("_fillSpaceEvent")==null){
				$this.on("fillSpace",function(){
					setTimeout(function(){
						$this.fillSpace();
					}, 100);
				});
				$this.attr("_fillSpaceEvent","true");
			}
		}
	});

	
	/**
	 * 注册初始化处理方法
	 */
	$A.regInitMethod(function($box){
		//$("[fillSpace]",$box).fillSpace();
		//$("[layoutHeight]",$box).layoutHeight();
	});
	return $A;
});



define('app/widgets/layout/app-layout2',["app/core/app-jquery", "app/core/app-core", "app/core/app-options", "jquery/jquery-ui", "app/widgets/panel/app-panel", "app/widgets/layout/app-containerLayout"], function($, $A,
		Options,resizable,Panel,Widget) {
	var resizing = false;
	//console.log(Panel.parseOptions)
	/**
	 * @class
	 * @name Layout
	 * @classdesc 布局控件
	 * @extends Widget
	 * @example
	 * 
	 * //html
	 *  //<div class="app-layout" style="height:100%;width:100%">
	 *  	<div data_options="{region:""}">
	 *  
	 *  //</div>
	 * //
	 * 
	 * 
	 */
	var Layout = ContainerLayout.extend({
				initialize : function(options) {
					if (!options){
						options={};
					};
					options= $.extend(options,this.parseOptions(options.element));
				
					Layout.superclass.initialize.call(this, options);
					this.padding=this.padding||this.getPadding(this.element);
					this.margins=this.margins||this.getMargins(this.element);
					this.panels=this.init();
					this.bindEvents();
					
					this._setSize();
				},
				 /**
				 * @memberof Layout
			     * 设置布局面板大小 
			     * @param param 
			     * @namespace param
			     * @property param.width {number} 
			     * @property  param.height {number} 
			     */
				resize : function(jq,param) {
					this._setSize(param);
				},
				parseOptions:function(element){
					
					var t = $(element);
					return $.extend({}, t.parseOptions(element, [{"fit":"boolean"}]));
				},
				updateChildBoxes : function(boxes) {
					for (var i = 0, length = boxes.length; i < length; i++) {
						var box = boxes[i], comp = box.component;

						//if (box.dirtySize) {
							comp.panel("resize",box)
						//}
						// Don't set positions to NaN
						if (isNaN(box.left) || isNaN(box.top)) {
							continue;
						}
						//comp.setPosition(box.left, box.top);
					}
				},
				/**
				 * 获取布局内面板初始化参数
				 */
				parsePanelOptions:function(panel){
					var t = $(panel);
					var options=$.extend({}, Panel.parseOptions(panel), t
						.parseOptions(panel, ["region", {
											split : "boolean",
											collpasedSize : "number",
											minWidth : "number",
											minHeight : "number",
											maxWidth : "number",
											maxHeight : "number",
												width : "number",
												height : "number"
										}]));
					if (options["width"]&&options["width"]!="auto"){
						options["width"]=parseInt(options["width"]);
					}
					if (options["height"]&&options["height"]!="auto"){
						options["height"]=parseInt(options["height"]);
					}
					return options;
				},
			    /**
			     * 设置布局大小
			     * @param param 
			     * @namespace param
			     * @property param.width {number} 
			     * @property  param.height {number} 
			     */
				_setSize : function(param) {
					var opts = this.attrs;
					var panels = this.panels;
					var container=this.element
					if (param) {
						$.extend(opts, {
									width : param.width,
									height : param.height
								});
					}
					var cc = $(container);
					if (this.get("fit") == true) {
					
							var p = cc.parent();
						if (p.width()!=0&&p.height()!=0){
							cc.width(p.width()).height(p.height());
						}
					}
					var tSize = this.getLayoutTargetSize();
					var boxs=this.calculateChildBoxes(tSize);
					
					this.updateChildBoxes(boxs)
					/*var cpos = {
						top : 0,
						left : 0,
						width : cc.width(),
						height : cc.height()
					};

					// set north panel size
					function setNorthSize(pp) {
						if (pp.length == 0)
							return;
						pp.panel('resize', {
									width : cc.width(),
									height : pp.panel('options').height,
									left : 0,
									top : 0
								});
						cpos.top +=  parseInt(pp.panel('options').height);
						cpos.height -=  parseInt(pp.panel('options').height);
					}
					if (this.isVisible(panels.expandNorth)) {
						setNorthSize(panels.expandNorth);
					} else {
						setNorthSize(panels.north);
					}

					// set south panel size
					function setSouthSize(pp) {
						if (pp.length == 0)
							return;
						pp.panel('resize', {
									width : cc.width(),
									height : pp.panel('options').height,
									left : 0,
									top : cc.height()
											-  parseInt(pp.panel('options').height)
								});
						cpos.height -= pp.panel('options').height;
					}
					if (this.isVisible(panels.expandSouth)) {
						setSouthSize(panels.expandSouth);
					} else {
						setSouthSize(panels.south);
					}

					// set east panel size
					function setEastSize(pp) {
						if (pp.length == 0)
							return;
						pp.panel('resize', {
									width : pp.panel('options').width,
									height : cpos.height,
									left : cc.width()
											- parseInt(pp.panel('options').width),
									top : cpos.top
								});
						cpos.width -= pp.panel('options').width;
					}
					if (this.isVisible(panels.expandEast)) {
						setEastSize(panels.expandEast);
					} else {
						setEastSize(panels.east);
					}

					// set west panel size
					function setWestSize(pp) {
						if (pp.length == 0)
							return;
						pp.panel('resize', {
									width : pp.panel('options').width,
									height : cpos.height,
									left : 0,
									top : cpos.top
								});
						cpos.left += parseInt(pp.panel('options').width);
						cpos.width -= parseInt(pp.panel('options').width);
					}
					if (this.isVisible(panels.expandWest)) {
						setWestSize(panels.expandWest);
					} else {
						setWestSize(panels.west);
					}

					panels.center.panel('resize', cpos);*/
				},
				calculateChildBoxes:function(targetSize){
					var width=targetSize.width,height=targetSize.height,panels=this.panels,
					padding      = this.padding,
		            topOffset    = padding.top,
		            leftOffset   = padding.left,
		          //  paddingVert  = topOffset  + padding.bottom,
		            //paddingHoriz = leftOffset + padding.right,
					width = targetSize.width ,
					height = targetSize.height,
					availableHeight=height-0,
					availableWidth=width-0,
					boxes=[],box;
					var regions = {
						north : null,
						south :null,
						west : null,
						east : null,
						center : null
					};
					for(var key in regions){
						box={};
						var child=panels[key],opt=child.panel("options"),childMargins=opt.margins,region=opt.region;
						if (panels[key].length==0){
							continue;
						}
						if (child.length>0&&!this.isVisible(child)){
								child=panels["expand"+key];
								if (!child||child.length==0){
									continue;
								}
								region=opt.region;
								opt=child.panel("options");
						}
						switch(region){
							case "west" :
								// topOffset  += childMargins.top;
								// leftOffset   += childMargins.left;
								//availableHeight=availableHeight-childMargins.top-childMargins.bottom
								 availableWidth=availableWidth- childMargins.left-childMargins.right-opt.width;
								 box["height"]=availableHeight-childMargins.top-childMargins.bottom;
								 box["wdth"]=opt.width;
								 box["top"]=topOffset+childMargins.top;
								 box["left"]=leftOffset+childMargins.left;
								 box["component"]=child;
								 leftOffset=opt.width+leftOffset+childMargins.left+ childMargins.right;
								 //availableHeight=availableHeight- childMargins.top- childMargins.left
								break;
							case "east" :
								// topOffset  += childMargins.top;
								// leftOffset   += childMargins.left;
								 availableWidth=availableWidth- childMargins.left-opt.width- childMargins.right;
								 box["height"]=availableHeight-childMargins.top-childMargins.bottom;
								 box["wdth"]=opt.width;
								 box["top"]=topOffset+childMargins.top;
								 box["left"]=width-opt.width-childMargins.left;
								 box["component"]=child;
								break;
							case "north" :
 								 availableHeight=availableHeight- childMargins.top- childMargins.bottom-opt.height;
 								 //availableWidth=availableWidth-childMargins.left-childMargins.right;
								 box["height"]=opt.height;
								 box["width"]=availableWidth-childMargins.left- childMargins.right;
								 box["top"]=topOffset+childMargins.top;
								 box["left"]=topOffset+childMargins.left;
								 box["component"]=child;
								 topOffset=opt.height+childMargins.top+childMargins.bottom;
								break;
							case "south" :
								 availableHeight=availableHeight-childMargins.top-childMargins.bottom-opt.height;
 								// availableWidth=availableWidth-childMargins.left-childMargins.right;
								 box["height"]=opt.height;
								 box["width"]=availableWidth-childMargins.left- childMargins.right;;
								 box["top"]=height-opt.height-childMargins.top-childMargins.bottom;
								 box["left"]=leftOffset+childMargins.left;
								 box["component"]=child;
								break;
							case "center" :
							 	 box["height"]=availableHeight- childMargins.top- childMargins.bottom;
								 box["width"]=availableWidth;
								 box["top"]=topOffset+childMargins.top;
								 box["left"]=leftOffset+childMargins.left;
								 box["component"]=child;
								break;
								
						}
						if (child.length>0){
							box["region"]=region;
							boxes.push(box);
						}
						
					};
					return boxes;
				
				},
				getLayoutTargetSize : function() {
					var target = $(this.element), ret=null;;
					if (target) {
						ret={};
						ret.height = target.innerHeight();
						ret.width = target.innerWidth();
					}
					return ret;
				},
				/**
				 * initialize and wrap the layout
				 */
				init : function() {
					var container=this.element;
					var cc = $(container);
					var _self = this;
					if (cc[0].tagName == 'BODY') {
						$('html').css({
									height : '100%',
									overflow : 'hidden'
								});
						$('body').css({
									height : '100%',
									overflow : 'hidden',
									border : 'none'
								});
					}
					cc.addClass('layout');
					cc.css({
								margin : 0,
								padding : 0
							});
						
					function createPanel(panel,options,dir) {
						var pp = $(panel, container)
								.addClass('layout-body');

						var toolCls = null;
						if (dir == 'north') {
							toolCls = 'layout-button-up';
						} else if (dir == 'south') {
							toolCls = 'layout-button-down';
						} else if (dir == 'east') {
							toolCls = 'layout-button-right';
						} else if (dir == 'west') {
							toolCls = 'layout-button-left';
						}
	
						var cls = 'layout-panel layout-panel-' + dir+" layout-panel-broder-" + dir;
						if (options['split'] == 'true'||options['split']===true) {
							cls += ' layout-split-' + dir;
						}
						var toolItem={
										iconCls : toolCls,
										handler : function() {
											_self.collapsePanel(dir);
										}
									};
						if (dir == 'center'){
							toolItem={};
						}
						if (!options.collapsible){
							toolItem={};
						}
						var opt = $.extend({}, options,{
							//width : (pp.length ? parseInt(pp[0].style.width)
								//	|| pp.outerWidth() : "auto"),
							//height : (pp.length ? parseInt(pp[0].style.height)
								//	|| pp.outerHeight() : "auto"),
							doSize : pp.height()<=0,
							collapsible : false,
							cls : cls,
							tools : [toolItem],
							bodyCls : "layout-body"
								/*
								 * onOpen : function() { var _1c =
								 * $(this).panel("header")
								 * .children("div.panel-tool");
								 * _1c.children("a.panel-tool-collapse").hide();
								 * var _1d = { north : "up", south : "down",
								 * east : "right", west : "left" }; if
								 * (!_1d[dir]) { return; } var _1e =
								 * "layout-button-" + _1d[dir]; var t =
								 * _1c.children("a." + _1e); if (!t.length) { t =
								 * $("<a href=\"javascript:void(0)\"></a>")
								 * .addClass(_1e).appendTo(_1c); t.bind("click", {
								 * dir : dir }, function(e) { _2b(_18,
								 * e.data.dir); return false; }); }
								 * $(this).panel("options").collapsible ?
								 * t.show() : t .hide(); }
								 */
							});
						if (dir == "center"){
							opt["height"]=1;
						}
						pp.panel(opt);

						if (opt['split'] == 'true'||opt['split']===true) {
							var panel = pp.panel('panel');

							var handles = '';
							if (dir == 'north')
								handles = 's';
							if (dir == 'south')
								handles = 'n';
							if (dir == 'east')
								handles = 'w';
							if (dir == 'west')
								handles = 'e';

							panel.resizable({
								handles : handles,
								helper:function(){
									if (dir == 'north' || dir == 'south') {
											var proxy = $(
													'>div.layout-split-proxy-v',
													container);
										} else {
											var proxy = $(
													'>div.layout-split-proxy-h',
													container);
										}
										return proxy;
								},
								start : function(e,data) {
					
									resizing = true;

									if (dir == 'north' || dir == 'south') {
										var proxy = $(
												'>div.layout-split-proxy-v',
												container);
									} else {
										var proxy = $(
												'>div.layout-split-proxy-h',
												container);
									}
									var top = 0, left = 0, width = 0, height = 0;
									var pos = {
										display : 'block'
									};
									if (dir == 'north') {
										pos.top = parseInt(panel.css('top'))
												+ panel.outerHeight()
												- proxy.height();
										pos.left = parseInt(panel.css('left'));
										pos.width = panel.outerWidth();
										pos.height = proxy.height();
									} else if (dir == 'south') {
										pos.top = parseInt(panel.css('top'));
										pos.left = parseInt(panel.css('left'));
										pos.width = panel.outerWidth();
										pos.height = proxy.height();
									} else if (dir == 'east') {
										pos.top = parseInt(panel.css('top'))
												|| 0;
										pos.left = parseInt(panel.css('left'))
												|| 0;
										pos.width = proxy.width();
										pos.height = panel.outerHeight();
									} else if (dir == 'west') {
										pos.top = parseInt(panel.css('top'))
												|| 0;
										pos.left = panel.outerWidth()
												- proxy.width();
										pos.width = proxy.width();
										pos.height = panel.outerHeight();
									}
									proxy.css(pos);
									$('<div class="layout-mask"></div>').css({
												left : 0,
												top : 0,
												width : cc.width(),
												height : cc.height()
											}).appendTo(cc);
								},
								resize : function(e) {
									if (dir == 'north' || dir == 'south') {
										var proxy = $(
												'>div.layout-split-proxy-v',
												container);
										proxy.css('top',e.pageY- $(container).offset().top- proxy.height()/ 2);
									} else {
										var proxy = $('>div.layout-split-proxy-h',container);
										proxy.css('left',e.pageX- $(container).offset().left- proxy.width()/ 2);
									}
									return false;
								},
								stop : function(event,data) {
									
									$('>div.layout-split-proxy-v', container)
											.css('display', 'none');
									$('>div.layout-split-proxy-h', container)
											.css('display', 'none');
									var size=data.size
									var opts = pp.panel('options');
									opts.width = panel.outerWidth();
									opts.height = panel.outerHeight();
									opts.left = panel.css('left');
									opts.top = panel.css('top');
									pp.panel('resize');
									_self._setSize();
									resizing = false;

									cc.find('>div.layout-mask').remove();
								}
							});
						}
						return pp;
					}
					var panels = {
						north : $(),
						south : $(),
						west : $(),
						east : $(),
						center : $()
					};
					var _self = this;
						cc.children("div").each(function() {
								var panelOptions = _self.parsePanelOptions(this);
								panelOptions["layout"]=cc;
									$(this).removeClass("app-panel");
								if ("north,south,east,west,center".indexOf(panelOptions.region) >= 0) {
									 panelOptions["padding"]=_self.getPadding(this);
			    		 				panelOptions["margins"]=_self.getMargins(this);
									panels[panelOptions.region]=createPanel(this, panelOptions,panelOptions.region);
								}
							});

					$('<div class="layout-split-proxy-h"></div>').appendTo(cc);
					$('<div class="layout-split-proxy-v"></div>').appendTo(cc);
					$(container).bind('_resize', function() {
								if (_self.get("fit") == true) {
									_self._setSize();
								}
								return false;
							});

					/*
					 * $(window).resize(function() { _self._setSize(container);
					 * });
					 */

					return panels;
				},
				
				/**
				 * 
				 * 根据位置获取布局中的面板 west,center,east,south,north
				 * @memberof Layout
				 * @param region {String}  
				 */
				getPanel : function(region) {
					var panels = this.panels;
					if (!panels)
						return null;
					return panels[region];
				},
				/**
				 * 
				 * 根据位置隐藏布局中的面板 west,center,east,south,north
				 * @memberof Layout
				 * @param region {String}  
				 */
				collapsePanel : function(region) {
					var container=this.element;
					var panels = this.panels;
					var _self = this;
					var cc = $(container);
					var expandPanel="expand"+region;
					function createExpandPanel(dir) {
						var icon;
						if (dir == 'east')
							icon = 'layout-button-left'
						else if (dir == 'west')
							icon = 'layout-button-right'
						else if (dir == 'north')
							icon = 'layout-button-down'
						else if (dir == 'south')
							icon = 'layout-button-up';
						var options=panels[dir].panel("options");
						var p = $('<div></div>').appendTo(cc).panel({
									cls : 'layout-expand',
									title : '&nbsp;',
									title:options.title,
									closed : true,
									doSize : false,
									height:28,
									width:28,
									margins:options.margins,
									tools : [{
												iconCls : icon,
												handler : function() {
													_self.expandPanel(region);
												}
											}]
								});
						p.panel('panel').hover(function() {
									$(this).addClass('layout-expand-over');
								}, function() {
									$(this).removeClass('layout-expand-over');
								});
						return p;
					};
					if (panels[region]){
						panels[region].panel('close');
					}
			
					if (!panels[expandPanel]) {
							panels[expandPanel] = createExpandPanel(region);
							panels[expandPanel].panel('panel').click(function() {
								_self.expandPanel(region);
								return false;
							});
					};
					panels[expandPanel].panel('open');
					this._setSize();
			
					//if expandEast
					/*if (region == 'east') {
						if (panels.east.panel('options').onBeforeCollapse
								.call(panels.east) == false)
							return;
						panels.center.panel('resize', {
									width : panels.center.panel('options').width
											+ panels.east.panel('options').width
											- 28
								});
						panels.east.panel('panel').animate({
									left : cc.width()
								}, function() {
									panels.east.panel('close');
									panels.expandEast.panel('open').panel(
											'resize', {
												top : panels.east
														.panel('options').top,
												left : cc.width() - 28,
												width : 28,
												height : panels.east
														.panel('options').height
											});
									panels.east.panel('options').onCollapse
											.call(panels.east);
								});
						if (!panels.expandEast) {
							panels.expandEast = createExpandPanel('east');
							panels.expandEast.panel('panel').click(function() {
								panels.east.panel('open').panel('resize', {
											left : cc.width()
										});
								panels.east.panel('panel').animate({
									left : cc.width()
											- panels.east.panel('options').width
								});
								return false;
							});
						}
					} else if (region == 'west') {
						if (panels.west.panel('options').onBeforeCollapse
								.call(panels.west) == false)
							return;

						panels.center.panel('resize', {
									width : panels.center.panel('options').width
											+ panels.west.panel('options').width
											- 28,
									left : 28
								});
						panels.west.panel('panel').animate({
									left : -panels.west.panel('options').width
								}, function() {
									panels.west.panel('close');
									panels.expandWest.panel('open').panel(
											'resize', {
												top : panels.west
														.panel('options').top,
												left : 0,
												width : 28,
												height : panels.west
														.panel('options').height
											});
									panels.west.panel('options').onCollapse
											.call(panels.west);
								});
						if (!panels.expandWest) {
							panels.expandWest = createExpandPanel('west');
							panels.expandWest.panel('panel').click(function() {
								panels.west.panel('open').panel('resize', {
											left : -panels.west
													.panel('options').width
										});
								panels.west.panel('panel').animate({
											left : 0
										});
								return false;
							});
						}
					} else if (region == 'north') {
						if (panels.north.panel('options').onBeforeCollapse
								.call(panels.north) == false)
							return;

						var hh = cc.height() - 28;
						if (_self.isVisible(panels.expandSouth)) {
							hh -= panels.expandSouth.panel('options').height;
						} else if (_self.isVisible(panels.south)) {
							hh -= panels.south.panel('options').height;
						}
						panels.center.panel('resize', {
									top : 28,
									height : hh
								});
						panels.east.panel('resize', {
									top : 28,
									height : hh
								});
						panels.west.panel('resize', {
									top : 28,
									height : hh
								});
						if (_self.isVisible(panels.expandEast))
							panels.expandEast.panel('resize', {
										top : 28,
										height : hh
									});
						if (_self.isVisible(panels.expandWest))
							panels.expandWest.panel('resize', {
										top : 28,
										height : hh
									});

						panels.north.panel('panel').animate({
									top : -panels.north.panel('options').height
								}, function() {
									panels.north.panel('close');
									panels.expandNorth.panel('open').panel(
											'resize', {
												top : 0,
												left : 0,
												width : cc.width(),
												height : 28
											});
									panels.north.panel('options').onCollapse
											.call(panels.north);
								});
						if (!panels.expandNorth) {
							panels.expandNorth = createExpandPanel('north');
							panels.expandNorth.panel('panel').click(function() {
								panels.north.panel('open').panel('resize', {
											top : -panels.north
													.panel('options').height
										});
								panels.north.panel('panel').animate({
											top : 0
										});
								return false;
							});
						}
					} else if (region == 'south') {
						if (panels.south.panel('options').onBeforeCollapse
								.call(panels.south) == false)
							return;

						var hh = cc.height() - 28;
						if (_self.isVisible(panels.expandNorth)) {
							hh -= panels.expandNorth.panel('options').height;
						} else if (_self.isVisible(panels.north)) {
							hh -= panels.north.panel('options').height;
						}
						panels.center.panel('resize', {
									height : hh
								});
						panels.east.panel('resize', {
									height : hh
								});
						panels.west.panel('resize', {
									height : hh
								});
						if (_self.isVisible(panels.expandEast))
							panels.expandEast.panel('resize', {
										height : hh
									});
						if (_self.isVisible(panels.expandWest))
							panels.expandWest.panel('resize', {
										height : hh
									});

						panels.south.panel('panel').animate({
									top : cc.height()
								}, function() {
									panels.south.panel('close');
									panels.expandSouth.panel('open').panel(
											'resize', {
												top : cc.height() - 28,
												left : 0,
												width : cc.width(),
												height : 28
											});
									panels.south.panel('options').onCollapse
											.call(panels.south);
								});
						if (!panels.expandSouth) {
							panels.expandSouth = createExpandPanel('south');
							panels.expandSouth.panel('panel').click(function() {
								panels.south.panel('open').panel('resize', {
											top : cc.height()
										});
								panels.south.panel('panel').animate({
									top : cc.height()
											- panels.south.panel('options').height
								});
								return false;
							});
						}
					}*/
				},
/**
				 * 
				 * 根据位置展开布局中的面板 west,center,east,south,north
				 * @memberof Layout
				 * @param region {String}  
				 */
				expandPanel : function(region) {
					var container=this.element;
					var panels =this.panels;
					var cc = $(container);
					var _self=this;
					var expandPanel="expand"+region;
					panels[expandPanel].panel('close');
					panels[region].panel('open');
					this._setSize();
					/*if (region == 'east' && panels.expandEast) {
						if (panels.east.panel('options').onBeforeExpand
								.call(panels.east) == false)
							return;

						panels.expandEast.panel('close');
						panels.east.panel('panel').stop(true, true);
						panels.east.panel('open').panel('resize', {
									left : cc.width()
								});
						panels.east.panel('panel').animate({
							left : cc.width()
									- panels.east.panel('options').width
						}, function() {
							_self._setSize();
							panels.east.panel('options').onExpand
									.call(panels.east);
						});
					} else if (region == 'west' && panels.expandWest) {
						if (panels.west.panel('options').onBeforeExpand
								.call(panels.west) == false)
							return;

						panels.expandWest.panel('close');
						panels.west.panel('panel').stop(true, true);
						panels.west.panel('open').panel('resize', {
									left : -panels.west.panel('options').width
								});
						panels.west.panel('panel').animate({
									left : 0
								}, function() {
									_self._setSize();
									panels.west.panel('options').onExpand
											.call(panels.west);
								});
					} else if (region == 'north' && panels.expandNorth) {
						if (panels.north.panel('options').onBeforeExpand
								.call(panels.north) == false)
							return;

						panels.expandNorth.panel('close');
						panels.north.panel('panel').stop(true, true);
						panels.north.panel('open').panel('resize', {
									top : -panels.north.panel('options').height
								});
						panels.north.panel('panel').animate({
									top : 0
								}, function() {
									_self._setSize();
									panels.north.panel('options').onExpand
											.call(panels.north);
								});
					} else if (region == 'south' && panels.expandSouth) {
						if (panels.south.panel('options').onBeforeExpand
								.call(panels.south) == false)
							return;

						panels.expandSouth.panel('close');
						panels.south.panel('panel').stop(true, true);
						panels.south.panel('open').panel('resize', {
									top : cc.height()
								});
						panels.south.panel('panel').animate({
							top : cc.height()
									- panels.south.panel('options').height
						}, function() {
							_self._setSize();
							panels.south.panel('options').onExpand
									.call(panels.south);
						});
					}*/
				},
				/**
				 *绑定布局内面板事件
				 */
				bindEvents : function() {
					var container=this.element;
					var _slef = this;
					var panels = this.panels;
					var cc = $(container);

					// bind east panel events
					if (panels.east.length) {
						panels.east.panel('panel').bind('mouseover', 'east',
								collapsePanel);
					}

					// bind west panel events
					if (panels.west.length) {
						panels.west.panel('panel').bind('mouseover', 'west',
								collapsePanel);
					}

					// bind north panel events
					if (panels.north.length) {
						panels.north.panel('panel').bind('mouseover', 'north',
								collapsePanel);
					}

					// bind south panel events
					if (panels.south.length) {
						panels.south.panel('panel').bind('mouseover', 'south',
								collapsePanel);
					}

					panels.center.panel('panel').bind('mouseover', 'center',
							collapsePanel);

					function collapsePanel(e) {
						if (resizing == true)
							return;

						if (e.data != 'east' && _slef.isVisible(panels.east)
								&& _slef.isVisible(panels.expandEast)) {
							panels.east.panel('panel').animate({
										left : cc.width()
									}, function() {
										panels.east.panel('close');
									});
						}
						if (e.data != 'west' && _slef.isVisible(panels.west)
								&& _slef.isVisible(panels.expandWest)) {
							panels.west.panel('panel').animate({
										left : -panels.west.panel('options').width
									}, function() {
										panels.west.panel('close');
									});
						}
						if (e.data != 'north' && _slef.isVisible(panels.north)
								&& _slef.isVisible(panels.expandNorth)) {
							panels.north.panel('panel').animate({
										top : -panels.north.panel('options').height
									}, function() {
										panels.north.panel('close');
									});
						}
						if (e.data != 'south' && _slef.isVisible(panels.south)
								&& _slef.isVisible(panels.expandSouth)) {
							panels.south.panel('panel').animate({
										top : cc.height()
									}, function() {
										panels.south.panel('close');
									});
						}
						return false;
					}

				},
				isVisible : function(pp) {
					if (!pp)
						return false;
					if (pp.length) {
						return  pp.panel('panel').css("display")!="none";
					} else {
						return false;
					}
				}
			});
	

	
	$.fn.layout = function(options, param) {
		var methodReturn=null;
		 $set=this.each(function() {
					var $this = $(this);
					var state = $.data(this, 'layout');
					var data = $.data(this, 'layoutObj');
					if (!data) {
						var opts = $.extend({}, {
									element:this
									//fit : $(this).attr('fit') == 'true'
								});
						$this.data('layoutObj', (data = new Layout(opts)));
					}
					if (typeof options == 'string') {

						methodReturn = data[options](this, param);
						
					}
				});
		return (methodReturn === undefined) ? $set : methodReturn;
	};
	return Layout;
});

define('app/widgets/menu/app-contextmenu',["app/core/app-jquery","app/core/app-core"],function($,App,navTab){
	var menu, shadow, hash;
	$.fn.extend({
		contextMenu: function(id, options){
			var op = $.extend({
				    shadow : true,
				    bindings:{},
					ctrSub:null
				}, options
			);
			
			if (!menu) {
				menu = $('<div id="contextmenu"></div>').appendTo('body').hide();
			}
			if (!shadow) {
				shadow = $('<div id="contextmenuShadow"></div>').appendTo('body').hide();
			}
			
			hash = hash || [];
			hash.push({
				id : id,
				shadow: op.shadow,
				bindings: op.bindings || {},
				ctrSub: op.ctrSub
			});
			
			var index = hash.length - 1;
			$(this).bind('contextmenu', function(e) {
				display(index, this, e, op);
				return false;
			});
			return this;
		}
	});
	
	function display(index, trigger, e, options) {
		var cur = hash[index];

		var content = $(App.frags[cur.id]);
		content.find('li').hoverClass();
	
		// Send the content to the menu
		menu.html(content);
	
		$.each(cur.bindings, function(id, func) {
			$("[rel='"+id+"']", menu).bind('click', function(e) {
				hide();
				func($(trigger), $("#"+cur.id));
			});
		});
		
		var posX = e.pageX;
		var posY = e.pageY;
		if ($(window).width() < posX + menu.width()) posX -= menu.width();
		if ($(window).height() < posY + menu.height()) posY -= menu.height();

		menu.css({'left':posX,'top':posY}).show();
		if (cur.shadow) shadow.css({width:menu.width(),height:menu.height(),left:posX+3,top:posY+3}).show();
		$(document).one('click', hide);
		
		if ($.isFunction(cur.ctrSub)) {cur.ctrSub($(trigger), $("#"+cur.id));}
	}
	function hide() {
		menu.hide();
		shadow.hide();
	}
});


define('app/widgets/portlet/app-portal',["app/core/app-jquery", "app/data/app-ajax","jquery/jquery-ui"], function() {

	Portal = {
		Config : {
			tableCls : "form-list",
			tdCls : "form-text",
			tdCls2 : "single",
			ulCls : "tag-list",
			layCls : "layout-list",
			min : "min",
			mintext : "\u6536\u8d77",
			max : "max",
			maxtext : "\u5c55\u5f00",
			close : "close",
			closetext : "\u5173\u95ed",
			refreshtext : "\u5237\u65b0",
			refresh : "refresh",
			_groupItemContent : "itemContent",
			_groupItemHead : "itemHeader",
			_groupWrapperClass : "groupWrapper",
			_groupItemClass : "groupItem"
		}
	};
	Portal.Layout = function() {
		return {
			location : {
				left : "portal_l",
				center : "portal_m",
				right : "portal_r"
			},
			locationId : {
				left : "#portal_l",
				center : "#portal_m",
				right : "#portal_r"
			},
			layoutCss : {
				0 : "1:3",
				1 : "3:1",
				2 : "1:2:1",
				3 : "1:1:2",
				4 : "2:1:1",
				5 : "1:1:1"
			},
			layoutText : {
				"0" : "w250 w750 wnone",
				1 : "w750 w250 wnone",
				2 : "w250 w500 w250",
				3 : "w250 w250 w500",
				4 : "w500 w250 w250",
				5 : "w250 w250 w250"
			}
		}
	}();
	Portal.Util = {
		format : function(a, b) {
			for (var c in b)
				a = a.replace(RegExp("{" + c + "}", "g"), b[c]);
			return a
		},
		refresh : function() {
			$A("#" + Portal.Layout.left, "#" + Portal.Layout.center,
					"#" + Portal.Layout.right).sortable("refresh")
		},
		toBody : function(a) {
			$A(".portal").append(a)
		}
	};
	Portal.fn = function(a) {
		return a = {
			init : function(b) {
				a._ele = {};
				a._create();
				a._createWrap(b);
				a._bindEvent()
			},
			_create : function() {
				var b = $("<div id='header'/>");
				a.box = b;
				Portal.Util.toBody(b)
			},
			_createWrap : function(b) {
				var c = a._createTable(Portal.Config.tableCls);
				a._ele.table = c;
				a._createModuleList(b);
				a._createActionButton();
				a._addPanel(c)
			},
			_createTable : function(b) {
				b = $("<table/>").addClass(b);
				$("<tbody/>").append(a._createLayoutTr()).append(a
						._createBaseTr()).append(a._createActionTr())
						.appendTo(b);
				return b
			},
			_createBaseTr : function() {
				var b = a._createTd(Portal.Config.tdCls2), c = $("<tr>")
						.append(a._createTd(Portal.Config.tdCls,
								"\u529f\u80fd\u6a21\u5757\u8bbe\u7f6e\uff1a"))
						.append(b);
				a._ele.mtd = b;
				return c
			},
			_createActionTr : function() {
				var b = a._createTd(Portal.Config.tdCls2), c = $("<tr>")
						.append(a._createTd(Portal.Config.tdCls)).append(b);
				a._ele.atd = b;
				return c
			},
			_createLayoutTr : function() {
				var b = a._createTd(Portal.Config.tdCls2);
				$("<div/>")
						.addClass(Portal.Config.layCls)
						.append(a._createA("1:3"))
						.append(a._createA("3:1"))
						.append(a._createA("1:1:2"))
						.append(a._createA("1:2:1"))
						.append(a._createA("2:1:1"))
						.append("<a href='javascript:void(0);' class='active' rel='1:1:1'>\u9ed8\u8ba4</a>")
						.appendTo(b);
				var c = $("<tr>").append(a._createTd(Portal.Config.tdCls,
						"\u5e03\u5c40\u8bbe\u7f6e\uff1a")).append(b);
				a._ele.layoutTd = b;
				return c
			},
			_createModuleList : function(b) {
				var c = $("<ul/>").addClass(Portal.Config.ulCls);
				a._createLis(b.appL, c);
				a._createLis(b.appM, c);
				a._createLis(b.appR, c);
				a._ele.ul = c;
				c.appendTo(a._ele.mtd)
			},
			_createActionButton : function() {
				var b = $("<a class='button b' href='#' >\u6dfb\u52a0\u6a21\u5757</a>"), c = $("<a class='button b' href='#' >\u4fdd\u5b58\u914d\u7f6e</a>");
				a._ele.atd.append(b).append(c);
				a._bindAdd(b);
				a._bindSave(c)
			},
			_createLis : function(b, c) {
				$.each(b, function(b, d) {
							c.append(a._createLi(b, d))
						})
			},
			_createA : function(a) {
				return $("<a href='javascript:void(0);' rel='" + a + "'>" + a
						+ "</a>")
			},
			_createLi : function(a, c) {
				return $("<li/>").append("<a href='#' rel='" + a + "'>" + c
						+ "</a>").append("<span class='ok'></span>")
			},
			_createTd : function(a, c) {
				var e = $("<td>").addClass(a);
				void 0 != c && e.text(c);
				return e
			},
			_addPanel : function(b) {
				a.box.append(b)
			},
			_bindAdd : function(b) {
				b.click(function() {
					$.fallr("show", {
						buttons : {
							button1 : {
								text : "\u786e\u5b9a",
								onclick : function() {
									var b = $(this).children("form"), e = b
											.children("#modulename").val(), d = b
											.children("#modulekey").val(), b = b
											.children("input[name='modulelayout']:checked")
											.val(), b = "left" == b
											? $("#"
													+ Portal.Layout.location.left)
											: "center" == b
													? $("#"
															+ Portal.Layout.location.center)
													: $("#"
															+ Portal.Layout.location.right);
									a._ele.ul.append(a._createLi(d, e));
									b.append(Portal.Portal._createPortalOne(d,
											e));
									$.fallr("hide")
								}
							},
							button2 : {
								text : "\u53d6\u6d88"
							}
						},
						content : '<form style="margin-left:20px"><p>\u6a21\u5757\u540d\uff1a</p><input type="text" size="15" id="modulename" /><p>\u6a21\u5757Code\uff1a</p><input type="text" size="15" id="modulekey" /><p>\u6a21\u5757\u4f4d\u7f6e\uff1a</p>\u5de6:<input type="radio" name="modulelayout" checked="checked" value="left"/>&nbsp&nbsp\u4e2d:<input type="radio" name="modulelayout" value="center"/>&nbsp&nbsp\u53f3:<input type="radio" name="modulelayout" value="right"/></form>',
						icon : "add",
						position : "center"
					})
				})
			},
			_bindSave : function(a) {
				a.click(function() {
					var a = $("#" + Portal.Layout.location.left)
							.sortable("toArray"), b = $("#"
							+ Portal.Layout.location.center)
							.sortable("toArray"), d = $("#"
							+ Portal.Layout.location.right).sortable("toArray"), f = "";
					$("." + Portal.Config.layCls + " a").each(function() {
								$(this).hasClass("active")
										&& (f = $(this).attr("rel"))
							});
					"1:1:1" == f && (f = "\u9ed8\u8ba4");
					$.fallr("show", {
								content : "<p>left:[" + a + "]</p><p>center:["
										+ b + "]</p><p>right[" + d
										+ "]</p><p>\u5f53\u524d\u5e03\u5c40:"
										+ f + "</p>",
								position : "center"
							})
				})
			},
			_bindEvent : function() {
				a._moduleLiClick();
				a._layoutAClick()
			},
			_moduleLiClick : function() {
				$("." + Portal.Config.ulCls + " li").on("click", function() {
					var a = $(this), c = a.find("a").attr("rel"), c = $("#" + c), a = a
							.find(".ok");
					a.is(":visible") ? (a.hide(), c.hide()) : (a.show(), c
							.show());
					Portal.Util.refresh()
				})
			},
			_layoutAClick : function() {
				$("." + Portal.Config.layCls + " a").click(function() {
							var b = $(this), c = b.attr("rel");
							a._ToLayout(c);
							b.addClass("active").siblings()
									.removeClass("active")
						})
			},
			_ToLayout : function(a) {
				var c = Portal.Layout.layoutText, e = Portal.Layout.locationId, d = 0, f = "";
				$.each(Portal.Layout.layoutCss, function(c, j) {
							a == j && (d = c)
						});
				$.each(e, function(a, b) {
							var g = $(b), h = c[d].split(/\s+/);
							switch (a) {
								case "left" :
									a = 0;
									break;
								case "center" :
									a = 1;
									break;
								case "right" :
									a = 2
							}
							"wnone" == h[a]
									&& (f = g.sortable("toArray"), $.each(f,
											function(a, b) {
												$("#"
														+ Portal.Layout.location.left)
														.append($("#" + b))
											}), g.empty());
							g.removeClass("w250 w750 w500 wnone")
									.addClass(h[a])
						})
			}
		}
	}();
	Portal.Portlet = function(a) {
		var b = "<div id='" + Portal.Layout.location.left + "' class='"
				+ Portal.Config._groupWrapperClass + " w250'/>", c = "<div id='"
				+ Portal.Layout.location.center
				+ "' class='"
				+ Portal.Config._groupWrapperClass + " w250'/>", e = "<div id='"
				+ Portal.Layout.location.right
				+ "' class='"
				+ Portal.Config._groupWrapperClass + " w250'/>", d = "<div id='{key}' class='"
				+ Portal.Config._groupItemClass + "'/>", f = "<div class='"
				+ Portal.Config._groupItemHead + "'><h3>{name}</h3></div>", i = "<div class='"
				+ Portal.Config._groupItemContent + "'/>";
		return a = {
			init : function(b) {
				a._create();
				a._bindData(b);
				a._bindEvent()
			},
			_create : function() {
				a.box = $("<div id='portal'></div>");
				a._elements = {};
				a._createModulesWrap();
				Portal.Util.toBody(a.box)
			},
			_bindData : function(b) {
				$.each(b, function(b, c) {
							a._createPortal(b, c)
						})
			},
			_createModulesWrap : function() {
				a._elements.m_l = $(b);
				a._elements.m_m = $(c);
				a._elements.m_r = $(e);
				a._addPanel(a._elements.m_l);
				a._addPanel(a._elements.m_m);
				a._addPanel(a._elements.m_r)
			},
			_addPanel : function(b) {
				a.box.append(b)
			},
			_createPortal : function(b, c) {
				var d;
				switch (b) {
					case "appL" :
						d = a._elements.m_l;
						break;
					case "appM" :
						d = a._elements.m_m;
						break;
					case "appR" :
						d = a._elements.m_r
				}
				$.each(c, function(b, c) {
							d.append(a._createPortalOne(b, c))
						})
			},
			_createPortalOne : function(b, c) {
				var e = a._createItemHeader(c), f = a._createItemContent();
				return $(Portal.Util.format(d, {
							key : b
						})).append(e).append(f)
			},
			_createItemHeader : function(b) {
				var b = $(Portal.Util.format(f, {
							name : b
						})), c = a._createDiv("action").hide().appendTo(b);
				a
						._createA(Portal.Config.refresh,
								Portal.Config.refreshtext, !0).appendTo(c);
				a._createA(Portal.Config.min, Portal.Config.mintext, !0)
						.appendTo(c);
				a._createA(Portal.Config.max, Portal.Config.maxtext, !1)
						.appendTo(c);
				a._createA(Portal.Config.close, Portal.Config.closetext, !0)
						.appendTo(c);
				b.hover(function() {
							$(this).find(".action").show()
						}, function() {
							$(this).find(".action").hide()
						});
				return b
			},
			_createItemContent : function() {
				var a = $(i);
				$("<ul style='width:250px;'><li>xiaofanV587</li><li>xiaofanV587</li><li>xiaofanV587</li><li>xiaofanV587</li></ul>")
						.appendTo(a);
				return a
			},
			_createDiv : function(a) {
				return $("<div/>").addClass(a)
			},
			_createA : function(a, b, c) {
				a = $("<a href='javascript:void(0);' class='" + a + "' title='"
						+ b + "'/>");
				c || a.hide();
				return a
			},
			_eventMin : function() {
				$("." + Portal.Config.min).on("click", function() {
							var a = $(this), b = a.parent().parent().parent();
							b.find("." + Portal.Config._groupItemContent)
									.hide();
							b.find("." + Portal.Config.max).show();
							a.hide()
						})
			},
			_eventMax : function() {
				$("." + Portal.Config.max).on("click", function() {
							var a = $(this), b = a.parent().parent().parent();
							b.find("." + Portal.Config._groupItemContent)
									.show();
							b.find("." + Portal.Config.min).show();
							a.hide()
						})
			},
			_eventRemove : function() {
				$("." + Portal.Config.close).on("click", function() {
					$(this).parent().parent().parent().fadeOut("500",
							function() {
								var a = $(this), b = a.attr("id"), b = $(".tag-list")
										.find("a[rel='" + b + "']");
								a.remove();
								b.parent().remove()
							})
				})
			},
			_eventRefresh : function() {
				$("." + Portal.Config.refresh).on("click", function() {
					$(this).parent().parent().parent().find("ul").empty()
							.append("<li>\u5237\u65b0\u4e86</li>")
				})
			},
			_eventSortable : function() {
				$("." + Portal.Config._groupWrapperClass).sortable({
							connectWith : "."
									+ Portal.Config._groupWrapperClass,
							opacity : "0.6",
							dropOnEmpty : !0
						}).disableSelection()
			},
			_bindEvent : function() {
				a._eventSortable();
				a._eventRefresh();
				a._eventRemove();
				a._eventMax();
				a._eventMin()
			}
		}
	}();

return Portal;
})
;
/**
 * 对话框扩展
 */
define(
		'app/widgets/tabs/app-tab',[ "app/core/app-jquery", "app/core/app-core", "app/util/app-utils", "app/data/app-ajax",
				"app/widgets/app-widget", "app/widgets/button/app-button"],
		function($, $A, $utils, ajax, Widget) {
			/**
			 * 页签组件
			 */
			var AppTabs = Widget.extend({

				initialize : function(element, option) {
					if (!option) {
						option = {};
					}
					option.element = element;

					AppTabs.superclass.initialize.call(this, option);
					this.element = element;

					// TODO 暂时处理一下，日后改善
					this.option = option;
					/* 初始化找到对应的页签头 */
					var $this = $(element);
					this.element = $this;
					var $header = $this.find(">ul.nav-header");
					if ($header.length > 0) {
						this.$header = $header;
					}
					
					setHeaderButton($header, option);

					var $content = $this.find(">div.tab-content");
					this.$content = $content;

					var $currTab = (function() {
						var $currTab = $content.find(">.tab-pane.active");
						if ($currTab.length == 0) {
							$currTab = $content.find(">.tab-pane:first");
						} else {
							$currTab = $($currTab[0]);
						}
						return $currTab;
					})($this);

					$content.find(">.tab-pane").each(
							function() {
								if (this != $currTab[0]) {
									$(this).addClass("inactive").removeClass(
											"active");
								} else {
									$(this).removeClass("inactive").addClass(
											"active").removeClass("lazy");
								}
							});
					// this.setScroll($currTab);
					var _self = this;
					setTimeout(function() {
						_self.setScroll($currTab);

					}, 100)
					/* 初始化话切换页签事件 */
					var onSwitchTab = $this.attr("beforeSwitchTab");
					if (onSwitchTab) {
						onSwitchTab = $this.getPageJsProperty(onSwitchTab);// 获取页面绑定的js方法对象
						this.on("beforeSwitchTab", onSwitchTab);
					}
					
					var _self = this;
					//if (option.fit == true) {

						$content.find(">.tab-pane").addClass("layout-body");
						this.element.bind("_resize",
										function(event, r, w, h) {
											var mt = $header.css("marginTop")
													.replace('px', '');
											var mb = $header
													.css("marginBottom")
													.replace('px', '');
											h = h - mt - mb;
											if (option.fit == true) {
												$this.outerHeight(h);
												$this.outerWidth(w);
												var th = $header.outerHeight();
												h = h - th;// (th+parseInt(mt)+parseInt(mb));
												$content.outerHeight(h);
												$content.find(">.tab-pane").outerHeight(h);
											}
										
											$content.outerWidth($this.width());
											
											$content.find(">.tab-pane").outerWidth($this.width());
											_self.doLayout();
											if (_self.activateTab){
												_self.setScroll(_self.activateTab);
											}
										});
					//}
					var afterSwitchTab = $this.attr("afterSwitchTab");
					if (afterSwitchTab) {
						afterSwitchTab = $this.getPageJsProperty(afterSwitchTab);// 获取页面绑定的js方法对象
						this.on("afterSwitchTab", afterSwitchTab);
					}
					//this.doLayout();

					/* 在切换后的时间中对页签内容进行懒初始化 
					this.on("afterSwitchTab", function(activeTab) {
						var $pane = e.activeTab;
						if ($pane.is(".lazy")) {
							if ($pane.length > 0) {
								$pane.removeClass("lazy");
								$pane.initPageUI(option);
								$pane.attr("init", true);
							}
						}

						if (afterSwitchTab) {
							afterSwitchTab(e);
						}
					});*/
				},
			doLayout : function() {
				var $this = this.element, $content = this.$content
				var $prev = $content.find(">.tab-pane.active");
				var h = $prev.height();
				var w = $prev.width();

				$prev.children("div.panel:visible,div.app-grid:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible,div.xquery:visible,div.grid-container:visible,div.ztree-container:visible,div.app-vboxLayout,div.app-hboxLayout,div.datagrid:visible").each(
								function() {
									$(this).triggerHandler("_resize",
											[ true, w, h ]);
								});

			},

			/**
			 * 显示页签
			 */
			show : function($tab) {
				var $this = this.element, $ul = this.$header, $content = this.$content, $tabHead, $prev, $prevHead, e;
				if (!$tab) {
					$tab = $content.find(">.tab-pane:first");
				}
				if (typeof $tab == "string") {
					if ($tab.indexOf("#") != 0) {
						$tab = "#" + $tab;
					}
					$tab = $content.find($tab);
				}
				if ($tab.hasClass('active'))
					return;
				$prev = $content.find(">.tab-pane.active");
				if ($ul) {
					$prevHead = $ul.find(">.active>a");
					$tabHead = $ul.find("a[data-toggle=tab][data-target=#"
							+ $tab.attr("id") + "]");
				}

				e = $.Event('beforeSwitchTab', {
					previousTab : $prev,
					previousHead : $prevHead,
					activeTab : $tab,
					activeHead : $tabHead
				});
				$this.trigger(e);
				if (e.isDefaultPrevented())
					return;
				if ($prevHead) {
					$prevHead.parent("li").removeClass("active");
				}
				if ($tabHead) {
					$tabHead.parent("li").addClass("active");
				}
				var _self=this;
				this.activate($tab, $prev, function() {
					var $pane = $tab;
					if ($pane.is(".lazy")) {
						if ($pane.length > 0) {
							$pane.removeClass("lazy");
							$pane.initPageUI(_self.option);
							$pane.attr("init", true);
						}
					}
					_self.trigger("afterSwitchTab",$prev, $prevHead,$prevHead, $tab, $tabHead);
				});
				this.doLayout();
			},
			setScroll : function(cruTab) {
				var $cur = cruTab

				if (this.option.fit == true) {
					// modify by tw
					// 暂时处理一下，回头让小苏再看看
					// $cur.css("overflow-y","auto");
					// $cur.css("overflow-x","auto");

					if ($cur[0].scrollHeight - $cur[0].offsetHeight > 5) {
						$cur.css("overflow-y", "auto");
					} else {
						$cur.css("overflow-y", "hide");

					}
					if ($cur[0].scrollWidth - $cur[0].offsetWidth > 5) {
						$cur.css("overflow-x", "auto");
					} else {
						$cur.css("overflow-x", "hide");

					}

				}
			}
			/**
			 * 激活
			 */
			,
			activate : function($cur, $pre, callback) {
				var transition = callback && $.support.transition
						&& $pre.hasClass('fade');
				function next() {
					$pre.removeClass('active').addClass('inactive');
					$cur.addClass('active').removeClass('inactive');
					if (transition) {
						$cur[0].offsetWidth;// reflow for transition
						$cur.addClass('in');
					} else {
						$cur.removeClass('fade');
					}
					callback && callback();
				}
				transition ? $active.one($.support.transition.end, next)
						: next();
				$pre.removeClass('in');
				// this.setScroll($cur);

				// this.setScroll($currTab);
				var _self = this;
				this.activateTab=$cur;
				setTimeout(function() {
					_self.setScroll($cur);

				}, 100)

			},
			getCurrPane : function() {
				var $panel = this.$content.find(">.tab-pane.active");
				return $panel;
			}
			});

			
			/**
			 * 页签定义
			 */
	
			$.fn.appTabs = function(option, param) {
				var result = undefined;
				var $this = $(this).each(
						function() {
							var $this = $(this), data = $this.data('appTabs');
							if (!data) {
								
								option = $.extend($this.parseOptions(this, [{
									fit : "boolean"
								}]), option);
							}
							if (!data)
								$this.data('appTabs', (data = new AppTabs(this,
										option)));
							if (typeof option == 'string') {
								result = data[option](param);
							}
						});
				if (result !== undefined) {
					return result;
				}
				return $this;
			};

			/* TAB DATA-API
			 * ============ */
			$(document).on(
					'click.tab.data-api',
					'[data-toggle="tab"], [data-toggle="pill"]',
					function(e) {
						e.preventDefault();
						var selector = $(this).attr('data-target');
						if (!selector)
							return;
						if (!selector) {
							selector = $this.attr('href');
							selector = selector
									&& selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
						}
						var $target = $A(selector);
						if ($target.length == 0)
							return;
						var $appTabs = $target.parent(".tab-content").parent();
						if ($appTabs.length == 0)
							return;
						$appTabs.appTabs('show', $target);
					});
			return $;
			/**
			 * 生成按钮区
			 */
			function setHeaderButton($header, option){
				var btns = option.buttons;
				if(btns){
					$header.wrap('<div class="tabs-header" />');
					var $wrap = $header.parent();
					$wrap.append(createButton(btns));
				}
			}
			function createButton(btns){
				var $btnarea = $('<div class="tabs-header-btns"></div>');
				for(var i = 0; i < btns.length; i++){
					var btn = btns[i];
					var $btn = $('<a class="app-button" title="' + btn.tips + '">' + btn.text+ '</a>')
					$btnarea.append($btn);
					$btn.button(btn);
				}
				return $btnarea;
			}
		});
/**
 * tabs页
 * @author sjq
 * 
 */
define('app/widgets/tabs/app-tabs',[ "app/core/app-jquery", "app/core/app-core", "app/util/app-utils",
		"app/data/app-ajax", "app/widgets/app-widget","app/core/app-options",
		"app/widgets/button/app-menubutton","app/widgets/panel/app-panel"],
		function($, $A, $utils, ajax, Widget,Opt,button,panel) {

			var Tabs = Widget.extend({
				initialize : function(el, options) {
					if (!options) {
						options = {};
					}
					Tabs.superclass.initialize.call(this, options);

					var t = $(el);
					this.element=el;
					var opts = $.extend({}, Tabs.defaults, Tabs
									.parseOptions(el), options);
					$.data(el, "tabsObj", {
						options:opts,
						tabs: [],
						selectHis: []
							});
					this._init();
				},
			    _init:function(){
			    	this._wrapTabs();
			    	this._addTools();
			    	this._setProperties();
			    	this._setSize();
			    	this._bindEvents();
					this.addEvents("onLoad","onSelect","onBeforeClose","onUnselect","onClose","onAdd","onBeforeDestroy","onUpdate","onContextMenu");

			    	this._doFirstSelect();
			    }
			    ,options: function(){
					var cc = this.element;
					var opts = $.data(cc, 'tabsObj').options;
					var s =this._getSelectedTab();
					opts.selected = s ? this._getTabIndex(s) : -1;
					return opts;
				},
				tabs: function(){
					return $.data(this.element, 'tabsObj');
				},
				resize: function(param){
				
						this._setSize(param);
						this.setSelectedSize();
				
				},
				add: function(options){
					return this._addTab(options);
					
				},
				close: function(which){
					return this._closeTab(which);
					
				},
				getTab: function( which){
					return this._getTab(which);
					
				},
				getTabIndex: function(tab){
					return this._getTabIndex(tab);
				},
				getSelected: function(){
					return this._getSelectedTab();
				},
				select: function( which){
                    if($.type(which) === 'string'){
                        var container=this.element;
                        var tabs = $.data(container, 'tabsObj').tabs;
                        for(var i=0;i<tabs.length;i++){
                        	var $tab = tabs[i];
                            if($tab.attr('id')===which){
                                which = i;
                                break;
                            }
						}
                    }
					this._selectTab(which);
				},
				unselect: function(which){
					this._unselectTab(which);
					
				},
				exists: function( which){
					
					return this.exists(which);
				},
				update: function( options){
					return this._updateTab(options);
					
				},
				enableTab: function(which){
					var opts =  this.getTab(which).panel('options')
					opts.tab.removeClass('tabs-disabled');
					opts.disabled = false;
					
				},
				disableTab: function(which){
					var opts =  this.getTab(which).panel('options')
					opts.tab.addClass('tabs-disabled');
					opts.disabled = true;
				},
				showHeader: function(){
					
						this._showHeader(true);
					
				},
				hideHeader: function(){
					this._showHeader( false);
					
				},
				showTool: function(){
				
					this._showTool(true);
					
				},
				hideTool: function(jq){
					this._showTool(this, false);
				},
				scrollBy: function( deltaX){	// scroll the tab header by the specified amount of pixels
					var container=this.element;

						var opts =this.options();
						var wrap = $(container).find('>div.tabs-header>div.tabs-wrap');
						var pos = Math.min(wrap._scrollLeft() + deltaX, getMaxScrollWidth());
						wrap.animate({scrollLeft: pos}, opts.scrollDuration);
						
						function getMaxScrollWidth(){
							var w = 0;
							var ul = wrap.children('ul');
							ul.children('li').each(function(){
								w += $(this).outerWidth(true);
							});
							return w - wrap.width() + (ul.outerWidth() - ul.width());
						}
					
				},
				
				_showHeader:function(visible){
					var opts = $.data(this.element, 'tabsObj').options;
					opts.showHeader = visible;
					this.resize();
				},
				
				_showTool:function(visible){
					var tool = $(this.element).find('>.tabs-header>.tabs-tool');
					if (visible){
						tool.removeClass('tabs-tool-hidden').show();
					} else {
						tool.addClass('tabs-tool-hidden').hide();
					}
					this.resize();
					this.scrollBy(0)
					
				}, _getContentWidth:function(c){
					var w = 0;
					$(c).children().each(function(){
						w += $(this).outerWidth(true);
					});
					return w;
				},	/**
				 * set the tabs scrollers to show or not,
				 * dependent on the tabs count and width
				 */
				 _setScrollers:function() {
					var opts = $.data(this.element, 'tabsObj').options;
					if (opts.tabPosition == 'left' || opts.tabPosition == 'right' || !opts.showHeader){return}
					
					var header = $(this.element).children('div.tabs-header');
					var tool = header.children('div.tabs-tool:not(.tabs-tool-hidden)');
					var sLeft = header.children('div.tabs-scroller-left');
					var sRight = header.children('div.tabs-scroller-right');
					var wrap = header.children('div.tabs-wrap');
					
					// set the tool height
					var tHeight = header.outerHeight();
					if (opts.plain){
						tHeight -= tHeight - header.height();
					}
					tool._outerHeight(tHeight);
					
					var tabsWidth = this._getContentWidth(header.find('ul.tabs'));
					var cWidth = header.width() - tool._outerWidth();
					
					if (tabsWidth > cWidth) {
						sLeft.add(sRight).show()._outerHeight(tHeight);
						if (opts.toolPosition == 'left'){
							tool.css({
								left: sLeft.outerWidth(),
								right: ''
							});
							wrap.css({
								marginLeft: sLeft.outerWidth() + tool._outerWidth(),
								marginRight: sRight._outerWidth(),
								width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
							});
						} else {
							tool.css({
								left: '',
								right: sRight.outerWidth()
							});
							wrap.css({
								marginLeft: sLeft.outerWidth(),
								marginRight: sRight.outerWidth() + tool._outerWidth(),
								width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
							});
						}
					} else {
						sLeft.add(sRight).hide();
						if (opts.toolPosition == 'left'){
							tool.css({
								left: 0,
								right: ''
							});
							wrap.css({
								marginLeft: tool._outerWidth(),
								marginRight: 0,
								width: cWidth
							});
						} else {
							tool.css({
								left: '',
								right: 0
							});
							wrap.css({
								marginLeft: 0,
								marginRight: tool._outerWidth(),
								width: cWidth
							});
						}
					}
				},
				_addTools:function (){
					var opts = $.data(this.element, 'tabsObj').options;
					var header = $(this.element).children('div.tabs-header');
					if (opts.tools) {
						if (typeof opts.tools == 'string'){
							$(opts.tools).addClass('tabs-tool').appendTo(header);
							$(opts.tools).show();
						} else {
							header.children('div.tabs-tool').remove();
							var tools = $('<div class="tabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(header);
							var tr = tools.find('tr');
							for(var i=0; i<opts.tools.length; i++){
								var td = $('<td></td>').appendTo(tr);
								if(opts.tools[i].children){
									var btn = $.extend(true, {}, opts.tools[i], {
										plain: true
									});
									var $btn = initMenuButtonHtml(btn);
									td.append($btn);
								}else{
									var tool = $('<a></a>').appendTo(td);
									tool[0].onclick = eval(opts.tools[i].handler || function(){});
									tool.button($.extend({}, opts.tools[i], {
										plain: true
									}));
								}
							}
						}
					} else {
						header.children('div.tabs-tool').remove();
					}
				},_setSize:function(param) {
					var state = $.data(this.element, 'tabsObj');
					var opts = state.options;
					var cc = $(this.element);
					
					if (!opts.doSize){return}
					if (param){
						$.extend(opts, {
							width: param.width,
							height: param.height
						});
					}
					cc._size(opts);

					var header = cc.children('div.tabs-header');
					var panels = cc.children('div.tabs-panels');
					var wrap = header.find('div.tabs-wrap');
					var ul = wrap.find('.tabs');
					ul.children('li').removeClass('tabs-first tabs-last');
					ul.children('li:first').addClass('tabs-first');
					ul.children('li:last').addClass('tabs-last');
					
					if (opts.tabPosition == 'left' || opts.tabPosition == 'right'){
						header._outerWidth(opts.showHeader ? opts.headerWidth : 0);
						panels._outerWidth(cc.width() - header.outerWidth());
						header.add(panels)._size('height', isNaN(parseInt(opts.height)) ? '' : cc.height());
						wrap._outerWidth(header.width());
						ul._outerWidth(wrap.width()).css('height','');
					} else {
						header.children('div.tabs-scroller-left,div.tabs-scroller-right,div.tabs-tool:not(.tabs-tool-hidden)').css('display', opts.showHeader?'block':'none');
						header._outerWidth(cc.width()).css('height','');
						if (opts.showHeader){
							header.css('background-color','');
							wrap.css('height','');
						} else {
							header.css('background-color','transparent');
							header._outerHeight(0);
							wrap._outerHeight(0);
						}
						ul._outerHeight(opts.tabHeight).css('width','');
						ul._outerHeight(ul.outerHeight()-ul.height()-1+opts.tabHeight).css('width','');
						
						panels._size('height', isNaN(parseInt(opts.height)) ? '' : (cc.height()-header.outerHeight()));
						panels._size('width', cc.width());
					}

					if (state.tabs.length){
						var d1 = ul.outerWidth(true) - ul.width();
						var li = ul.children('li:first');
						var d2 = li.outerWidth(true) - li.width();
						var hwidth = header.width() - header.children('.tabs-tool:not(.tabs-tool-hidden)')._outerWidth();
						var justifiedWidth = Math.floor((hwidth-d1-d2*state.tabs.length)/state.tabs.length);
						
						$.map(state.tabs, function(p){
							setTabSize(p, (opts.justified && $.inArray(opts.tabPosition,['top','bottom'])>=0) ? justifiedWidth : undefined);
						});
						if (opts.justified && $.inArray(opts.tabPosition,['top','bottom'])>=0){
							var deltaWidth = hwidth - d1 - this._getContentWidth(ul);
							setTabSize(state.tabs[state.tabs.length-1], justifiedWidth+deltaWidth);
						}
					}
					this._setScrollers();

					function setTabSize(p, width){
						var p_opts = p.panel('options');
						var p_t = p_opts.tab.find('a.tabs-inner');
						var width = width ? width : (parseInt(p_opts.tabWidth||opts.tabWidth||undefined));
						if (width){
							p_t._outerWidth(width);
						} else {
							p_t.css('width', '');
						}
						p_t._outerHeight(opts.tabHeight);
						p_t.css('lineHeight', p_t.height()+'px');
						p_t.find('.app-fluid:visible').triggerHandler('_resize');
					}
				},
				/**
				 * set selected tab panel size
				 */
				_setSelectedSize:function(){
					var opts = $.data(this.element, 'tabsObj').options;
					var tab = this._getSelectedTab();
					if (tab){
						var panels = $(this.element).children('div.tabs-panels');
						var width = opts.width=='auto' ? 'auto' : panels.width();
						var height = opts.height=='auto' ? 'auto' : panels.height();
						tab.panel('resize', {
							width: width,
							height: height
						});
					}
				},	/**
				 * wrap the tabs header and body
				 */
				_wrapTabs:function () {
					var tabs = $.data(this.element, 'tabsObj').tabs;
					var _self=this;
					var cc = $(this.element).addClass('tabs-container');
					var panels = $('<div class="tabs-panels"></div>').insertBefore(cc);
					cc.children('div').each(function(){
						panels[0].appendChild(this);
					});
					cc[0].appendChild(panels[0]);
					$('<div class="tabs-header">'
							+ '<div class="tabs-scroller-left"></div>'
							+ '<div class="tabs-scroller-right"></div>'
							+ '<div class="tabs-wrap">'
							+ '<ul class="tabs"></ul>'
							+ '</div>'
							+ '</div>').prependTo(this.element);
					
					cc.children('div.tabs-panels').children('div').each(function(i){
						var opts = $.extend({}, $(this).parseOptions(this), {
							disabled: ($(this).attr('disabled') ? true : undefined),
							selected: ($(this).attr('selected') ? true : undefined)
						});
						_self._createTab(opts, $(this));
					});
					
					cc.children('div.tabs-header').find('.tabs-scroller-left, .tabs-scroller-right').hover(
							function(){$(this).addClass('tabs-scroller-over');},
							function(){$(this).removeClass('tabs-scroller-over');}
					);
					var _self=this;
					cc.bind('_resize', function(e,force){
						if ($(this).hasClass('app-fluid') || force){
							_self._setSize();
							_self._setSelectedSize();
						}
						return false;
					});
				},_bindEvents:function(){
					var state = $.data(this.element, 'tabsObj')
					var opts = state.options;
					var _self=this;
					$(this.element).children('div.tabs-header').unbind().bind('click', function(e){
						if ($(e.target).hasClass('tabs-scroller-left')){
							$(_self.element).tabs('scrollBy', -opts.scrollIncrement);
						} else if ($(e.target).hasClass('tabs-scroller-right')){
							$(_self.element).tabs('scrollBy', opts.scrollIncrement);
						} else {
							var li = $(e.target).closest('li');
							if (li.hasClass('tabs-disabled')){return false;}
							var a = $(e.target).closest('a.tabs-close');
							if (a.length){
								_self._closeTab(getLiIndex(li));
							} else if (li.length){
//								selectTab(this.element, getLiIndex(li));
								var index = getLiIndex(li);
								var popts = state.tabs[index].panel('options');
								if (popts.collapsible){
									popts.closed ? _self._selectTab(index) : _self._unselectTab( index);
								} else {
									_self._selectTab(index);
								}
							}
							return false;
						}
					}).bind('contextmenu', function(e){
						var li = $(e.target).closest('li');
						if (li.hasClass('tabs-disabled')){return;}
						if (li.length){
							
							_self.trigger("onContextMenu",e, li.find('span.tabs-title').html(),getLiIndex(li))
							//opts.onContextMenu.call(_self.element, e, li.find('span.tabs-title').html(), getLiIndex(li));
						}
					});
					
					function getLiIndex(li){
						var index = 0;
						li.parent().children('li').each(function(i){
							if (li[0] == this){
								index = i;
								return false;
							}
						});
						return index;
					}
				}, _setProperties:function(){
					var opts = $.data(this.element, 'tabsObj').options;
					var header = $(this.element).children('div.tabs-header');
					var panels = $(this.element).children('div.tabs-panels');
					
					header.removeClass('tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right');
					panels.removeClass('tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right');
					if (opts.tabPosition == 'top'){
						header.insertBefore(panels);
					} else if (opts.tabPosition == 'bottom'){
						header.insertAfter(panels);
						header.addClass('tabs-header-bottom');
						panels.addClass('tabs-panels-top');
					} else if (opts.tabPosition == 'left'){
						header.addClass('tabs-header-left');
						panels.addClass('tabs-panels-right');
					} else if (opts.tabPosition == 'right'){
						header.addClass('tabs-header-right');
						panels.addClass('tabs-panels-left');
					}
					
					if (opts.plain == true) {
						header.addClass('tabs-header-plain');
					} else {
						header.removeClass('tabs-header-plain');
					}
					header.removeClass('tabs-header-narrow').addClass(opts.narrow?'tabs-header-narrow':'');
					var tabs = header.find('.tabs');
					tabs.removeClass('tabs-pill').addClass(opts.pill?'tabs-pill':'');
					tabs.removeClass('tabs-narrow').addClass(opts.narrow?'tabs-narrow':'');
					tabs.removeClass('tabs-justified').addClass(opts.justified?'tabs-justified':'');
					if (opts.border == true){
						header.removeClass('tabs-header-noborder');
						panels.removeClass('tabs-panels-noborder');
					} else {
						header.addClass('tabs-header-noborder');
						panels.addClass('tabs-panels-noborder');
					}
					opts.doSize = true;
				}, _createTab:function( options, pp) {
					options = options || {};
					var container=this.element;
					var state = $.data(container, 'tabsObj');
					var tabs = state.tabs;
					var _self=this;
					if (options.index == undefined || options.index > tabs.length){options.index = tabs.length}
					if (options.index < 0){options.index = 0}
					
					var ul = $(container).children('div.tabs-header').find('ul.tabs');
					var panels = $(container).children('div.tabs-panels');
					var tab = $(
							'<li>' +
							'<a href="javascript:void(0);" class="tabs-inner">' +
							'<span class="tabs-title"></span>' +
							'<span class="tabs-icon"></span>' +
							'</a>' +
							'</li>');
					if (!pp){pp = $('<div></div>');}
					if (options.index >= tabs.length){
						tab.appendTo(ul);
						pp.appendTo(panels);
						tabs.push(pp);
					} else {
						tab.insertBefore(ul.children('li:eq('+options.index+')'));
						pp.insertBefore(panels.children('div.panel:eq('+options.index+')'));
						tabs.splice(options.index, 0, pp);
					}

					// create panel
					pp.panel($.extend({}, options, {
						tab: tab,
						border: false,
						noheader: true,
						closed: true,
						doSize: false,
						iconCls: (options.icon ? options.icon : undefined),
						onLoad: function(){
							/*if (options.onLoad){
								options.onLoad.call(this, arguments);
							}*/
							_self.trigger("onLoad",container)
							//state.options.onLoad.call(container, $(this));
						},
						onBeforeOpen: function(target){
							
							if (_self.trigger("onBeforeOpen",container) == false){return false;};
							var p = _self.getSelected();
							var  tabIndex=_self.getTabIndex(p);
							var tabPanel=_self._getTab(tabIndex);
							_self.trigger("beforeSwitchTab", tabIndex,tabPanel);
							if (p){
								if (p[0] != this){
									
									_self.unselect(tabIndex);
									p = _self.getSelected();
									if (p){
										return false;
									}
								} else {
									_self._setSelectedSize();
									return false;
								}
							}
							
							var popts = $(target).panel('options');
							popts.tab.addClass('tabs-selected');
							// scroll the tab to center position if required.
							var wrap = $(container).find('>div.tabs-header>div.tabs-wrap');
							var left = popts.tab.position().left;
							var right = left + popts.tab.outerWidth();
							if (left < 0 || right > wrap.width()){
								var deltaX = left - (wrap.width()-popts.tab.width()) / 2;
								_self.scrollBy(deltaX);
							} else {
								_self.scrollBy(0);
							}
							
							var panel = $(target).panel('panel');
							panel.css('display','block');
							_self._setSelectedSize();
							panel.css('display','none');
						},
						onOpen: function(target){
							var popts = $(target).panel('options');
							var  tabIndex=_self.getTabIndex(pp);
							var tabPanel=_self._getTab(tabIndex);
							/*if (options.onOpen){
								//options.onOpen.call(this);
								
								_self.trigger("onOpen", popts.title, tabIndex,tabPanel);
							}
						*/
							_self.trigger("onOpen", popts.title, tabIndex,tabPanel);
							state.selectHis.push(popts.title);
							
							_self.trigger("onSelect", popts.title, tabIndex,tabPanel);
							_self.trigger("afterSwitchTab", popts.title, tabIndex,tabPanel);

							//state.options.onSelect.call(container, popts.title, _self.getTabIndex(this));
						},
						onBeforeClose: function(target){
							if (options.onBeforeClose){
								if (options.onBeforeClose.call(this) == false){return false;}
							}
							if (_self.trigger("onBeforeClose",container) == false){return false;};
							$(target).panel('options').tab.removeClass('tabs-selected');
						},
						onClose: function(target){
							var  tabIndex=_self.getTabIndex(pp);
							var tabPanel=_self._getTab(tabIndex);
							/*if (options.onClose){
								options.onClose.call(this);
							}*/
							_self.trigger("onClose",container);
							var popts = $(target).panel('options');
							_self.trigger("onUnselect", popts.title,tabIndex,tabPanel)

							//state.options.onUnselect.call(container, popts.title, _self.getTabIndex(this));
						}
					}));
					this.update({
						tab: pp,
						options: pp.panel('options'),
						type: 'header'
					})
					// only update the tab header
					//$(container).tabs('update', );
				},_addTab:function(options) {
					var container=this.element;
					var state = $.data(container, 'tabsObj');
					var opts = state.options;
					if (options.selected == undefined) options.selected = true;
					
					this._createTab( options);
					this.trigger("onAdd", options.title,options.index)
					//opts.onAdd.call(container, options.title, options.index);
					if (options.selected){
						this._selectTab(options.index);	// select the added tab panel
					}
				},/**
				 * update tab panel, param has following properties:
				 * tab: the tab panel to be updated
				 * options: the tab panel options
				 * type: the update type, possible values are: 'header','body','all'
				 */
				_updateTab:function ( param){
					var container=this.element;
					param.type = param.type || 'all';
					var selectHis = $.data(container, 'tabsObj').selectHis;
					var pp = param.tab;	// the tab panel
					var opts = pp.panel('options');	// get the tab panel options
					var oldTitle = opts.title;
					$.extend(opts, param.options, {
						iconCls: (param.options.icon ? param.options.icon : undefined)
					});

					if (param.type == 'all' || param.type == 'body'){
						pp.panel();
					}
					if (param.type == 'all' || param.type == 'header'){
						var tab = opts.tab;
						
						if (opts.header){
							tab.find('.tabs-inner').html($(opts.header));
						} else {
							var s_title = tab.find('span.tabs-title');
							var s_icon = tab.find('span.tabs-icon');
							s_title.html(opts.title);
							s_icon.attr('class', 'tabs-icon');
							
							tab.find('a.tabs-close').remove();
							if (opts.closable){
								s_title.addClass('tabs-closable');
								$('<a href="javascript:void(0);" class="tabs-close"></a>').appendTo(tab);
							} else{
								s_title.removeClass('tabs-closable');
							}
							if (opts.iconCls){
								s_title.addClass('tabs-with-icon');
								s_icon.addClass(opts.iconCls);
							} else {
								s_title.removeClass('tabs-with-icon');
							}
							if (opts.tools){
								var p_tool = tab.find('span.tabs-p-tool');
								if (!p_tool.length){
									var p_tool = $('<span class="tabs-p-tool"></span>').insertAfter(tab.find('a.tabs-inner'));
								}
								if ($.isArray(opts.tools)){
									p_tool.empty();
									for(var i=0; i<opts.tools.length; i++){
										var t = $('<a href="javascript:void(0);"></a>').appendTo(p_tool);
										t.addClass(opts.tools[i].iconCls);
										if (opts.tools[i].handler){
											t.bind('click', {handler:opts.tools[i].handler}, function(e){
												if ($(this).parents('li').hasClass('tabs-disabled')){return;}
												e.data.handler.call(this);
											});
										}
									}
								} else {
									$(opts.tools).children().appendTo(p_tool);
								}
								var pr = p_tool.children().length * 12;
								if (opts.closable) {
									pr += 8;
									p_tool.css('right', '');
								} else {
									pr -= 3;
									p_tool.css('right','5px');
								}
								s_title.css('padding-right', pr+'px');
							} else {
								tab.find('span.tabs-p-tool').remove();
								s_title.css('padding-right', '');
							}
						}
						if (oldTitle != opts.title){
							for(var i=0; i<selectHis.length; i++){
								if (selectHis[i] == oldTitle){
									selectHis[i] = opts.title;
								}
							}
						}
					}
					if (opts.disabled){
						opts.tab.addClass('tabs-disabled');
					} else {
						opts.tab.removeClass('tabs-disabled');
					}
					
					this._setSize();
					
					$.data(container, 'tabsObj').options.onUpdate.call(container, opts.title, this._getTabIndex(pp));
				},_closeTab:function (which) {
					var container=this.element;
					var opts = $.data(container, 'tabsObj').options;
					var tabs = $.data(container, 'tabsObj').tabs;
					var selectHis = $.data(container, 'tabsObj').selectHis;
					
					if (!this._exists( which)) return;
					
					var tab = this._getTab(which);
					var title = tab.panel('options').title;
					var index = this._getTabIndex(tab);
					
					
					if (this.trigger("onBeforeClose",title, index) == false){return false;};
					
					var tab = this._getTab(which, true);
					tab.panel('options').tab.remove();
					tab.panel('destroy');
					
				
					this.trigger("onClose",title, index)
//					setScrollers(container);
					this._setSize();
					// remove the select history item
					for(var i=0; i<selectHis.length; i++){
						if (selectHis[i] == title){
							selectHis.splice(i, 1);
							i --;
						}
					}
					// select the nearest tab panel
					var hisTitle = selectHis.pop();
					if (hisTitle){
						this._selectTab(hisTitle);
					} else if (tabs.length){
						this._selectTab(0);
					}
				},
				
				/**
				 * get the specified tab panel
				 */
				_getTab:function (which, removeit){
					var container=this.element;
					var tabs = $.data(container, 'tabsObj').tabs;
					var tab = null;
					if (typeof which == 'number'){
						if (which >=0 && which < tabs.length){
							tab = tabs[which];
							if (removeit){
								tabs.splice(which, 1);
							}
						}
					} else {
						var tmp = $('<span></span>');
						for(var i=0; i<tabs.length; i++){
							var p = tabs[i];
							var panelOpt=p.panel('options');
							if (panelOpt.id){
								if (panelOpt.id == which){
									tab = p;
									if (removeit){
										tabs.splice(i, 1);
									}
									break;
								}
								
							}else{
								tmp.html(p.panel('options').title);
								if (tmp.text() == which){
									tab = p;
									if (removeit){
										tabs.splice(i, 1);
									}
									break;
								}
							}
							
						}
						tmp.remove();
					}
					return tab;
				},
				
				 _getTabIndex:function(tab){
					 var container=this.element;
					var tabs = $.data(container, 'tabsObj').tabs;
					for(var i=0; i<tabs.length; i++){
						if (tabs[i][0] == $(tab)[0]){
							return i;
						}
					}
					return -1;
				},
				
				_getSelectedTab:function (){
					var container=this.element;
					var tabs = $.data(container, 'tabsObj').tabs;
					for(var i=0; i<tabs.length; i++){
						var tab = tabs[i];
						if (tab.panel('options').tab.hasClass('tabs-selected')){
							return tab;
						}
					}
					return null;
				},
				
				/**
				 * do first select action, if no tab is setted the first tab will be selected.
				 */
				_doFirstSelect:function (){
					var container=this.element;
					var state = $.data(container, 'tabsObj')
					var tabs = state.tabs;
					for(var i=0; i<tabs.length; i++){
						var opts = tabs[i].panel('options');
						if (opts.selected && !opts.disabled){
							this._selectTab(i);
							return;
						}
					}
					this._selectTab(state.options.selected);
				},
				
				_selectTab:function ( which){
					var p = this._getTab( which);
					if (p && !p.is(':visible')){
						this._stopAnimate();
						if (!p.panel('options').disabled){
							p.panel('open');				
						}
					}
				},
				
				_unselectTab:function (which){
					var p = this._getTab( which);
					if (p && p.css('display') != 'none'){
						this._stopAnimate();
						p.panel('close');
					}
				},

				 _stopAnimate:function(){
					 var container=this.element;
					$(container).children('div.tabs-panels').each(function(){
						$(this).stop(true, true);
					});
				},
				
				_exists:function ( which){
					 var container=this.element;
					return this._getTab(which) != null;
				},
				hideTab:function(whichs){
					
					var witchList=whichs.split(","),which;
					for(var i=0;i<witchList.length;i++){
						which=witchList[i]
						var tabPanel=this.getTab(which);
						var opts =  tabPanel.panel('options');		
						if (opts){
							opts.tab.hide();
							 tabPanel.panel('hide');
						}
					}
				},
				showTab:function(whichs){
					var witchList=whichs.split(","),which;
					for(var i=0;i<witchList.length;i++){
						which=witchList[i]
						var tabPanel=this.getTab(which);
						var opts =  tabPanel.panel('options');		
						if (opts){
							opts.tab.show();
							 tabPanel.panel('show');
						}
					}
					
				}
			});
			
		
			
			

			Tabs.parseOptions = function(target){
				var t = $(target);
				return $.extend({}, t.parseOptions(target, [
					'tools','toolPosition','tabPosition',
					{fit:'boolean',border:'boolean',plain:'boolean'},
					{headerWidth:'number',tabWidth:'number',tabHeight:'number',selected:'number'},
					{showHeader:'boolean',justified:'boolean',narrow:'boolean',pill:'boolean'}
				]));
			};
			
			Tabs.defaults = {
				width : 'auto',
				height : 'auto',
				headerWidth : 150, // the tab header width, it is valid only when tabPosition set to 'left' or 'right' 
				tabWidth : 'auto', // the tab width
				tabHeight : 27, // the tab height
				selected : 0, // the initialized selected tab index
				showHeader : true,
				plain : false,
				fit : false,
				border : true,
				justified : false,
				narrow : false,
				pill : false,
				tools : null,
				toolPosition : 'right', // left,right
				tabPosition : 'top', // possible values: top,bottom
				scrollIncrement : 100,
				scrollDuration : 400,
				onLoad : function(panel) {
				},
				onSelect : function(title, index) {
				},
				onUnselect : function(title, index) {
				},
				onBeforeClose : function(title, index) {
				},
				onClose : function(title, index) {
				},
				onAdd : function(title, index) {
				},
				onUpdate : function(title, index) {
				},
				onContextMenu : function(e, title, index) {
				}
			}
		$.fn.tabs = function(options, param) {
		
				var methodReturn;

				options = options || {};
				$set = this.each(function() {
							var $this = $(this);
							var state = $.data(this, 'tabsObj');
							var data = $this.data('tabs');
							if (state) {
								if (typeof options === 'object') {
									opts = $.extend(state.options, options);
								}
							} else {
								data = new Tabs(this, options);
								$this.data('tabs', data);
								//data._init(this);
							}
							if (typeof options === 'string')
								methodReturn = data[options](param);
						});
				return (methodReturn === undefined) ? $set : methodReturn;
			};
	/**
	 *生成菜单按钮
	 */
	function initMenuButtonHtml(btn){
		var $btn = $('<a id="' + btn.id + '" >' + btn.text + '</a>');
		btn.menuId = $A.uuid();
		initMenu(btn);
		$btn.menubutton({
			iconCls: btn.iconCls,
			onClick: btn.onClick,
			plain: false,
			menu: btn.menuId,
			menuStyle: btn.style ? btn.style : 'width:150px'
		});
		return $btn;
		function initMenu(btn){
			var children = btn.children
				,$menu = $('<div id="' + btn.menuId + '" style="' + btn.menuStyle + ';display:none;"></div>');
			for(var i = 0; i < children.length; i++){
				var child = children[i];
				if(child.menuSep){
					$menu.append('<div class="menu-sep"></div>');
				}else{
					initMenuItem(child);
				}
			}
			$.$appPanelContainer.append($menu);
			function initMenuItem(child){
				if(!child.id){
					child.id = $A.uuid();
				}
				var $child = $('<div id="' + child.id 
					+ '" ' + getDataOptions(child) + '>' + child.text + '</div>');
				$menu.append($child);
				$child.on('click', function(e){
					if(child.onClick){
						child.onClick();
					}
				});
			}
			function getDataOptions(btn){
				var result = '';
				if(btn.iconCls){
					result += 'iconCls:\'' + btn.iconCls + '\'';
				}
				if(result){
					result = 'data-options="'+ result +'"';
				}
				return result;
			}
		}
	};
	return Tabs;
});
/**
 * 表格扩展
 */
define('app/widgets/tree/app-ztree',["app/core/app-jquery","app/core/app-core","app/data/app-ajax",
"app/core/app-events", "jquery/jquery.ztree"],function($,$A,$ajax, Events) {
	
	/**
	 * 取得ztree的jquery对象
	 */
	$.fn.getAppZTree=function(){
		var $this=$(this);
		if(!$this.isZTree())
			return
		if($this.attr("isztree")=="true"){
			return $.fn.zTree.getZTreeObj($this.attr("id"));
		}
		return  $.fn.zTree.getZTreeObj($this.attr("ztreeid"));
	};
	
	/**
	 * 判断当前对象是否是jqgrid对象
	 */
	$.fn.isZTree=function(){
		return $(this).attr("isztree")=="true" || $(this).attr("ztreeid");
	};
	
//	/**
//	 * 更新搜索列表中的节点
//	 * add by tw
//	 */
//	$.fn.zTree.updateSearchRow = function(row){
//		var treePnl = $("#"+id).parent().parent();
//		var $slst = treePnl.find(".serachList");
//		var $a = $slst.find("li>a[val="+row[idKey]+"]");
//		$a.text(row[nameKey]).data("bindData",row);
//	};
	
	/**
	 * 树搜索
	 */
	$.fn.zTree.search=function(id){
		var $ele = $("#"+id);
		var treeObj = $ele.getAppZTree();//树对象
		var setting = treeObj.setting;//取树配置
		var dataSet = setting.data
			,idKey=dataSet.simpleData.idKey
			,titKey=dataSet.key.title
			,nameKey=dataSet.key.name;//取树数据配置
		var searchFields=dataSet.searchFields
		var treePnl = $("#"+id).parent().parent();
		var slst = treePnl.find(".serachList");
		var edt =  treePnl.find(".searchBar input");
		var txtVal = edt.val();//树搜索框值
		var data={};
		if(txtVal){
			if (searchFields){
				data["searchFields"]=searchFields;
				data["_key"]=txtVal;
			}else{
				data[idKey]=txtVal;
			};			
		}else{//无值
			$("#"+id).show();//隐藏树
			slst.hide();//显示搜索列表
			treePnl.find(".searchBar a").attr("title","请输入内容后再执行搜索。");
			setTimeout(function(){
				treePnl.find(".searchBar a").attr("title","执行搜索");
			}, 3000);
			return ;
		}
		if(setting.async && setting.async.otherParam) {//其它参数
			$.extend(data,setting.async.otherParam);
			//data.otherParam=setting.otherParam;
		}
		
		try{
			$ajax.ajaxCall({
				 url:setting.qryUrl,
				 data:data,
				 dataType:'json',
				 type:setting.method,
				 success:function(data){
					 edt.focus();
					 edt[0].select();
					 $("#"+id).hide();//隐藏树
					 slst.empty();
					 if(data && data.length>0){//生成搜索列表
						for(var i=0;i<data.length;i++){
								var row = data[i];
								var $el = $('<li><a val="'+row[idKey]+'" title="'+row[titKey]+'" href="javascript:void(0)" onkeyup="$.fn.zTree.searchListKey.call(this,event)">'+row[nameKey]+'</a></li>');
								slst.append($el);
								$el.find(">a").data("bindData",row);
								
						}
					 }else{
						  //html.push("<li>没有找到数据。</li>");
						 slst.empty().append($("<li>没有找到数据。</li>"));
					 }
					 //slst.html(html.join(''));
					if(!setting.clickSearchNode){
						setting.clickSearchNode = setting.callback.onClick;
					}
					if(setting.clickSearchNode){//与树的单击事件绑定
							var aObj = slst.find("a");
							aObj.click(aObj,function(e){
								aObj.removeClass("select");
								$(this).addClass("select");
								var $ths= $(this);//,json = {};
								
								//json[idKey]=$ths.attr("val");
								//json[titKey]=$ths.attr("title");
								//json[nameKey]=$ths.html();
								//json["bindData"] = $this.data("bindData");
								//add by tw
								var nodeData = $ths.data("bindData");
								nodeData["idKey"] = $ths.attr("val");
								nodeData["titKey"] = $ths.attr("title");
								nodeData["nameKey"] = $ths.html();
                                treeObj.selectNode(treeObj.getNodeByParam($ele.attr('idField'),nodeData["idKey"],null))
								setting.clickSearchNode(e,$ths.attr("val"),nodeData);

                            });
					}
					if(setting.callback.onDblClick){//与树的双击事件绑定
							var aObj = slst.find("a");
							aObj.dblclick(function(e){
								aObj.removeClass("select");
								$(this).addClass("select");
								var $ths= $(this),json = {};
								json[idKey]=$ths.attr("val");
								json[titKey]=$ths.attr("title");
								json[nameKey]=$ths.html();
                                treeObj.selectNode(treeObj.getNodeByParam($ele.attr('idField'),nodeData["idKey"],null))

								setting.callback.onDblClick(e,$ths.attr("val"),json);
							});
					}
					slst.show();//显示搜索列表
				}
			});
		}catch (e) {
		}
	};
	/**
	 * 搜索列表通过方向键移动选中行
	 */
	$.fn.zTree.searchListKey = function(e){
		if(e.keyCode==40 || e.keyCode==38){//按了↓键或↓键
			var down =e.keyCode==40;//是否↓键
			var lst= this.nodeName.toUpperCase()=="INPUT"?$(this).parent().parent().find(".serachList"):$(this).parent().parent();
			var row = lst.find("a"),rowCnt = row.size();
			if(rowCnt>0){//如果搜索列表有记录时
				var sltRow = lst.find("a.select"),index = row.index(sltRow),willRow;
				if(sltRow.size()==0 || (index+1==rowCnt && down)){//如果没有选中行时或者是按↓键且最后一行时
					willRow = down?row.first():row.last();
				}else if(!down && index==0){
					willRow = row.last();
				}else{
					willRow = down?sltRow.parent().next():sltRow.parent().prev();
					willRow = willRow.find("a");
				}
				sltRow.removeClass("select");
				willRow.addClass("select").focus();
			}
		}
	};
	/**
	 * 生成树的搜索栏
	 * 20140528 lzj 增加
	 */
	$.fn.zTree.bulidSearchBar=function(id){
		var $this = $(this),con = $this.parent();
		var h = con.innerHeight();//,w = con.width();
		con.resize(function(){
			var h = $(this).innerHeight();
			$(this).find(".treePnl").height(h-pnl.find(".searchBar").outerHeight());
		});
		//生成搜索栏
		$this.wrap('<div class="treePnl"></div>');
		var pnl = $this.parent().parent();
		pnl.prepend('<div class="searchBar"><input  placeholder="搜索"/><div><a href="javascript:$.fn.zTree.search(\''+id+'\')" title="执行搜索"><span></span></a></div></div>');
		pnl.height(h-pnl.find(".searchBar").outerHeight());//父容器高度减去搜索栏高度
		
		$this.parent(".treePnl").append("<ul class='serachList'></ul>");//追加搜索列表
		pnl.find(".searchBar input").unbind("keyup").keyup(id,function(e){
			if(!this.value){//无值时显示树，隐藏列表
				$(this).parent().parent().find(".serachList").hide();
				$("#"+id).show();
			}else{//有值时,回车执行搜索
				if(e.keyCode==13){
					$.fn.zTree.search(id);
					e.stopPropagation();//阻止冒泡
					return false;
				}else{
					$.fn.zTree.searchListKey.call(this,e);
				}
			}
		});
	};
	/**
	 * 初始化树
	 */
	$.fn.initZTree=function(){
		this.each(function(){
			var $this = $(this)
			,id=$this.attr("id")||("ztree"+$A.nextId())
			,url=$this.attr("url")
			,qryUrl=$this.attr("qryUrl")||url //搜索栏的服务端请求地址,2013-05-28 lzj增加
			,hasQry=$this.attr("hasQry")!="false"//是否需要搜索栏,2013-05-28 lzj增加
			,async=$this.attr("isasync")=="true"
			,autoParams=$this.attr("autoParam")?$this.attr("autoParam").split(","):[]
			,otherParam=$this.attr("otherParam")?$this.getJsonAttr("otherParam"):{}    
			,method=$this.attr("method")||"POST"
			,checkable=$this.attr("checkable")=="true"
			,checkboxType=$this.attr("checkboxType")
            ,checkField=$this.attr("checkField")||"checked"
            ,childrenField=$this.attr("childrenField")||"children"
            ,nameField=$this.attr("nameField")||"name"
            ,titleField=$this.attr("titleField")||nameField
            ,idField=$this.attr("idField")||"id"
            ,parentField=$this.attr("parentField")||"pid"
            ,rootId=$this.attr("rootId")
            ,oneroot=$this.attr("oneRoot")=="true"
            ,events=$this.attr("events")||$this.html()
            ,hasRoot=$this.attr("hasRoot")=="true"
            ,rootNode = $this.getJsonAttr("rootNode")
            ,rootName=$this.attr("rootName")
            ,showIcon=$this.attr("showIcon")!="false"
            ,searchFields=$this.attr("searchFields")
            ,showLine=$this.attr("showLine")
            //,autoLoad = $this.attr("autoLoad")!="false"
			,sortable = $this.attr("sortable")=="true"
			//add by tw 是否允许同时选中多个节点
			,selectedMulti = $this.attr("selectedMulti")=="true"
			,clickSearchNode = $this.getJsonAttr("clickSearchNode")	
			$this.html("");
			$this.attr("isztree","true");
			var setting={treeId:id};
			$this.attr("id",id),$container=null,fit=$this.attr("fit")=="true";
			//20140528 lzj 增加，树搜索
			if(hasQry){//需要搜索时
//				qryUrl="http://localhost/platform/agency/qryDw.do";//测试用，临时增加
				setting["qryUrl"]=qryUrl;
				if(!setting['async']){
					setting['async'] = {};
				}
				
				setting['async']['otherParam']=otherParam;
				setting['method']=method;
				setting['clickSearchNode'] = clickSearchNode;
				$.fn.zTree.bulidSearchBar.call(this, id);
				//add by tw
			
				//暂时先处理一下，由于有搜索框的时候结构变了，这是个bug
				if($this.parent().parent().hasClass("ztree-container")){
					$container = $this.parent().parent();
					
				}
			}else{
				//add by tw
				//暂时先处理一下，由于有搜索框的时候结构变了，这是个bug
				if($this.parent().hasClass("ztree-container")){
					$container = $this.parent();
				
				}
			}
			$container.attr("ztreeid",id);
			
			$container.css("overflow","auto");
			if (fit){
				$container.bind("_resize",function(){
					var treePanel=$(this);
					var p=$(this).parent();
					var pwidth=p.width();
					var pheight=p.height();
					var cwidth=$container.width();
					var cheight=$container.height();
				
					if (pwidth>cwidth){
						p.css({'overflow-x':'hidden'});
					}
					if (pheight>cheight){
						p.css({'overflow-y':'hidden'});
					}
					treePanel.width(pwidth);
					treePanel.height(pheight);
					if (hasQry){
						treePanel.find()
						treePanel.find(".treePnl").height(pheight-treePanel.find(".searchBar").outerHeight());
					}
				});
			};
			
			
			if(async){
				setting["async"]={
					enable:true,
					url:url,
					dataType:"json",
					autoParam:autoParams,
					otherParam:otherParam,
					type:method
				};
			}else{
				setting["async"]={enable:false};
			}
			if(events){
				setting["callback"]=$this.getJsEvent(events);
			}
			if(checkable){
				setting["check"]={enable:true,check:true};
				if(checkboxType){
					setting["check"]["chkboxType"]=$A.jsonEval(checkboxType);
				}
			}else{
				setting["check"]={enable:false};
			}
			
			var dataSetting={
				key:{
					checked:checkField,
					children:childrenField,
					name:nameField,
					title:titleField
				},
				simpleData:{
					enable:true,
					idKey:idField,
					pIdKey:parentField,
					rootPId:rootId
				},
				keep:{
					parent : true
				},
				searchFields:searchFields
			};
			setting["data"]=dataSetting;
			setting["view"]={
				showIcon:showIcon,
				selectedMulti:selectedMulti
			};
			
		/*	if(oneroot){
				setting["view"]["showLine"] = function(treeId, treeNode){
					return treeNode.level > 0;
				};
			}*/
			if (showLine=="true"){
				setting["view"]["showLine"]=true
			}else{
				setting["view"]["showLine"]=false
			}

			var root={isParent:true,open:true};
			root[idField]=rootId;
			root[nameField]=rootName;
			if(rootNode){
				$.extend(root,rootNode);
			}
		
			if(!async && url){
				$ajax.ajaxCall({
					 url:url,
					 data:otherParam,
					 dataType:'json',
					 type:method,
					 success:function(data){
							if(hasRoot)
								data.push(root);
						if(hasRoot){
							initZtree();
							var treeObj=$this.getAppZTree();
							treeObj.addNodes(null,data);
						}else{
							initZtree(data);
						}
					}
				});
				
			}else{
				var data=[];
				if(hasRoot){
					data.push(root);
				}
				if(sortable){
					setting.edit = {
							drag: {
								autoExpandTrigger: true,
								prev: true,
								inner: false,
								next: true
							},
							enable: true,
							showRemoveBtn: false,
							showRenameBtn: false
					};
				}
				//添加initUIExtConfig属性注入
                if(!$container.attr("_options")){
                    $container.attr("_options","{}")
				}
                var customSetting = $container.getJsonAttr('_options');
                if($.isFunction(customSetting.beforeRender)){
                    customSetting.beforeRender.call(this, setting);
                }
				initZtree(data);
			}
			/**
			 * 抽取共同的初始化方法
			 * @author Mr.T
			 */
			function initZtree(data){
				$.fn.zTree.init($this, setting, data);
				var ztree = $.fn.zTree.getZTreeObj(id);
				if(hasRoot){
					var node = ztree.getNodesByParam("id",root[idField]);
					if (node != null) {
						ztree.expandNode(node[0], true, false, false);
					}
				}
				
				attachEvent(ztree);
			}
			/**
			 * 给树对象 附加事件机制
			 * @author Mr.T
			 */		
			function attachEvent(ztree){
				Events.enhance(ztree);
				
				var cb = ztree.setting.callback;
				for(var event in cb){
					if(cb[event]){
						ztree.on(event, cb[event]);
					}
					cb[event] = (function(e){
						return function(){
							var args = Array.prototype.slice.call(arguments, 0);
							args.splice(0, 0, e);
							return ztree.trigger.apply(ztree, args);
						}
					})(event);
				}
			}
		});
		
	};
		
});
define('app/widgets/treegrid/app-pagination',["app/core/app-jquery", "app/core/app-core",],function($, $A){
	function _1(_2) {
		var _3 = $.data(_2, "pagination");
		var _4 = _3.options;
		var bb = _3.bb = {};
		var _5 = $(_2)
				.addClass("pagination")
				.html(
						"<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr></tr></table>");
		var tr = _5.find("tr");
		var aa = $.extend([], _4.layout);
		if (!_4.showPageList) {
			_6(aa, "list");
		}
		if (!_4.showRefresh) {
			_6(aa, "refresh");
		}
		if (aa[0] == "sep") {
			aa.shift();
		}
		if (aa[aa.length - 1] == "sep") {
			aa.pop();
		}
		for (var _7 = 0; _7 < aa.length; _7++) {
			var _8 = aa[_7];
			if (_8 == "list") {
				var ps = $("<select class=\"pagination-page-list\"></select>");
				ps.bind("change", function() {
					_4.pageSize = parseInt($(this).val());
					_4.onChangePageSize.call(_2, _4.pageSize);
					_10(_2, _4.pageNumber);
				});
				for (var i = 0; i < _4.pageList.length; i++) {
					$("<option></option>").text(_4.pageList[i]).appendTo(ps);
				}
				$("<td></td>").append(ps).appendTo(tr);
			} else {
				if (_8 == "sep") {
					$("<td><div class=\"pagination-btn-separator\"></div></td>")
							.appendTo(tr);
				} else {
					if (_8 == "first") {
						bb.first = _9("first");
					} else {
						if (_8 == "prev") {
							bb.prev = _9("prev");
						} else {
							if (_8 == "next") {
								bb.next = _9("next");
							} else {
								if (_8 == "last") {
									bb.last = _9("last");
								} else {
									if (_8 == "manual") {
										$(
												"<span style=\"padding-left:6px;\"></span>")
												.html(_4.beforePageText)
												.appendTo(tr).wrap("<td></td>");
										bb.num = $(
												"<input class=\"pagination-num\" type=\"text\" value=\"1\" size=\"2\">")
												.appendTo(tr).wrap("<td></td>");
										bb.num
												.unbind(".pagination")
												.bind(
														"keydown.pagination",
														function(e) {
															if (e.keyCode == 13) {
																var _a = parseInt($(
																		this)
																		.val()) || 1;
																_10(_2, _a);
																return false;
															}
														});
										bb.after = $(
												"<span style=\"padding-right:6px;\"></span>")
												.appendTo(tr).wrap("<td></td>");
									} else {
										if (_8 == "refresh") {
											bb.refresh = _9("refresh");
										} else {
											if (_8 == "links") {
												$(
														"<td class=\"pagination-links\"></td>")
														.appendTo(tr);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (_4.buttons) {
			$("<td><div class=\"pagination-btn-separator\"></div></td>")
					.appendTo(tr);
			if ($.isArray(_4.buttons)) {
				for (var i = 0; i < _4.buttons.length; i++) {
					var _b = _4.buttons[i];
					if (_b == "-") {
						$(
								"<td><div class=\"pagination-btn-separator\"></div></td>")
								.appendTo(tr);
					} else {
						var td = $("<td></td>").appendTo(tr);
						var a = $("<a href=\"javascript:void(0)\"></a>")
								.appendTo(td);
						a[0].onclick = eval(_b.handler || function() {
						});
						a.linkbutton($.extend({}, _b, {
							plain : true
						}));
					}
				}
			} else {
				var td = $("<td></td>").appendTo(tr);
				$(_4.buttons).appendTo(td).show();
			}
		}
		$("<div class=\"pagination-info\"></div>").appendTo(_5);
		$("<div style=\"clear:both;\"></div>").appendTo(_5);
		function _9(_c) {
			var _d = _4.nav[_c];
			var a = $("<a href=\"javascript:void(0)\"></a>").appendTo(tr);
			a.wrap("<td></td>");
			a.linkbutton({
				iconCls : _d.iconCls,
				plain : true
			}).unbind(".pagination").bind("click.pagination", function() {
				_d.handler.call(_2);
			});
			return a;
		}
		;
		function _6(aa, _e) {
			var _f = $.inArray(_e, aa);
			if (_f >= 0) {
				aa.splice(_f, 1);
			}
			return aa;
		}
		;
	}
	;
	function _10(_11, _12) {
		var _13 = $.data(_11, "pagination").options;
		_14(_11, {
			pageNumber : _12
		});
		_13.onSelectPage.call(_11, _13.pageNumber, _13.pageSize);
	}
	;
	function _14(_15, _16) {
		var _17 = $.data(_15, "pagination");
		var _18 = _17.options;
		var bb = _17.bb;
		$.extend(_18, _16 || {});
		var ps = $(_15).find("select.pagination-page-list");
		if (ps.length) {
			ps.val(_18.pageSize + "");
			_18.pageSize = parseInt(ps.val());
		}
		var _19 = Math.ceil(_18.total / _18.pageSize) || 1;
		if (_18.pageNumber < 1) {
			_18.pageNumber = 1;
		}
		if (_18.pageNumber > _19) {
			_18.pageNumber = _19;
		}
		if (_18.total == 0) {
			_18.pageNumber = 0;
			_19 = 0;
		}
		if (bb.num) {
			bb.num.val(_18.pageNumber);
		}
		if (bb.after) {
			bb.after.html(_18.afterPageText.replace(/{pages}/, _19));
		}
		var td = $(_15).find("td.pagination-links");
		if (td.length) {
			td.empty();
			var _1a = _18.pageNumber - Math.floor(_18.links / 2);
			if (_1a < 1) {
				_1a = 1;
			}
			var _1b = _1a + _18.links - 1;
			if (_1b > _19) {
				_1b = _19;
			}
			_1a = _1b - _18.links + 1;
			if (_1a < 1) {
				_1a = 1;
			}
			for (var i = _1a; i <= _1b; i++) {
				var a = $(
						"<a class=\"pagination-link\" href=\"javascript:void(0)\"></a>")
						.appendTo(td);
				a.linkbutton({
					plain : true,
					text : i
				});
				if (i == _18.pageNumber) {
					a.linkbutton("select");
				} else {
					a.unbind(".pagination").bind("click.pagination", {
						pageNumber : i
					}, function(e) {
						_10(_15, e.data.pageNumber);
					});
				}
			}
		}
		var _1c = _18.displayMsg;
		_1c = _1c.replace(/{from}/, _18.total == 0 ? 0 : _18.pageSize
				* (_18.pageNumber - 1) + 1);
		_1c = _1c.replace(/{to}/, Math.min(_18.pageSize * (_18.pageNumber),
				_18.total));
		_1c = _1c.replace(/{total}/, _18.total);
		$(_15).find("div.pagination-info").html(_1c);
		if (bb.first) {
			bb.first.linkbutton({
				disabled : ((!_18.total) || _18.pageNumber == 1)
			});
		}
		if (bb.prev) {
			bb.prev.linkbutton({
				disabled : ((!_18.total) || _18.pageNumber == 1)
			});
		}
		if (bb.next) {
			bb.next.linkbutton({
				disabled : (_18.pageNumber == _19)
			});
		}
		if (bb.last) {
			bb.last.linkbutton({
				disabled : (_18.pageNumber == _19)
			});
		}
		_1d(_15, _18.loading);
	}
	;
	function _1d(_1e, _1f) {
		var _20 = $.data(_1e, "pagination");
		var _21 = _20.options;
		_21.loading = _1f;
		if (_21.showRefresh && _20.bb.refresh) {
			_20.bb.refresh.linkbutton({
				iconCls : (_21.loading ? "pagination-loading"
						: "pagination-load")
			});
		}
	}
	;
	$.fn.pagination = function(_22, _23) {
		if (typeof _22 == "string") {
			return $.fn.pagination.methods[_22](this, _23);
		}
		_22 = _22 || {};
		return this.each(function() {
			var _24;
			var _25 = $.data(this, "pagination");
			if (_25) {
				_24 = $.extend(_25.options, _22);
			} else {
				_24 = $.extend({}, $.fn.pagination.defaults, $.fn.pagination
						.parseOptions(this), _22);
				$.data(this, "pagination", {
					options : _24
				});
			}
			_1(this);
			_14(this);
		});
	};
	$.fn.pagination.methods = {
		options : function(jq) {
			return $.data(jq[0], "pagination").options;
		},
		loading : function(jq) {
			return jq.each(function() {
				_1d(this, true);
			});
		},
		loaded : function(jq) {
			return jq.each(function() {
				_1d(this, false);
			});
		},
		refresh : function(jq, _26) {
			return jq.each(function() {
				_14(this, _26);
			});
		},
		select : function(jq, _27) {
			return jq.each(function() {
				_10(this, _27);
			});
		}
	};
	$.fn.pagination.parseOptions = function(_28) {
		var t = $(_28);
		return $.extend({}, $.parser.parseOptions(_28, [ {
			total : "number",
			pageSize : "number",
			pageNumber : "number",
			links : "number"
		}, {
			loading : "boolean",
			showPageList : "boolean",
			showRefresh : "boolean"
		} ]), {
			pageList : (t.attr("pageList") ? eval(t.attr("pageList"))
					: undefined)
		});
	};
	$.fn.pagination.defaults = {
		total : 1,
		pageSize : 10,
		pageNumber : 1,
		pageList : [ 10, 20, 30, 50 ],
		loading : false,
		buttons : null,
		showPageList : true,
		showRefresh : true,
		links : 10,
		layout : [ "list", "sep", "first", "prev", "sep", "manual", "sep",
				"next", "last", "sep", "refresh" ],
		onSelectPage : function(_29, _2a) {
		},
		onBeforeRefresh : function(_2b, _2c) {
		},
		onRefresh : function(_2d, _2e) {
		},
		onChangePageSize : function(_2f) {
		},
		beforePageText : "Page",
		afterPageText : "of {pages}",
		displayMsg : "Displaying {from} to {to} of {total} items",
		nav : {
			first : {
				iconCls : "pagination-first",
				handler : function() {
					var _30 = $(this).pagination("options");
					if (_30.pageNumber > 1) {
						$(this).pagination("select", 1);
					}
				}
			},
			prev : {
				iconCls : "pagination-prev",
				handler : function() {
					var _31 = $(this).pagination("options");
					if (_31.pageNumber > 1) {
						$(this).pagination("select", _31.pageNumber - 1);
					}
				}
			},
			next : {
				iconCls : "pagination-next",
				handler : function() {
					var _32 = $(this).pagination("options");
					var _33 = Math.ceil(_32.total / _32.pageSize);
					if (_32.pageNumber < _33) {
						$(this).pagination("select", _32.pageNumber + 1);
					}
				}
			},
			last : {
				iconCls : "pagination-last",
				handler : function() {
					var _34 = $(this).pagination("options");
					var _35 = Math.ceil(_34.total / _34.pageSize);
					if (_34.pageNumber < _35) {
						$(this).pagination("select", _35);
					}
				}
			},
			refresh : {
				iconCls : "pagination-refresh",
				handler : function() {
					var _36 = $(this).pagination("options");
					if (_36.onBeforeRefresh.call(this, _36.pageNumber,
							_36.pageSize) != false) {
						$(this).pagination("select", _36.pageNumber);
						_36.onRefresh.call(this, _36.pageNumber, _36.pageSize);
					}
				}
			}
		}
	};
});

/**
 * 
 */

define(	'app/widgets/treegrid/app-datagrid',["app/core/app-jquery", "app/core/app-core", "app/core/app-options",
				"jquery/jquery-ui", "app/widgets/app-widget",
				"app/widgets/panel/app-panel",
				"app/widgets/treegrid/app-pagination"], function($, $A, Opts,
				resizable, Widget, Panel) {
			var _1 = 0;
			// =_2(
			var findArrayIndex = function(arrayList, value) {
				for (var i = 0, len = arrayList.length; i < len; i++) {
					if (arrayList[i] == value) {
						return i;
					}
				}
				return -1;
			}
			function addArrayMap(a, o, r) {
				for (var i = 0, _8 = a.length; i < _8; i++) {
					if (a[i][o] == r[o]) {
						return;
					}
				}
				a.push(r);
			};

			function removeArrayMap(a, o, id) {
				if (typeof o == "string") {
					for (var i = 0, _5 = a.length; i < _5; i++) {
						if (a[i][o] == id) {
							a.splice(i, 1);
							return;
						}
					}
				} else {
					var _6 = _2(a, o);
					if (_6 != -1) {
						a.splice(_6, 1);
					}
				}
			};
			var DataGrid = Widget.extend({
				operator:{},
				
				initColumnButton:function(columns){
					if (columns){
					for (var i=0;i<columns.length;i++){
						
						for (var j=0;j<columns[i].length;j++){
							
							var col=columns[i][j];
							if (col.buttons){
								for(var m=0;m<col.buttons.length;m++){
									var btn=col.buttons[m];
									this.operator[btn["id"]]=btn["handler"];
								}
							}
						}
					}
					}
				},
				
				
				initialize : function(el, opt) {
					var data = $.data(el, "datagrid");
					var opts;
					this.element = el;
					if (data) {
						opts = $.extend(data.options, opt);
						data.options = opts;
					} else {
						opts = $.extend({}, $.extend({}, DataGrid.defaults, {
											queryParams : {}
										}), DataGrid.parseOptions(el), opt);
						$(this).css("width", "").css("height", "");
						var wrapResult = this.wrapGrid(opts.rownumbers);
						if (!opts.view) {
							opts.view = new GridView(this);

						}
						if (!opts.columns) {
							opts.columns = wrapResult.columns;
						}
						
					
						if (!opts.frozenColumns) {
							opts.frozenColumns = wrapResult.frozenColumns;
						}
						
						opts.columns = $.extend(true, [], opts.columns);
						opts.frozenColumns = $.extend(true, [],
								opts.frozenColumns);
						opts.view = $.extend({}, opts.view);
						this.initColumnButton(opts.columns);
						this.initColumnButton(opts.frozenColumns);
						$.data(el, "datagrid", {
									options : opts,
									panel : wrapResult.panel,
									dc : wrapResult.dc,
									ss : null,
									selectedRows : [],
									checkedRows : [],
									data : {
										total : 0,
										rows : []
									},
									originalRows : [],
									updatedRows : [],
									insertedRows : [],
									deletedRows : []
								});
					}
					this.render();
					this.renderGridWarp();
					this.resize();
					if (opts.data) {
						this.loadData(opts.data);
						this.clearEditData();
					} else {
						var data = this.parseData();
						if (data.total > 0) {
							this.loadData(data);
							this.clearEditData();
						}
					}
					if (opts.autoLoad) {
						this.load();
					}
					DataGrid.superclass.initialize.call(this, opts);
					this.addEvents("onLoadSuccess", "onLoadError",
							"onBeforeLoad", "onClickRow", "onDblClickRow",
							"onClickCell", "onDblClickCell", "onSortColumn",
							"onResizeColumn", "onSelect", "onUnselect",
							"onSelectAll", "onUnselectAll", "onCheck",
							"onUncheck", "onCheckAll", "onUncheckAll",
							"onBeforeEdit", "onAfterEdit", "onCancelEdit",
							"onHeaderContextMenu", "onAfterRender",
							"onRowContextMenu");
				},
				registerEvent : function(opts) {
					var events = [];
					for (var i = 0; i < events.length; i++) {
						if (opts[events[i]]) {
							this.on(events[i], opts[events[i]]);
						}
					}

				},
				getPager : function() {
					return $.data(this.element, "datagrid").panel
							.children("div.datagrid-pager");
				},

				setSelectionState : function() {
					var target = this.element;
					var _e5 = $.data(target, "datagrid");
					var _e6 = _e5.options;
					var dc = _e5.dc;
					dc.header1.add(dc.header2).find("input[type=checkbox]")
							.attr("checked", false);
					if (_e6.idField) {
						var _e7 = $.data(target, "treegrid") ? true : false;
						var _e8 = _e6.onSelect;
						var _e9 = _e6.onCheck;
						_e6.onSelect = _e6.onCheck = function() {
						};
						var _ea = _e6.finder.getRows.call(this, target);
						for (var i = 0; i < _ea.length; i++) {
							var row = _ea[i];
							var _eb = _e7 ? row[_e6.idField] : i;
							if (_ec(_e5.selectedRows, row)) {
								this.selectRow(_eb, true);
							}
							if (_ec(_e5.checkedRows, row)) {
								this.checkRow(_eb, true);
							}
						}
						_e6.onSelect = _e8;
						_e6.onCheck = _e9;
					}
					function _ec(a, r) {
						for (var i = 0; i < a.length; i++) {
							if (a[i][_e6.idField] == r[_e6.idField]) {
								a[i] = r;
								return true;
							}
						}
						return false;
					};
				},
				parseData : function() {
					var t = $(this.element);
					var data = {
						total : 0,
						rows : []
					};
					var _1e6 = this.getColumnFields(true).concat(this
							.getColumnFields(false));
					t.find("tbody tr").each(function() {
						data.total++;
						var row = {};
						$.extend(row, $.fn.parseOptions(this, ["iconCls",
												"state"]));
						for (var i = 0; i < _1e6.length; i++) {
							row[_1e6[i]] = $(this).find("td:eq(" + i + ")")
									.html();
						}
						data.rows.push(row);
					});

					return data;
				},
				setViewSize : function() {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var opts = gridData.options;
					var dc = gridData.dc;
					var panel = gridData.panel;
					var panelWidth = panel.width();
					var panelHeight = panel.height();
					var view = dc.view;
					var view1 = dc.view1;
					var view2 = dc.view2;
					var view1Header = view1.children("div.datagrid-header");
					var view2Header = view2.children("div.datagrid-header");
					var view1Table = view1Header.find("table");
					var view2Table = view2Header.find("table");
					view.width(panelWidth);
					var _30 = view1Header.children("div.datagrid-header-inner")
							.show();
					view1.width(_30.find("table").width());
					if (!opts.showHeader) {
						_30.hide();
					}
					view2.width(panelWidth - view1._outerWidth());

					view1
							.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer")
							.width(view1.width());
					view2
							.children("div.datagrid-header,div.datagrid-body,div.datagrid-footer")
							.width(view2.width());
					var hh;
					view1Header.add(view2Header).css("height", "");
					view1Table.add(view2Table).css("height", "");
					hh = Math.max(view1Table.height(), view2Table.height());
					view1Table.add(view2Table).height(hh);
					view1Header.add(view2Header)._outerHeight(hh);
					dc.body1.add(dc.body2)
							.children("table.datagrid-btable-frozen").css({
										position : "absolute",
										top : dc.header2._outerHeight()
									});
					var frozen2Height = dc.body2
							.children("table.datagrid-btable-frozen")
							._outerHeight();
					var pagerHeight = frozen2Height
							+ view2.children("div.datagrid-header")
									._outerHeight()
							+ view2.children("div.datagrid-footer")
									._outerHeight()
							+ panel.children("div.datagrid-toolbar")
									._outerHeight();
					panel.children("div.datagrid-pager").each(function() {
								pagerHeight += $(this)._outerHeight();
							});
					var boxHeight = panel.outerHeight() - panel.height();
					var panelMinHeight = panel._size("minHeight") || "";
					var panelMaxHeight = panel._size("maxHeight") || "";
					view1.add(view2).children("div.datagrid-body").css({
						marginTop : frozen2Height,
						height : (isNaN(parseInt(opts.height))
								? ""
								: (panelHeight - pagerHeight)),
						minHeight : (panelMinHeight ? panelMinHeight
								- boxHeight - pagerHeight : ""),
						maxHeight : (panelMaxHeight ? panelMaxHeight
								- boxHeight - pagerHeight : "")
					});
					view.height(view2.height());

				},
				loading : function(jq) {

					var opts = $.data(this.element, "datagrid").options;
					this.getPager().pagination("loading");
					if (opts.loadMsg) {
						var _1c0 = this.getPanel();
						if (!_1c0.children("div.datagrid-mask").length) {
							$("<div class=\"datagrid-mask\" style=\"display:block\"></div>")
									.appendTo(_1c0);
							var msg = $("<div class=\"datagrid-mask-msg\" style=\"display:block;left:50%\"></div>")
									.html(opts.loadMsg).appendTo(_1c0);
							msg._outerHeight(40);
							msg.css({
										marginLeft : (-msg.outerWidth() / 2),
										lineHeight : (msg.height() + "px")
									});
						}
					}

				},
				options : function() {
					var _1b7 = $.data(this.element, "datagrid").options;
					var _1b8 = $.data(this.element, "datagrid").panel
							.panel("options");
					var opts = $.extend(_1b7, {
								width : _1b8.width,
								height : _1b8.height,
								closed : _1b8.closed,
								collapsed : _1b8.collapsed,
								minimized : _1b8.minimized,
								maximized : _1b8.maximized
							});
					return opts;
				},
				getPanel : function() {
					return $.data(this.element, "datagrid").panel;
				},
				reload : function(_1be) {
					
					var opts = $(this.element).datagrid("options");
					if (typeof _1be == "string") {
									opts.url = _1be;
									_1be = null;
					}
					this.load( _1be);
						
				},
				reloadFooter : function(_1bf) {
					
								var opts = $.data(this.element, "datagrid").options;
								var dc = $.data(this.element, "datagrid").dc;
								if (_1bf) {
									$.data(this.element, "datagrid").footer = _1bf;
								}
								if (opts.showFooter) {
									opts.view.renderFooter.call(opts.view,
											this, dc.footer2, false);
									opts.view.renderFooter.call(opts.view,
											this, dc.footer1, true);
									if (opts.view.onAfterRender) {
										opts.view.onAfterRender.call(opts.view,
												this);
									}
									this.fixRowHeight();
									
								}
						
				},

				loaded : function() {

					this.getPager().pagination("loaded");
					var _1c1 = this.getPanel();
					_1c1.children("div.datagrid-mask-msg").remove();
					_1c1.children("div.datagrid-mask").remove();

				},

				freezeRow : function(_1c4) {
					var target = this.element;
					var _4a = $.data(target, "datagrid");
					var _4b = _4a.options;
					var dc = _4a.dc;
					if (!dc.body2.children("table.datagrid-btable-frozen").length) {
						dc.body1
								.add(dc.body2)
								.prepend("<table class=\"datagrid-btable datagrid-btable-frozen\" cellspacing=\"0\" cellpadding=\"0\"></table>");
					}
					_4c(true);
					_4c(false);
					this.setViewSize();
					function _4c(_4d) {
						var _4e = _4d ? 1 : 2;
						var tr = _4b.finder.getTr(target, _49, "body", _4e);
						(_4d ? dc.body1 : dc.body2)
								.children("table.datagrid-btable-frozen")
								.append(tr);
					};
				},
				autoSizeColumn : function(_ae) {
					var target = this.element;
					var _af = $.data(target, "datagrid");
					var _b0 = _af.options;
					var dc = _af.dc;
					var _self = this;
					var tmp = $("<div class=\"datagrid-cell\" style=\"position:absolute;left:-9999px\"></div>")
							.appendTo("body");
					if (_ae) {
						_1c(_ae);
						if (_b0.fitColumns) {
							this.setViewSize();
							this.fitColumns();
						}
					} else {
						var _b1 = false;
						var _b2 = this.getColumnFields(true).concat(this
								.getColumnFields(false));
						for (var i = 0; i < _b2.length; i++) {
							var _ae = _b2[i];
							var col = this.getColumnOption(_ae);
							if (col.auto) {
								_1c(_ae);
								_b1 = true;
							}
						}
						if (_b1 && _b0.fitColumns) {
							this.setViewSize();
							this.fitColumns();
						}
					}
					tmp.remove();
					function _1c(_b3) {
						var _b4 = dc.view
								.find("div.datagrid-header td[field=\"" + _b3
										+ "\"] div.datagrid-cell");
						_b4.css("width", "");
						var col = _self.getColumnOption(_b3);
						col.width = undefined;
						col.boxWidth = undefined;
						col.auto = true;
						_self.fixColumnSize(_b3)
						// $(target).datagrid("fixColumnSize", _b3);
						var _b5 = Math.max(_b6("header"), _b6("allbody"),
								_b6("allfooter"))
								+ 1;
						_b4._outerWidth(_b5 - 1);
						col.width = _b5;
						col.boxWidth = parseInt(_b4[0].style.width);
						col.deltaWidth = _b5 - col.boxWidth;
						_b4.css("width", "");
						_self.fixColumnSize(_b3);
						_b0.onResizeColumn.call(target, _b3, col.width);
						function _b6(_b7) {
							var _b8 = 0;
							if (_b7 == "header") {
								_b8 = _b9(_b4);
							} else {
								_b0.finder.getTr(target, 0, _b7)
										.find("td[field=\"" + _b3
												+ "\"] div.datagrid-cell")
										.each(function() {
													var w = _b9($(this));
													if (_b8 < w) {
														_b8 = w;
													}
												});
							}
							return _b8;
							function _b9(_ba) {
								return _ba.is(":visible")
										? _ba._outerWidth()
										: tmp.html(_ba.html())._outerWidth();
							};
						};
					};
				},
				getData : function() {
					return $.data(this.element, "datagrid").data;
				},
				getRows : function() {
					return $.data(this.element, "datagrid").data.rows;
				},
				getFooterRows : function() {
					return $.data(this.element, "datagrid").footer;
				},
				getRowIndex : function(id) {
					var _ef = $.data(this.element, "datagrid");
					var _f0 = _ef.options;
					var _f1 = _ef.data.rows;
					if (typeof row == "object") {
						return findArrayIndex(_f1, row);
					} else {
						for (var i = 0; i < _f1.length; i++) {
							if (_f1[i][_f0.idField] == row) {
								return i;
							}
						}
						return -1;
					}
				},
				getChecked : function() {
					var _fa = $.data(this.element, "datagrid");
					var _fb = _fa.options;
					if (_fb.idField) {
						return _fa.checkedRows;
					} else {
						var _fc = [];
						_fb.finder.getTr(_f9, "", "checked", 2).each(
								function() {
									_fc.push(_fb.finder.getRow(_f9, $(this)));
								});
						return _fc;
					}
				},
				getSelected : function() {
					var rows = this.getSelections();
					return rows.length > 0 ? rows[0] : null;
				},
				getSelections : function() {
					var _f4 = $.data(this.element, "datagrid");
					var _f5 = _f4.options;
					var _f6 = _f4.data;
					if (_f5.idField) {
						return _f4.selectedRows;
					} else {
						var _f7 = [];
						_f5.finder.getTr(_f3, "", "selected", 2).each(
								function() {
									_f7.push(_f5.finder.getRow(_f3, $(this)));
								});
						return _f7;
					}
				},
				clearSelections : function() {
					var _1c6 = $.data(this.element, "datagrid");
					var _1c7 = _1c6.selectedRows;
					var _1c8 = _1c6.checkedRows;
					_1c7.splice(0, _1c7.length);
					_10e(this);
					if (_1c6.options.checkOnSelect) {
						_1c8.splice(0, _1c8.length);
					}
				},
				clearChecked : function() {

					var _1c9 = $.data(this.element, "datagrid");
					var _1ca = _1c9.selectedRows;
					var _1cb = _1c9.checkedRows;
					_1cb.splice(0, _1cb.length);
					this.uncheckAll();
					if (_1c9.options.selectOnCheck) {
						_1ca.splice(0, _1ca.length);
					}

				},
				scrollTo : function(rowIndex) {
					var _100 = $.data(this.element, "datagrid");
					var dc = _100.dc;
					var opts = _100.options;
					var tr = opts.finder.getTr(this.element, rowIndex);
					if (tr.length) {
						if (tr.closest("table")
								.hasClass("datagrid-btable-frozen")) {
							return;
						}
						var _101 = dc.view2.children("div.datagrid-header")
								._outerHeight();
						var _102 = dc.body2;
						var _103 = _102.outerHeight(true) - _102.outerHeight();
						var top = tr.position().top - _101 - _103;
						if (top < 0) {
							_102.scrollTop(_102.scrollTop() + top);
						} else {
							if (top + tr._outerHeight() > _102.height() - 18) {
								_102.scrollTop(_102.scrollTop() + top
										+ tr._outerHeight() - _102.height()
										+ 18);
							}
						}
					}
				},
				rowOver : function(rowIndex) {
					var gridData = $.data(this.element, "datagrid");
					var opts = gridData.options;
					opts.finder.getTr(this.element, gridData.highlightIndex)
							.removeClass("datagrid-row-over");
					opts.finder.getTr(this.element, rowIndex)
							.addClass("datagrid-row-over");
					gridData.highlightIndex = rowIndex;
				},
				highlightRow : function(_1cd) {
					this.rowOver(_1cd);
					this.scrollTo(_1cd);
				},
				selectAll : function() {
					var target = this.element;
					var _11a = $.data(this.element, "datagrid");
					var opts = _11a.options;
					var rows = opts.finder.getRows.call(this, target);
					var _11b = $.data(this.element, "datagrid").selectedRows;
					if (!_119 && opts.checkOnSelect) {
						this.checkAll(true);
					}
					opts.finder.getTr(this.element, "", "allbody")
							.addClass("datagrid-row-selected");
					if (opts.idField) {
						for (var _11d = 0; _11d < rows.length; _11d++) {
							removeArrayMap(_11b, opts.idField, rows[_11d]);
						}
					}
					this.trigger("onSelectAll", rows)
				},
				unselectAll : function(_11f) {
					var target = this.element;
					var _120 = $.data(target, "datagrid");
					var opts = _120.options;
					var rows = opts.finder.getRows.call(this, target);
					var _121 = $.data(target, "datagrid").selectedRows;
					if (!_11f && opts.checkOnSelect) {
						this.uncheckAll(true);
					}
					opts.finder.getTr(target, "", "selected")
							.removeClass("datagrid-row-selected");
					if (opts.idField) {
						for (var _123 = 0; _123 < rows.length; _123++) {
							removeArrayMap(_121, opts.idField,
									rows[_123][opts.idField]);
						}
					}
					this.trigger("onUnselectAll", rows);
				},
				selectRow : function(rowIndex, _10b) {
					var target = this.element;
					var _10c = $.data(target, "datagrid");
					var dc = _10c.dc;
					var opts = _10c.options;
					var selectedRows = _10c.selectedRows;
					if (opts.singleSelect) {
						this.unselectAll();
						selectedRows.splice(0, selectedRows.length);
					}
					if (!_10b && opts.checkOnSelect) {
						this.checkRow(rowIndex, true);
					}
					var row = opts.finder.getRow.call(this, rowIndex);
					if (opts.idField) {
						addArrayMap(selectedRows, opts.idField, row);
					}
					opts.finder.getTr(target, rowIndex)
							.addClass("datagrid-row-selected");
					// opts.onSelect.call(target, rowIndex, row);
					this.trigger("onSelect", rowIndex, row);

					this.scrollTo(rowIndex);
				},
				selectRecord : function( id) {
				
					var opts = $.data(this.element, "datagrid").options;
					if (opts.idField) {
							var _1cf = _ed(this, id);
									if (_1cf >= 0) {
										this.selectRow(_1cf)
									
									}
						}
						
				},
				unselectRow : function(rowIndex, _113) {
					var target = this.element;
					var _114 = $.data(target, "datagrid");
					var dc = _114.dc;
					var opts = _114.options;
					var _115 = $.data(target, "datagrid").selectedRows;
					if (!_113 && opts.checkOnSelect) {
						this.uncheckRow(rowIndex, true);
					}
					opts.finder.getTr(target, rowIndex)
							.removeClass("datagrid-row-selected");
					var row = opts.finder.getRow(this, target, rowIndex);
					if (opts.idField) {
						removeArrayMap(_115, opts.idField, row[opts.idField]);
					}
					this.trigger("onUnselect", rowIndex, row)
				},
				checkRow : function(rowIndex, _126) {
					var target = this.element;
					var _127 = $.data(target, "datagrid");
					var opts = _127.options;
					if (!_126 && opts.selectOnCheck) {
						this.selectRow(rowIndex, true);
					}
					var tr = opts.finder.getTr(target, rowIndex)
							.addClass("datagrid-row-checked");
					var ck = tr
							.find("div.datagrid-cell-check input[type=checkbox]");
					ck.attr("checked", true);
					tr = opts.finder.getTr(target, "", "checked", 2);
					if (tr.length == opts.finder.getRows.call(this, target).length) {
						var dc = _127.dc;
						var _128 = dc.header1.add(dc.header2);
						_128.find("input[type=checkbox]").attr("checked", true);
					}
					var row = opts.finder.getRow.call(this, rowIndex);
					if (opts.idField) {
						addArrayMap(_127.checkedRows, opts.idField, row);
					}
					this.trigger("onCheck", rowIndex, row)

				},
				uncheckRow : function(_12a, _12b) {
					var target = this.element;
					var _12c = $.data(target, "datagrid");
					var opts = _12c.options;
					if (!_12b && opts.selectOnCheck) {
						this.unselectRow(target, _12a, true);
					}
					var tr = opts.finder.getTr(target, _12a)
							.removeClass("datagrid-row-checked");
					var ck = tr
							.find("div.datagrid-cell-check input[type=checkbox]");
					ck.attr("checked", false);
					var dc = _12c.dc;
					var _12d = dc.header1.add(dc.header2);
					_12d.find("input[type=checkbox]").attr("checked", false);
					var row = opts.finder.getRow.call(this, target, _12a);
					if (opts.idField) {
						removeArrayMap(_12c.checkedRows, opts.idField,
								row[opts.idField]);
					}
					this.trigger("onUncheck", _12a, row)

				},
				beginEdit : function(rowIndex) {
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					var tr = opts.finder.getTr(target, rowIndex);
					var row = opts.finder.getRow.call(this, rowIndex);
					if (tr.hasClass("datagrid-row-editing")) {
						return;
					}
					if (this.trigger("onBeforeEdit", rowIndex, row) == false) {
						return;
					}
					tr.addClass("datagrid-row-editing");
					this.showEditor(rowIndex);
					this.setEditorWidth();
					tr.find("div.datagrid-editable").each(function() {
								var _138 = $(this).parent().attr("field");
								var ed = $.data(this, "datagrid.editor");
								ed.actions.setValue(ed.target, row[_138]);
							});
					this.validateRow(rowIndex);
					this.trigger("onBeginEdit", rowIndex, row);
				},
				showEditor : function(rowIndex) {
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					var tr = opts.finder.getTr(target, _14f);
					tr.children("td").each(function() {
						var cell = $(this).find("div.datagrid-cell");
						var _150 = $(this).attr("field");
						var col = getColumnOption(_150);
						if (col && col.editor) {
							var _151, _152;
							if (typeof col.editor == "string") {
								_151 = col.editor;
							} else {
								_151 = col.editor.type;
								_152 = col.editor.options;
							}
							var _153 = opts.editors[_151];
							if (_153) {
								var _154 = cell.html();
								var _155 = cell._outerWidth();
								cell.addClass("datagrid-editable");
								cell._outerWidth(_155);
								cell
										.html("<table border=\"0\" cellspacing=\"0\" cellpadding=\"1\"><tr><td></td></tr></table>");
								cell.children("table").bind(
										"click dblclick contextmenu",
										function(e) {
											e.stopPropagation();
										});
								$.data(cell[0], "datagrid.editor", {
											actions : _153,
											target : _153.init(cell.find("td"),
													_152),
											field : _150,
											type : _151,
											oldHtml : _154
										});
							}
						}
					});
					this.fixRowHeight(_14f, true);
				},
				endEdit : function(rowIndex, notValidate) {
					var target = this.element;
					var _13e = $.data(target, "datagrid");
					var opts = _13e.options;
					var _13f = _13e.updatedRows;
					var _140 = _13e.insertedRows;
					var tr = opts.finder.getTr(target, rowIndex);
					var row = opts.finder.getRow.call(this, rowIndex);
					if (!tr.hasClass("datagrid-row-editing")) {
						return;
					}
					if (!notValidate) {
						if (!this.validateRow(rowIndex)) {
							return;
						}
						var _141 = false;
						var _142 = {};
						tr.find("div.datagrid-editable").each(function() {
									var _143 = $(this).parent().attr("field");
									var ed = $.data(this, "datagrid.editor");
									var _144 = ed.actions.getValue(ed.target);
									if (row[_143] != _144) {
										row[_143] = _144;
										_141 = true;
										_142[_143] = _144;
									}
								});
						if (_141) {
							if (_2(_140, row) == -1) {
								if (_2(_13f, row) == -1) {
									_13f.push(row);
								}
							}
						}
						this.trigger("onEndEdit", rowIndex, row, _142);
					}
					tr.removeClass("datagrid-row-editing");
					this.endEditRow(rowIndex);
					$(target).datagrid("refreshRow", rowIndex);
					if (!notValidate) {

						this.trigger("onAfterEdit", rowIndex, row, _142);
					} else {
						this.trigger("onCancelEdit", rowIndex, row);

					}
				},

				endEditRow : function(rowIndex) {
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					var tr = opts.finder.getTr(target, _157);
					tr.children("td").each(function() {
								var cell = $(this)
										.find("div.datagrid-editable");
								if (cell.length) {
									var ed = $.data(cell[0], "datagrid.editor");
									if (ed.actions.destroy) {
										ed.actions.destroy(ed.target);
									}
									cell.html(ed.oldHtml);
									$.removeData(cell[0], "datagrid.editor");
									cell.removeClass("datagrid-editable");
									cell.css("width", "");
								}
							});
				},
				cancelEdit : function(rowIndex) {
					return this.endEdit(rowIndex, true);
				},
				getEditors : function(rowIndex) {
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					var tr = opts.finder.getTr(target, rowIndex);
					var _149 = [];
					tr.children("td").each(function() {
								var cell = $(this)
										.find("div.datagrid-editable");
								if (cell.length) {
									var ed = $.data(cell[0], "datagrid.editor");
									_149.push(ed);
								}
							});
					return _149;
				},
				getEditor : function(editorInfo) {
					var _14d = this.getEditors(editorInfo.index != undefined
							? editorInfo.index
							: editorInfo.id);
					for (var i = 0; i < _14d.length; i++) {
						if (_14d[i].field == editorInfo.field) {
							return _14d[i];
						}
					}
					return null;
				},
				refreshRow : function(index) {
					var opts = $.data(this.element, "datagrid").options;
					opts.view.refreshRow.call(opts.view, this, index);

				},
				validateRow : function(rowIndex) {
					var target = this.element;
					var tr = $.data(target, "datagrid").options.finder.getTr(
							target, rowIndex);
					if (!tr.hasClass("datagrid-row-editing")) {
						return true;
					}
					var vbox = tr.find(".validatebox-text");
					vbox.validatebox("validate");
					vbox.trigger("mouseleave");
					var _15a = tr.find(".validatebox-invalid");
					return _15a.length == 0;
				},
				updateRow : function(_1da) {

					var opts = $.data(this.element, "datagrid").options;
					opts.view.updateRow.call(opts.view, this, _1da.index,
							_1da.row);

				},
				appendRow : function(row) {
					var target = this.element;
					var data = $.data(target, "datagrid").data;
					var view = $.data(target, "datagrid").options.view;
					var _16d = $.data(target, "datagrid").insertedRows;
					view.insertRow.call(view, null, row);
					_16d.push(row);
					$(target).datagrid("getPager").pagination("refresh", {
								total : data.total
							});
				},
				insertRow : function(insertRow) {
					var target = this.element;
					var data = $.data(target, "datagrid").data;
					var view = $.data(target, "datagrid").options.view;
					var _16a = $.data(target, "datagrid").insertedRows;
					view.insertRow.call(view, insertRow.index, insertRow.row);
					_16a.push(insertRow.row);
					$(target).datagrid("getPager").pagination("refresh", {
								total : data.total
							});
				},
				deleteRow : function(_1dc) {
					var target = this.element;
					var _164 = $.data(target, "datagrid");
					var opts = _164.options;
					var data = _164.data;
					var _165 = _164.insertedRows;
					var _166 = _164.deletedRows;
					$(target).datagrid("cancelEdit", _163);
					var row = opts.finder.getRow.call(this, target, _163);
					if (findArrayIndex(_165, row) >= 0) {
						removeArrayMap(_165, row);
					} else {
						_166.push(row);
					}
					removeArrayMap(_164.selectedRows, opts.idField,
							row[opts.idField]);
					removeArrayMap(_164.checkedRows, opts.idField,
							row[opts.idField]);
					opts.view.deleteRow.call(opts.view, _163);
					if (opts.height == "auto") {
						this.fixRowHeight();
					}
					$(target).datagrid("getPager").pagination("refresh", {
								total : data.total
							});
				},
				getChanges : function(_15d) {
					var target = this.element;
					var _15e = $.data(target, "datagrid").insertedRows;
					var _15f = $.data(target, "datagrid").deletedRows;
					var _160 = $.data(target, "datagrid").updatedRows;
					if (!_15d) {
						var rows = [];
						rows = rows.concat(_15e);
						rows = rows.concat(_15f);
						rows = rows.concat(_160);
						return rows;
					} else {
						if (_15d == "inserted") {
							return _15e;
						} else {
							if (_15d == "deleted") {
								return _15f;
							} else {
								if (_15d == "updated") {
									return _160;
								}
							}
						}
					}
					return [];
				},
				acceptChanges : function() {
					var target = this.element;
					var data = $.data(target, "datagrid").data;
					var ok = true;
					for (var i = 0, len = data.rows.length; i < len; i++) {
						if (validateRow(i)) {
							$(target).datagrid("endEdit", i);
						} else {
							ok = false;
						}
					}
					if (ok) {
						clearEditData(target);
					}
				},
				rejectChanges : function(jq) {
					/*
					 * return jq.each(function() { _174(this); });
					 */
				},
				mergeCells : function(options) {
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					options.type = options.type || "body";
					options.rowspan = options.rowspan || 1;
					options.colspan = options.colspan || 1;
					if (options.rowspan == 1 && options.colspan == 1) {
						return;
					}
					var tr = opts.finder.getTr(target,
							(options.index != undefined
									? options.index
									: options.id), options.type);
					if (!tr.length) {
						return;
					}
					var td = tr.find("td[field=\"" + options.field + "\"]");
					td.attr("rowspan", options.rowspan).attr("colspan",
							options.colspan);
					td.addClass("datagrid-td-merged");
					_18a(td.next(), options.colspan - 1);
					for (var i = 1; i < options.rowspan; i++) {
						tr = tr.next();
						if (!tr.length) {
							break;
						}
						td = tr.find("td[field=\"" + options.field + "\"]");
						_18a(td, options.colspan);
					}
					this.setCellWidth();
					function _18a(td, _18b) {
						for (var i = 0; i < _18b; i++) {
							td.hide();
							td = td.next();
						}
					};
				},
				showColumn : function(field) {
					var panel = this.getPanel();
					panel.find("td[field=\"" + field + "\"]").show();
					this.getColumnOption(field).hidden = false;
					this.fitColumns(field)

				},
				hideColumn : function(field) {
					var panel = this.getPanel();
					panel.find("td[field=\"" + field + "\"]").hide();
					this.getColumnOption(field).hidden = true;
					this.fitColumns(field)

				},
				resize : function(size) {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var opts = gridData.options;
					var panel = gridData.panel;
					if (size) {
						$.extend(opts, size);
					}
					if (opts.fit == true) {
						var p = panel.panel("panel").parent();
						opts.width = p.width();
						opts.height = p.height();
					}
					panel.panel("resize", opts);
				},
				checkAll : function() {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var opts = gridData.options;
					var rows = opts.finder.getRows.call(this, target);
					if (!_12f && opts.selectOnCheck) {
						_117(target, true);
					}
					var dc = gridData.dc;
					var hck = dc.header1.add(dc.header2)
							.find("input[type=checkbox]");
					var bck = opts.finder
							.getTr(target, "", "allbody")
							.addClass("datagrid-row-checked")
							.find("div.datagrid-cell-check input[type=checkbox]");
					hck.add(bck).attr("checked", true);
					if (opts.idField) {
						for (var i = 0; i < rows.length; i++) {
							addArrayMap(gridData.checkedRows, opts.idField,
									rows[i]);
						}
					}
					this.trigger("onCheckAll", rows);

				},
				uncheckAll : function(_132) {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var opts = gridData.options;
					var rows = opts.finder.getRows.call(this, target);
					if (!_132 && opts.selectOnCheck) {
						_10e(target, true);
					}
					var dc = gridData.dc;
					var hck = dc.header1.add(dc.header2)
							.find("input[type=checkbox]");
					var bck = opts.finder
							.getTr(target, "", "checked")
							.removeClass("datagrid-row-checked")
							.find("div.datagrid-cell-check input[type=checkbox]");
					hck.add(bck).attr("checked", false);
					if (opts.idField) {
						for (var i = 0; i < rows.length; i++) {
							removeArrayMap(gridData.checkedRows, opts.idField,
									rows[i][opts.idField]);
						}
					}
					this.trigger("onUncheckAll", rows);

				},
				sort : function(sortObj) {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var opts = gridData.options;
					sortObj = sortObj || {};
					var newSortObj = {
						sortName : opts.sortName,
						sortOrder : opts.sortOrder
					};
					if (typeof sortObj == "object") {
						$.extend(newSortObj, sortObj);
					}
					var sortNames = [];
					var sortOrder = [];
					if (newSortObj.sortName) {
						sortNames = newSortObj.sortName.split(",");
						sortOrder = newSortObj.sortOrder.split(",");
					}
					if (typeof sortObj == "string") {
						var sortField = sortObj;
						var col = this.getColumnOption(sortField);
						if (!col.sortable || gridData.resizing) {
							return;
						}
						var colOrder = col.colOrder || "asc";
						var pos = findArrayIndex(sortNames, sortField);
						if (pos >= 0) {
							var sortOrder = sortOrder[pos] == "asc"
									? "desc"
									: "asc";
							if (opts.multiSort && sortOrder == colOrder) {
								sortNames.splice(pos, 1);
								sortOrder.splice(pos, 1);
							} else {
								sortOrder[pos] = sortOrder;
							}
						} else {
							if (opts.multiSort) {
								sortNames.push(sortField);
								sortOrder.push(colOrder);
							} else {
								sortNames = [sortField];
								sortOrder = [colOrder];
							}
						}
						newSortObj.sortName = sortNames.join(",");
						newSortObj.sortOrder = sortOrder.join(",");
					}
					if (this.trigger("onBeforeSortColumn", newSortObj.sortName,
							newSortObj.sortOrder) == false) {
						return;
					}
					$.extend(opts, newSortObj);
					var dc = gridData.dc;
					var _97 = dc.header1.add(dc.header2);
					_97
							.find("div.datagrid-cell")
							.removeClass("datagrid-sort-asc datagrid-sort-desc");
					for (var i = 0; i < sortNames.length; i++) {
						var col = this.getColumnOption(sortNames[i]);
						_97.find("div." + col.cellClass)
								.addClass("datagrid-sort-" + sortOrder[i]);
					}
					if (opts.remoteSort) {
						this.load();
					} else {
						this.loadData($(target).datagrid("getData"));
					}
					this.trigger("onSortColumn", opts.sortName, opts.sortOrder)

				},
				renderGridWarp : function() {
					var gridData = $.data(this.element, "datagrid");
					var panel = gridData.panel;
					var options = gridData.options;
					var dc = gridData.dc;
					var headers = dc.header1.add(dc.header2);
					var _self = this;
					headers.unbind(".datagrid");
					for (var key in options.headerEvents) {
						headers.bind(key + ".datagrid",
								options.headerEvents[key]);
					}
					var headerTd = headers.find("div.datagrid-cell");
					var resizeHandle = options.resizeHandle == "right"
							? "e"
							: (options.resizeHandle == "left" ? "w" : "e,w");
					headerTd.each(function() {
						$(this).resizable({
							handles : resizeHandle,
							disabled : ($(this).attr("resizable") ? $(this)
									.attr("resizable") == "false" : false),
							minWidth : 25,
							start : function(e) {
								gridData.resizing = true;
								headers.css("cursor", $("body").css("cursor"));
								if (!gridData.proxy) {
									gridData.proxy = $("<div class=\"datagrid-resize-proxy\"></div>")
											.appendTo(dc.view);
								}
								gridData.proxy.css({
									left : e.pageX - $(panel).offset().left - 1,
									display : "none"
								});
								setTimeout(function() {
											if (gridData.proxy) {
												gridData.proxy.show();
											}
										}, 500);
							},
							resize : function(e) {
								gridData.proxy.css({
									left : e.pageX - $(panel).offset().left - 1,
									display : "block"
								});
								return false;
							},
							stop : function(e) {
								headers.css("cursor", "");
								$(this).css("height", "");
								var field = $(this).parent().attr("field");
								var col = _self.getColumnOption(field);
								col.width = $(this)._outerWidth();
								col.boxWidth = col.width - col.deltaWidth;
								col.auto = undefined;
								$(this).css("width", "");
								_self.fixColumnSize(field);
								gridData.proxy.remove();
								gridData.proxy = null;
								if ($(this)
										.parents("div:first.datagrid-header")
										.parent().hasClass("datagrid-view1")) {
									_self.setViewSize();
								}
								_self.fitColumns();
								_self.trigger("onResizeColumn", field,
										col.width);

								setTimeout(function() {
											gridData.resizing = false;
										}, 0);
							}
						});
					});
					var bb = dc.body1.add(dc.body2);
					bb.unbind();
					for (var key in options.rowEvents) {
						bb.bind(key, options.rowEvents[key]);
					}
					dc.body1.bind("mousewheel DOMMouseScroll", function(e) {
								e.preventDefault();
								var e1 = e.originalEvent || window.event;
								var wheelDelta = e1.wheelDelta || e1.detail
										* (-1);
								if ("deltaY" in e1) {
									wheelDelta = e1.deltaY * -1;
								}
								var dg = $(e.target)
										.closest("div.datagrid-view")
										.children(".datagrid-f");
								var dc = dg.data("datagrid").dc;
								dc.body2.scrollTop(dc.body2.scrollTop()
										- wheelDelta);
							});
					dc.body2.bind("scroll", function() {
						var b1 = dc.view1.children("div.datagrid-body");
						b1.scrollTop($(this).scrollTop());
						var c1 = dc.body1.children(":first");
						var c2 = dc.body2.children(":first");
						if (c1.length && c2.length) {
							var _80 = c1.offset().top;
							var _81 = c2.offset().top;
							if (_80 != _81) {
								b1.scrollTop(b1.scrollTop() + _80 - _81);
							}
						}
						dc.view2
								.children("div.datagrid-header,div.datagrid-footer")
								._scrollLeft($(this)._scrollLeft());
						dc.body2.children("table.datagrid-btable-frozen").css(
								"left", -$(this)._scrollLeft());
					});
				},

				fixRowHeight : function(rowIndex, fixRowBody) {
					var target = this.element;
					var rows = $.data(target, "datagrid").data.rows;
					var opts = $.data(target, "datagrid").options;
					var dc = $.data(target, "datagrid").dc;
					if (!dc.body1.is(":empty")
							&& (!opts.nowrap || opts.autoRowHeight || fixRowBody)) {
						if (rowIndex != undefined) {
							var tr1 = opts.finder.getTr(target, rowIndex,
									"body", 1);
							var tr2 = opts.finder.getTr(target, rowIndex,
									"body", 2);
							setRowHeight(tr1, tr2);
						} else {
							var tr1 = opts.finder
									.getTr(target, 0, "allbody", 1);
							var tr2 = opts.finder
									.getTr(target, 0, "allbody", 2);
							setRowHeight(tr1, tr2);
							if (opts.showFooter) {
								var tr1 = opts.finder.getTr(target, 0,
										"allfooter", 1);
								var tr2 = opts.finder.getTr(target, 0,
										"allfooter", 2);
								setRowHeight(tr1, tr2);
							}
						}
					}
					this.setViewSize();
					if (opts.height == "auto") {
						var gridWarp = dc.body1.parent();
						var body2 = dc.body2;
						var body2Size = getBodySize(body2);
						var bodyHeight = body2Size.height;
						if (body2Size.width > body2.width()) {
							bodyHeight += 18;
						}
						bodyHeight -= parseInt(body2.css("marginTop")) || 0;
						gridWarp.height(bodyHeight);
						body2.height(bodyHeight);
						dc.view.height(dc.view2.height());
					}
					dc.body2.triggerHandler("scroll");
					function setRowHeight(tr1, tr2) {
						for (var i = 0; i < tr2.length; i++) {
							var tr1 = $(tr1[i]);
							var tr2 = $(tr2[i]);
							tr1.css("height", "");
							tr2.css("height", "");
							var height = Math.max(tr1.height(), tr2.height());
							tr1.css("height", height);
							tr2.css("height", height);
						}
					};
					function getBodySize(cc) {
						var width = 0;
						var height = 0;
						$(cc).children().each(function() {
									var c = $(this);
									if (c.is(":visible")) {
										height += c._outerHeight();
										if (width < c._outerWidth()) {
											width = c._outerWidth();
										}
									}
								});
						return {
							width : width,
							height : height
						};
					};
				},

				getColumnOption : function(field) {
					function findCol(_cd) {
						if (_cd) {
							for (var i = 0; i < _cd.length; i++) {
								var cc = _cd[i];
								for (var j = 0; j < cc.length; j++) {
									var c = cc[j];
									if (c.field == field) {
										return c;
									}
								}
							}
						}
						return null;
					};
					var gridData = $.data(this.element, "datagrid").options;
					var col = findCol(gridData.columns);
					if (!col) {
						col = findCol(gridData.frozenColumns);
					}
					return col;
				},

				setEditorWidth : function() {
					var target = this.element;
					var dc = $.data(target, "datagrid").dc;
					dc.view.find("div.datagrid-editable").each(function() {
								var _c8 = $(this);
								var _c9 = _c8.parent().attr("field");
								var col = $(target).datagrid("getColumnOption",
										_c9);
								_c8._outerWidth(col.boxWidth + col.deltaWidth
										- 1);
								var ed = $.data(this, "datagrid.editor");
								if (ed.actions.resize) {
									ed.actions.resize(ed.target, _c8.width());
								}
							});
				},
				setCellWidth : function() {
					var target = this.element;
					var dc = $.data(target, "datagrid").dc;
					dc.view.find("td.datagrid-td-merged").each(function() {
						var td = $(this);
						var _c5 = td.attr("colspan") || 1;
						var col = this.getColumnOption(td.attr("field"));
						var cellWidth = col.boxWidth + col.deltaWidth - 1;
						for (var i = 1; i < _c5; i++) {
							td = td.next();
							col = this.getColumnOption(td.attr("field"));
							cellWidth += col.boxWidth + col.deltaWidth;
						}
						$(this).children("div.datagrid-cell")
								._outerWidth(cellWidth);
					});
				},

				fixColumnSize : function(field) {
					var _self = this;
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var options = gridData.options;
					var dc = gridData.dc;
					var gridtable = dc.view
							.find("table.datagrid-btable,table.datagrid-ftable");
					gridtable.css("table-layout", "fixed");
					if (field) {
						fix(field);
					} else {
						var ff = _self.getColumnFields(true).concat(_self
								.getColumnFields(false));
						for (var i = 0; i < ff.length; i++) {
							fix(ff[i]);
						}
					}
					gridtable.css("table-layout", "auto");
					this.setCellWidth();
					this.fixRowHeight();
					this.setEditorWidth();
					function fix(field) {
						var col = _self.getColumnOption(field);
						if (col.cellClass) {
							gridData.ss.set("." + col.cellClass, col.boxWidth
											? col.boxWidth + "px"
											: "auto");
						}
					};
				},

				fitColumns : function() {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var options = gridData.options;
					var dc = gridData.dc;
					var _self = this;
					var headers = dc.view2.children("div.datagrid-header");
					dc.body2.css("overflow-x", "");
					_9f();
					_a0();
					if (headers.width() >= headers.find("table").width()) {
						dc.body2.css("overflow-x", "hidden");
					}
					function _a0() {
						if (!options.fitColumns) {
							return;
						}
						if (!gridData.leftWidth) {
							gridData.leftWidth = 0;
						}
						var _a1 = 0;
						var cc = [];
						var _a2 = _self.getColumnFields(false);
						for (var i = 0; i < _a2.length; i++) {
							var col = _self.getColumnOption(_a2[i]);
							if (_a3(col)) {
								_a1 += col.width;
								cc.push({
											field : col.field,
											col : col,
											addingWidth : 0
										});
							}
						}
						if (!_a1) {
							return;
						}
						cc[cc.length - 1].addingWidth -= gridData.leftWidth;
						var _a4 = headers.children("div.datagrid-header-inner")
								.show();
						var _a5 = headers.width()
								- headers.find("table").width()
								- options.scrollbarSize + gridData.leftWidth;
						var _a6 = _a5 / _a1;
						if (!options.showHeader) {
							_a4.hide();
						}
						for (var i = 0; i < cc.length; i++) {
							var c = cc[i];
							var _a7 = parseInt(c.col.width * _a6);
							c.addingWidth += _a7;
							_a5 -= _a7;
						}
						cc[cc.length - 1].addingWidth += _a5;
						for (var i = 0; i < cc.length; i++) {
							var c = cc[i];
							if (c.col.boxWidth + c.addingWidth > 0) {
								c.col.boxWidth += c.addingWidth;
								c.col.width += c.addingWidth;
							}
						}
						gridData.leftWidth = _a5;
						_self.fixColumnSize();
					};
					function _9f() {
						var _a8 = false;
						var _a9 = _self.getColumnFields(true).concat(_self
								.getColumnFields(false));
						$.map(_a9, function(_aa) {
									var col = _self.getColumnOption(_aa);
									if (String(col.width || "").indexOf("%") >= 0) {
										var _ab = $.fn.parseValue("width",
												col.width, dc.view,
												options.scrollbarSize)
												- col.deltaWidth;
										if (_ab > 0) {
											col.boxWidth = _ab;
											_a8 = true;
										}
									}
								});
						if (_a8) {
							_bb(target);
						}
					};
					function _a3(col) {
						if (String(col.width || "").indexOf("%") >= 0) {
							return false;
						}
						if (!col.hidden && !col.checkbox && !col.auto
								&& !col.fixed) {
							return true;
						}
					};

				},
				getColumnFields : function(frozen) {
					var target = this.element;
					var gridData = $.data(target, "datagrid").options;
					var columns = (frozen == true)
							? (gridData.frozenColumns || [[]])
							: gridData.columns;
					if (columns.length == 0) {
						return [];
					}
					var aa = [];
					var colspanCount = getColspanCount();
					for (var i = 0; i < columns.length; i++) {
						aa[i] = new Array(colspanCount);
					}
					for (var i = 0; i < columns.length; i++) {
						$.map(columns[i], function(col) {
							var _d6 = getColumnIndex(aa[i]);
							if (_d6 >= 0) {
								var _d8 = col.field || "";
								for (var c = 0; c < (col.colspan || 1); c++) {
									for (var r = 0; r < (col.rowspan || 1); r++) {
										aa[i + r][_d6] = _d8;
									}
									_d6++;
								}
							}
						});
					}
					return aa[aa.length - 1];
					function getColspanCount() {
						var colspanCount = 0;
						$.map(columns[0], function(col) {
									colspanCount += col.colspan || 1;
								});
						return colspanCount;
					};
					function getColumnIndex(a) {
						for (var i = 0; i < a.length; i++) {
							if (a[i] == undefined) {
								return i;
							}
						}
						return -1;
					};
				},
				loadData : function(data) {
					var target = this.element;
					var _dc = $.data(target, "datagrid");
					var _dd = _dc.options;
					var dc = _dc.dc;
					data = _dd.loadFilter.call(target, data);
					data.total = parseInt(data.total);
					_dc.data = data;
					if (data.footer) {
						_dc.footer = data.footer;
					}
					if (!_dd.remoteSort && _dd.sortName) {
						var _de = _dd.sortName.split(",");
						var _df = _dd.sortOrder.split(",");
						data.rows.sort(function(r1, r2) {
									var r = 0;
									for (var i = 0; i < _de.length; i++) {
										var sn = _de[i];
										var so = _df[i];
										var col = getColumnOption(target, sn);
										var _e0 = col.sorter || function(a, b) {
											return a == b
													? 0
													: (a > b ? 1 : -1);
										};
										r = _e0(r1[sn], r2[sn])
												* (so == "asc" ? 1 : -1);
										if (r != 0) {
											return r;
										}
									}
									return r;
								});
					}
					if (_dd.view.onBeforeRender) {
						_dd.view.onBeforeRender.call(_dd.view, data.rows);
					}
					_dd.view.render.call(_dd.view, dc.body2, false);
					_dd.view.render.call(_dd.view, dc.body1, true);
					if (_dd.showFooter) {
						_dd.view.renderFooter.call(_dd.view, dc.footer2, false);
						_dd.view.renderFooter.call(_dd.view, dc.footer1, true);
					}
					if (_dd.view.onAfterRender) {
						_dd.view.onAfterRender.call(_dd.view, target);
					}
					_dc.ss.clean();
					var pager = this.getPager();
					if (pager.length) {
						var _e2 = pager.pagination("options");
						if (_e2.total != data.total) {
							pager.pagination("refresh", {
										total : data.total
									});
							if (_dd.pageNumber != _e2.pageNumber) {
								_dd.pageNumber = _e2.pageNumber;
								load(target);
							}
						}
					}
					this.fixRowHeight();
					dc.body2.triggerHandler("scroll");
					this.setSelectionState();
					this.autoSizeColumn();
					// $(target).datagrid("setSelectionState");
					// $(target).datagrid("autoSizeColumn");
					this.trigger("onLoadSuccess", target, data)

				},
				load : function(queryParams) {
					var target = this.element;
					var _self = this;
					var opts = $.data(target, "datagrid").options;
					if (queryParams) {
						opts.queryParams = queryParams;
					}
					var params = $.extend({}, opts.queryParams);
					if (opts.pagination) {
						$.extend(params, {
									page : opts.pageNumber,
									rows : opts.pageSize
								});
					}
					if (opts.sortName) {
						$.extend(params, {
									sort : opts.sortName,
									order : opts.sortOrder
								});
					}
					if (this.trigger("onBeforeLoad", target, params) == false) {
						return;
					}
					this.loading();
					setTimeout(function() {
								loadAfter();
							}, 0);
					function loadAfter() {
						var value = opts.loader.call(_self, params, function(
										data) {
									setTimeout(function() {
												_self.loaded();
											}, 0);
									loadData(data);
									setTimeout(function() {
												clearEditData();
											}, 0);
								}, function() {
									setTimeout(function() {
												_self.loaded();
											}, 0);

									_self.trigger("onLoadError", target,
											arguments)

								});
						if (value == false) {
							_self.loaded();;
						}
					};
				},
				clearEditData : function() {
					var target = this.element;
					var gridData = $.data(target, "datagrid");
					var data = gridData.data;
					var rows = data.rows;
					var originalRows = [];
					for (var i = 0; i < rows.length; i++) {
						originalRows.push($.extend({}, rows[i]));
					}
					gridData.originalRows = originalRows;
					gridData.updatedRows = [];
					gridData.insertedRows = [];
					gridData.deletedRows = [];

				},
				createStyleSheet : function() {
					var target = this.element;
					var _b = $.data(target, "datagrid");
					var _c = _b.options;
					var _d = _b.panel;
					var dc = _b.dc;
					var ss = null;
					if (_c.sharedStyleSheet) {
						ss = typeof _c.sharedStyleSheet == "boolean"
								? "head"
								: _c.sharedStyleSheet;
					} else {
						ss = _d.closest("div.datagrid-view");
						if (!ss.length) {
							ss = dc.view;
						}
					}
					var cc = $(ss);
					var _e = $.data(cc[0], "ss");
					if (!_e) {
						_e = $.data(cc[0], "ss", {
									cache : {},
									dirty : []
								});
					}
					return {
						add : function(_f) {
							var ss = ["<style type=\"text/css\" appui=\"true\">"];
							for (var i = 0; i < _f.length; i++) {
								_e.cache[_f[i][0]] = {
									width : _f[i][1]
								};
							}
							var _10 = 0;
							for (var s in _e.cache) {
								var _11 = _e.cache[s];
								_11.index = _10++;
								ss.push(s + "{width:" + _11.width + "}");
							}
							ss.push("</style>");
							$(ss.join("\n")).appendTo(cc);
							cc.children("style[appui]:not(:last)").remove();
						},
						getRule : function(_12) {
							var _13 = cc.children("style[appui]:last")[0];
							var _14 = _13.styleSheet
									? _13.styleSheet
									: (_13.sheet || document.styleSheets[document.styleSheets.length
											- 1]);
							var _15 = _14.cssRules || _14.rules;
							return _15[_12];
						},
						set : function(_16, _17) {
							var _18 = _e.cache[_16];
							if (_18) {
								_18.width = _17;
								var _19 = this.getRule(_18.index);
								if (_19) {
									_19.style["width"] = _17;
								}
							}
						},
						remove : function(_1a) {
							var tmp = [];
							for (var s in _e.cache) {
								if (s.indexOf(_1a) == -1) {
									tmp.push([s, _e.cache[s].width]);
								}
							}
							_e.cache = {};
							this.add(tmp);
						},
						dirty : function(_1b) {
							if (_1b) {
								_e.dirty.push(_1b);
							}
						},
						clean : function() {
							for (var i = 0; i < _e.dirty.length; i++) {
								this.remove(_e.dirty[i]);
							}
							_e.dirty = [];
						}
					};

				},
				render : function() {
					var wrapdata = $.data(this.element, "datagrid");
					var opts = wrapdata.options;
					var _self = this;
					var dc = wrapdata.dc;
					var gridPanel = wrapdata.panel;
					var gridEl = this.element;
					wrapdata.ss = this.createStyleSheet();
					gridPanel.panel($.extend({}, opts, {
								id : null,
								doSize : false,
								onResize : function(_5f, _60) {
									setTimeout(function() {
												if ($.data(gridEl, "datagrid")) {
													_self.setViewSize();
													_self.fitColumns();
													_self
															.trigger(
																	"onResize",
																	gridPanel,
																	_5f, _60)
												}
											}, 0);
								},
								onExpand : function() {
									fixRowHeight(gridEl);
									_self.trigger("onExpand", gridPanel);
								}
							}));
					wrapdata.rowIdPrefix = "datagrid-row-r" + (++_1);
					wrapdata.cellClassPrefix = "datagrid-cell-c" + _1;
					createColumnHeader(dc.header1, opts.frozenColumns, true);
					createColumnHeader(dc.header2, opts.columns, false);
					createColumnCheckBox();
					dc.header1.add(dc.header2).css("display",
							opts.showHeader ? "block" : "none");
					dc.footer1.add(dc.footer2).css("display",
							opts.showFooter ? "block" : "none");
					if (opts.toolbar) {
						if ($.isArray(opts.toolbar)) {
							$("div.datagrid-toolbar", gridPanel).remove();
							var tb = $("<div class=\"datagrid-toolbar\"><table cellspacing=\"0\" cellpadding=\"0\"><tr></tr></table></div>")
									.prependTo(gridPanel);
							var tr = tb.find("tr");
							for (var i = 0; i < opts.toolbar.length; i++) {
								var btn = opts.toolbar[i];
								if (btn == "-") {
									$("<td><div class=\"datagrid-btn-separator\"></div></td>")
											.appendTo(tr);
								} else {
									var td = $("<td></td>").appendTo(tr);
									var btn = $("<a href=\"javascript:void(0)\"></a>")
											.appendTo(td);
									btn[0].onclick = eval(btn.handler
											|| function() {
											});
									btn.linkbutton($.extend({}, btn, {
												plain : true
											}));
								}
							}
						} else {
							$(opts.toolbar).addClass("datagrid-toolbar")
									.prependTo(gridPanel);
							$(opts.toolbar).show();
						}
					} else {
						$("div.datagrid-toolbar", gridPanel).remove();
					}
					$("div.datagrid-pager", gridPanel).remove();
					if (opts.pagination) {
						var pagerDom = $("<div class=\"datagrid-pager\"></div>");
						if (opts.pagePosition == "bottom") {
							pagerDom.appendTo(gridPanel);
						} else {
							if (opts.pagePosition == "top") {
								pagerDom.addClass("datagrid-pager-top")
										.prependTo(gridPanel);
							} else {
								var pagertop = $("<div class=\"datagrid-pager datagrid-pager-top\"></div>")
										.prependTo(gridPanel);
								pagerDom.appendTo(gridPanel);
								pagerDom = pagerDom.add(pagertop);
							}
						}
						pagerDom.pagination({
									total : (opts.pageNumber * opts.pageSize),
									pageNumber : opts.pageNumber,
									pageSize : opts.pageSize,
									pageList : opts.pageList,
									onSelectPage : function(pageNumber,
											pageSize) {
										opts.pageNumber = pageNumber;
										opts.pageSize = pageSize;
										pagerDom.pagination("refresh", {
													pageNumber : pageNumber,
													pageSize : pageSize
												});
										load();
									}
								});
						opts.pageSize = pagerDom.pagination("options").pageSize;
					}
					function createColumnHeader(headerDom, columns,
							isShowRownumbers) {
						if (!columns) {
							return;
						}
						$(headerDom).show();
						$(headerDom).empty();
						var sortFields = [];
						var orderFields = [];
						if (opts.sortName) {
							sortFields = opts.sortName.split(",");
							orderFields = opts.sortOrder.split(",");
						}
						var t = $("<table class=\"datagrid-htable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tbody></tbody></table>")
								.appendTo(headerDom);
						for (var i = 0; i < columns.length; i++) {
							var tr = $("<tr class=\"datagrid-header-row\"></tr>")
									.appendTo($("tbody", t));
							var subCols = columns[i];
							for (var j = 0; j < subCols.length; j++) {
								var col = subCols[j];
								var headerHtml = "";
								if (col.rowspan) {
									headerHtml += "rowspan=\"" + col.rowspan
											+ "\" ";
								}
								if (col.colspan) {
									headerHtml += "colspan=\"" + col.colspan
											+ "\" ";
								}
								var td = $("<td " + headerHtml + "></td>")
										.appendTo(tr);
								if (col.checkbox) {
									td.attr("field", col.field);
									$("<div class=\"datagrid-header-check\"></div>")
											.html("<input type=\"checkbox\"/>")
											.appendTo(td);
								} else {
									if (col.field) {
										td.attr("field", col.field);
										td
												.append("<div class=\"datagrid-cell\"><span></span><span class=\"datagrid-sort-icon\"></span></div>");
										$("span", td).html(col.title);
										$("span.datagrid-sort-icon", td)
												.html("&nbsp;");
										var headerCell = td
												.find("div.datagrid-cell");
										var pos = findArrayIndex(sortFields,
												col.field);
										if (pos >= 0) {
											headerCell
													.addClass("datagrid-sort-"
															+ orderFields[pos]);
										}
										if (col.resizable == false) {
											headerCell.attr("resizable",
													"false");
										}
										if (col.width) {
											var colWidth = $.fn
													.parseValue("width",
															col.width, dc.view,
															opts.scrollbarSize);
											headerCell
													._outerWidth(colWidth - 1);
											col.boxWidth = parseInt(headerCell[0].style.width);
											col.deltaWidth = colWidth
													- col.boxWidth;
										} else {
											col.auto = true;
										}
										headerCell
												.css(
														"text-align",
														(col.halign
																|| col.align || ""));
										col.cellClass = wrapdata.cellClassPrefix
												+ "-"
												+ col.field.replace(/[\.|\s]/g,
														"-");
										headerCell.addClass(col.cellClass).css(
												"width", "");
									} else {
										$("<div class=\"datagrid-cell-group\"></div>")
												.html(col.title).appendTo(td);
									}
								}
								if (col.hidden) {
									td.hide();
								}
							}
						}
						if (isShowRownumbers && opts.rownumbers) {
							var td = $("<td rowspan=\""
									+ opts.frozenColumns.length
									+ "\"><div class=\"datagrid-header-rownumber\"></div></td>");
							if ($("tr", t).length == 0) {
								td
										.wrap("<tr class=\"datagrid-header-row\"></tr>")
										.parent().appendTo($("tbody", t));
							} else {
								td.prependTo($("tr:first", t));
							}
						}
					};
					function createColumnCheckBox() {
						var checkBoxColumns = [];
						var columnFields = _self.getColumnFields(true)
								.concat(_self.getColumnFields(gridEl));
						for (var i = 0; i < columnFields.length; i++) {
							var col = _self.getColumnOption(columnFields[i]);
							if (col && !col.checkbox) {
								checkBoxColumns.push([
										"." + col.cellClass,
										col.boxWidth
												? col.boxWidth + "px"
												: "auto"]);
							}
						}
						wrapdata.ss.add(checkBoxColumns);
						wrapdata.ss.dirty(wrapdata.cellSelectorPrefix);
						wrapdata.cellSelectorPrefix = "."
								+ wrapdata.cellClassPrefix;
					};
				},
				wrapGrid : function(rownumbers) {
					var $this = $(this.element)
					function getColumns() {
						var frozenColumns = [];
						var columns = [];

						$this.children("thead").each(function() {
							var opt = $this.parseOptions(this, [{
												frozen : "boolean"
											}]);
							$(this).find("tr").each(function() {
								var column = [];
								$(this).find("th").each(function() {
									var th = $(this);
									var col = $.extend({}, th.parseOptions(
													this, ["field", "align",
															"halign", "order",
															"width", {
																sortable : "boolean",
																checkbox : "boolean",
																resizable : "boolean",
																fixed : "boolean"
															}, {
																rowspan : "number",
																colspan : "number"
															}]), {
												title : (th.html() || undefined),
												hidden : (th.attr("hidden")
														? true
														: undefined),
												formatter : (th
														.attr("formatter")
														? eval(th
																.attr("formatter"))
														: undefined),
												styler : (th.attr("styler")
														? eval(th
																.attr("styler"))
														: undefined),
												sorter : (th.attr("sorter")
														? eval(th
																.attr("sorter"))
														: undefined)
											});
									if (col.width
											&& String(col.width).indexOf("%") == -1) {
										col.width = parseInt(col.width);
									}
									if (th.attr("editor")) {
										var s = $.trim(th.attr("editor"));
										if (s.substr(0, 1) == "{") {
											col.editor = eval("(" + s + ")");
										} else {
											col.editor = s;
										}
									}
									column.push(col);
								});
								opt.frozen
										? frozenColumns.push(column)
										: columns.push(column);
							});
						});
						return [frozenColumns, columns];
					};
					var wrap = $("<div class=\"datagrid-wrap\">"
							+ "<div class=\"datagrid-view\">"
							+ "<div class=\"datagrid-view1\">"
							+ "<div class=\"datagrid-header\">"
							+ "<div class=\"datagrid-header-inner\"></div>"
							+ "</div>" + "<div class=\"datagrid-body\">"
							+ "<div class=\"datagrid-body-inner\"></div>"
							+ "</div>" + "<div class=\"datagrid-footer\">"
							+ "<div class=\"datagrid-footer-inner\"></div>"
							+ "</div>" + "</div>"
							+ "<div class=\"datagrid-view2\">"
							+ "<div class=\"datagrid-header\">"
							+ "<div class=\"datagrid-header-inner\"></div>"
							+ "</div>" + "<div class=\"datagrid-body\"></div>"
							+ "<div class=\"datagrid-footer\">"
							+ "<div class=\"datagrid-footer-inner\"></div>"
							+ "</div>" + "</div>" + "</div>" + "</div>")
							.insertAfter($this);
					wrap.panel({
								doSize : false,
								cls : "datagrid"
							});
					$($this).addClass("datagrid-f").hide()
							.appendTo(wrap.children("div.datagrid-view"));
					var columns = getColumns();
					var gridViewWrap = wrap.children("div.datagrid-view");
					var gridViewWrap1 = gridViewWrap
							.children("div.datagrid-view1");
					var gridViewWrap2 = gridViewWrap
							.children("div.datagrid-view2");
					return {
						panel : wrap,
						frozenColumns : columns[0],
						columns : columns[1],
						dc : {
							view : gridViewWrap,
							view1 : gridViewWrap1,
							view2 : gridViewWrap2,
							header1 : gridViewWrap1
									.children("div.datagrid-header")
									.children("div.datagrid-header-inner"),
							header2 : gridViewWrap2
									.children("div.datagrid-header")
									.children("div.datagrid-header-inner"),
							body1 : gridViewWrap1.children("div.datagrid-body")
									.children("div.datagrid-body-inner"),
							body2 : gridViewWrap2.children("div.datagrid-body"),
							footer1 : gridViewWrap1
									.children("div.datagrid-footer")
									.children("div.datagrid-footer-inner"),
							footer2 : gridViewWrap2
									.children("div.datagrid-footer")
									.children("div.datagrid-footer-inner")
						}
					};

				}

			});

			var GridView = Widget.extend({
				initialize : function(datagrid) {
					this.grid = datagrid;
				},

				getStyleValue : function(css) {
					var _225 = "";
					var _226 = "";
					if (typeof css == "string") {
						_226 = css;
					} else {
						if (css) {
							_225 = css["class"] || "";
							_226 = css["style"] || "";
						}
					}
					return {
						c : _225,
						s : _226
					};
				},
				render : function(_1e9, _1ea) {
					var _1eb = $.data(this.grid.element, "datagrid");
					var opts = _1eb.options;
					var rows = _1eb.data.rows;
					var columnFields = this.grid.getColumnFields();
					if (_1ea) {
						if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
							return;
						}
					}
					var dataTableHtml = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
					for (var i = 0; i < rows.length; i++) {
						var css = opts.rowStyler ? opts.rowStyler.call(
								this.grid.element, i, rows[i]) : "";
						var _1ee = "";
						var _1ef = "";
						if (typeof css == "string") {
							_1ef = css;
						} else {
							if (css) {
								_1ee = css["class"] || "";
								_1ef = css["style"] || "";
							}
						}
						var cls = "class=\"datagrid-row "
								+ (i % 2 && opts.striped
										? "datagrid-row-alt "
										: " ") + _1ee + "\"";
						var _1f0 = _1ef ? "style=\"" + _1ef + "\"" : "";
						var _1f1 = _1eb.rowIdPrefix + "-" + (_1ea ? 1 : 2)
								+ "-" + i;
						dataTableHtml.push("<tr id=\"" + _1f1
								+ "\" datagrid-row-index=\"" + i + "\" " + cls
								+ " " + _1f0 + ">");
						dataTableHtml.push(this.renderRow.call(this,
								columnFields, _1ea, i, rows[i]));
						dataTableHtml.push("</tr>");
					}
					dataTableHtml.push("</tbody></table>");
					$(_1e9).html(dataTableHtml.join(""));
				},
				renderFooter : function(_1f3, _1f4) {
					var opts = $.data(this.grid.element, "datagrid").options;
					var rows = $.data(this.grid.element, "datagrid").footer
							|| [];
					var _1f5 = this.grid.getColumnFields(_1f4)
					var _1f6 = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
					for (var i = 0; i < rows.length; i++) {
						_1f6
								.push("<tr class=\"datagrid-row\" datagrid-row-index=\""
										+ i + "\">");
						_1f6.push(this.renderRow.call(this, _1f5, _1f4, i,
								rows[i]));
						_1f6.push("</tr>");
					}
					_1f6.push("</tbody></table>");
					$(_1f3).html(_1f6.join(""));
				},
				renderRow : function(_1f8, _1f9, _1fa, _1fb) {
					var opts = $.data(this.grid.element, "datagrid").options;
					var cc = [];
					if (_1f9 && opts.rownumbers) {
						var _1fc = _1fa + 1;
						if (opts.pagination) {
							_1fc += (opts.pageNumber - 1) * opts.pageSize;
						}
						cc
								.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">"
										+ _1fc + "</div></td>");
					}
					for (var i = 0; i < _1f8.length; i++) {
						var _1fd = _1f8[i];
						var col = this.grid.getColumnOption(_1fd);
						if (col) {
							var _1fe = _1fb[_1fd];
							var css = col.styler ? (col
									.styler(_1fe, _1fb, _1fa) || "") : "";
							var _1ff = "";
							var _200 = "";
							if (typeof css == "string") {
								_200 = css;
							} else {
								if (css) {
									_1ff = css["class"] || "";
									_200 = css["style"] || "";
								}
							}
							var cls = _1ff ? "class=\"" + _1ff + "\"" : "";
							var _201 = col.hidden ? "style=\"display:none;"
									+ _200 + "\"" : (_200 ? "style=\"" + _200
									+ "\"" : "");
							cc.push("<td field=\"" + _1fd + "\" " + cls + " "
									+ _201 + ">");
							var _201 = "";
							if (!col.checkbox) {
								if (col.align) {
									_201 += "text-align:" + col.align + ";";
								}
								if (!opts.nowrap) {
									_201 += "white-space:normal;height:auto;";
								} else {
									if (opts.autoRowHeight) {
										_201 += "height:auto;";
									}
								}
							}
							cc.push("<div style=\"" + _201 + "\" ");
							cc.push(col.checkbox
									? "class=\"datagrid-cell-check\""
									: "class=\"datagrid-cell " + col.cellClass
											+ "\"");
							cc.push(">");
							if (col.checkbox) {
								cc.push("<input type=\"checkbox\" "
										+ (_1fb.checked
												? "checked=\"checked\""
												: ""));
								cc.push(" name=\"" + _1fd + "\" value=\""
										+ (_1fe != undefined ? _1fe : "")
										+ "\">");
							} else {
								if (col.formatter) {
									cc.push(col.formatter(_1fe, _1fb, _1fa));
								} else {
									cc.push(_1fe);
								}
							}
							cc.push("</div>");
							cc.push("</td>");
						}
					}
					return cc.join("");
				},
				refreshRow : function(_202, _203) {
					this.updateRow.call(this, _202, _203, {});
				},
				updateRow : function(_204, _205, row) {
					var opts = $.data(this.grid.element, "datagrid").options;
					var rows = $(this.grid.element).datagrid("getRows");
					$.extend(rows[_205], row);
					var css = opts.rowStyler ? opts.rowStyler.call(
							this.grid.element, _205, rows[_205]) : "";
					var _206 = "";
					var _207 = "";
					if (typeof css == "string") {
						_207 = css;
					} else {
						if (css) {
							_206 = css["class"] || "";
							_207 = css["style"] || "";
						}
					}
					var _206 = "datagrid-row "
							+ (_205 % 2 && opts.striped
									? "datagrid-row-alt "
									: " ") + _206;
					function _208(_209) {
						var _20a = $(this.grid.element).datagrid(
								"getColumnFields", _209);
						var tr = opts.finder.getTr(this.grid.element, _205,
								"body", (_209 ? 1 : 2));
						var _20b = tr
								.find("div.datagrid-cell-check input[type=checkbox]")
								.is(":checked");
						tr.html(this.renderRow.call(this, this.grid.element,
								_20a, _209, _205, rows[_205]));
						tr.attr("style", _207).attr(
								"class",
								tr.hasClass("datagrid-row-selected") ? _206
										+ " datagrid-row-selected" : _206);
						if (_20b) {
							tr
									.find("div.datagrid-cell-check input[type=checkbox]")
									.attr("checked", true);
						}
					};
					_208.call(this, true);
					_208.call(this, false);
					this.grid.fixRowHeight(_205);
					// $(_204).datagrid("fixRowHeight", _205);
				},
				insertRow : function(_20d, row) {
					var _20e = $.data(this.grid.element, "datagrid");
					var opts = _20e.options;
					var dc = _20e.dc;
					var data = _20e.data;
					if (_20d == undefined || _20d == null) {
						_20d = data.rows.length;
					}
					if (_20d > data.rows.length) {
						_20d = data.rows.length;
					}
					function _20f(_210) {
						var _211 = _210 ? 1 : 2;
						for (var i = data.rows.length - 1; i >= _20d; i--) {
							var tr = opts.finder.getTr(this.grid.element, i,
									"body", _211);
							tr.attr("datagrid-row-index", i + 1);
							tr.attr("id", _20e.rowIdPrefix + "-" + _211 + "-"
											+ (i + 1));
							if (_210 && opts.rownumbers) {
								var _212 = i + 2;
								if (opts.pagination) {
									_212 += (opts.pageNumber - 1)
											* opts.pageSize;
								}
								tr.find("div.datagrid-cell-rownumber")
										.html(_212);
							}
							if (opts.striped) {
								tr.removeClass("datagrid-row-alt")
										.addClass((i + 1) % 2
												? "datagrid-row-alt"
												: "");
							}
						}
					};
					function _213(_214) {
						var _215 = _214 ? 1 : 2;
						var _216 = this.grid.getColumnFields(_214);
						var _217 = _20e.rowIdPrefix + "-" + _215 + "-" + _20d;
						var tr = "<tr id=\""
								+ _217
								+ "\" class=\"datagrid-row\" datagrid-row-index=\""
								+ _20d + "\"></tr>";
						if (_20d >= data.rows.length) {
							if (data.rows.length) {
								opts.finder.getTr(this.grid.element, "",
										"last", _215).after(tr);
							} else {
								var cc = _214 ? dc.body1 : dc.body2;
								cc
										.html("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"
												+ tr + "</tbody></table>");
							}
						} else {
							opts.finder.getTr(this.grid.element, _20d + 1,
									"body", _215).before(tr);
						}
					};
					_20f.call(this, true);
					_20f.call(this, false);
					_213.call(this, true);
					_213.call(this, false);
					data.total += 1;
					data.rows.splice(_20d, 0, row);
					this.refreshRow.call(this, this.grid.element, _20d);
				},
				deleteRow : function(_218, _219) {
					var _21a = $.data(_218, "datagrid");
					var opts = _21a.options;
					var data = _21a.data;
					function _21b(_21c) {
						var _21d = _21c ? 1 : 2;
						for (var i = _219 + 1; i < data.rows.length; i++) {
							var tr = opts.finder.getTr(_218, i, "body", _21d);
							tr.attr("datagrid-row-index", i - 1);
							tr.attr("id", _21a.rowIdPrefix + "-" + _21d + "-"
											+ (i - 1));
							if (_21c && opts.rownumbers) {
								var _21e = i;
								if (opts.pagination) {
									_21e += (opts.pageNumber - 1)
											* opts.pageSize;
								}
								tr.find("div.datagrid-cell-rownumber")
										.html(_21e);
							}
							if (opts.striped) {
								tr.removeClass("datagrid-row-alt")
										.addClass((i - 1) % 2
												? "datagrid-row-alt"
												: "");
							}
						}
					};
					opts.finder.getTr(_218, _219).remove();
					_21b.call(this, true);
					_21b.call(this, false);
					data.total -= 1;
					data.rows.splice(_219, 1);
				},
				onBeforeRender : function(_21f, rows) {
				},
				onAfterRender : function() {
					var opts = $.data(this.grid.element, "datagrid").options;
					if (opts.showFooter) {
						var _221 = this.grid.getPanel()
								.find("div.datagrid-footer");
						_221
								.find("div.datagrid-cell-rownumber,div.datagrid-cell-check")
								.css("visibility", "hidden");
					}
				}
			})

			function createEditors(editorList) {
				var editors = {};
				$.map(editorList, function(name) {
							editors[name] = initEditor(name);
						});

				return editors;
				function initEditor(name) {
					function isA(editorDom) {
						return $.data($(editorDom)[0], name) != undefined;
					};
					return {
						init : function(dom, opt) {
							var editorDom = $("<input type=\"text\" class=\"datagrid-editable-input\" width=\"100%\">")
									.appendTo(dom);
							if (editorDom[name] && name != "text") {
								var t = editorDom[name](opt);
								return editorDom;
							} else {
								return editorDom;
							}
						},
						destroy : function(editorDom) {
							if (isA(editorDom, name)) {
								$(editorDom)[name]("destroy");
							}
						},
						getValue : function(editorDom) {
							if (isA(editorDom, name)) {
								var opts = $(editorDom)[name]("options");
								if (opts.multiple) {
									return $(editorDom)[name]("getValues")
											.join(opts.separator);
								} else {
									return $(editorDom)[name]("getValue");
								}
								return $(editorDom)[name]("getValue");
							} else {
								return $(editorDom).val();
							}
						},
						setValue : function(editorDom, value) {
							if (isA(editorDom, name)) {
								var opts = $(editorDom)[name]("options");
								if (opts.multiple) {
									if (value) {
										$(editorDom)[name]("setValues", value
														.split(opts.separator));
									} else {
										$(editorDom)[name]("clear");
									}
								} else {
									$(editorDom)[name]("setValue", value);
								}
							} else {
								$(editorDom).val();
							}
						},
						resize : function(editorDom, size) {
							if (isA(editorDom, name)) {
								$(editorDom)[name]("resize", size);
							} else {
								$(editorDom)._outerWidth(size)._outerHeight(22);
							}
						}
					};
				};
			};
			var editors = $.extend({}, createEditors(["text", "textbox",
							"number", "numberspinner", "combobox", "combotree",
							"combogrid", "datebox", "datetimebox",
							"timespinner", "datetimespinner"]), {
						textarea : {
							init : function(dom, opt) {
								var editorDom = $("<textarea class=\"datagrid-editable-input\"></textarea>")
										.appendTo(dom);
								return editorDom;
							},
							getValue : function(editorDom) {
								return $(editorDom).val();
							},
							setValue : function(editorDom, value) {
								$(editorDom).val(value);
							},
							resize : function(editorDom, size) {
								$(editorDom)._outerWidth(size);
							}
						},
						checkbox : {
							init : function(dom, opt) {
								var editorDom = $("<input type=\"checkbox\">")
										.appendTo(dom);
								editorDom.val(_1a8.on);
								editorDom.attr("offval", _1a8.off);
								return editorDom;
							},
							getValue : function(editorDom) {
								if ($(editorDom).is(":checked")) {
									return $(editorDom).val();
								} else {
									return $(editorDom).attr("offval");
								}
							},
							setValue : function(_1ab, _1ac) {
								var _1ad = false;
								if ($(_1ab).val() == _1ac) {
									_1ad = true;
								}
								$(_1ab).attr("checked", _1ad);
							}
						},
						validatebox : {
							init : function(_1ae, _1af) {
								var _1b0 = $("<input type=\"text\" class=\"datagrid-editable-input\">")
										.appendTo(_1ae);
								_1b0.validatebox(_1af);
								return _1b0;
							},
							destroy : function(_1b1) {
								$(_1b1).validatebox("destroy");
							},
							getValue : function(_1b2) {
								return $(_1b2).val();
							},
							setValue : function(_1b3, _1b4) {
								$(_1b3).val(_1b4);
							},
							resize : function(_1b5, _1b6) {
								$(_1b5)._outerWidth(_1b6)._outerHeight(22);
							}
						},
						button : {
							init : function(_1ae, _1af) {

								var _1b0 = $('<a>[对象]</a>').appendTo(_1ae);
								_1b0.button(_1af);
								return _1b0;
							},
							destroy : function(_1b1) {
								// $(_1b1).validatebox("destroy");
							},
							getValue : function(_1b2, row, field) {
								return row[field];
							},
							setValue : function(_1b3, _1b4) {
								$(_1b3).val(_1b4);
							},
							resize : function(_1b5, _1b6) {
								$(_1b5)._outerWidth(_1b6)._outerHeight(22);
							}
						}
					});

			function getGridDom(t) {
				return $(t).closest("div.datagrid-view")
						.children(".datagrid-f")[0];
			}
			function getHeaderOverEvent(isOver) {
				return function(e) {
					var td = $(e.target).closest("td[field]");
					if (td.length) {
						var gridDom = getGridDom(td);
						if (!$(gridDom).data("datagrid").resizing && isOver) {
							td.addClass("datagrid-header-over");
						} else {
							td.removeClass("datagrid-header-over");
						}
					}
				};
			}

			function headerClickEvent(e) {
				var gridDom = getGridDom(e.target);
				var options = $(gridDom).datagrid("options");
				var ck = $(e.target).closest("input[type=checkbox]");
				if (ck.length) {
					if (options.singleSelect && options.selectOnCheck) {
						return false;
					}
					if (ck.is(":checked")) {
						$(gridDom).datagrid("checkAll");
					} else {
						$(gridDom).datagrid("uncheckAll");
					}
					e.stopPropagation();
				} else {
					var cell = $(e.target).closest(".datagrid-cell");
					if (cell.length) {
						var p1 = cell.offset().left + 5;
						var p2 = cell.offset().left + cell._outerWidth() - 5;
						if (e.pageX < p2 && e.pageX > p1) {
							$(gridDom).datagrid("sort",
									cell.parent().attr("field"));
						}
					}
				}
			}

			function headerDblclick(e) {
				var gridDom = getGridDom(e.target);
				var options = $(gridDom).datagrid("options");
				var cells = $(e.target).closest(".datagrid-cell");
				if (cells.length) {
					var p1 = cells.offset().left + 5;
					var p2 = cells.offset().left + cells._outerWidth() - 5;
					var resizeHandle = options.resizeHandle == "right"
							? (e.pageX > p2)
							: (options.resizeHandle == "left"
									? (e.pageX < p1)
									: (e.pageX < p1 || e.pageX > p2));
					if (resizeHandle) {
						var field = cells.parent().attr("field");
						var col = $(gridDom).datagrid("getColumnOption", field);
						if (col.resizable == false) {
							return;
						}
						$(gridDom).datagrid("autoSizeColumn", field);
						col.auto = false;
					}
				}
			}

			function headerContextmenuEvent(e) {
				var gridDom = getGridDom(e.target);
				var options = $(gridDom).datagrid("options");
				var td = $(e.target).closest("td[field]");
				options.onHeaderContextMenu.call(gridDom, e, td.attr("field"));
			}

			function getGridRowDom(t, closetDom) {
				var tr = $(t).closest(closetDom || "tr.datagrid-row");
				if (tr.length && tr.parent().length) {
					return tr;
				} else {
					return undefined;
				}
			}

			function getRowIndex(tr) {
				if (tr.attr("datagrid-row-index")) {
					return parseInt(tr.attr("datagrid-row-index"));
				} else {
					return tr.attr("node-id");
				}
			}
			function getCellOverEvent(isOver) {
				return function(e) {
					var tr = getGridRowDom(e.target);
					if (!tr) {
						return;
					}
					var gridDom = getGridDom(tr);
					if ($.data(gridDom, "datagrid").resizing) {
						return;
					}
					var rowIndex = getRowIndex(tr);
					if (rowIndex) {
						rowOver(gridDom, rowIndex);
					} else {
						var options = $.data(gridDom, "datagrid").options;
						options.finder.getTr(gridDom, rowIndex)
								.removeClass("datagrid-row-over");
					}
				};
			}
			function rowOver(gridDom, trDom) {
				var dataGridObj = $.data(gridDom, "datagrid");
				var opts = dataGridObj.options;
				opts.finder.getTr(gridDom, dataGridObj.highlightIndex)
						.removeClass("datagrid-row-over");
				opts.finder.getTr(gridDom, trDom).addClass("datagrid-row-over");
				dataGridObj.highlightIndex = trDom;
			}

			
			
			function bodyCellClickEvent(e) {
				var tr = getGridRowDom(e.target);
				if (!tr) {
					return;
				}
				var gridDom = getGridDom(tr);
				var options = $.data(gridDom, "datagrid").options;

				var dataGridClass = $.data(gridDom, "datagridObj");

				var rowIndex = getRowIndex(tr);
				var row = options.finder.getRow(rowIndex);

				var tt = $(e.target);
				
		        var rowBtn = tt.closest("a.rowBtn");
		        if (rowBtn.length>0){
		        	dataGridClass.operator[rowBtn.attr("id")].call(this,row)
		        	return;
		        }
				if (tt.parent().hasClass("datagrid-cell-check")) {
					if (options.singleSelect && options.selectOnCheck) {
						tt.attr("checked", !tt.is(":checked"));
						dataGridClass.checkRow(rowIndex);

					} else {
						if (tt.is(":checked")) {
							tt.attr("checked", false);
							dataGridClass.checkRow(rowIndex);
						} else {
							tt.attr("checked", true);
							dataGridClass.uncheckRow(rowIndex);
						}
					}
				} else {
					var td = tt.closest("td[field]", tr);
					if (td.length) {
						var field = td.attr("field");
						dataGridClass.trigger("onClickCell", rowIndex, field,
								row[field])
						// options.onClickCell.call(gridDom, rowIndex,
						// _a4,row[_a4]);
					}
					if (options.singleSelect == true) {
						dataGridClass.selectRow(rowIndex);
					} else {
						if (options.ctrlSelect) {
							if (e.ctrlKey) {
								if (tr.hasClass("datagrid-row-selected")) {

									dataGridClass.unselectRow(rowIndex);
									// $(gridDom).datagrid("unselectRow", );
								} else {
									dataGridClass.selectRow(rowIndex);
									// $(gridDom).datagrid("selectRow",
									// rowIndex);
								}
							} else {
								if (e.shiftKey) {
									$(gridDom).datagrid("clearSelections");
									var _a7 = Math.min(
											options.lastSelectedIndex || 0,
											rowIndex);
									var _a8 = Math.max(
											options.lastSelectedIndex || 0,
											rowIndex);
									for (var i = _a7; i <= _a8; i++) {
										_a5(gridDom, i);
									}
								} else {
									$(gridDom).datagrid("clearSelections");
									dataGridClass.selectRow(rowIndex);
									options.lastSelectedIndex = rowIndex;
								}
							}
						} else {
							if (tr.hasClass("datagrid-row-selected")) {
								dataGridClass.unselectRow(rowIndex);
							} else {
								dataGridClass.selectRow(rowIndex);
							}
						}
					}
					dataGridClass.trigger("onClickRow", getRowParam(gridDom, [
											rowIndex, row]))

				}
			}

			function bodyCellDbClickEvent(e) {
				var tr = getGridRowDom(e.target);
				if (!tr) {
					return;
				}
				var gridDom = getGridDom(tr);
				var options = $.data(gridDom, "datagrid").options;
				var dataGridClass = $.data(gridDom, "datagridObj");

				var rowIndex = getRowIndex(tr);
				var row = options.finder.getRow(rowIndex);
				var td = $(e.target).closest("td[field]", tr);
				if (td.length) {
					var _ad = td.attr("field");

					dataGridClass.trigger("onDblClickCell", rowIndex, _ad,
							row[_ad]);
					// options.onDblClickCell.call(gridDom, rowIndex, _ad,
					// row[_ad]);
				}
				dataGridClass.trigger("onDblClickRow", getRowParam(gridDom, [
										rowIndex, row]));
				// options.onDblClickRow.apply(gridDom, getRowParam(gridDom, [
				// rowIndex, row ]));
			}

			function bodyContextmenuEvent(e) {
				var tr = getGridRowDom(e.target);
				if (!tr) {
					tr = getGridRowDom(e.target, ".datagrid-body");
				} 
				if (!tr){
					return ;
				}
				
				var gridDom = getGridDom(tr);
				var options = $.data(gridDom, "datagrid").options;
				var dataGridClass = $.data(gridDom, "datagridObj");
				var rowIndex = getRowIndex(tr);
				var row = options.finder.getRow(rowIndex);
				dataGridClass.trigger("onRowContextMenu", e, rowIndex, row);
				
				
			}
			function getRowParam(gridDom, params) {
				return $.data(gridDom, "treegrid") ? params.slice(1) : params;
			}

			DataGrid.defaults = $.extend({}, Opts.appDefaults.Pane, {
				sharedStyleSheet : false,
				// 和列（column）属性一样，但是这些列将被冻结在左边
				frozenColumns : undefined,
				// 设置为 true，则会自动扩大或缩小列的尺寸以适应网格的宽度并且防止水平滚动
				columns : undefined,
				// 设置为 true，则会自动扩大或缩小列的尺寸以适应网格的宽度并且防止水平滚动
				fitColumns : false,
				// 调整列的位置，可用的值有：'left'、'right'、'both'。当设置为
				// 'right'
				// 时，用户可通过拖拽列头部的右边缘来调整列。
				resizeHandle : "right",
				// 定义是否设置基于该行内容的行高度。设置为 false，则可以提高加载性能。
				autoRowHeight : true,
				// 数据网格（datagrid）面板的头部工具栏。可能的值：
				// 1、数组，每个工具选项与链接按钮（linkbutton）一样。
				// 2、选择器，只是工具栏。
				toolbar : null,
				striped : false,
				method : "post",
				nowrap : true,
				idField : null,
				url : null,
				data : null,
				loadMsg : "数据加载中 ...",
				rownumbers : false,
				singleSelect : false,
				ctrlSelect : false,
				selectOnCheck : true,
				checkOnSelect : true,
				pagination : false,
				pagePosition : "bottom",
				pageNumber : 1,
				pageSize : 10,
				pageList : [10, 20, 30, 40, 50],
				queryParams : {},
				sortName : null,
				sortOrder : "asc",
				multiSort : false,
				remoteSort : false,
				showHeader : true,
				showFooter : false,
				scrollbarSize : 18,
				rowStyler : function(rowIndex, rowData) {
				},
				headerEvents : {
					mouseover : getHeaderOverEvent(true),
					mouseout : getHeaderOverEvent(false),
					click : headerClickEvent,
					dblclick : headerDblclick,
					contextmenu : headerContextmenuEvent
				},
				rowEvents : {
					mouseover : getCellOverEvent(true),
					mouseout : getCellOverEvent(false),
					click : bodyCellClickEvent,
					dblclick : bodyCellDbClickEvent,
					contextmenu : bodyContextmenuEvent
				},
				loader : function(param, success, error) {

					var opts = this.options();
					if (!opts.url) {
						return false;
					}
					$.ajax({
								type : opts.method,
								url : opts.url,
								data : param,
								dataType : "json",
								success : function(data) {
									success(data);
								},
								error : function() {
									error.apply(this, arguments);
								}
							});
				},

				loadFilter : function(data) {
					if (typeof data.length == "number"
							&& typeof data.splice == "function") {
						return {
							total : data.length,
							rows : data
						};
					} else {
						return data;
					}
				},
				editors : editors,
				finder : {
					getTr : function(_227, _228, type, _229) {
						type = type || "body";
						_229 = _229 || 0;
						var _22a = $.data(_227, "datagrid");
						var dc = _22a.dc;
						var opts = _22a.options;
						if (_229 == 0) {
							var tr1 = opts.finder.getTr(_227, _228, type, 1);
							var tr2 = opts.finder.getTr(_227, _228, type, 2);
							return tr1.add(tr2);
						} else {
							if (type == "body") {
								var tr = $("#" + _22a.rowIdPrefix + "-" + _229
										+ "-" + _228);
								if (!tr.length) {
									tr = (_229 == 1 ? dc.body1 : dc.body2)
											.find(">table>tbody>tr[datagrid-row-index="
													+ _228 + "]");
								}
								return tr;
							} else {
								if (type == "footer") {
									return (_229 == 1 ? dc.footer1 : dc.footer2)
											.find(">table>tbody>tr[datagrid-row-index="
													+ _228 + "]");
								} else {
									if (type == "selected") {
										return (_229 == 1 ? dc.body1 : dc.body2)
												.find(">table>tbody>tr.datagrid-row-selected");
									} else {
										if (type == "highlight") {
											return (_229 == 1
													? dc.body1
													: dc.body2)
													.find(">table>tbody>tr.datagrid-row-over");
										} else {
											if (type == "checked") {
												return (_229 == 1
														? dc.body1
														: dc.body2)
														.find(">table>tbody>tr.datagrid-row-checked");
											} else {
												if (type == "last") {
													return (_229 == 1
															? dc.body1
															: dc.body2)
															.find(">table>tbody>tr[datagrid-row-index]:last");
												} else {
													if (type == "allbody") {
														return (_229 == 1
																? dc.body1
																: dc.body2)
																.find(">table>tbody>tr[datagrid-row-index]");
													} else {
														if (type == "allfooter") {
															return (_229 == 1
																	? dc.footer1
																	: dc.footer2)
																	.find(">table>tbody>tr[datagrid-row-index]");
														}
													}
												}
											}
										}
									}
								}
							}
						}
					},
					getRow : function(p) {
						var _22c = (typeof p == "object") ? p
								.attr("datagrid-row-index") : p;
						return $.data(this.element, "datagrid").data.rows[parseInt(_22c)];
					},
					getRows : function() {
						return $(this.element).datagrid("getRows");
					}
				},
				// view : dataView,
				onBeforeLoad : function(_22e) {
				},
				onLoadSuccess : function() {
				},
				onLoadError : function() {
				},
				onClickRow : function(_22f, _230) {
				},
				onDblClickRow : function(_231, _232) {
				},
				onClickCell : function(_233, _234, _235) {
				},
				onDblClickCell : function(_236, _237, _238) {
				},
				onBeforeSortColumn : function(sort, _239) {
				},
				onSortColumn : function(sort, _23a) {
				},
				onResizeColumn : function(_23b, _23c) {
				},
				onResize : function() {

				},
				onSelect : function(_23d, _23e) {
				},
				onUnselect : function(_23f, _240) {
				},
				onSelectAll : function(rows) {
				},
				onUnselectAll : function(rows) {
				},
				onCheck : function(_241, _242) {
				},
				onUncheck : function(_243, _244) {
				},
				onCheckAll : function(rows) {
				},
				onUncheckAll : function(rows) {
				},
				onBeforeEdit : function(_245, _246) {
				},
				onBeginEdit : function(_247, _248) {
				},
				onEndEdit : function(_249, _24a, _24b) {
				},
				onAfterEdit : function(_24c, _24d, _24e) {
				},
				onCancelEdit : function(_24f, _250) {
				},
				onHeaderContextMenu : function(e, _251) {
				},
				onRowContextMenu : function(e, _252, _253) {
				}
			});

			DataGrid.parseOptions = function(gridDom) {
				var t = $(gridDom);
				return $.extend({}, Panel.parseOptions(gridDom), t
								.parseOptions(gridDom, ["url", "toolbar",
												"idField", "sortName",
												"sortOrder", "pagePosition",
												"resizeHandle", {
													sharedStyleSheet : "boolean",
													fitColumns : "boolean",
													autoRowHeight : "boolean",
													striped : "boolean",
													nowrap : "boolean"
												}, {
													rownumbers : "boolean",
													singleSelect : "boolean",
													ctrlSelect : "boolean",
													checkOnSelect : "boolean",
													selectOnCheck : "boolean"
												}, {
													pagination : "boolean",
													pageSize : "number",
													pageNumber : "number"
												}, {
													multiSort : "boolean",
													remoteSort : "boolean",
													showHeader : "boolean",
													showFooter : "boolean"
												}, {
													scrollbarSize : "number"
												}]), {
							pageList : (t.attr("pageList") ? eval(t
									.attr("pageList")) : undefined),
							loadMsg : (t.attr("loadMsg") != undefined ? t
									.attr("loadMsg") : undefined),
							rowStyler : (t.attr("rowStyler") ? eval(t
									.attr("rowStyler")) : undefined)
						});
			}

			$.fn.datagrid = function(options, param) {
				// console.log(arguments)
				var methodReturn;

				options = options || {};
				$set = this.each(function() {
							var $this = $(this);
							var state = $.data(this, 'datagrid');
							var gridObj = $this.data('datagridObj');
							if (state) {
								if (typeof options === 'object') {
									opts = $.extend(state.options, options);
								}
							} else {
								options.element = this;
								gridObj = new DataGrid(this, options);
								$this.data('datagridObj', gridObj);
								// data._init(this);
							}
							if (typeof options === 'string')
								methodReturn = gridObj[options](param);
						});
				return (methodReturn === undefined) ? $set : methodReturn;
			};
			DataGrid.GridView = GridView;
			return DataGrid;
		});

/**
 * 
 */
define(	'app/widgets/treegrid/app-treegrid',["app/core/app-jquery", "app/core/app-core", "app/core/app-options",
				"jquery/jquery-ui", "app/widgets/app-widget",
				"app/widgets/treegrid/app-datagrid", "app/data/app-ajax"],
		function($, $A, Opts, resizable, Widget, DataGrid, AppAjax) {

			var treeUtils = {
				/**
				 * Get the index of array item, return -1 when the item is not
				 * found.
				 */
				indexOfArray : function(a, o, id) {
					for (var i = 0, len = a.length; i < len; i++) {
						if (id == undefined) {
							if (a[i] == o) {
								return i;
							}
						} else {
							if (a[i][o] == id) {
								return i;
							}
						}
					}
					return -1;
				},
				/**
				 * Remove array item, 'o' parameter can be item object or id
				 * field name. When 'o' parameter is the id field name, the 'id'
				 * parameter is valid.
				 */
				removeArrayItem : function(a, o, id) {
					if (typeof o == 'string') {
						for (var i = 0, len = a.length; i < len; i++) {
							if (a[i][o] == id) {
								a.splice(i, 1);
								return;
							}
						}
					} else {
						var index = this.indexOfArray(a, o);
						if (index != -1) {
							a.splice(index, 1);
						}
					}
				},
				/**
				 * Add un-duplicate array item, 'o' parameter is the id field
				 * name, if the 'r' object is exists, deny the action.
				 */
				addArrayItem : function(a, o, r) {
					var index = this.indexOfArray(a, o, r ? r[o] : undefined);
					if (index == -1) {
						a.push(r ? r : o);
					} else {
						a[index] = r ? r : o;
					}
				},
				getArrayItem : function(a, o, id) {
					var index = this.indexOfArray(a, o, id);
					return index == -1 ? null : a[index];
				},
				forEach : function(data, deep, callback) {
					var nodes = [];
					for (var i = 0; i < data.length; i++) {
						nodes.push(data[i]);
					}
					while (nodes.length) {
						var node = nodes.shift();
						if (callback(node) == false) {
							return;
						}
						if (deep && node.children) {
							for (var i = node.children.length - 1; i >= 0; i--) {
								nodes.unshift(node.children[i]);
							}
						}
					}
				}
			}
			var TreeGrid = DataGrid.extend({
				grid : null,
				
				initialize : function(el, opt) {
					this.element = el;
					var defaultOpt;
					if (!opt) {
						opt = {};
					}
					var _self = this;
					if (!opt.view) {
						opt.view = new TreeGridView(this);
					}
					defaultOpt = $.data(el, "treegrid", {
						options : $.extend({}, TreeGrid.defaults, TreeGrid
										.parseOptions(el), {
									finder : {
										getTr : function(target, id, type, _111) {
											type = type || "body";
											_111 = _111 || 0;
											var dc = $.data(target, "datagrid").dc;
											if (_111 == 0) {
												var opts = $.data(target,
														"treegrid").options;
												var tr1 = opts.finder.getTr(
														target, id, type, 1);
												var tr2 = opts.finder.getTr(
														target, id, type, 2);
												return tr1.add(tr2);
											} else {
												if (type == "body") {
													var tr = $("#"
															+ $.data(target,
																	"datagrid").rowIdPrefix
															+ "-" + _111 + "-"
															+ id);
													if (!tr.length) {
														tr = (_111 == 1
																? dc.body1
																: dc.body2)
																.find("tr[node-id=\""
																		+ id
																		+ "\"]");
													}
													return tr;
												} else {
													if (type == "footer") {
														return (_111 == 1
																? dc.footer1
																: dc.footer2)
																.find("tr[node-id=\""
																		+ id
																		+ "\"]");
													} else {
														if (type == "selected") {
															return (_111 == 1
																	? dc.body1
																	: dc.body2)
																	.find("tr.datagrid-row-selected");
														} else {
															if (type == "highlight") {
																return (_111 == 1
																		? dc.body1
																		: dc.body2)
																		.find("tr.datagrid-row-over");
															} else {
																if (type == "checked") {
																	return (_111 == 1
																			? dc.body1
																			: dc.body2)
																			.find("tr.datagrid-row-checked");
																} else {
																	if (type == "last") {
																		return (_111 == 1
																				? dc.body1
																				: dc.body2)
																				.find("tr:last[node-id]");
																	} else {
																		if (type == "allbody") {
																			return (_111 == 1
																					? dc.body1
																					: dc.body2)
																					.find("tr[node-id]");
																		} else {
																			if (type == "allfooter") {
																				return (_111 == 1
																						? dc.footer1
																						: dc.footer2)
																						.find("tr[node-id]");
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										},
										getRow : function(p) {
											var id = (typeof p == "object") ? p
													.attr("node-id") : p;
											return _self.find(id);
										},
										getRows : function(_113) {
											return _self.getChildren();
											// $(_113).treegrid("getChildren");
										}
									}
								}, opt),
						checkedRows : [],
						data : []
					});
					var _self = this;
					var opts = defaultOpt.options
					var gridOpts = $.extend({}, opts, {
								url : null,
								data : null,
								element : el,
								autoLoad : false,
								loader : function() {
									return false;
								},
								onResizeColumn : function(field, width) {
									_self.fixRowHeight();
									_self.trigger("onResizeColumn", field,
											width);
									// opts.onResizeColumn.call(_5, _6);
								},
								onSortColumn : function(_sortName, sortOrder) {
									opts.sortName = _sortName;
									opts.sortOrder = sortOrder;
									if (opts.remoteSort) {
										_1f(_2);
									} else {
										var _9 = _self.loadData("getData");
										_self.loadData(_9);
									}
									// opts.onSortColumn.call(_7, _8);
								}
							});
					this.grid = new DataGrid(el, gridOpts)
					
					
					$.data(el, "datagridObj",this.grid);
					DataGrid.superclass.initialize.call(this, opts);
					if (!opts.columns) {
						var options = $.data(el, "datagrid").options;
						opts.columns = options.columns;
						opts.frozenColumns = options.frozenColumns;
					}
					defaultOpt.dc = $.data(el, "datagrid").dc;
					if (opts.data) {
						this.loadData(opts.data);
					}
					this.nodeLoad();
					this.bindNodeEvent();
					this.addEvents("onLoadSuccess", "onLoadError",
							"onBeforeLoad", "onClickRow", "onDblClickRow",
							"onClickCell", "onDblClickCell", "onSortColumn",
							"onResizeColumn", "onSelect", "onUnselect",
							"onSelectAll", "onUnselectAll", "onCheck",
							"onUncheck", "onCheckAll", "onUncheckAll",
							"onBeforeEdit", "onAfterEdit", "onCancelEdit",
							"onHeaderContextMenu", "onAfterRender",
							"onRowContextMenu")
				},
				toTreeNodeData : function(record) {
					var node = {
						// text : this.formatText(record),
						children : [],
						state : this.get("asyTree") ? "closed" : "open"
					};
					/*
					 * if(this.autoNodeId !== true) { Ext.apply(node, { id :
					 * record[this.keyField] }); }
					 */
					/*
					 * if (this.checked == true) { node["checked"] =
					 * record[this.checkField] ? record[this.checkField] : false }
					 */
					node = $.extend(node, record);
					return node;
				},
				listToTreeData : function(treeDataList) {
					var parentIdMap = {};
					var IdMap = {};
					var parentMapId;
					for (var i = 0; i < treeDataList.length; i++) {

						parentMapId = treeDataList[i][this.get("parentField")]
								|| this.get("rootId");
						treeDataList[i][this.get("parentField")] = parentMapId;
						if (!parentIdMap[parentMapId.toString()]) {
							parentIdMap[parentMapId.toString()] = {};
						}
						parentIdMap[parentMapId.toString()][treeDataList[i][this
								.get("idField")]] = {
							data : treeDataList[i],
							children : {}
						};
						IdMap[treeDataList[i][this.get("idField")]] = {
							data : treeDataList[i],
							children : []
						};
					};
					var rootId, rootList = [];
					for (var pId in parentIdMap) {
						if (!IdMap[pId]) {
							rootId = pId;
							rootList.push(pId);
							// break;
						}
					};
					var _self = this;
					var createTree = function(rootData, parentIdMap) {
						var nodedata;
						var treedata = [];
						for (var p in rootData) {
							nodedata = _self
									.toTreeNodeData(rootData[p]["data"]);
							if (parentIdMap[p]) {
								rootData[p]["children"] = parentIdMap[p];
								nodedata.children = createTree(
										rootData[p]["children"], parentIdMap);
							} else {
								rootData[p]["children"] = null;
							};
							if (nodedata.children.length == 0) {
								delete nodedata.children;
							} else {
								nodedata.leaf = false;
							};
							treedata.push(nodedata);
						};
						return treedata;
					};
					var treeData = [];
					var temarr;
					// var treeData = createTree(rootData, parentIdMap);
					for (var i = 0; i < rootList.length; i++) {
						var rootData = parentIdMap[rootList[i]];
						temarr = createTree(rootData, parentIdMap);
						treeData = treeData.concat(temarr);
					}
					return treeData;
				},
				bindNodeEvent : function() {
					var target = this.element;
					var dc = $.data(target, "datagrid").dc;
					var body2 = dc.body1.add(dc.body2);
					var _self = this;
					var _2f = ($.data(body2[0], "events") || $._data(body2[0],
							"events")).click[0].handler;
					dc.body1.add(dc.body2).bind("mouseover", function(e) {
						var tt = $(e.target);
						var tr = tt.closest("tr.datagrid-row");
						if (!tr.length) {
							return;
						}
						if (tt.hasClass("tree-hit")) {
							tt.hasClass("tree-expanded") ? tt
									.addClass("tree-expanded-hover") : tt
									.addClass("tree-collapsed-hover");
						}
					}).bind("mouseout", function(e) {
						var tt = $(e.target);
						var tr = tt.closest("tr.datagrid-row");
						if (!tr.length) {
							return;
						}
						if (tt.hasClass("tree-hit")) {
							tt.hasClass("tree-expanded") ? tt
									.removeClass("tree-expanded-hover") : tt
									.removeClass("tree-collapsed-hover");
						}
					}).unbind("click").bind("click", function(e) {
								var tt = $(e.target);
								var tr = tt.closest("tr.datagrid-row");
								if (!tr.length) {
									return;
								}
								if (tt.hasClass("tree-hit")) {
									_self.toggle(tr.attr("node-id"));
								} else {
									_2f(e);
								}
							});
				},
				nodeLoad : function(nodeId, queryParams, parentId, callback) {
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var gridBody = this.getPanel().find("div.datagrid-body");
					var _self = this;
					if (queryParams) {
						opts.queryParams = queryParams;
					}
					var params = $.extend({}, opts.queryParams);
					if (opts.pagination) {
						$.extend(params, {
									page : opts.pageNumber,
									rows : opts.pageSize
								});
					}
					if (opts.sortName) {
						$.extend(params, {
									sort : opts.sortName,
									order : opts.sortOrder
								});
					}
					var row = this.find(nodeId);
					if (this.trigger("onBeforeLoad", row, params) == false) {
						return;
					}
					var parentNode = gridBody.find("tr[node-id=\"" + nodeId
							+ "\"] span.tree-folder");
					parentNode.addClass("tree-loading");
					this.loading();
					var _4f = opts.loader.call(this, params, function(data) {
								parentNode.removeClass("tree-loading");
								_self.loaded();
								_self.loadNodeData(nodeId, data, parentId);
								if (callback) {
									callback();
								}
							}, function() {
								parentNode.removeClass("tree-loading");
								_self.loaded();
								_self.trigger("onLoadError", arguments);
								if (callback) {
									callback();
								}
							});
					if (_4f == false) {
						parentNode.removeClass("tree-loading");
						_self.loaded();
					}

				},
				options : function() {
					return $.data(this.element, "treegrid").options;
				},
				resize : function(_b5) {
					// this.resize(_b5)
					TreeGrid.superclass.resize.call(this, _b5)
				},
				fixRowHeight : function(rowIndex) {
					/*
					 * return jq.each(function() { _20(this, _b6); });
					 */
					var target = this.element;
					var opts = $.data(target, "datagrid").options;
					var dc = $.data(target, "datagrid").dc;
					if (!dc.body1.is(":empty")
							&& (!opts.nowrap || opts.autoRowHeight)) {
						if (rowIndex != undefined) {
							var children = this.getChildren(rowIndex);
							for (var i = 0; i < children.length; i++) {
								setRowHeight(children[i][opts.idField]);
							}
						}
					}
					TreeGrid.superclass.fixRowHeight.call(this, rowIndex)

					function setRowHeight(nodeId) {
						var tr1 = opts.finder.getTr(target, nodeId, "body", 1);
						var tr2 = opts.finder.getTr(target, nodeId, "body", 2);
						tr1.css("height", "");
						tr2.css("height", "");
						var _28 = Math.max(tr1.height(), tr2.height());
						tr1.css("height", _28);
						tr2.css("height", _28);
					};
				},
				loadNodeData : function(nodeId, data, _3d) {
					var target = this.element;
					var _3e = $.data(target, "treegrid");
					var opts = _3e.options;
					var dc = _3e.dc;
					data = opts.loadFilter.call(target, data, nodeId);
					var node = this.find(nodeId);
					if (node) {
						var _42 = opts.finder.getTr(target, nodeId, "body", 1);
						var _43 = opts.finder.getTr(target, nodeId, "body", 2);
						var cc1 = _42.next("tr.treegrid-tr-tree")
								.children("td").children("div");
						var cc2 = _43.next("tr.treegrid-tr-tree")
								.children("td").children("div");
						if (!_3d) {
							node.children = [];
						}
					} else {
						var cc1 = dc.body1;
						var cc2 = dc.body2;
						if (!_3d) {
							_3e.data = [];
						}
					}
					if (!_3d) {
						cc1.empty();
						cc2.empty();
					}
					if (opts.view.onBeforeRender) {
						opts.view.onBeforeRender.call(opts.view, nodeId, data);
					}
					opts.view.render.call(opts.view, cc1, true);
					opts.view.render.call(opts.view, cc2, false);
					if (opts.showFooter) {
						opts.view.renderFooter
								.call(opts.view, dc.footer1, true);
						opts.view.renderFooter.call(opts.view, dc.footer2,
								false);
					}
					if (opts.view.onAfterRender) {
						opts.view.onAfterRender.call(opts.view, target);
					}
					if (!nodeId && opts.pagination) {
						var _44 = $.data(target, "treegrid").total;
						var _45 = this.grid.getPager();
						if (_45.pagination("options").total != _44) {
							_45.pagination({
										total : _44
									});
						}
					}
					this.fixRowHeight();
					this.setRownumber();
					this.showLines();
					this.setSelectionState();
					this.autoSizeColumn();
					// $(target).treegrid("showLines");
					// $(target).treegrid("setSelectionState");
					// $(target).treegrid("autoSizeColumn");
					this.trigger("onLoadSuccess", node, data)
					// opts.onLoadSuccess.call(this, node, data);
				},
				setRownumber : function() {
					var dc = $.data(this.element, "datagrid").dc;
					var opts = $.data(this.element, "treegrid").options;
					if (!opts.rownumbers) {
						return;
					}
					dc.body1.find("div.datagrid-cell-rownumber").each(
							function(i) {
								$(this).html(i + 1);
							});
				},
				loadData : function(data) {
					/*
					 * return jq.each(function() { _39(this, _b7.parent, _b7);
					 * });
					 */
					this.loadNodeData(data.parent, data)
				},
				load : function(param) {
					// return jq.each(function() {
					this.options().pageNumber = 1;
					this.getPager().pagination({
								pageNumber : 1
							});
					// $(this).treegrid("reload", param);
					this.reload(param)
					// });
				},
				reload : function(id) {
					var opts = this.options();
					var queryParams = {};
					if (typeof id == "object") {
						queryParams = id;
					} else {
						queryParams = $.extend({}, opts.queryParams);
						queryParams.id = id;
					}
					if (queryParams.id) {
						var _bb = $(this).treegrid("find", queryParams.id);
						if (_bb.children) {
							_bb.children.splice(0, _bb.children.length);
						}
						opts.queryParams = queryParams;
						var tr = opts.finder.getTr(this, queryParams.id);
						tr.next("tr.treegrid-tr-tree").remove();
						tr
								.find("span.tree-hit")
								.removeClass("tree-expanded tree-expanded-hover")
								.addClass("tree-collapsed");
						this.expand(queryParams.id);
					} else {
						this.nodeLoad(null, queryParams);
					}

				},
				reloadFooter : function(_bc) {
					return jq.each(function() {
								var _bd = $.data(this, "treegrid").options;
								var dc = $.data(this, "datagrid").dc;
								if (_bc) {
									$.data(this, "treegrid").footer = _bc;
								}
								if (_bd.showFooter) {
									_bd.view.renderFooter.call(_bd.view, this,
											dc.footer1, true);
									_bd.view.renderFooter.call(_bd.view, this,
											dc.footer2, false);
									if (_bd.view.onAfterRender) {
										_bd.view.onAfterRender.call(_bd.view,
												this);
									}
									$(this).treegrid("fixRowHeight");
								}
							});
				},
				getData : function() {
					return $.data(this.element, "treegrid").data;
				},
				getFooterRows : function() {
					return $.data(this.element, "treegrid").footer;
				},
				getRoot : function() {
					var roots = this.getRoots();
					if (roots.length) {
						return roots[0];
					} else {
						return null;
					}
				},
				getRoots : function() {
					return $.data(this.element, "treegrid").data;;
				},
				getParent : function(id) {
					var row = this.find(id);
					if (row._parentId) {
						return this.find(row._parentId);
					} else {
						return null;
					}
				},
				getChildren : function(id) {
					// return _25(this.element, id);
					var _self = this;
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var panel = this.getPanel()
							.find("div.datagrid-view2 div.datagrid-body");
					var children = [];
					if (id) {
						findChildrenById(id);
					} else {
						var _5f = this.getRoots();
						for (var i = 0; i < _5f.length; i++) {
							children.push(_5f[i]);
							findChildrenById(_5f[i][opts.idField]);
						}
					}
					function findChildrenById(nodeId) {
						var node = _self.find(nodeId);
						if (node && node.children) {
							for (var i = 0, len = node.children.length; i < len; i++) {
								var nodeChildren = node.children[i];
								children.push(nodeChildren);
								findChildrenById(nodeChildren[opts.idField]);
							}
						}
					};
					return children;
				},
				getLevel : function(id) {
					if (!id) {
						return 0;
					}
					var target = this.element
					var _66 = $.data(target, "treegrid").options;
					var _67 = this.getPanel().children("div.datagrid-view");
					var _68 = _67.find("div.datagrid-body tr[node-id=\"" + id
							+ "\"]").children("td[field=\"" + _66.treeField
							+ "\"]");
					return _68.find("span.tree-indent,span.tree-hit").length;
				},
				find : function(id) {
					// return _self.find(this.element, id);
					if (!id){
						return null;
					}
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var data = $.data(target, "treegrid").data;
					var nodes = [data];
					while (nodes.length) {
						var c = nodes.shift();
						for (var i = 0; i < c.length; i++) {
							var node = c[i];
							if (node[opts.idField] == id) {
								return node;
							} else {
								if (node["children"]) {
									nodes.push(node["children"]);
								}
							}
						}
					}
					return null;
				},
				isLeaf : function(id) {
					var _be = $.data(this.element, "treegrid").options;
					var tr = _be.finder.getTr(this.element, id);
					var hit = tr.find("span.tree-hit");
					return hit.length == 0;
				},
				select : function(id) {
					return this.grid.selectRow(id);
					/*return jq.each(function() {
								$(this).datagrid("selectRow", id);
							});*/
				},
				unselect : function(id) {
					/*return jq.each(function() {
								$(this).datagrid("unselectRow", id);
							});*/
					return this.grid.unselectRow(id);
				},
				collapse : function(id) {
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var row = this.find(id);
					var _self = this;
					var tr = opts.finder.getTr(target, id);
					var hit = tr.find("span.tree-hit");
					if (hit.length == 0) {
						return;
					}
					if (hit.hasClass("tree-collapsed")) {
						return;
					}
					if (this.trigger("onBeforeCollapse", row) == false) {
						return;
					}
					hit.removeClass("tree-expanded tree-expanded-hover")
							.addClass("tree-collapsed");
					hit.next().removeClass("tree-folder-open");
					row.state = "closed";
					tr = tr.next("tr.treegrid-tr-tree");
					var cc = tr.children("td").children("div");
					if (opts.animate) {
						cc.slideUp("normal", function() {
									_self.autoSizeColumn();
									_self.fixRowHeight(id);
									_self.trigger("onCollapse", row);
								});
					} else {
						cc.hide();
						_self.autoSizeColumn()
						_self.fixRowHeight(id);
						_self.trigger("onCollapse", row)
					}
				},
				renderNodeChildren : function(id) {
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var tr1 = opts.finder.getTr(target, id, "body", 1);
					var tr2 = opts.finder.getTr(target, id, "body", 2);
					var colCount = this.getColumnFields(true).length
							+ (opts.rownumbers ? 1 : 0);
					var colCount2 = this.getColumnFields(false).length;
					addNodeRow(tr1, colCount);
					addNodeRow(tr2, colCount2);
					function addNodeRow(tr, _38) {
						$("<tr class=\"treegrid-tr-tree\">"
								+ "<td style=\"border:0px\" colspan=\"" + _38
								+ "\">" + "<div></div>" + "</td>" + "</tr>")
								.insertAfter(tr);
					};

				},
				expand : function(id) {
					var target = this.element;
					var opts = $.data(target, "treegrid").options;
					var tr = opts.finder.getTr(target, id);
					var hit = tr.find("span.tree-hit");
					var row = this.find(id);
					var _self = this;
					if (hit.length == 0) {
						return;
					}
					if (hit.hasClass("tree-expanded")) {
						return;
					}
					if (this.trigger("onBeforeExpand", row) == false) {
						return;
					}
					hit.removeClass("tree-collapsed tree-collapsed-hover")
							.addClass("tree-expanded");
					hit.next().addClass("tree-folder-open");
					var childrenDom = tr.next("tr.treegrid-tr-tree");
					if (childrenDom.length) {
						var cc = childrenDom.children("td").children("div");
						show(cc);
					} else {
						this.renderNodeChildren(row[opts.idField]);
						var childrenDom = tr.next("tr.treegrid-tr-tree");
						var cc = childrenDom.children("td").children("div");
						cc.hide();
						var queryParams = $.extend({}, opts.queryParams || {});
						var queryParamFields = _self.get("queryParamFields");

						queryParams.id = row[opts.idField];
						if (queryParamFields) {
							var paramFields = queryParamFields.split(",");
							for (var i = 0; i < paramFields.length; i++) {
								queryParams[paramFields[i]] = row[paramFields[i]];
							}
						}
						this.nodeLoad(row[opts.idField], queryParams, true,
								function() {
									if (cc.is(":empty")) {
										childrenDom.remove();
									} else {
										show(cc);
									}
								});
					}
					function show(cc) {
						row.state = "open";
						if (opts.animate) {
							cc.slideDown("normal", function() {
										_self.autoSizeColumn();
										_self.fixRowHeight(id);
										_self.trigger("onExpand", row)
									});
						} else {
							cc.show();
							_self.autoSizeColumn();
							_self.fixRowHeight(id);
							_self.trigger("onExpand", row)

						}
					};
				},
				toggle : function(id) {
					var opts = $.data(this.element, "treegrid").options;
					var tr = opts.finder.getTr(this.element, id);
					var hit = tr.find("span.tree-hit");
					if (hit.hasClass("tree-expanded")) {
						this.collapse(id);
					} else {
						this.expand(id);
					}
				},
				collapseAll : function(id) {
					return jq.each(function() {
								_7c(this, id);
							});
				},
				expandAll : function(id) {
					return jq.each(function() {
								_81(this, id);
							});
				},
				expandTo : function(id) {
					return jq.each(function() {
								_86(this, id);
							});
				},
				append : function(_bf) {
					return jq.each(function() {
								_8a(this, _bf);
							});
				},
				getCheckedNodes: function(checkedStatae) {
					checkedStatae = checkedStatae || "checked";
		            var checkNode = [];
		            treeUtils.forEach($(this.element).data("treegrid").checkedRows, false,
		            function(row) {
		                if (row.checkState == _e0) {
		                	checkNode.push(row);
		                }
		            });
		            return checkNode;
		        },
				 checkNode: function(id) {
						this.changeCheckNode(id,true)
			        },
			        uncheckNode: function(id) {
			        	this.changeCheckNode(id,false)
			        },
				
				changeCheckNode : function(nodeId, checked, closeBeforeCheckEvent,
						closeCheckNodeEvent) {
					var opts = $.data(this.element, "treegrid");
					var checkedRows = opts.checkedRows;
					var options = opts.options;
					if (!options.checkbox) {
						return;
					}
					var row = this.find(nodeId);
					if (!row.checkState) {
						return;
					}
					var tr = options.finder.getTr(this.element,nodeId);
					var ck = tr.find(".tree-checkbox");
					if (checked == undefined) {
						if (ck.hasClass("tree-checkbox1")) {
							checked = false;
						} else {
							if (ck.hasClass("tree-checkbox0")) {
								checked = true;
							} else {
								if (row._checked == undefined) {
									row._checked = ck
											.hasClass("tree-checkbox1");
								}
								checked = !row._checked;
							}
						}
					}
					row._checked = checked;
					if (checked) {
						if (ck.hasClass("tree-checkbox1")) {
							return;
						}
					} else {
						if (ck.hasClass("tree-checkbox0")) {
							return;
						}
					}
					if (!closeBeforeCheckEvent) {
						if (options.onBeforeCheckNode.call(row, checked) == false) {
							return;
						}
					}
					//半选状态
					if (options.cascadeCheck) {
						this.setChildrenNodeChecBox(row, checked);
						this.setParentNodeCheckbox(row);
					} else {
						this.setNodeCheckBox(row, checked ? "1" : "0");
					}
					if (!closeCheckNodeEvent) {
						options.onCheckNode.call(row, checked);
					}

				},
				setChildrenNodeChecBox : function(row, checkboxValue) {
					checkboxValue = checkboxValue ? 1 : 0;
					this.setNodeCheckBox(row, checkboxValue);
					var _self = this;
					treeUtils.forEach(row.children || [], true, function(r) {
								_self.setNodeCheckBox(r, checkboxValue);
							});
				},
				setParentNodeCheckbox : function(row) {
					var options = $.data(this.element, "treegrid").options;
					var parentNode = this.getParent(row[options.idField]);
					if (parentNode) {
						this.setNodeCheckBox(parentNode, this
										.getNodeCheckValue(parentNode));
						this.setParentNodeCheckbox(parentNode);
					}
				},
				getNodeCheckValue : function(row) {
					var len = 0;
					var c0 = 0;
					var c1 = 0;
					treeUtils.forEach(row.children || [], false, function(r) {
								if (r.checkState) {
									len++;
									if (r.checkState == "checked") {
										c1++;
									} else {
										if (r.checkState == "unchecked") {
											c0++;
										}
									}
								}
							});
					if (len == 0) {
						return undefined;
					}
					var checkValue = 0;
					if (c0 == len) {
						checkValue = 0;
					} else {
						if (c1 == len) {
							checkValue = 1;
						} else {
							checkValue = 2;
						}
					}
					return checkValue;
				},
				setNodeCheckBox : function(row, nodeCheckState) {

					var treeGridObj = $.data(this.element, "treegrid");
					var checkedRows = treeGridObj.checkedRows;
					var options = treeGridObj.options;
					if (!row.checkState || nodeCheckState == undefined) {
						return;
					}
					var tr = options.finder.getTr(this.element,row[options.idField]);
					var ck = tr.find(".tree-checkbox");
					if (!ck.length) {
						return;
					}
					row.checkState = ["unchecked", "checked", "indeterminate"][nodeCheckState];
					row.checked = (row.checkState == "checked");
					ck
							.removeClass("tree-checkbox0 tree-checkbox1 tree-checkbox2");
					ck.addClass("tree-checkbox" + nodeCheckState);
					if (nodeCheckState == 0) {
						treeUtils.removeArrayItem(checkedRows, options.idField,
								row[options.idField]);
					} else {
						treeUtils.addArrayItem(checkedRows, options.idField,
								row);
					}
				},
				insert : function(_c0) {
					return jq.each(function() {
								_90(this, _c0);
							});
				},
				remove : function(id) {
					return jq.each(function() {
								_9c(this, id);
							});
				},
				pop : function(id) {
					var row = jq.treegrid("find", id);
					jq.treegrid("remove", id);
					return row;
				},
				refresh : function(id) {
					return jq.each(function() {
								var _c1 = $.data(this, "treegrid").options;
								_c1.view.refreshRow.call(_c1.view, this, id);
							});
				},
				update : function(node) {

					var opts = $.data(this.element, "treegrid").options;
					opts.view.updateRow
							.call(opts.view, this, node.id, node.row);
					var row = node.row;
					if (row.checked != undefined) {
						row = this.find(node.id);
						$.extend(row, {
									checkState : row.checked
											? "checked"
											: (row.checked === false
													? "unchecked"
													: undefined)
								});
						this.updateCheckbox(_dd.id);
					}

				},

				updateCheckbox : function(nodeId) {
					var opts = $.data(this.element, "treegrid").options;
					if (!opts.checkbox) {
						return;
					}
					var row = this.find(nodeId);
					var tr = opts.finder.getTr(nodeId);
					var ck = tr.find(".tree-checkbox");
					if (opts.view.hasCheckbox(row)) {
						if (!ck.length) {
							row.checkState = row.checkState || "unchecked";
							$("<span class=\"tree-checkbox\"></span>")
									.insertBefore(tr.find(".tree-title"));
						}
						if (row.checkState == "checked") {
							this.changeCheckNode(nodeId, true, true);
						} else {
							if (row.checkState == "unchecked") {
								this.changeCheckNode(nodeId, false, true);
							} else {
								var checkValue = this.getNodeCheckValue(row);
								if (checkValue === 0) {
									this.changeCheckNode(nodeId, false, true);
								} else {
									if (checkValue === 1) {
										this.changeCheckNode(nodeId, true, true);
									}
								}
							}
						}
					} else {
						ck.remove();
						row.checkState = undefined;
						row.checked = undefined;
						this.setParentNodeCheckbox(row);
					}

				},
				beginEdit : function(id) {
					return jq.each(function() {
								$(this).datagrid("beginEdit", id);
								$(this).treegrid("fixRowHeight", id);
							});
				},
				endEdit : function(id) {
					return jq.each(function() {
								$(this).datagrid("endEdit", id);
							});
				},
				cancelEdit : function(id) {
					return jq.each(function() {
								$(this).datagrid("cancelEdit", id);
							});
				},
				showLines : function() {
					/*
					 * return jq.each(function() { _a0(this); });
					 */
					var t = $(this.element);
					var _slef = this;
					var target = this.element;
					var _a2 = this.options();
					if (_a2.lines) {
						this.getPanel().addClass("tree-lines");
					} else {
						this.getPanel().removeClass("tree-lines");
						return;
					}
					this.getPanel().find("span.tree-indent")
							.removeClass("tree-line tree-join tree-joinbottom");
					this
							.getPanel()
							.find("div.datagrid-cell")
							.removeClass("tree-node-last tree-root-first tree-root-one");
					var _a3 = this.getRoots();
					if (_a3.length > 1) {
						_a4(_a3[0]).addClass("tree-root-first");
					} else {
						if (_a3.length == 1) {
							_a4(_a3[0]).addClass("tree-root-one");
						}
					}
					_a5(_a3);
					_a6(_a3);
					function _a5(_a7) {
						$.map(_a7, function(_a8) {
									if (_a8.children && _a8.children.length) {
										_a5(_a8.children);
									} else {
										var _a9 = _a4(_a8);
										_a9.find(".tree-icon").prev()
												.addClass("tree-join");
									}
								});
						var _aa = _a4(_a7[_a7.length - 1]);
						_aa.addClass("tree-node-last");
						_aa.find(".tree-join").removeClass("tree-join")
								.addClass("tree-joinbottom");
					};
					function _a6(_ab) {
						$.map(_ab, function(_ac) {
									if (_ac.children && _ac.children.length) {
										_a6(_ac.children);
									}
								});
						for (var i = 0; i < _ab.length - 1; i++) {
							var _ad = _ab[i];
							var _ae = _slef.getLevel(_ad[_a2.idField]);
							var tr = _a2.finder.getTr(target, _ad[_a2.idField]);
							var cc = tr.next()
									.find("tr.datagrid-row td[field=\""
											+ _a2.treeField
											+ "\"] div.datagrid-cell");
							cc.find("span:eq(" + (_ae - 1) + ")")
									.addClass("tree-line");
						}
					};
					function _a4(_af) {
						var tr = _a2.finder.getTr(target, _af[_a2.idField]);
						var _b0 = tr.find("td[field=\"" + _a2.treeField
								+ "\"] div.datagrid-cell");
						return _b0;
					};
				}
			});

			TreeGrid.parseOptions = function(treeGridDom) {
				return $.extend({}, DataGrid.parseOptions(treeGridDom), $.fn
								.parseOptions(treeGridDom, ["treeField", {
													animate : "boolean"
												}]));
			};

			var TreeGridView = DataGrid.GridView.extend({
				initialize : function(treeGrid) {
					this.treeGrid = treeGrid;
				},
				render : function(_c7, _c8) {
					var target = this.treeGrid.element;
					var _self = this;
					var opts = $.data(target, "treegrid").options;
					var columns = this.treeGrid.getColumnFields(_c8);
					var rowIdPrefix = $.data(target, "datagrid").rowIdPrefix;
					if (_c8) {
						if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))) {
							return;
						}
					}
					// var _self = this;
					if (this.treeNodes && this.treeNodes.length) {
						var _cd = _ce(_c8, this.treeLevel, this.treeNodes);
						$(_c7).append(_cd.join(""));
					}
					function _ce(_cf, _d0, _d1) {
						var _d2 = _self.treeGrid
								.getParent(_d1[0][opts.idField]);
						var _d3 = (_d2 ? _d2.children.length : _self.treeGrid
								.getRoots())
								- _d1.length;
						var _d4 = ["<table class=\"datagrid-btable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
						for (var i = 0; i < _d1.length; i++) {
							var row = _d1[i];
							if (opts.leafField) {
								if (row[opts.leafField] == true
										|| row[opts.leafField] == "1") {
									row.state = "open";
								} else {
									row.state = "closed";

								}
							} else {
								if (opts.state) {
									row.state = opts.state;
								} else if (row.state != "open"
										&& row.state != "closed") {
									row.state = "closed";
								}
							}

							var css = opts.rowStyler ? opts.rowStyler.call(
									target, row) : "";
							var _d5 = "";
							var _d6 = "";
							if (typeof css == "string") {
								_d6 = css;
							} else {
								if (css) {
									_d5 = css["class"] || "";
									_d6 = css["style"] || "";
								}
							}
							var cls = "class=\"datagrid-row "
									+ (_d3++ % 2 && opts.striped
											? "datagrid-row-alt "
											: " ") + _d5 + "\"";
							var _d7 = _d6 ? "style=\"" + _d6 + "\"" : "";
							var _d8 = rowIdPrefix + "-" + (_cf ? 1 : 2) + "-"
									+ row[opts.idField];
							_d4.push("<tr id=\"" + _d8 + "\" node-id=\""
									+ row[opts.idField] + "\" " + cls + " "
									+ _d7 + ">");
							_d4 = _d4.concat(_self.renderRow.call(_self,
									columns, _cf, _d0, row));
							_d4.push("</tr>");
							if (row.children && row.children.length) {
								var tt = _ce(_cf, _d0 + 1, row.children);
								var v = row.state == "closed"
										? "none"
										: "block";
								_d4
										.push("<tr class=\"treegrid-tr-tree\"><td style=\"border:0px\" colspan="
												+ (columns.length + (opts.rownumbers
														? 1
														: 0))
												+ "><div style=\"display:"
												+ v
												+ "\">");
								_d4 = _d4.concat(tt);
								_d4.push("</div></td></tr>");
							}
						}
						_d4.push("</tbody></table>");
						return _d4;
					};
				},
				renderFooter : function(_da, _db) {
					var target = this.treeGrid.element;
					var _dc = $.data(target, "treegrid").options;
					var _dd = $.data(target, "treegrid").footer || [];
					var _de = this.treeGrid.getColumnFields(_db);
					var _df = ["<table class=\"datagrid-ftable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tbody>"];
					for (var i = 0; i < _dd.length; i++) {
						var row = _dd[i];
						row[_dc.idField] = row[_dc.idField]
								|| ("foot-row-id" + i);
						_df.push("<tr class=\"datagrid-row\" node-id=\""
								+ row[_dc.idField] + "\">");
						_df.push(this.renderRow.call(this, _de, _db, 0, row));
						_df.push("</tr>");
					}
					_df.push("</tbody></table>");
					$(_da).html(_df.join(""));
				},
				renderRow : function(_ff, _100, _101, row) {
					var target = this.treeGrid.element;
					 var treeGridObject = $.data(target, "treegrid");
					var opts = treeGridObject.options;
					var cc = [];
					if (_100 && opts.rownumbers) {
						cc.push("<td class=\"datagrid-td-rownumber\"><div class=\"datagrid-cell-rownumber\">0</div></td>");
					}
					for (var i = 0; i < _ff.length; i++) {
						var _103 = _ff[i];
						var col = $(target).treegrid("getColumnOption", _103);
						if (col) {
							var css = col.styler
									? (col.styler(row[_103], row) || "")
									: "";
							var cs = this.getStyleValue(css);
							var cls = cs.c ? "class=\"" + cs.c + "\"" : "";
							var _104 = col.hidden ? "style=\"display:none;"
									+ cs.s + "\"" : (cs.s ? "style=\"" + cs.s
									+ "\"" : "");
							cc.push("<td field=\"" + _103 + "\" " + cls + " "
									+ _104 + ">");
							var _104 = "";
							if (!col.checkbox&&_103 != opts.treeField) {
								if (col.align) {
									_104 += "text-align:" + col.align + ";";
								}
								if (!opts.nowrap) {
									_104 += "white-space:normal;height:auto;";
								} else {
									if (opts.autoRowHeight) {
										_104 += "height:auto;";
									}
								}
							}
							cc.push("<div style=\"" + _104 + "\" ");
							if (col.checkbox) {
								cc.push("class=\"datagrid-cell-check ");
							} else {
								cc.push("class=\"datagrid-cell "
										+ col.cellClass);
							}
							cc.push("\">");
							
							if (col.buttons){
								for (var j=0;j<col.buttons.length;j++){
									var btn=col.buttons[j],disabled="";
								
								  if($.isFunction(btn.disabled)){
						                    if(btn.disabled(rowData, rowIndex)){
						                        disabled = ' disabled';
						                    }
						                }else if(btn.disabled === true){
						                    disabled = ' disabled';
						                }
									cc.push( '<a id="'
									+ btn.id
									+ '" class="rowBtn'
									+ disabled
									+ '" tab-index="-1" href="javascript:void(0)">'
									+ '<i class="' + btn.iconCls + '" title="'
									+ btn.text + '"></i>' + '</a>');
									
								   
								}
								
							}
							if (col.checkbox) {
								if (row.checked) {
									cc
											.push("<input type=\"checkbox\" checked=\"checked\"");
								} else {
									cc.push("<input type=\"checkbox\"");
								}
								cc.push(" name=\""
										+ _103
										+ "\" value=\""
										+ (row[_103] != undefined
												? row[_103]
												: "") + "\">");
							} else {
								var val = null;
								if (col.formatter) {
									val = col.formatter(row[_103], row);
								} else {
									val = row[_103];
								}
								if (_103 == opts.treeField) {
									for (var j = 0; j < _101; j++) {
										cc
												.push("<span class=\"tree-indent\"></span>");
									}
									if (row.state == "closed") {
										cc
												.push("<span class=\"tree-hit tree-collapsed\"></span>");
										cc
												.push("<span class=\"tree-icon tree-folder "
														+ (row.iconCls
																? row.iconCls
																: "")
														+ "\"></span>");
									} else {
										if (row.children && row.children.length) {
											cc
													.push("<span class=\"tree-hit tree-expanded\"></span>");
											cc
													.push("<span class=\"tree-icon tree-folder tree-folder-open "
															+ (row.iconCls
																	? row.iconCls
																	: "")
															+ "\"></span>");
										} else {
											cc
													.push("<span class=\"tree-indent\"></span>");
											cc
													.push("<span class=\"tree-icon tree-file "
															+ (row.iconCls
																	? row.iconCls
																	: "")
															+ "\"></span>");
										}
									}
									if (this.hasCheckbox( row)) {
										var flag = 0;
										var crow = treeUtils.getArrayItem(
												treeGridObject.checkedRows, opts.idField,
												row[opts.idField]);
										if (crow) {
											flag = crow.checkState == "checked"
													? 1
													: 2;
											row.checkState = crow.checkState;
											row.checked = crow.checked;
											treeUtils.addArrayItem(
													treeGridObject.checkedRows,
													opts.idField, row);
										} else {
											var prow =treeUtils
													.getArrayItem(
															treeGridObject.checkedRows,
															opts.idField,
															row._parentId);
											if (prow
													&& prow.checkState == "checked"
													&& opts.cascadeCheck) {
												flag = 1;
												row.checked = true;
												treeUtils.addArrayItem(
														treeGridObject.checkedRows,
														opts.idField, row);
											} else {
												if (row.checked) {
													treeUtils.addArrayItem(
															treeGridObject.tmpIds,
															row[opts.idField]);
												}
											}
											row.checkState = flag
													? "checked"
													: "unchecked";
										}
										cc
												.push("<span class=\"tree-checkbox tree-checkbox"
														+ flag + "\"></span>");
									} else {
										row.checkState = undefined;
										row.checked = undefined;
									}
									cc.push("<span class=\"tree-title\">" + val
											+ "</span>");
								} else {
									cc.push(val);
								}
							}
							cc.push("</div>");
							cc.push("</td>");
						}
					}
					return cc.join("");
				},
				hasCheckbox : function(row) {
					var target = this.treeGrid.element;
					var opts = $.data(target, "treegrid").options;
					if (opts.checkbox) {
						if ($.isFunction(opts.checkbox)) {
							if (opts.checkbox.call(_105, row)) {
								return true;
							} else {
								return false;
							}
						} else {
							if (opts.onlyLeafCheck) {
								if (row.state == "open"
										&& !(row.children && row.children.length)) {
									return true;
								}
							} else {
								return true;
							}
						}
					}
					return false;
				},

				refreshRow : function(_e9, id) {
					this.updateRow.call(this, _e9, id, {});
				},
				updateRow : function(_ea, id, row) {
					var _eb = $.data(_ea, "treegrid").options;
					var _ec = $(_ea).treegrid("find", id);
					$.extend(_ec, row);
					var _ed = $(_ea).treegrid("getLevel", id) - 1;
					var _ee = _eb.rowStyler ? _eb.rowStyler.call(_ea, _ec) : "";
					var _ef = $.data(_ea, "datagrid").rowIdPrefix;
					var _f0 = _ec[_eb.idField];
					function _f1(_f2) {
						var _f3 = $(_ea).treegrid("getColumnFields", _f2);
						var tr = _eb.finder.getTr(_ea, id, "body",
								(_f2 ? 1 : 2));
						var _f4 = tr.find("div.datagrid-cell-rownumber").html();
						var _f5 = tr
								.find("div.datagrid-cell-check input[type=checkbox]")
								.is(":checked");
						tr.html(this.renderRow(_ea, _f3, _f2, _ed, _ec));
						tr.attr("style", _ee || "");
						tr.find("div.datagrid-cell-rownumber").html(_f4);
						if (_f5) {
							tr
									.find("div.datagrid-cell-check input[type=checkbox]")
									._propAttr("checked", true);
						}
						if (_f0 != id) {
							tr
									.attr("id", _ef + "-" + (_f2 ? 1 : 2) + "-"
													+ _f0);
							tr.attr("node-id", _f0);
						}
					};
					_f1.call(this, true);
					_f1.call(this, false);
					$(_ea).treegrid("fixRowHeight", id);
				},
				deleteRow : function(_f6, id) {
					var _f7 = $.data(_f6, "treegrid").options;
					var tr = _f7.finder.getTr(_f6, id);
					tr.next("tr.treegrid-tr-tree").remove();
					tr.remove();
					var _f8 = del(id);
					if (_f8) {
						if (_f8.children.length == 0) {
							tr = _f7.finder.getTr(_f6, _f8[_f7.idField]);
							tr.next("tr.treegrid-tr-tree").remove();
							var _f9 = tr.children("td[field=\"" + _f7.treeField
									+ "\"]").children("div.datagrid-cell");
							_f9.find(".tree-icon").removeClass("tree-folder")
									.addClass("tree-file");
							_f9.find(".tree-hit").remove();
							$("<span class=\"tree-indent\"></span>")
									.prependTo(_f9);
						}
					}
					function del(id) {
						var cc;
						var _fa = $(_f6).treegrid("getParent", id);
						if (_fa) {
							cc = _fa.children;
						} else {
							cc = $(_f6).treegrid("getData");
						}
						for (var i = 0; i < cc.length; i++) {
							if (cc[i][_f7.idField] == id) {
								cc.splice(i, 1);
								break;
							}
						}
						return _fa;
					};
				},
				onBeforeRender : function(_fc, _fd) {
					var target = this.treeGrid.element;
					if ($.isArray(_fc)) {
						_fd = {
							total : _fc.length,
							rows : _fc
						};
						_fc = null;
					}
					if (!_fd) {
						return false;
					}
					var _fe = $.data(target, "treegrid");
					var _ff = _fe.options;
					if (_fd.length == undefined) {
						if (_fd.footer) {
							_fe.footer = _fd.footer;
						}
						if (_fd.total) {
							_fe.total = _fd.total;
						}
						_fd = this.transfer(_fc, _fd.rows);
					} else {
						function _100(_101, _102) {
							for (var i = 0; i < _101.length; i++) {
								var row = _101[i];
								row._parentId = _102;
								if (row.children && row.children.length) {
									_100(row.children, row[_ff.idField]);
								}
							}
						};
						_100(_fd, _fc);
					}
					var node = this.treeGrid.find(_fc);
					if (node) {
						if (node.children) {
							node.children = node.children.concat(_fd);
						} else {
							node.children = _fd;
						}
					} else {
						_fe.data = _fe.data.concat(_fd);
					}
					this.sort(_fd);
					this.treeNodes = _fd;
					this.treeLevel = this.treeGrid.getLevel(_fc);
				},
				onAfterRender : function() {
					var opts = $.data(this.treeGrid.element, "datagrid").options;
					if (opts.showFooter) {
						var _221 = this.grid.getPanel()
								.find("div.datagrid-footer");
						_221
								.find("div.datagrid-cell-rownumber,div.datagrid-cell-check")
								.css("visibility", "hidden");
					}
				},
				sort : function(data) {
					var target = this.treeGrid.element;
					var opts = $.data(target, "treegrid").options;
					if (!opts.remoteSort && opts.sortName) {
						var sortNames = opts.sortName.split(",");
						var sortOrders = opts.sortOrder.split(",");
						dataSort(data);
					}
					function dataSort(rows) {
						rows.sort(function(r1, r2) {
									var r = 0;
									for (var i = 0; i < sortNames.length; i++) {
										var sn = sortNames[i];
										var so = sortOrders[i];
										var col = $(target).treegrid(
												"getColumnOption", sn);
										var _107 = col.sorter
												|| function(a, b) {
													return a == b ? 0 : (a > b
															? 1
															: -1);
												};
										r = _107(r1[sn], r2[sn])
												* (so == "asc" ? 1 : -1);
										if (r != 0) {
											return r;
										}
									}
									return r;
								});
						for (var i = 0; i < rows.length; i++) {
							var _108 = rows[i].children;
							if (_108 && _108.length) {
								dataSort(_108);
							}
						}
					};
				},
				transfer : function(_10a, data) {
					var target = this.treeGrid.element;
					var opts = $.data(target, "treegrid").options;
					var rows = [];
					for (var i = 0; i < data.length; i++) {
						rows.push(data[i]);
					}
					var _10b = [];
					for (var i = 0; i < rows.length; i++) {
						var row = rows[i];
						if (!_10a) {
							if (!row._parentId) {
								_10b.push(row);
								rows.splice(i, 1);
								i--;
							}
						} else {
							if (row._parentId == _10a) {
								_10b.push(row);
								rows.splice(i, 1);
								i--;
							}
						}
					}
					var toDo = [];
					for (var i = 0; i < _10b.length; i++) {
						toDo.push(_10b[i]);
					}
					while (toDo.length) {
						var node = toDo.shift();
						for (var i = 0; i < rows.length; i++) {
							var row = rows[i];
							if (row._parentId == node[opts.idField]) {
								if (node.children) {
									node.children.push(row);
								} else {
									node.children = [row];
								}
								toDo.push(row);
								rows.splice(i, 1);
								i--;
							}
						}
					}
					return _10b;
				}

			});
			
		    function mouseEvent(isOver) {
		        return function(e) {
		            DataGrid.defaults.rowEvents[isOver ? "mouseover": "mouseout"](e);
		            var tt = $(e.target);
		            var fn = isOver ? "addClass": "removeClass";
		            if (tt.hasClass("tree-hit")) {
		                tt.hasClass("tree-expanded") ? tt[fn]("tree-expanded-hover") : tt[fn]("tree-collapsed-hover");
		            }
		        };
		    };
		    
		    function getTreeGridDOM(t) {
		        return $(t).closest("div.datagrid-view").children(".datagrid-f")[0];
		    };
		    function rowClickEvent(e) {
		        var tt = $(e.target);
		        var tr = tt.closest("tr.datagrid-row");
		        if (!tr.length || !tr.parent().length) {
		            return;
		        } 
		        var nodeId = tr.attr("node-id");
		        var treeGridDOM = getTreeGridDOM(tr);
		        var treeGridClass =  $.data(treeGridDOM, "treeGridObj"); 
		        if (tt.hasClass("tree-hit")) {
		        	treeGridClass.toggle(nodeId);
		        } else {
		            if (tt.hasClass("tree-checkbox")) {
		            	treeGridClass.changeCheckNode(nodeId);
		            } else {
		                var options = $(treeGridDOM).treegrid("options");
		                if (!tt.parent().hasClass("datagrid-cell-check") && !options.singleSelect && e.shiftKey) {
		                    var children = $(treeGridDOM).treegrid("getChildren");
		                    var _2c = treeUtils.indexOfArray(children, options.idField, options.lastSelectedIndex);
		                    var _2d = treeUtils.indexOfArray(children, options.idField, nodeId);
		                    var _2e = Math.min(Math.max(_2c, 0), _2d);
		                    var to = Math.max(_2c, _2d);
		                    var row = children[_2d];
		                    var td = tt.closest("td[field]", tr);
		                    if (td.length) {
		                        var _2f = td.attr("field");
		                        options.onClickCell.call(treeGridDOM, nodeId, _2f, row[_2f]);
		                    }
		                    $(treeGridDOM).treegrid("clearSelections");
		                    for (var i = _2e; i <= to; i++) {
		                        $(treeGridDOM).treegrid("selectRow", children[i][options.idField]);
		                    }
		                  
		                    treeGridClass.trigger("onClickRow",row)
		                   // options.onClickRow.call(treeGridDOM, row);
		                } else {
		                    DataGrid.defaults.rowEvents.click(e);
		                }
		            }
		        }
		    };
		    
			TreeGrid.defaults = $.extend({}, DataGrid.defaults, {
						treeField : null,
						lines : false,
						animate : false,
						singleSelect : true,
						rootId : '-1',
						asyTree : false,
						leafField : '',
						checkboxField : '',
						checkbox: false,
        				cascadeCheck: true,
        				onlyLeafCheck: false,
						onBeforeCheckNode: function(row, _133) {},
					    onCheckNode: function(row, _134) {},
						rowEvents: $.extend({},
							        DataGrid.defaults.rowEvents, {
							            mouseover: mouseEvent(true),
							            mouseout: mouseEvent(false),
							            click: rowClickEvent
							        }),
						// view : _c5,
						loader : function(queryParams, success, error) {
							var opts = this.options();
							var _self = this;
							if (!opts.url) {
								return false;
							}
							if (!error) {
								var ajaxError = error;
								error = function() {
									ajaxError.apply(this, arguments);
								}
							}
							AppAjax.ajaxCall({
										type : opts.method,
										url : opts.url,
										data : queryParams,
										dataType : "json",
										success : function(data) {
											var data = data.data || data
											data = _self.listToTreeData(data);
											success(data);
										},
										error : error
									});
						},
						loadFilter : function(data, _10f) {
							return data;
						}

					});

			$.fn.treegrid = function(options, param) {
				// console.log(arguments)
				var methodReturn;

				options = options || {};

				var $set = this.each(function() {
							var $this = $(this);
							var state = $.data(this, 'treegrid');
							var treeGridObj = $this.data('treeGridObj');
							if (state) {
								if (typeof options === 'object') {
									var opts = $.extend(state.options, options);
								}
							} else {
								options.element = this;;
								treeGridObj = new TreeGrid(this, options);
								$this.data('treeGridObj', treeGridObj);
								// data._init(this);
							}
							if (typeof options === 'string')
								methodReturn = treeGridObj[options](param);
						});
				return (methodReturn === undefined) ? $set : methodReturn;
			};
			return TreeGrid;
		}

);
/*! HTML5 Shiv vpre3.6 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
  Uncompressed source: https://github.com/aFarkas/html5shiv  */
(function(a,b){function h(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x<style>"+b+"</style>",d.insertBefore(c.lastChild,d.firstChild)}function i(){var a=l.elements;return typeof a=="string"?a.split(" "):a}function j(a){var b={},c=a.createElement,f=a.createDocumentFragment,g=f();a.createElement=function(a){if(!l.shivMethods)return c(a);var f;return b[a]?f=b[a].cloneNode():e.test(a)?f=(b[a]=c(a)).cloneNode():f=c(a),f.canHaveChildren&&!d.test(a)?g.appendChild(f):f},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/\w+/g,function(a){return c(a),g.createElement(a),'c("'+a+'")'})+");return n}")(l,g)}function k(a){var b;return a.documentShived?a:(l.shivCSS&&!f&&(b=!!h(a,"article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}audio{display:none}canvas,video{display:inline-block;*display:inline;*zoom:1}[hidden]{display:none}audio[controls]{display:inline-block;*display:inline;*zoom:1}mark{background:#FF0;color:#000}")),g||(b=!j(a)),b&&(a.documentShived=b),a)}var c=a.html5||{},d=/^<|^(?:button|form|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^<|^(?:a|b|button|code|div|fieldset|form|h1|h2|h3|h4|h5|h6|i|iframe|img|input|label|li|link|ol|option|p|param|q|script|select|span|strong|style|table|tbody|td|textarea|tfoot|th|thead|tr|ul)$/i,f,g;(function(){var c=b.createElement("a");c.innerHTML="<xyz></xyz>",f="hidden"in c,f&&typeof injectElementWithStyles=="function"&&injectElementWithStyles("#modernizr{}",function(b){b.hidden=!0,f=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle).display=="none"}),g=c.childNodes.length==1||function(){try{b.createElement("a")}catch(a){return!0}var c=b.createDocumentFragment();return typeof c.cloneNode=="undefined"||typeof c.createDocumentFragment=="undefined"||typeof c.createElement=="undefined"}()})();var l={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:k};a.html5=l,k(b)})(this,document);
define("base/html5", function(){});

/*!
 * Ext JS Library 3.2.1
 * Copyright(c) 2006-2010 Ext JS, Inc.
 * licensing@extjs.com
 * http://www.extjs.com/license
 */
/**
 * @class Template
 * <p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
 * for greater performance.</p>
 * <p>For example usage {@link #Template see the constructor}.</p>
 *
 * @constructor
 * An instance of this class may be created by passing to the constructor either
 * a single argument, or multiple arguments:
 * <div class="mdetail-params"><ul>
 * <li><b>single argument</b> : String/Array
 * <div class="sub-desc">
 * The single argument may be either a String or an Array:<ul>
 * <li><tt>String</tt> : </li><pre><code>
var t = new Template("&lt;div>Hello {0}.&lt;/div>");
t.{@link #append}('some-element', ['foo']);
 * </code></pre>
 * <li><tt>Array</tt> : </li>
 * An Array will be combined with <code>join('')</code>.
<pre><code>
var t = new Template([
    '&lt;div name="{id}"&gt;',
        '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
    '&lt;/div&gt;',
]);
t.{@link #compile}();
t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
</code></pre>
 * </ul></div></li>
 * <li><b>multiple arguments</b> : String, Object, Array, ...
 * <div class="sub-desc">
 * Multiple arguments will be combined with <code>join('')</code>.
 * <pre><code>
var t = new Template(
    '&lt;div name="{id}"&gt;',
        '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
    '&lt;/div&gt;',
    // a configuration object:
    {
        compiled: true,      // {@link #compile} immediately
        disableFormats: true // See Notes below.
    }
);
 * </code></pre>
 * <p><b>Notes</b>:</p>
 * <div class="mdetail-params"><ul>
 * <li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
 * <li>For a list of available format functions, see {@link util.Format}.</li>
 * <li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
 * when no formatting is required.</li>
 * </ul></div>
 * </div></li>
 * </ul></div>
 * @param {Mixed} config
 */
Template = function(html){
    var me = this,
        a = arguments,
        buf = [],
        v;

    for(var i = 0, len = a.length; i < len; i++){
		v = a[i];
		if(typeof v == 'object'){
			apply(me, v);
		} else {
			buf.push(v);
		}
	};
	html = buf.join('');

    /**@private*/
    me.html = html;
    /**
     * @cfg {Boolean} compiled Specify <tt>true</tt> to compile the template
     * immediately (see <code>{@link #compile}</code>).
     * Defaults to <tt>false</tt>.
     */
    if (me.compiled) {
        me.compile();
    }
};
Template.prototype = {
    /**
     * @cfg {RegExp} re The regular expression used to match template variables.
     * Defaults to:<pre><code>
     * re : /\{([\w-]+)\}/g                                     // for Ext Core
     * re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g      // for Ext JS
     * </code></pre>
     */
    re : /\{([\w-]+)\}/g,
    /**
     * See <code>{@link #re}</code>.
     * @type RegExp
     * @property re
     */

    /**
     * Returns an HTML fragment of this template with the specified <code>values</code> applied.
     * @param {Object/Array} values
     * The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
     * or an object (i.e. <code>{foo: 'bar'}</code>).
     * @return {String} The HTML fragment
     */
    applyTemplate : function(values){
        var me = this;

        return me.compiled ?
                me.compiled(values) :
                me.html.replace(me.re, function(m, name){
                    return values[name] !== undefined ? values[name] : "";
                });
    },

    /**
     * Sets the HTML used as the template and optionally compiles it.
     * @param {String} html
     * @param {Boolean} compile (optional) True to compile the template (defaults to undefined)
     * @return {Template} this
     */
    set : function(html, compile){
        var me = this;
        me.html = html;
        me.compiled = null;
        return compile ? me.compile() : me;
    },

    /**
     * Compiles the template into an internal function, eliminating the RegEx overhead.
     * @return {Template} this
     */
    compile : function(){
        var me = this,
            sep = isGecko ? "+" : ",";

        function fn(m, name){
            name = "values['" + name + "']";
            return "'"+ sep + '(' + name + " == undefined ? '' : " + name + ')' + sep + "'";
        }

        eval("this.compiled = function(values){ return " + (isGecko ? "'" : "['") +
             me.html.replace(/\\/g, '\\\\').replace(/(\r\n|\n)/g, '\\n').replace(/'/g, "\\'").replace(this.re, fn) +
             (isGecko ?  "';};" : "'].join('');};"));
        return me;
    },

  

    /**
     * Applies the supplied values to the template and overwrites the content of el with the new node(s).
     * @param {Mixed} el The context element
     * @param {Object/Array} values The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})
     * @param {Boolean} returnElement (optional) true to return a Element (defaults to undefined)
     * @return {HTMLElement/Element} The new node or Element
     */
    overwrite : function(el, values, returnElement){
        el = getDom(el);
        el.innerHTML = this.applyTemplate(values);
        return returnElement ? get(el.firstChild, true) : el.firstChild;
    }
};
/**
 * Alias for {@link #applyTemplate}
 * Returns an HTML fragment of this template with the specified <code>values</code> applied.
 * @param {Object/Array} values
 * The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
 * or an object (i.e. <code>{foo: 'bar'}</code>).
 * @return {String} The HTML fragment
 * @member Template
 * @method apply
 */
Template.prototype.apply = Template.prototype.applyTemplate;

/**
 * Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.
 * @param {String/HTMLElement} el A DOM element or its id
 * @param {Object} config A configuration object
 * @return {Template} The created template
 * @static
 */
Template.from = function(el, config){
    el = getDom(el);
    return new Template(el.value || el.innerHTML, config || '');
};

define("base/template", function(){});


define('bs-http-plugin/bs-ca-auth',['bs-http-plugin/base-pluginvoke'], function(BasePluginvoke,Socket) {

    /**
     * @desc ca认证控件 使用请引入 'bs-http-plugin/bs-ca-auth'
     * @class
     * @classdesc
     * @name bs-ca-auth
     * @extends base-pluginvoke
     */
    var CaAuth = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-ca-auth
         * @instance
         * @example
         * module:'ca'
         */
        module:'ca',
        /**
         * @description 自动生成函数列表
         */
        functions:[
            /**
             * @function doSign
             * @instance
             * @memberOf bs-ca-auth
             * @description CA签名验证
             * @param {object} options
             * @param {string} options.signText 待签名串
             * @param {string} options.provider 签名供应者 'Jit'、'Kinsec'、'LNJH'
             * @returns {object}
             *
             * @example
             * var instance = CaAuth.getInstance();
             * instance.doSign({
			 * 	signText:'xxxx',
			 * 	provider:'Jit'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             *
             *
             * //会自动获取后台配置项，前提有配置全局变量     window._caProvider
             * var instance = CaAuth.getInstance();
             * instance.doSign('xxxx').done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doSign',

            'initParams'
        ],
        doSign:function (data) {
            if($.type(data)=='string'){
                data ={
                    signText:data,
                }
            }
            if($.type(data.provider)!='string'){
                data.provider = $A.getCaProvider();
            }
            if($.type(data.provider)!='string'){
                return $.Deferred().reject('CA验证提供商为空');
            }
            if($.type(data.cryptoType)!='string'){
                data.cryptoType = $A.getCaCryptoType();
            }
            //用户
            return this.operate({
                data:[data],
                func:'doSign'
            })
        },
        validateSN:function (data) {
            var cardInfo = $A.getCaInfo();
            if(!cardInfo||!cardInfo.caNo){
                var msg = "Ukey信息与当前ca产商不一致，请联系管理员！";
                return $.Deferred().reject(msg);
            }
            if($.type(data)=='string'){
                data ={
                    signText:data,
                }
            }
			data.certNo = cardInfo.caNo;
            return this.doSign(data)
        },
        Statics:{
            /**
             * @description 获取控件实例
             * @static
             * @memberOf bs-ca-auth
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @example
             *         var instantce = CaAuth.getInstance({
             *          config:{
             *              appId:'123'
             *          }
             *         });
             */
            getInstance:function(op){
                if (!this.instance){
                    this.instance =new CaAuth(op);
                }
                return this.instance;
            }
        }
    });
    return CaAuth;
});
define('bs-http-plugin/bs-doccamera',['bs-http-plugin/base-pluginvoke',"bs-http-plugin/util/uuid"], function (BasePluginvoke,uuid) {

    /**
     * @desc 高拍仪 使用请引入 'bs-http-plugin/bs-doccamera'
     * @class
     * @classdesc
     * @name bs-doccamera
     * @extends base-pluginvoke
     */
    var Doccamera = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-doccamera
         * @instance
         * @example
         * module:'Doccamera'
         */
        module: 'Doccamera',
        /**
         * @description 自动生成函数列表
         */
        functions: [
            'TakePhotoes',
            'GetImageList',
            'GetImageListWithoutBase64',
            'GetImages',
            'ClearImages'
        ],
        getPicture: function (id,method) {
            var me = this;
            var dfd = $.Deferred();
            var fn = function () {
                me[method]().then(function (data) {
                    if (data[id]) {
                        dfd.resolve(data[id]);
                    }
                    if (data[id] || data['state'] == 0) {
                        return
                    }
                    setTimeout(function () {
                        fn();
                    }, 2500);
                }).fail(function () {
                    dfd.rejectWith(dfd, arguments);
                })
            };
            fn();
            return dfd;
        },
        /**
         * @function takePicture
         * @instance
         * @memberOf bs-doccamera
         * @description 拍照
         * @returns {object}  $.Deferred().done(function(data){});
         * <pre>操作成功后 data数据结构 {
         *      success:true|false,
         *      message:'xxx',
         *      pictures:[
         *          {
         *              filename:'文件名',
         *              picture:'base64',
         *              type:'图片类型后缀'
         *          }
         *      ]
         * }
         * </pre>
         *
         * @example
         * var instance = CaAuth.getInstance();
         * instance.takePicture().done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
         */
        takePicture: function () {
            var me = this;
            var id = uuid.v4().replace(/-/g, '');
            return me.TakePhotoes({id:id}).then(function () {
                return me.getPicture(id,'GetImageList');
            })
        },

        /**
         * @function bufferTakePicture
         * @instance
         * @memberOf bs-doccamera
         * @description 高拍仪所拍摄拍的照片预存硬盘上，再读取
         * @returns {object}  $.Deferred().done(function(data){});
         * <pre>操作成功后 data数据结构 {
         *      success:true|false,
         *      message:'xxx',
         *      pictures:[
         *          {
         *              filename:'文件名',
         *              picture:'base64',
         *              type:'图片类型后缀'
         *          }
         *      ]
         * }
         * </pre>
         *
         * @example
         * var instance = CaAuth.getInstance();
         * instance.bufferTakePicture().done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
         */
        bufferTakePicture:function(){
            var dfd = $.Deferred();
            var me = this;
            var id = uuid.v4().replace(/-/g, '');
            return me.TakePhotoes({id:id}).then(function () {
                return me.getPicture(id,'GetImageListWithoutBase64');
            }).then(function (data) {
                return me.getImagesAndClean(id,data);
            })
        },
        getImgSize:2,
        getImagesAndClean:function (id,picInfo) {
            var me = this;
            var dfd = $.Deferred();
            var pictures = picInfo['pictures'];
            if(!$.isArray(pictures)){
                dfd.rejectWith(this,['picture is not array!']);
            }
            pictures = $(pictures).map(function (index,item) {
                return item['filename']
            }).toArray();
            var result = {};
            var respics = [];
            var fn = function () {
                if(pictures.length==0){
                    dfd.resolve(result);
                    me.ClearImages();
                    return;
                }
                me.GetImages({pictures:pictures.splice(0,me.getImgSize)}).then(function (data) {
					result = data[id];
                    respics = respics.concat(result['pictures']);
                    result['pictures'] = respics;
                    fn();
                    if (data[id] || data['state'] == 0) {
                        return
                    }
                }).fail(function () {
                    dfd.rejectWith(dfd, arguments);
                })
            }
            fn();
            return dfd;
        },
        Statics: {
            /**
             * @description 获取控件实例
             * @static
             * @memberOf bs-doccamera
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @example
             *         var instantce = Doccamera.getInstance({
             *          config:{
             *              appId:'123'
             *          }
             *         });
             */
            getInstance: function (op) {
                if (!this.instance) {
                    this.instance = new Doccamera(op);
                }
                return this.instance;
            }
        }
    });
    return Doccamera;
});

define('bs-http-plugin/bs-pd',['bs-http-plugin/base-pluginvoke'], function(BasePluginvoke,Socket) {

    /**
     * @desc  PD刷卡 使用请引入 'bs-http-plugin/bs-pd'
     * @class
     * @classdesc
     * @name bs-pd
     * @extends base-pluginvoke
     */
    var Pd = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-pd
         * @instance
         * @example
         * module:'print'
         */
        module:'pd',
        /**
         * @description 自动生成函数列表
         */
        functions:[
            /**
             * @function doPd
             * @instance
             * @memberOf bs-pd
             * @description CA签名验证
             * @param {object} options
             * @returns {string} options.aUrl
             * @returns {string} options.aPdaName
             * @returns {string} options.aOrgCode
             * @returns {string} options.aPdId
             * @returns {string} options.aPdCode
             *
             * @example
             * var instance = Pd.getInstance();
             * instance.expPd({
             * aUrl: '',
             * aPdaName: '',
             * aOrgCode: '',
             * aPdId: '',
             * aPdCode: ''
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'expPd',


            /**
             * @function impPd
             * @instance
             * @memberOf bs-pd
             * @description CA签名验证
             * @returns {string} options.aUrl
             * @returns {string} options.aPdaName
             * @returns {string} options.aOrgCode
             * @returns {object}
             *
             * @example
             * var instance = Pd.getInstance();
             * instance.impPd({
             * aUrl: '',
             * aPdaName: '',
             * aOrgCode: '',
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'impPd'
        ],
        Statics:{
            /**
             * @static
             * @memberOf bs-pd
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @example
             *         var instantce = Pd.getInstance({
             *          config:{
             *              appId:'123'
             *          }
             *         });
             */
            getInstance:function(op){
                if (!this.instance){
                    this.instance =new Pd(op);
                }
                return this.instance;
            }
        }
    });
    return Pd;
});

define('bs-http-plugin/bs-pos',['bs-http-plugin/base-pluginvoke'], function(BasePluginvoke,Socket) {

    /**
     * @desc  POS刷卡 使用请引入 'bs-http-plugin/bs-pos'
     * @class
     * @classdesc
     * @name bs-pos
     * @extends base-pluginvoke
     */
    var Pos = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-pos
         * @instance
         * @example
         * module:'print'
         */
        module:'pos',
        /**
         * @description 自动生成函数列表
         */
        functions:[
            /**
             * @function doPos
             * @instance
             * @memberOf bs-pos
             * @description CA签名验证
             * @param {object} options
             * @param {string} options.totalAmt 金额
             * @param {string} options.posNo POS机号
             * @param {string} options.posPNo POS员工号
             * @param {string} options.transDate 交易日期
             * @param {string} options.transNo 交易号
             * @param {string} options.transVoucher 交易凭证
             * @param {string} options.letterNo 缴款码
             * @param {string} options.transType 交易类型
             * @param {string} options.account 账号
             * @returns {object}
             *
             * @example
             * var instance = Pos.getInstance();
             * instance.doPos({
			 * 	totalAmt:'xxxx',
			 * 	posNo:'xxxx',
			 * 	posPNo:'xxxx',
			 * 	transDate:'xxxx',
			 * 	transNo:'xxxx',
			 * 	transVoucher:'xxxx',
			 * 	letterNo:'xxxx',
			 * 	transType:'xxxx',
			 * 	account:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'doPos',

            'initParams'
        ],
        Statics:{
            /**
             * @description 获取控件实例
             * @static
             * @memberOf bs-pos
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @example
             *         var instantce = Pos.getInstance({
             *          config:{
             *              appId:'123'
             *          }
             *         });
             */
            getInstance:function(op){
                if (!this.instance){
                    this.instance =new Pos(op);
                }
                return this.instance;
            }
        }
    });
    return Pos;
});

define('bs-http-plugin/bs-upload',['bs-http-plugin/base-pluginvoke',
    'app/widgets/grid/app-grid'], function(BasePluginvoke) {

    /**
     * @desc 文件上传控件 使用请引入 'bs-http-plugin/bs-upload'
     * @class
     * @classdesc
     * @name bs-upload
     * @extends base-pluginvoke
     */
    var Upload = BasePluginvoke.extend({
        /**
         * @description dll名称
         * @memberOf bs-upload
         * @instance
         * @example
         * module:'upload'
         */
        module:'upload',
        /**
         * @description 自动生成函数列表
         */
        functions:[
            /**
             * @function uploadFile
             * @instance
             * @memberOf bs-upload
             * @description 上传文件
             * @param {object} options
             * @param {string} options.file 文件上传名称
             * @param {string} options.url 保存url
             * @returns {object}
             *
             * @example
             * var instance = Upload.getInstance();
             * instance.uploadFile({
			 * 	file:'xxxx',
			 * 	url:'xxxx'
			 * }).done(function(data){
			 * 		//TODO success
			 * }).fail(function(){
			 * 		//TODO error
			 * })
             */
            'uploadFile',

            'uploadIsComplete',

            'getCurrentProgress',

            'getFileList',

            'removeFile',

            'resumeUpload',

            'executeFile'
        ],
        init: function () {
            var dfd = $.Deferred();
            var my = this;
            my.render();
            my.bindEvents();
            dfd.resolve();
            return dfd;
        },
        render:function () {
            var my = this;
            //ui-draggable ui-draggable-handle
            //<input type="text" name="files[]" multiple="">
            this.$container =$('<div class="upload-box ">\
                <div class="upload-box-header ">\
                    <span class="upload-box-title">文件上传进度</span>\
                    <span id="closeBtn" class="title-btn" title="关闭">×</span>\
                    <span id="zoomBtn" max=true class="title-btn" title="最小化">-</span>\
                </div>\
                <div class="upload-box-body">\
                    <table style="display: none;"/>\
                </div>\
                </div>');
            this.$zoomBtn = this.$container.find('#zoomBtn');
            this.$closeBtn = this.$container.find('#closeBtn');
            this.$body = this.$container.find('.upload-box-body');
            this.$table = this.$container.find('table');
            this.$file = this.$container.find('.upload-add-btn');
            this.$table.grid({
                url: '',
                rownumbers: 'normal',
                height: 165,
                pager: 'none',
                columns: [[
                    {
                        title: '文件名称', field: 'path', width: 121, align: 'left',showTitle:true
                    },
                    {
                        title: '进度', field: 'percent',width:150, align: 'left',
                        formatter:function (val) {
                            var data = {
                                width:val,
                                radius:(val>96)?'10px':'10px 0px 0px 10px'
                            }
                            return dotpl.applyTpl('<div class="upload-progress-bar">' +
                                '<div class="progress-percent" style="width:${width}%;border-radius: ${radius};"></div>' +
                                '<span class="progress-text">${width}%</span>' +
                                '</div>',data);
                        }
                    },
                    {
                        title: '操作', field: 'state', width: 80, align: 'center',
                        formatter: function(val,data){
                            //0 暂停，1 上传， 2 完成, 3 错误
                            var btns = '\
                                    <div><i class="upload-btn bs-font bs-ui-start" title="开始"></i>\
                                    <i class="upload-btn bs-font bs-ui-pause" title="暂停"></i>\
                                    <i class="upload-btn bs-font bs-ui-delete" title="删除"></i></div>\
                            ';
                            var $btns = $(btns);
                            $btns.css('padding-top','3px');
                            $btns.find('.bs-font').hide();
                            $btns.find('i').attr('data-item',encodeURIComponent(JSON.stringify(data)));
                            $btns.find('i').attr('data-file',data.path);
                            switch (val){
                                case 0://0 暂停
                                    $btns.find('.bs-ui-start').show();
                                    $btns.find('.bs-ui-delete').show();
                                    break;
                                case 1://1 上传
                                    $btns.find('.bs-ui-delete').show();
                                    break;
                                case 2://2 完成

                                    break;
                                case 3://3 错误
                                    $btns.find('.bs-ui-delete').show();
                                    break;
                            }
                            return $btns.html();
                        }
                    }
                ]]
            });
            my.setAutoRefresh(true);
            my.$container.hide().prependTo('body');
        },
        bindEvents:function(){
            var my = this;
            // this.$container.resizable({
            //     maxHeight: 350,
            //     maxWidth: 400,
            // });
            my.$container.find('.upload-box-body').on('click',function (e) {
                if($(e.target).is('.bs-ui-start')){
                    my.resumeUpload({file:$(e.target).data('file')}).done(function () {
                        my.setAutoRefresh(true);
                    }).fail(function () {
                        my.setAutoRefresh(false);
                    });
                }
                if($(e.target).is('.bs-ui-pause')){
                    my.pauseUpload({file:$(e.target).data('file')}).done(function () {
                        my.setAutoRefresh(true);
                    }).fail(function () {
                        my.setAutoRefresh(false);
                    });
                }
                if($(e.target).is('.bs-ui-delete')){
                    var $bn =$(e.target);
                    var data = JSON.parse(decodeURIComponent($bn.data('item')));
                    my.removeFile({file:$bn.data('file'),DelSrvFile:1}).done(function () {
                        my.emitDelSuccess(arguments,data);
                        my.setAutoRefresh(true);
                    }).fail(function () {
                        my.emitDelError(arguments,data);
                        my.setAutoRefresh(false);
                    });
                }
            })
            this.$container.draggable({
                handle: '.upload-box-header',
                distance: 20,
                scroll:true,
                containment: 'body',
                stop: function(event){
                    my.containerTop = my.$container.css('top');
                    my.containerLeft = my.$container.css('left');
                }
            });
            this.$closeBtn.on('click',function(){
                my.setAutoRefresh(false);
                my.close()
            });
            this.$zoomBtn.on('click',function(){
                if(my.$zoomBtn.attr('max')==='true'){
                    my.minimize();
                }else{
                    my.setAutoRefresh(true);
                    my.maximize();
                }
            });
            this.$file.on('click',function(){
                my.addFile()
            });
        },
        setAutoRefresh:function(flg){
            this.auto = flg;
            if(flg){
                !this.timeout&&this.refresh();
            }else {
                clearTimeout(this.timeout);
                this.timeout = undefined;
            }
        },
        emitDelSuccess:function (args,extParam) {
            var _args =  ['deleteSuccess',extParam].concat([].slice.call(args,0))
            this.emit.apply(this,_args);
        },
        emitDelError:function (args,extParam) {
            var _args =  ['deleteError',extParam].concat([].slice.call(args,0))
            this.emit.apply(this,_args);
        },
        frequency:2000,
        setUpSucTip:function (flg) {
          this.successTip =  flg;
        },
        refresh:function () {
            var my = this;
            if(!this.auto){
                return;
            }
            my.timeout = setTimeout(function () {
                my.getFileList().done(function (data) {
                    my.$table.grid('loadData',data);
                    my.emit('refresh',data);
                    var completeFiles = [];
                    var errorFiles = [];
                    var hasUploding = false;
                    $(data).each(function (index,item) {
                        if(item.percent == 100 && item.state == 2){
                            completeFiles.push(item);
                            my.removeFile({file:item.path,DelSrvFile:0});
                        }
                        if(item.state == 3){
                            errorFiles.push(item);
                        }
                        if(item.state == 1){
                            hasUploding = true;
                        }
                    })
                    if(completeFiles.length){
                        my.successTip&&$A.messager.correct(completeFiles.join("、") +" 上传成功！");
                        my.emit("uploadSuccess",completeFiles);
                    }
                    if(errorFiles.length){
                        my.emit("uploadError",errorFiles);
                    }
                    if(hasUploding&&data.length){
                        my.refresh();
                    }else{
                        my.setAutoRefresh(false);
                    }
                }).fail(function () {
                    my.setAutoRefresh(false);
                });
            },my.frequency);
        },
        addFile:function (op) {
            var my = this;
            var params = this.params;
            if($.type(params)!=='object'){
                params = {};
            }
            if(my.$container.css("display")==='none'){
                my.show();
            }
            my.setAutoRefresh(true);
            return this.uploadFile(op).done(function () {
            }).fail(function () {

            });
        },
        /**
         * 最大化
         */
        maximize: function(){
            var my = this;
            my.$container.animate({
                top: document.body.clientHeight - 200,
                left: document.body.clientWidth - 420,
                width: 400,
                height: 200
            }, 'normal', 'swing', function(){
                // my.openAutoReload(timeRoll);
                my.$container.find('.upload-box-body').slideDown();
                my.$zoomBtn.attr({'max': true, 'title': '最大化'}).text('-');
            });
        },
        /**
         * 最小化
         * @param callback 缩小后执行的函数
         */
        minimize: function(){
            var my = this;
            my.$container.animate({
                left: document.body.clientWidth - 200,
                top: document.body.clientHeight - 30,
                width: 180,
                height: 30
            }, 'normal', 'swing', function(){
                // my.closeAutoReload();
                my.$container.find('.upload-box-body').slideUp();
                my.$zoomBtn.attr({'max': false, 'title': '最小化'}).text('□');
            });
        },
        show:function () {
            var my = this;
            my.$container.css({
                display:'block',
                left: document.body.clientWidth - 180,
                top: document.body.clientHeight - 30
            });
            my.maximize();
            my.setAutoRefresh(true);
        },
        close:function () {
            this.$container.hide();
        },
        Statics:{
            /**
             * @description 获取控件实例
             * @static
             * @memberOf bs-upload
             * @function getInstance
             * @param {object} op
             * @param {object} op.config dll配置
             * @param {string} op.config.appId 应用Id(<span style="color:red">必填</span>)
             * @example
             *         var instantce = Upload.getInstance({
             *          config:{
             *              appId:'123'
             *          }
             *         });
             */
            getInstance:function(op){
                if (!this.instance){
                    this.instance =new Upload(op);
                }
                return this.instance;
            }
        }
    });
    return Upload;
});
(function (scope) {
    var casUrl = 'http://127.0.0.1:13526/ca';
    var heartUrl = 'http://127.0.0.1:13526/heart';
    var Message = function () {
        var _self = this;
        _self.msgStack = {};
        window.onmessage = function (event) {
            var data = event.data;
            data = $.parseJSON(data);
            var callback = _self.get(data.id);
            if (!!callback) {
                callback.call({}, data);
            }
        };
    };
    Message.prototype = {
        constructor:Message,
        set: function (id, callback) {
            this.msgStack[id] = callback;
        },
        get: function (id) {
            var callback = this.msgStack[id];
            if (!!callback) {
                delete this.msgStack[id];
            }
            return callback;
        }
    };
    var message = new Message();


    var getRs = function () {
        return this.ret.ret_msg;
    };
    var Socket = function () {
    };
    Socket.prototype = {
        constructor:Socket,
        send:function (op) {
            var _self = this;
            var data = op.data;
            op.id = op.data.id = new Date().getTime();
            if(typeof data.payload === 'undefined'){
                throw new Error('data.payload not found!');
            }
            //payload 初始化
            var payload = data.payload;
            payload = JSON.stringify(payload);
            payload = _self.base64Encode(payload);
            op.data.payload = payload;
            var $iframe = _self.createIframe(op);
            var $form = _self.createForm(op);
            //  " 会截断数据
            $form.find('[name="payload"]').val(payload);
            var callback = function (data) {
                if(data==='undefined'){
                    data = {};
                }
                data['getResult'] = getRs;
                var args = [data.getResult()];
                try {
                    args = args.concat([].slice.call(arguments,0));
                    args.push(op);
                    if(data.ret['ret_code']==='0'){
                        op.success.apply(op,args);
                    }else{
                        op.error.apply(op,args);
                    }
                    $form.remove();
                    $iframe.remove();
                }catch (e){
                    $form.remove();
                    $iframe.remove();
                    throw e;
                }
            }
            message.set(op.id,callback);
            $form.submit();
            $.ajax({
                url:heartUrl,
                timeout:op.timeout?op.timeout:3000,
                contentType:"application/x-www-form-urlencoded; charset=utf-8",
                dataType: 'jsonp',
                jsonp: 'jsonp',
                type:'GET',
                error:function () {
                    $form.remove();
                    $iframe.remove();
                    op.clientError.apply(op,arguments)
                }
            })
        },
        createIframe:function (op) {
            var template= '<iframe \
                                id="socketIframe$id" \
                                name="socketIframe$id" \
                                style="position:absolute; top:-9999px; left:-9999px">\
                            </iframe>';
            var $iframe = $(template.replace(/\$id/g,op.id));
            $iframe.appendTo('body');
            return $iframe;
        },
        createForm:function (op) {
            if(!!op.func){
                op.invokeType = 'func';
                op.invokeValue = op.func;
            }else{
                op.invokeType = 'proc';
                op.invokeValue = op.proc;
            }
            var template= '<form id="socketForm$id" name="socketForm$id" \
                target="socketIframe$id" \
                action="$url" \
                method="post" \
                accept-charset="UTF-8" \
                > \
                <input type="hidden" name="$invokeType" value="$invokeValue" /> \
                <input type="hidden" name="id" value="$id" /> \
                <input type="hidden" name="payload" /> \
                </form>';
            var $form = $(
                template.replace(/\$id/g,op.id)
                    .replace(/\$url/,op.url)
                    .replace(/\$invokeType/,op.invokeType)
                    .replace(/\$invokeValue/,op.invokeValue)
            );
            $form.appendTo('body');
            return $form;
        },
        base64Encode:function (data) {
            return Base64.encode(data);
        }
    };

    var socket = new Socket();

    var CASLogin = function () {
    };

    CASLogin.prototype = {
        constructor:CASLogin,
        doSign:function (op) {
            var success = $.isFunction(op.success)?op.success:$.noop;
            var error = $.isFunction(op.success)?op.success:$.noop;
            var clientError = $.isFunction(op.clientError)?op.clientError:$.noop;
            delete op.success;
            delete op.error;
            delete op.clientError;
            var options = {
                url:casUrl,
                func:'doSign',
                success:success,
                error:error,
                clientError:clientError,
                data:{
                    payload:{
                        config:{
                        	appId:'cas-server'
                        },
                        data:[
                            op
                        ]
                    }
                }
            };

           socket.send(options);
        }
    };

    scope.casLogin = new CASLogin();
}(window));


define("bs-http-plugin/cas-login", function(){});

define('require-plugin/css.min',[],function(){if("undefined"==typeof window)return{load:function(a,b,c){c()}};var a=document.getElementsByTagName("head")[0],b=window.navigator.userAgent.match(/Trident\/([^ ;]*)|AppleWebKit\/([^ ;]*)|Opera\/([^ ;]*)|rv\:([^ ;]*)(.*?)Gecko\/([^ ;]*)|MSIE\s([^ ;]*)|AndroidWebKit\/([^ ;]*)/)||0,c=!1,d=!0;b[1]||b[7]?c=parseInt(b[1])<6||parseInt(b[7])<=9:b[2]||b[8]?d=!1:b[4]&&(c=parseInt(b[4])<18);var e={};e.pluginBuilder="./css-builder";var f,g,h,i=function(){f=document.createElement("style"),a.appendChild(f),g=f.styleSheet||f.sheet},j=0,k=[],l=function(a){g.addImport(a),f.onload=function(){m()},j++,31==j&&(i(),j=0)},m=function(){h();var a=k.shift();return a?(h=a[1],void l(a[0])):void(h=null)},n=function(a,b){if(g&&g.addImport||i(),g&&g.addImport)h?k.push([a,b]):(l(a),h=b);else{f.textContent='@import "'+a+'";';var c=setInterval(function(){try{f.sheet.cssRules,clearInterval(c),b()}catch(a){}},10)}},o=function(b,c){var e=document.createElement("link");if(e.type="text/css",e.rel="stylesheet",d)e.onload=function(){e.onload=function(){},setTimeout(c,7)};else var f=setInterval(function(){for(var a=0;a<document.styleSheets.length;a++){var b=document.styleSheets[a];if(b.href==e.href)return clearInterval(f),c()}},10);e.href=b,a.appendChild(e)};return e.normalize=function(a,b){return".css"==a.substr(a.length-4,4)&&(a=a.substr(0,a.length-4)),b(a)},e.load=function(a,b,d,e){(c?n:o)(b.toUrl(a+".css"),d)},e});
define('app',["app/app-funcbase",

"app/app-pagebase",

"app/core/app-attribute",

"app/core/app-base",

"app/core/app-class",

"app/core/app-core",

"app/core/app-events",

"app/core/app-jquery",

"app/core/app-main",

"app/core/app-options-helper",

"app/core/app-options",

"app/core/app-register",

"app/data/app-ajax",

"app/data/app-json-result",

"app/data/app-result",

"app/util/app-localstorage",

"app/util/app-number-format",

"app/util/app-utils",

"app/util/app-xss-utils",

"app/widgets/app-download",

"app/widgets/app-frags",

"app/widgets/app-jqgrid",

"app/widgets/app-lang_zh_CN",

"app/widgets/app-progressbar",

"app/widgets/app-resizable",

"app/widgets/app-scroll",

"app/widgets/app-scrolltable",

"app/widgets/app-widget",

"app/widgets/app-workspace",

"app/widgets/button/app-button",

"app/widgets/button/app-menubutton",

"app/widgets/drag/app-dialogdrag",

"app/widgets/drag/app-drag",

"app/widgets/drag/app-droppanel",

"app/widgets/form/app-checkbox",

"app/widgets/form/app-combo",

"app/widgets/form/app-combobox",

"app/widgets/form/app-combogrid",

"app/widgets/form/app-comboztree",

"app/widgets/form/app-comp",

"app/widgets/form/app-datetime",

"app/widgets/form/app-form",

"app/widgets/form/app-formgroup",

"app/widgets/form/app-money",

"app/widgets/form/app-number",

"app/widgets/form/app-reference",

"app/widgets/form/app-rule",

"app/widgets/form/app-suggest",

"app/widgets/form/app-textbox",

"app/widgets/form/app-typeahead",

"app/widgets/form/app-upload",

"app/widgets/form/app-validate",

"app/widgets/form/app-xquery",

"app/widgets/form/app-xquerybox",

"app/widgets/grid/app-grid-editor",

"app/widgets/grid/app-grid-ext",

"app/widgets/grid/app-grid-formatter",

"app/widgets/grid/app-grid-headerContextMenu",

"app/widgets/grid/app-grid-merger",

"app/widgets/grid/app-grid-pager",

"app/widgets/grid/app-grid-print",

"app/widgets/grid/app-grid-sort",

"app/widgets/grid/app-grid-summary",

"app/widgets/grid/app-grid-toolbar",

"app/widgets/grid/app-grid",

"app/widgets/layout/app-boxlayout",

"app/widgets/layout/app-containerLayout",

"app/widgets/layout/app-layout",

"app/widgets/layout/app-layout2",

"app/widgets/menu/app-contextmenu",

"app/widgets/menu/app-menu",

"app/widgets/panel/app-panel",

"app/widgets/portlet/app-portal",

"app/widgets/tabs/app-tab",

"app/widgets/tabs/app-tabs",

"app/widgets/tree/app-ztree",

"app/widgets/treegrid/app-datagrid",

"app/widgets/treegrid/app-pagination",

"app/widgets/treegrid/app-treegrid",

"app/widgets/window/app-dialog",

"app/widgets/window/app-messager",

"base/base64",

"base/dotpl-js",

"base/html5",

"base/json2",

"base/pinyin",

"base/template",

"bs-http-plugin/base-pluginvoke",

"bs-http-plugin/bs-ca-auth",

"bs-http-plugin/bs-doccamera",

"bs-http-plugin/bs-pd",

"bs-http-plugin/bs-pos",

"bs-http-plugin/bs-print",

"bs-http-plugin/bs-upload",

"bs-http-plugin/cas-login",

"bs-http-plugin/config-ext",

"bs-http-plugin/config",

"bs-http-plugin/data-transmit/message",

"bs-http-plugin/data-transmit/socket",

"bs-http-plugin/util/img-lazyload",

"bs-http-plugin/util/uuid",

"require-plugin/css.min"],function(){});
//@ sourceMappingURL=app.src.js.map